import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        double[] doubleArray2 = new double[] { (byte) 10, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            double double5 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2, (int) '#', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0, 0.0]");
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        double[] doubleArray1 = new double[] { 100L };
        // The following exception was thrown during execution in test generation
        try {
            double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (int) (byte) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[100.0]");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.max(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        double[] doubleArray5 = new double[] { (byte) -1, (-1.0d), (short) 1, 0.0f, (-1.0d) };
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray5, (int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, -1.0, 1.0, 0.0, -1.0]");
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 0, (int) (short) 10, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        double[] doubleArray5 = new double[] { 1225.0d, 10, '4', (short) 100, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, (double) 1, (-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1225.0, 10.0, 52.0, 100.0, 10.0]");
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        double[] doubleArray6 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray6, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray6, (int) (byte) -1, (int) 'a', 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.00000000000001d + "'", double9 == 52.00000000000001d);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (byte) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) (short) 1, (int) '#', (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        double[] doubleArray6 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray6, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.00000000000001d + "'", double9 == 52.00000000000001d);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double[] doubleArray8 = new double[] { '#' };
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray4, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 12706.0d + "'", double7 == 12706.0d);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution7 = distributionFactory0.createHypergeometricDistribution((int) (byte) -1, 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        double[] doubleArray2 = new double[] { 0.0d, (-1) };
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2, (double) (-1L), (-1), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, -1.0]");
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray4, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 12706.0d + "'", double7 == 12706.0d);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        double[] doubleArray4 = new double[] { 100L, 1.0d, 100.0d, 34.99999999999999d };
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.mean(doubleArray4, (int) (short) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, 1.0, 100.0, 34.99999999999999]");
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray2 = mathException1.getSuppressed();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray2);
        java.lang.String str4 = mathException3.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.math.MathException: " + "'", str4, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution10 = distributionFactory0.createBinomialDistribution((int) (byte) -1, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of trials must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(10.858998997563567d, statisticalSummary3, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 52.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.min(doubleArray3);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, 0.0d, (int) (short) 0, 0);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution11);
        double[] doubleArray17 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double[] doubleArray23 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.max(doubleArray23);
        double double26 = tTestImpl12.pairedT(doubleArray17, doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = tTestImpl1.homoscedasticT(doubleArray3, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.tTest(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution10 = distributionFactory0.createBinomialDistribution((int) (byte) 100, 5214.25d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) ' ', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 34.99999999999999d + "'", double3 == 34.99999999999999d);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.NormalDistribution normalDistribution10 = distributionFactory0.createNormalDistribution((double) (byte) -1, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Standard deviation must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.tTest(0.0d, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.max(doubleArray6);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double13 = org.apache.commons.math.stat.StatUtils.min(doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = tTestImpl1.pairedT(doubleArray6, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 12706.0d + "'", double9 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.t((double) (short) 1, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray17);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double[] doubleArray33 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.max(doubleArray33);
        double double36 = tTestImpl22.pairedT(doubleArray27, doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = tTestImpl1.t(doubleArray17, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(statisticalSummary2, statisticalSummary3, 52.00000000000001d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 52.00000000000001");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = tTestImpl1.tTest(34.99999999999999d, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1225.0d + "'", double20 == 1225.0d);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray0, (int) (short) 100, 100, 1225.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray11 = new double[] { Double.NaN };
        org.apache.commons.math.distribution.TDistribution tDistribution12 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl13 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution12);
        double[] doubleArray19 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double21 = tTestImpl13.t((double) 1.0f, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = tTestImpl1.homoscedasticTTest(doubleArray11, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.539663200366486d + "'", double21 == 1.539663200366486d);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray20 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl1.homoscedasticTTest(doubleArray20, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        double double6 = gammaDistribution3.cumulativeProbability(5214.25d, 12706.0d);
        double double8 = gammaDistribution3.cumulativeProbability((double) (-1L));
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = org.apache.commons.math.stat.StatUtils.product(doubleArray12, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.max(doubleArray4, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.homoscedasticT(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.mean(doubleArray0, (int) '4', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.homoscedasticT(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl1.tTest(0.0d, statisticalSummary11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = tTestImpl1.tTest(10.858998997563567d, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.5553480614894135d + "'", double8 == 3.5553480614894135d);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.TDistribution tDistribution2 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution2);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double[] doubleArray14 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double double17 = tTestImpl3.pairedT(doubleArray8, doubleArray14);
        double[] doubleArray24 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray24, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = tTestImpl1.tTest(doubleArray14, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.00000000000001d + "'", double27 == 52.00000000000001d);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.t(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.t((double) 10.0f, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.tTest((double) (byte) 0, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution10 = distributionFactory0.createCauchyDistribution(34.99999999999999d, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray17);
        double double24 = org.apache.commons.math.stat.StatUtils.variance(doubleArray17, (double) 1L, (int) (short) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = tTestImpl1.tTest(doubleArray14, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = tTestImpl1.t((double) (short) 100, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution17 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl18 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution17);
        double[] doubleArray23 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double[] doubleArray29 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.max(doubleArray29);
        double double32 = tTestImpl18.pairedT(doubleArray23, doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = tTestImpl1.tTest(doubleArray6, doubleArray29, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray7 = new double[] { '#' };
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray7);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray7);
        double double10 = org.apache.commons.math.stat.StatUtils.min(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = tTestImpl1.t(doubleArray3, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = tTestImpl1.tTest(statisticalSummary31, statisticalSummary32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray16 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16, 0, (int) (short) 1);
        double[] doubleArray24 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl1.homoscedasticTTest(doubleArray16, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.00000000000001d + "'", double19 == 52.00000000000001d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        double[] doubleArray19 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double[] doubleArray25 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.max(doubleArray25);
        double double28 = tTestImpl14.pairedT(doubleArray19, doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = tTestImpl1.pairedTTest(doubleArray11, doubleArray19, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double43 = org.apache.commons.math.stat.StatUtils.min(doubleArray40);
        double double47 = org.apache.commons.math.stat.StatUtils.variance(doubleArray40, (double) 1L, (int) (short) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = tTestImpl1.tTest(doubleArray35, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (short) 1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double[] doubleArray26 = new double[] { 0L, 10.0f, (byte) 10, 1.0f, 1L, '4' };
        // The following exception was thrown during execution in test generation
        try {
            double double27 = tTestImpl1.t(doubleArray17, doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0, 10.0, 1.0, 1.0, 52.0]");
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray4, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = tTestImpl1.tTest(doubleArray12, doubleArray20, 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = tTestImpl1.tTest((double) 0, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = normalDistribution7.inverseCumulativeProbability(10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double[] doubleArray25 = new double[] { (-1.0f) };
        double double26 = org.apache.commons.math.stat.StatUtils.min(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = tTestImpl0.pairedT(doubleArray22, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4, (int) (short) 1, (int) (short) 0);
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray4, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = tTestImpl1.tTest((double) (-1L), doubleArray33, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution11 = distributionFactory0.createFDistribution((double) (short) -1, (-16.25d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.min(doubleArray32);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 0.0d, (int) (short) 0, 0);
        double double40 = org.apache.commons.math.stat.StatUtils.min(doubleArray32);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = tTestImpl1.pairedTTest(doubleArray32, doubleArray42, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray38 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double41 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray38, 0, (int) (short) 1);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = tTestImpl1.tTest(12706.0d, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.00000000000001d + "'", double41 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.858998997563567d + "'", double42 == 10.858998997563567d);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.min(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = tTestImpl0.t(doubleArray28, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double8 = tTestImpl0.homoscedasticT(doubleArray5, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double29 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray23, (double) 100.0f);
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = tTestImpl0.t((double) 10L, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.5553480614894135d + "'", double27 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.min(doubleArray3);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray3, 0.0d, (int) (short) 0, 0);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = tTestImpl1.pairedTTest(doubleArray3, doubleArray12, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.5553480614894135d + "'", double16 == 3.5553480614894135d);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.min(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = tTestImpl1.t((double) (short) 1, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) 0.0f, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.tTest((double) 10, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.min(doubleArray32);
        double[] doubleArray36 = new double[] { '#' };
        double double37 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tTestImpl1.pairedT(doubleArray32, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1225.0d + "'", double37 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.TDistribution tDistribution32 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution32);
        double[] doubleArray39 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double41 = tTestImpl33.t((double) 1.0f, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl1.tTest(12706.0d, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.539663200366486d + "'", double41 == 1.539663200366486d);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double[] doubleArray21 = null;
        double[] doubleArray26 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray26, doubleArray32, (double) 10.0f);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = tTestImpl0.pairedTTest(doubleArray21, doubleArray26, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1820.0d) + "'", double27 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5214.25d + "'", double35 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray2);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray2, 1, 0);
        org.apache.commons.math.distribution.TDistribution tDistribution8 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution8);
        double[] doubleArray14 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double[] doubleArray20 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.max(doubleArray20);
        double double23 = tTestImpl9.pairedT(doubleArray14, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = tTestImpl0.homoscedasticTTest(doubleArray2, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double[] doubleArray23 = new double[] { '#' };
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.min(doubleArray23);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, 0.0d, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = tTestImpl1.homoscedasticT(doubleArray17, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        double double8 = fDistribution6.cumulativeProbability((double) 1.0f);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.34089313230206053d + "'", double8 == 0.34089313230206053d);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution((double) 1, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Standard deviation must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double[] doubleArray28 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray28, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl1.homoscedasticTTest(doubleArray17, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.00000000000001d + "'", double31 == 52.00000000000001d);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution3 = distributionFactory0.createBinomialDistribution((int) (byte) 10, 1.539663200366486d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { (-1.0f) };
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray3);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl5 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray11 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double12 = org.apache.commons.math.stat.StatUtils.product(doubleArray11);
        double[] doubleArray17 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray11, doubleArray17, (double) 10.0f);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11, (int) (short) 1, (int) (short) 0);
        double double25 = tTestImpl5.t((double) 1, doubleArray11);
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = tTestImpl1.pairedTTest(doubleArray3, doubleArray11, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1820.0d) + "'", double12 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5214.25d + "'", double20 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.5919401533569089d + "'", double25 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3931.0d + "'", double26 == 3931.0d);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray16 = null;
        double[] doubleArray21 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double23 = org.apache.commons.math.stat.StatUtils.max(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = tTestImpl1.homoscedasticT(doubleArray16, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.t(statisticalSummary24, statisticalSummary25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        double double15 = fDistribution13.inverseCumulativeProbability((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = fDistribution13.inverseCumulativeProbability((double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = tTestImpl0.homoscedasticTTest(statisticalSummary1, statisticalSummary2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        java.lang.Class<?> wildcardClass16 = doubleArray6.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (-1), (int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray5);
        double[] doubleArray11 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double14 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray5, doubleArray11, (double) 10.0f);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5, (int) (short) 1, (int) (short) 0);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double26 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray20, (double) 100.0f);
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = tTestImpl0.tTest(doubleArray5, doubleArray20, 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1820.0d) + "'", double6 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5214.25d + "'", double14 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3.5553480614894135d + "'", double24 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray17 = new double[] { '#' };
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray29 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double31 = tTestImpl23.t((double) 1.0f, doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl1.tTest(doubleArray17, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1225.0d + "'", double18 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3.5553480614894135d + "'", double21 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.539663200366486d + "'", double31 == 1.539663200366486d);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray10 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl11 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray16 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double18 = org.apache.commons.math.stat.StatUtils.max(doubleArray16);
        double[] doubleArray23 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double[] doubleArray29 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray23, doubleArray29, (double) 10.0f);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double34 = tTestImpl11.t(doubleArray16, doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = tTestImpl1.tTest(doubleArray10, doubleArray16, 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1820.0d) + "'", double24 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5214.25d + "'", double32 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5943989439169762d + "'", double34 == 0.5943989439169762d);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl0.t(statisticalSummary21, statisticalSummary22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double[] doubleArray6 = new double[] { '#' };
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = tTestImpl1.tTest(doubleArray3, doubleArray6, 3.5553480614894135d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 3.5553480614894135");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1225.0d + "'", double7 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(10.0d, statisticalSummary3, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.tTest(100.0d, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution8 = distributionFactory0.createHypergeometricDistribution((int) 'a', (int) (short) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = tTestImpl1.tTest(statisticalSummary31, statisticalSummary32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = tTestImpl1.homoscedasticT(doubleArray3, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray3, (double) 100.0f);
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3, (int) (byte) 0, (int) (byte) 0);
        double[] doubleArray17 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double18 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double[] doubleArray23 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double26 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray17, doubleArray23, (double) 10.0f);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = tTestImpl1.homoscedasticTTest(doubleArray3, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1820.0d) + "'", double18 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 5214.25d + "'", double26 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double[] doubleArray22 = new double[] { '#' };
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray22);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.min(doubleArray26);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, 0.0d, (int) (short) 0, 0);
        double double35 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray26, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = tTestImpl0.tTest(doubleArray22, doubleArray26, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1225.0d + "'", double23 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1225.0d + "'", double24 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.min(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, (double) 1L, (int) (short) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = tTestImpl0.tTest(doubleArray8, doubleArray12, (-1820.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1820.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution17 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl18 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution17);
        double[] doubleArray24 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double26 = tTestImpl18.t((double) 1.0f, doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = tTestImpl1.tTest(2310.0d, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.539663200366486d + "'", double26 == 1.539663200366486d);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 'a');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution(0.0d, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution16 = distributionFactory0.createBinomialDistribution((int) (short) 10, 1225.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution13);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution8 = distributionFactory0.createHypergeometricDistribution((int) '4', (int) (short) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.TDistribution tDistribution10 = distributionFactory0.createTDistribution((double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(hypergeometricDistribution8);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray56 = new double[] { '#' };
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        double double58 = org.apache.commons.math.stat.StatUtils.mean(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = tTestImpl1.tTest(doubleArray36, doubleArray56, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1225.0d + "'", double57 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl0.tTest(statisticalSummary21, statisticalSummary22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.homoscedasticTTest(statisticalSummary24, statisticalSummary25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.min(doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 0.0d, (int) (short) 0, 0);
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray5, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray36 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray36);
        double[] doubleArray42 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double43 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        double double45 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray36, doubleArray42, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution46 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl47 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double[] doubleArray58 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.max(doubleArray58);
        double double61 = tTestImpl47.pairedT(doubleArray52, doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.max(doubleArray58);
        double double63 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray36, doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = tTestImpl1.tTest((double) (short) 0, doubleArray58, 3931.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 3931.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1820.0d) + "'", double37 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 5214.25d + "'", double45 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-16.25d) + "'", double63 == (-16.25d));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.homoscedasticTTest(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray11 = new double[] { '#' };
        double double12 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double[] doubleArray14 = new double[] { '#' };
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl1.t(doubleArray11, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1225.0d + "'", double12 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1225.0d + "'", double16 == 1225.0d);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = tTestImpl1.t((double) 100.0f, statisticalSummary32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, (int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = tTestImpl0.tTest((double) 10, statisticalSummary41, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.min(doubleArray25);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25, 0.0d, (int) (short) 0, 0);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.product(doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray34, (double) 100.0f);
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = tTestImpl0.pairedT(doubleArray25, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 3.5553480614894135d + "'", double38 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = org.apache.commons.math.stat.StatUtils.min(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tTestImpl1.tTest((double) (short) -1, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double[] doubleArray12 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double15 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12, 0, (int) (short) 1);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.00000000000001d + "'", double15 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.858998997563567d + "'", double16 == 10.858998997563567d);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, 1, 0);
        java.lang.Class<?> wildcardClass7 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { (-1.0f) };
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray3);
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double6 = tTestImpl1.pairedTTest(doubleArray3, doubleArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray6, (int) (byte) 10, (int) (short) 100, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray81);
        double double87 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray59);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary89 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double90 = tTestImpl1.t(1225.0d, statisticalSummary89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-16.25d) + "'", double86 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5943989439169762d + "'", double87 == 0.5943989439169762d);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        double[] doubleArray1 = new double[] { (-1.0f) };
        double double2 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (-1.0d), (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.t(statisticalSummary40, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = tTestImpl0.tTest(statisticalSummary21, statisticalSummary22, 1225.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1225.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("hi!");
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", objArray4);
        java.lang.Object[] objArray8 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", objArray8);
        mathException5.addSuppressed((java.lang.Throwable) mathException9);
        mathException1.addSuppressed((java.lang.Throwable) mathException9);
        java.lang.Class<?> wildcardClass12 = mathException1.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[1225.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        java.lang.Class<?> wildcardClass40 = doubleArray28.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = tTestImpl0.tTest((-1.0d), doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 34.99999999999999d + "'", double28 == 34.99999999999999d);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray4, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = tTestImpl0.tTest((double) ' ', statisticalSummary22, 679.5833333333334d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 679.5833333333334");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.sum(doubleArray2);
        org.apache.commons.math.distribution.TDistribution tDistribution6 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl7 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.max(doubleArray18);
        double double21 = tTestImpl7.pairedT(doubleArray12, doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.max(doubleArray18);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = tTestImpl0.pairedTTest(doubleArray2, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl1.t((double) (-1L), statisticalSummary11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray81);
        double double87 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray59);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary89 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double90 = tTestImpl1.tTest(100.0d, statisticalSummary89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-16.25d) + "'", double86 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5943989439169762d + "'", double87 == 0.5943989439169762d);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.homoscedasticT(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray7);
        double double10 = org.apache.commons.math.stat.StatUtils.variance(doubleArray7, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = tTestImpl1.tTest((double) 'a', doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1820.0d) + "'", double8 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 679.5833333333334d + "'", double10 == 679.5833333333334d);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4, (int) (short) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray4, (int) 'a', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.max(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.min(doubleArray44);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.min(doubleArray49);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray49, 0.0d, (int) (short) 0, 0);
        double double57 = org.apache.commons.math.stat.StatUtils.min(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray49, 0.8538434429284575d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.8538434429284575");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = tTestImpl0.tTest(statisticalSummary39, statisticalSummary40, 1.539663200366486d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.539663200366486");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = org.apache.commons.math.stat.StatUtils.max(doubleArray20, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl0.tTest(statisticalSummary39, statisticalSummary40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6, (double) 10.0f);
        double[] doubleArray14 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.min(doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.tTest(doubleArray6, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 679.5833333333334d + "'", double9 == 679.5833333333334d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        double[] doubleArray57 = new double[] { '#' };
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.sum(doubleArray57);
        org.apache.commons.math.distribution.TDistribution tDistribution61 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl62 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double75 = org.apache.commons.math.stat.StatUtils.max(doubleArray73);
        double double76 = tTestImpl62.pairedT(doubleArray67, doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = tTestImpl0.tTest(doubleArray57, doubleArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.tTest(12706.0d, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double double56 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray36, 1.5919401533569089d);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.min(doubleArray58);
        double double65 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58, (double) 1L, (int) (short) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = tTestImpl1.homoscedasticTTest(doubleArray36, doubleArray58, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1225.0d + "'", double60 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray81);
        double double87 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray59);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary88 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary89 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double90 = tTestImpl1.homoscedasticT(statisticalSummary88, statisticalSummary89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-16.25d) + "'", double86 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5943989439169762d + "'", double87 == 0.5943989439169762d);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.tTest(statisticalSummary40, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28, 0.5943989439169762d, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.tTest(3931.0d, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray8 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray8, 0, (int) (short) 1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray18 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray18);
        double[] doubleArray24 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray18, doubleArray24, (double) 10.0f);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18, (int) (short) 1, (int) (short) 0);
        double double32 = tTestImpl12.t((double) 1, doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = tTestImpl1.pairedTTest(doubleArray8, doubleArray18, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.00000000000001d + "'", double11 == 52.00000000000001d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1820.0d) + "'", double19 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5214.25d + "'", double27 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.5919401533569089d + "'", double32 == 1.5919401533569089d);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray81);
        double double87 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray59);
        double[] doubleArray90 = new double[] { '#' };
        double double91 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray90);
        double double92 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray90);
        double double93 = org.apache.commons.math.stat.StatUtils.product(doubleArray90);
        double double94 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = tTestImpl1.tTest((double) 100, doubleArray90, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-16.25d) + "'", double86 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5943989439169762d + "'", double87 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[35.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1225.0d + "'", double91 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1225.0d + "'", double92 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 35.0d + "'", double93 == 35.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 3.5553480614894135d + "'", double94 == 3.5553480614894135d);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl21 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray27 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double[] doubleArray33 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray27, doubleArray33, (double) 10.0f);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27, (int) (short) 1, (int) (short) 0);
        double double41 = tTestImpl21.t((double) 1, doubleArray27);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double[] doubleArray55 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray55);
        double double57 = org.apache.commons.math.stat.StatUtils.max(doubleArray55);
        double double58 = tTestImpl44.pairedT(doubleArray49, doubleArray55);
        double double59 = tTestImpl21.t(100.0d, doubleArray55);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray55);
        double[] doubleArray62 = new double[] { '#' };
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        double double65 = org.apache.commons.math.stat.StatUtils.min(doubleArray62);
        double double69 = org.apache.commons.math.stat.StatUtils.variance(doubleArray62, (double) 1L, (int) (short) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = tTestImpl0.pairedTTest(doubleArray55, doubleArray62, 3931.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 3931.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1820.0d) + "'", double28 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5214.25d + "'", double36 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.5919401533569089d + "'", double41 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-2.579976173587085d) + "'", double59 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12706.0d + "'", double60 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1225.0d + "'", double63 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray14, (int) (short) 0, (int) (short) 100, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t((double) '4', statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution9 = distributionFactory0.createBinomialDistribution(0, 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math.stat.StatUtils.min(doubleArray4, (int) (short) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        double[] doubleArray62 = new double[] { '#' };
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        double double65 = org.apache.commons.math.stat.StatUtils.min(doubleArray62);
        double double69 = org.apache.commons.math.stat.StatUtils.variance(doubleArray62, 0.0d, (int) (short) 0, 0);
        double double70 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        org.apache.commons.math.distribution.TDistribution tDistribution71 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl72 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution71);
        double[] doubleArray77 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double78 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray77);
        double[] doubleArray83 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double84 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray83);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray83);
        double double86 = tTestImpl72.pairedT(doubleArray77, doubleArray83);
        double double89 = org.apache.commons.math.stat.StatUtils.variance(doubleArray77, 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = tTestImpl0.homoscedasticTTest(doubleArray62, doubleArray77, 52.00000000000001d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 52.00000000000001");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1225.0d + "'", double63 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1225.0d + "'", double70 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.max(doubleArray49);
        double double52 = tTestImpl38.pairedT(doubleArray43, doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray49);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double[] doubleArray56 = new double[] { '#' };
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        double double58 = org.apache.commons.math.stat.StatUtils.min(doubleArray56);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = tTestImpl1.pairedTTest(doubleArray49, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1225.0d + "'", double57 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        double[] doubleArray6 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray6, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.00000000000001d + "'", double9 == 52.00000000000001d);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double33 = tTestImpl1.tTest((double) 0L, statisticalSummary32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.tTest((double) (-1.0f), statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray35 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray35, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution39 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray51);
        double double54 = tTestImpl40.pairedT(doubleArray45, doubleArray51);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = tTestImpl1.tTest(doubleArray35, doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1820.0d) + "'", double36 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 679.5833333333334d + "'", double38 == 679.5833333333334d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double58 = tTestImpl0.homoscedasticTTest(statisticalSummary56, statisticalSummary57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.min(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.min(doubleArray41);
        org.apache.commons.math.distribution.TDistribution tDistribution46 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl47 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution46);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double55 = tTestImpl47.t((double) 1.0f, doubleArray53);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double67 = org.apache.commons.math.stat.StatUtils.product(doubleArray66);
        double[] doubleArray72 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray72);
        double double75 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray66, doubleArray72, (double) 10.0f);
        double double76 = tTestImpl47.pairedT(doubleArray60, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = tTestImpl0.t(doubleArray41, doubleArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.539663200366486d + "'", double55 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1820.0d) + "'", double67 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 5214.25d + "'", double75 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution4 = distributionFactory0.createExponentialDistribution((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(exponentialDistribution4);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.mean(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.min(doubleArray6, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 38.0d + "'", double16 == 38.0d);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 679.5833333333334d + "'", double16 == 679.5833333333334d);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl0.homoscedasticTTest(statisticalSummary21, statisticalSummary22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6, 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray6, (int) (short) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        double[] doubleArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = tTestImpl4.tTest((double) (short) 100, doubleArray6, Double.NaN);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double22 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double[] doubleArray24 = new double[] { '#' };
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double30 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray24, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray24, 679.5833333333334d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3931.0d + "'", double21 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1225.0d + "'", double25 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.5553480614894135d + "'", double28 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray41, (double) 100.0f);
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41, (int) (byte) 0, (int) (byte) 0);
        double[] doubleArray55 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray55);
        double double57 = org.apache.commons.math.stat.StatUtils.max(doubleArray55);
        double double58 = org.apache.commons.math.stat.StatUtils.min(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = tTestImpl0.homoscedasticT(doubleArray41, doubleArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = tTestImpl0.tTest(52.00000000000001d, statisticalSummary40, 12706.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 12706.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double67 = org.apache.commons.math.stat.StatUtils.max(doubleArray65);
        double[] doubleArray69 = new double[] { (-1.0f) };
        double double70 = org.apache.commons.math.stat.StatUtils.min(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = tTestImpl0.homoscedasticTTest(doubleArray65, doubleArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 100.0d + "'", double67 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution15 = distributionFactory0.createExponentialDistribution(34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = normalDistribution16.inverseCumulativeProbability((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(exponentialDistribution15);
        org.junit.Assert.assertNotNull(normalDistribution16);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution9 = distributionFactory0.createExponentialDistribution(10.858998997563567d);
        double double12 = exponentialDistribution9.cumulativeProbability(1.0d, (double) (byte) 100);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(exponentialDistribution9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9119233630588404d + "'", double12 == 0.9119233630588404d);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray46 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.max(doubleArray46);
        double[] doubleArray53 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray53);
        double[] doubleArray59 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray59);
        double double62 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray53, doubleArray59, (double) 10.0f);
        double double63 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double64 = tTestImpl41.t(doubleArray46, doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = tTestImpl0.tTest(0.34089313230206053d, doubleArray53, 2310.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 2310.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 5214.25d + "'", double62 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.5943989439169762d + "'", double64 == 0.5943989439169762d);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray1, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = tTestImpl0.tTest((double) (short) 1, statisticalSummary40, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.product(doubleArray4, (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 12706.0d + "'", double7 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2310.0d + "'", double8 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2310.0d + "'", double9 == 2310.0d);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray35 = new double[] { 52.00000000000001d, 34.99999999999999d, 1225.0d, 0.5943989439169762d };
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.sum(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = tTestImpl1.homoscedasticTTest(doubleArray35, doubleArray37, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[52.00000000000001, 34.99999999999999, 1225.0, 0.5943989439169762]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray17 = new double[] { (-1.0f) };
        double double18 = org.apache.commons.math.stat.StatUtils.min(doubleArray17);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl19 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray24 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double26 = org.apache.commons.math.stat.StatUtils.max(doubleArray24);
        double[] doubleArray31 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double32 = org.apache.commons.math.stat.StatUtils.product(doubleArray31);
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray31, doubleArray37, (double) 10.0f);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double42 = tTestImpl19.t(doubleArray24, doubleArray31);
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = tTestImpl19.tTest(5214.25d, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray66 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double67 = org.apache.commons.math.stat.StatUtils.product(doubleArray66);
        double[] doubleArray72 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray72);
        double double75 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray66, doubleArray72, (double) 10.0f);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double79 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66, (int) (short) 1, (int) (short) 0);
        double double80 = tTestImpl60.t((double) 1, doubleArray66);
        double double81 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double82 = tTestImpl19.tTest((double) 10.0f, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = tTestImpl1.homoscedasticTTest(doubleArray17, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1820.0d) + "'", double32 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 5214.25d + "'", double40 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.5943989439169762d + "'", double42 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2.2065780869162666E-7d + "'", double58 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1820.0d) + "'", double67 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 5214.25d + "'", double75 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.5919401533569089d + "'", double80 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 3931.0d + "'", double81 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.433786033254294d + "'", double82 == 0.433786033254294d);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary96 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary97 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = tTestImpl0.tTest(statisticalSummary96, statisticalSummary97, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = tTestImpl0.tTest(statisticalSummary56, statisticalSummary57, (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 32.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = tTestImpl0.tTest(statisticalSummary24, statisticalSummary25, (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.TDistribution tDistribution31 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution31);
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double40 = tTestImpl32.t((double) 1.0f, doubleArray38);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double45 = org.apache.commons.math.stat.StatUtils.min(doubleArray42);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, 0.0d, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = tTestImpl1.pairedTTest(doubleArray38, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.539663200366486d + "'", double40 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double[] doubleArray52 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double[] doubleArray58 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray52, doubleArray58, (double) 10.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double63 = tTestImpl40.t(doubleArray45, doubleArray52);
        double[] doubleArray65 = new double[] { '#' };
        double double66 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray65);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray65);
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = tTestImpl0.pairedTTest(doubleArray52, doubleArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1820.0d) + "'", double53 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5214.25d + "'", double61 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5943989439169762d + "'", double63 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1225.0d + "'", double66 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 35.0d + "'", double67 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray5, (int) ' ', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double63 = tTestImpl0.tTest(10.0d, statisticalSummary62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution4 = distributionFactory0.createWeibullDistribution(0.0d, 34.99999999999999d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        double double9 = normalDistribution7.cumulativeProbability(3931.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary96 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary97 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double98 = tTestImpl0.t(statisticalSummary96, statisticalSummary97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray9 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray9, doubleArray15, (double) 10.0f);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9, (int) (short) 1, (int) (short) 0);
        double double23 = tTestImpl3.t((double) 1, doubleArray9);
        double double24 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray9);
        double double25 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.min(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = tTestImpl0.pairedTTest(doubleArray9, doubleArray30, 36.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 36.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1820.0d) + "'", double10 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5214.25d + "'", double18 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.5919401533569089d + "'", double23 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3931.0d + "'", double24 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1820.0d) + "'", double25 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) 1.0f);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution11 = distributionFactory0.createGammaDistribution(10.0d, 52.00000000000001d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(gammaDistribution11);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = tTestImpl0.tTest(statisticalSummary40, statisticalSummary41, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (-1), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double7 = tTestImpl4.t(statisticalSummary5, statisticalSummary6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray7 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray7, doubleArray13, (double) 10.0f);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7, (int) (short) 1, (int) (short) 0);
        double[] doubleArray25 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = tTestImpl0.pairedTTest(doubleArray7, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1820.0d) + "'", double8 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5214.25d + "'", double16 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.homoscedasticTTest(statisticalSummary40, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = tTestImpl0.homoscedasticT(statisticalSummary1, statisticalSummary2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution4 = distributionFactory0.createExponentialDistribution((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double7 = exponentialDistribution4.cumulativeProbability((double) 100.0f, 0.5739591588987152d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(exponentialDistribution4);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        // The following exception was thrown during execution in test generation
        try {
            tDistribution3.setDegreesOfFreedom((-1820.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.tTest((double) (short) 1, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = tTestImpl0.tTest(Double.NaN, statisticalSummary2, 0.433786033254294d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = org.apache.commons.math.stat.StatUtils.mean(doubleArray51, (int) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.t(statisticalSummary40, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray81);
        double double87 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray59);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary89 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = tTestImpl1.tTest(0.0d, statisticalSummary89, 52.00000000000001d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 52.00000000000001");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-16.25d) + "'", double86 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5943989439169762d + "'", double87 == 0.5943989439169762d);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution8 = distributionFactory0.createBinomialDistribution((int) (short) 1, 0.34089313230206053d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution11 = distributionFactory0.createPascalDistribution((int) ' ', 12706.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(binomialDistribution8);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl0.tTest(statisticalSummary3, statisticalSummary4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        double double6 = gammaDistribution3.cumulativeProbability(5214.25d, 12706.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = gammaDistribution3.inverseCumulativeProbability(36.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution7 = distributionFactory0.createExponentialDistribution(2.2065780869162666E-7d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution10 = distributionFactory0.createPascalDistribution((-1), (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(exponentialDistribution7);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double31 = tTestImpl17.pairedT(doubleArray22, doubleArray28);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray38 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray38, doubleArray44, (double) 10.0f);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38, (int) (short) 1, (int) (short) 0);
        double double52 = tTestImpl32.t((double) 1, doubleArray38);
        org.apache.commons.math.distribution.TDistribution tDistribution54 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl55 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution54);
        double[] doubleArray60 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double68 = org.apache.commons.math.stat.StatUtils.max(doubleArray66);
        double double69 = tTestImpl55.pairedT(doubleArray60, doubleArray66);
        double double70 = tTestImpl32.t(100.0d, doubleArray66);
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double73 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray28, doubleArray66, (double) (short) 100);
        double[] doubleArray75 = new double[] { '#' };
        double double76 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray75);
        double double77 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = tTestImpl1.homoscedasticT(doubleArray66, doubleArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1820.0d) + "'", double39 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5214.25d + "'", double47 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.5919401533569089d + "'", double52 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-2.579976173587085d) + "'", double70 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 12706.0d + "'", double71 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1225.0d + "'", double76 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1225.0d + "'", double77 == 1225.0d);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.tTest(statisticalSummary37, statisticalSummary38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 152.0d, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        double double76 = org.apache.commons.math.stat.StatUtils.sum(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = org.apache.commons.math.stat.StatUtils.mean(doubleArray71, 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 152.0d + "'", double76 == 152.0d);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.math.MathException mathException0 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray1 = mathException0.getSuppressed();
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException0);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray4 = mathException3.getArguments();
        mathException0.addSuppressed((java.lang.Throwable) mathException3);
        java.lang.String str6 = mathException0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.MathException" + "'", str6, "org.apache.commons.math.MathException");
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution15 = distributionFactory0.createExponentialDistribution(34.99999999999999d);
        java.lang.Class<?> wildcardClass16 = distributionFactory0.getClass();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(exponentialDistribution15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        double[] doubleArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = tTestImpl0.tTest((double) 1, doubleArray62, 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        double double5 = org.apache.commons.math.stat.StatUtils.min(doubleArray2);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray2, 0.0d, (int) (short) 0, 0);
        double double11 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray2, (double) 100L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl12 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray18 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray18);
        double[] doubleArray24 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double27 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray18, doubleArray24, (double) 10.0f);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18, (int) (short) 1, (int) (short) 0);
        double double32 = tTestImpl12.t((double) 1, doubleArray18);
        org.apache.commons.math.distribution.TDistribution tDistribution34 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl35 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray40 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double[] doubleArray46 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.max(doubleArray46);
        double double49 = tTestImpl35.pairedT(doubleArray40, doubleArray46);
        double double50 = tTestImpl12.t(100.0d, doubleArray46);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = tTestImpl0.pairedT(doubleArray2, doubleArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1820.0d) + "'", double19 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 5214.25d + "'", double27 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.5919401533569089d + "'", double32 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-2.579976173587085d) + "'", double50 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12706.0d + "'", double51 == 12706.0d);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl57 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray63 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double64 = org.apache.commons.math.stat.StatUtils.product(doubleArray63);
        double[] doubleArray69 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double72 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray63, doubleArray69, (double) 10.0f);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63, (int) (short) 1, (int) (short) 0);
        double double77 = tTestImpl57.t((double) 1, doubleArray63);
        double double78 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = tTestImpl0.tTest((double) 0, doubleArray63, 52.00000000000001d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 52.00000000000001");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1820.0d) + "'", double64 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5214.25d + "'", double72 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.5919401533569089d + "'", double77 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 3931.0d + "'", double78 == 3931.0d);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        double double9 = normalDistribution6.cumulativeProbability((double) (-1.0f), (double) (short) 0);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.03982783727702899d + "'", double9 == 0.03982783727702899d);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double41 = org.apache.commons.math.stat.StatUtils.min(doubleArray38);
        double double45 = org.apache.commons.math.stat.StatUtils.variance(doubleArray38, (double) 1L, (int) (short) 0, (int) (byte) 0);
        double[] doubleArray47 = new double[] { '#' };
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.min(doubleArray47);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = tTestImpl1.tTest(doubleArray38, doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1225.0d + "'", double48 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.t(statisticalSummary16, statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution8 = distributionFactory0.createExponentialDistribution((double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution11 = distributionFactory0.createBinomialDistribution((-1), 0.433786033254294d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of trials must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(exponentialDistribution8);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = tTestImpl0.tTest(statisticalSummary61, statisticalSummary62, Double.NaN);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        double[] doubleArray76 = null;
        org.apache.commons.math.distribution.TDistribution tDistribution77 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl78 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution77);
        double[] doubleArray83 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double84 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray83);
        double[] doubleArray89 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double90 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray89);
        double double91 = org.apache.commons.math.stat.StatUtils.max(doubleArray89);
        double double92 = tTestImpl78.pairedT(doubleArray83, doubleArray89);
        double double93 = org.apache.commons.math.stat.StatUtils.max(doubleArray89);
        double double94 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = tTestImpl0.homoscedasticTTest(doubleArray76, doubleArray89, Double.NaN);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 100.0d + "'", double91 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 100.0d + "'", double93 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary76 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary77 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = tTestImpl0.tTest(statisticalSummary76, statisticalSummary77, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException");
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution(10.858998997563567d, (double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution18 = distributionFactory0.createExponentialDistribution((double) 'a');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution(3931.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = chiSquaredDistribution20.cumulativeProbability(100.0d, (-1820.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(exponentialDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = org.apache.commons.math.stat.StatUtils.mean(doubleArray93, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary97 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = tTestImpl0.tTest(3931.0d, statisticalSummary97, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = tTestImpl1.tTest((double) 1, statisticalSummary11, 0.03982783727702899d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray12, 0, (int) ' ', (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6, (double) 1, (int) (byte) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3931.0d + "'", double21 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 'a');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution(0.0d, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Standard deviation must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution11);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray4 = new double[] { '#' };
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = tTestImpl1.tTest((double) (short) 100, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1225.0d + "'", double6 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.min(doubleArray3);
        double[] doubleArray8 = new double[] { (-1.0f) };
        double double9 = org.apache.commons.math.stat.StatUtils.min(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray3, doubleArray8);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = tTestImpl1.tTest(doubleArray8, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 36.0d + "'", double10 == 36.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double[] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray4, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray6 = new double[] { (-1.0f) };
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) (short) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 36.0d + "'", double8 == 36.0d);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution7 = distributionFactory0.createBinomialDistribution((int) (short) 100, 1.539663200366486d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray4, (int) (byte) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray60, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double13 = org.apache.commons.math.stat.StatUtils.sum(doubleArray7, (int) (short) 1, 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1.0d, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 'a');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution(0.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution(1.0d, (double) 1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.homoscedasticT(statisticalSummary24, statisticalSummary25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray18 = new double[] { '#' };
        double double19 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray18);
        double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray18);
        double double22 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray18, 0.34089313230206053d);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl1.t((double) (short) 0, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1225.0d + "'", double19 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 34.99999999999999d + "'", double20 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl5 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray11 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double12 = org.apache.commons.math.stat.StatUtils.product(doubleArray11);
        double[] doubleArray17 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray11, doubleArray17, (double) 10.0f);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11, (int) (short) 1, (int) (short) 0);
        double double25 = tTestImpl5.t((double) 1, doubleArray11);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        double[] doubleArray33 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double35 = tTestImpl27.t((double) 1.0f, doubleArray33);
        double[] doubleArray40 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.max(doubleArray40);
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double44 = tTestImpl5.pairedT(doubleArray33, doubleArray40);
        double double45 = org.apache.commons.math.stat.StatUtils.min(doubleArray40);
        double[] doubleArray50 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double51 = org.apache.commons.math.stat.StatUtils.product(doubleArray50);
        double[] doubleArray56 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double double59 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray50, doubleArray56, (double) 10.0f);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = tTestImpl4.homoscedasticTTest(doubleArray40, doubleArray50, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1820.0d) + "'", double12 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5214.25d + "'", double20 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.5919401533569089d + "'", double25 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.539663200366486d + "'", double35 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 12706.0d + "'", double43 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1820.0d) + "'", double51 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 5214.25d + "'", double59 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray9 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray9, 0, (int) (short) 1);
        org.apache.commons.math.distribution.TDistribution tDistribution13 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution13);
        double[] doubleArray19 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double[] doubleArray25 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.max(doubleArray25);
        double double28 = tTestImpl14.pairedT(doubleArray19, doubleArray25);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray19, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = tTestImpl0.homoscedasticTTest(doubleArray9, doubleArray19, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.00000000000001d + "'", double12 == 52.00000000000001d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2310.0d + "'", double30 == 2310.0d);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 'a');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = normalDistribution11.cumulativeProbability((double) (byte) 100, 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution11);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray40 = new double[] { (-1.0f) };
        double double41 = org.apache.commons.math.stat.StatUtils.min(doubleArray40);
        org.apache.commons.math.distribution.TDistribution tDistribution42 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution42);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = tTestImpl43.pairedT(doubleArray48, doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = tTestImpl0.homoscedasticTTest(doubleArray40, doubleArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray9 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray9, doubleArray15, (double) 10.0f);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9, (int) (short) 1, (int) (short) 0);
        double double23 = tTestImpl3.t((double) 1, doubleArray9);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray31 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double33 = tTestImpl25.t((double) 1.0f, doubleArray31);
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray38);
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double42 = tTestImpl3.pairedT(doubleArray31, doubleArray38);
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        org.apache.commons.math.distribution.TDistribution tDistribution62 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl63 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution62);
        double[] doubleArray68 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.max(doubleArray74);
        double double77 = tTestImpl63.pairedT(doubleArray68, doubleArray74);
        double double78 = tTestImpl3.homoscedasticTTest(doubleArray47, doubleArray74);
        double double79 = org.apache.commons.math.stat.StatUtils.min(doubleArray47);
        double[] doubleArray86 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double89 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray86, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = tTestImpl0.pairedTTest(doubleArray47, doubleArray86, 3931.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 3931.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1820.0d) + "'", double10 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5214.25d + "'", double18 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.5919401533569089d + "'", double23 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.539663200366486d + "'", double33 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 12706.0d + "'", double41 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3931.0d + "'", double61 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.5739591588987152d + "'", double78 == 0.5739591588987152d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-1.0d) + "'", double79 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 52.00000000000001d + "'", double89 == 52.00000000000001d);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray41 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double50 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray41, doubleArray47, (double) 10.0f);
        double double51 = org.apache.commons.math.stat.StatUtils.min(doubleArray47);
        double[] doubleArray52 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = tTestImpl1.pairedTTest(doubleArray47, doubleArray52, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1820.0d) + "'", double42 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 5214.25d + "'", double50 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        double[] doubleArray78 = new double[] { '#' };
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray78);
        double double80 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray78);
        double double81 = org.apache.commons.math.stat.StatUtils.product(doubleArray78);
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = tTestImpl0.tTest((double) 10, doubleArray78, 152.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 152.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1225.0d + "'", double79 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1225.0d + "'", double80 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 35.0d + "'", double81 == 35.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3.5553480614894135d + "'", double82 == 3.5553480614894135d);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl61 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray67 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double76 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray67, doubleArray73, (double) 10.0f);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 1, (int) (short) 0);
        double double81 = tTestImpl61.t((double) 1, doubleArray67);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double85 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 0, (int) (short) 0);
        double[] doubleArray87 = new double[] { '#' };
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray87);
        double double89 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray87);
        double double90 = org.apache.commons.math.stat.StatUtils.min(doubleArray87);
        double double94 = org.apache.commons.math.stat.StatUtils.variance(doubleArray87, 0.0d, (int) (short) 0, 0);
        double double95 = org.apache.commons.math.stat.StatUtils.min(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = tTestImpl0.pairedT(doubleArray67, doubleArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1820.0d) + "'", double68 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5214.25d + "'", double76 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.5919401533569089d + "'", double81 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3931.0d + "'", double82 == 3931.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[35.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1225.0d + "'", double88 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1225.0d + "'", double89 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 35.0d + "'", double90 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 35.0d + "'", double95 == 35.0d);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double68 = org.apache.commons.math.stat.StatUtils.max(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray66);
        double double71 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray66);
        double double72 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray74 = new double[] { '#' };
        double double75 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = tTestImpl0.tTest(doubleArray60, doubleArray74, 0.5739591588987152d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.5739591588987152");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 12706.0d + "'", double69 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2310.0d + "'", double70 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-16.25d) + "'", double71 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1820.0d) + "'", double72 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1225.0d + "'", double75 == 1225.0d);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = org.apache.commons.math.stat.StatUtils.max(doubleArray34, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 12706.0d + "'", double39 == 12706.0d);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary77 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double78 = tTestImpl0.tTest(10.858998997563567d, statisticalSummary77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PoissonDistribution poissonDistribution3 = distributionFactory0.createPoissonDistribution((-1820.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double41 = org.apache.commons.math.stat.StatUtils.min(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.min(doubleArray38);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38, (int) (byte) 0, (int) (byte) 0);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.max(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = tTestImpl1.pairedTTest(doubleArray38, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray4, throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", throwable5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException7);
        java.lang.Class<?> wildcardClass9 = mathException8.getClass();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        double[] doubleArray9 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double17 = org.apache.commons.math.stat.StatUtils.max(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray15);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray15);
        double double20 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray9, doubleArray15);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl21 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray27 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double[] doubleArray33 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray27, doubleArray33, (double) 10.0f);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27, (int) (short) 1, (int) (short) 0);
        double double41 = tTestImpl21.t((double) 1, doubleArray27);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double[] doubleArray55 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray55);
        double double57 = org.apache.commons.math.stat.StatUtils.max(doubleArray55);
        double double58 = tTestImpl44.pairedT(doubleArray49, doubleArray55);
        double double59 = tTestImpl21.t(100.0d, doubleArray55);
        double[] doubleArray64 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double65 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray64);
        double double66 = org.apache.commons.math.stat.StatUtils.max(doubleArray64);
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray64);
        double[] doubleArray72 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double73 = org.apache.commons.math.stat.StatUtils.product(doubleArray72);
        double double75 = org.apache.commons.math.stat.StatUtils.variance(doubleArray72, (double) 10.0f);
        double double76 = tTestImpl21.tTest(doubleArray64, doubleArray72);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray72);
        double double79 = org.apache.commons.math.stat.StatUtils.variance(doubleArray72, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = tTestImpl4.tTest(doubleArray15, doubleArray72, 10.858998997563567d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.858998997563567");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1820.0d) + "'", double10 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 12706.0d + "'", double18 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2310.0d + "'", double19 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-16.25d) + "'", double20 == (-16.25d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1820.0d) + "'", double28 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5214.25d + "'", double36 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.5919401533569089d + "'", double41 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-2.579976173587085d) + "'", double59 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 12706.0d + "'", double67 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1820.0d) + "'", double73 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 679.5833333333334d + "'", double75 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.5801210456783388d + "'", double76 == 0.5801210456783388d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 679.5833333333334d + "'", double79 == 679.5833333333334d);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double7 = tTestImpl4.t((double) '4', statisticalSummary6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        double[] doubleArray57 = new double[] { '#' };
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.min(doubleArray57);
        double double64 = org.apache.commons.math.stat.StatUtils.variance(doubleArray57, 0.0d, (int) (short) 0, 0);
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double[] doubleArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double67 = tTestImpl0.homoscedasticTTest(doubleArray57, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl0.tTest(statisticalSummary3, statisticalSummary4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl0.tTest(0.0d, statisticalSummary4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray4);
        java.lang.Object[] objArray8 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", objArray8);
        mathException5.addSuppressed((java.lang.Throwable) mathException9);
        mathException1.addSuppressed((java.lang.Throwable) mathException5);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[1225.0]");
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl5 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray11 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double12 = org.apache.commons.math.stat.StatUtils.product(doubleArray11);
        double[] doubleArray17 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray11, doubleArray17, (double) 10.0f);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11, (int) (short) 1, (int) (short) 0);
        double double25 = tTestImpl5.t((double) 1, doubleArray11);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution27);
        double[] doubleArray33 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double[] doubleArray39 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double double42 = tTestImpl28.pairedT(doubleArray33, doubleArray39);
        double double43 = tTestImpl5.t(100.0d, doubleArray39);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double[] doubleArray56 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double57 = org.apache.commons.math.stat.StatUtils.product(doubleArray56);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56, (double) 10.0f);
        double double60 = tTestImpl5.tTest(doubleArray48, doubleArray56);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56, (double) '#');
        double[] doubleArray65 = new double[] { '#' };
        double double66 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray65);
        double double67 = org.apache.commons.math.stat.StatUtils.mean(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = tTestImpl4.t(doubleArray56, doubleArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1820.0d) + "'", double12 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5214.25d + "'", double20 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.5919401533569089d + "'", double25 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-2.579976173587085d) + "'", double43 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12706.0d + "'", double51 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1820.0d) + "'", double57 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 679.5833333333334d + "'", double59 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.5801210456783388d + "'", double60 == 0.5801210456783388d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 679.5833333333334d + "'", double63 == 679.5833333333334d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1225.0d + "'", double66 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 35.0d + "'", double67 == 35.0d);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = tTestImpl0.tTest(statisticalSummary3, statisticalSummary4, 0.5801210456783388d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.5801210456783388");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46, (int) (short) 1, (int) (short) 0);
        double double60 = tTestImpl40.t((double) 1, doubleArray46);
        org.apache.commons.math.distribution.TDistribution tDistribution62 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl63 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution62);
        double[] doubleArray68 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.max(doubleArray74);
        double double77 = tTestImpl63.pairedT(doubleArray68, doubleArray74);
        double double78 = tTestImpl40.t(100.0d, doubleArray74);
        double[] doubleArray80 = new double[] { '#' };
        double double81 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray80);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray80);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray80);
        double double84 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80);
        double double86 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray80, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = tTestImpl0.pairedT(doubleArray74, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.5919401533569089d + "'", double60 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-2.579976173587085d) + "'", double78 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[35.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1225.0d + "'", double81 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1225.0d + "'", double82 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 35.0d + "'", double83 == 35.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 3.5553480614894135d + "'", double84 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 35.0d + "'", double86 == 35.0d);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray8 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray8);
        double[] doubleArray14 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray8, doubleArray14, (double) 10.0f);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8, (int) (short) 1, (int) (short) 0);
        double double22 = tTestImpl2.t((double) 1, doubleArray8);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = tTestImpl2.t(100.0d, doubleArray36);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double[] doubleArray53 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray53, (double) 10.0f);
        double double57 = tTestImpl2.tTest(doubleArray45, doubleArray53);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = tTestImpl0.homoscedasticTTest(doubleArray1, doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1820.0d) + "'", double9 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5214.25d + "'", double17 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.5919401533569089d + "'", double22 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-2.579976173587085d) + "'", double40 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 12706.0d + "'", double48 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 679.5833333333334d + "'", double56 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5801210456783388d + "'", double57 == 0.5801210456783388d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        double[] doubleArray0 = null;
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double double16 = tTestImpl2.pairedT(doubleArray7, doubleArray13);
        double double17 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray0, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution6 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution9 = distributionFactory0.createPascalDistribution((int) '#', 12706.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(weibullDistribution6);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray2 = mathException1.getSuppressed();
        java.lang.Object[] objArray5 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", objArray5);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", objArray9);
        mathException6.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("", objArray14);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray18);
        mathException15.addSuppressed((java.lang.Throwable) mathException19);
        mathException6.addSuppressed((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray2, (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        java.lang.String str24 = mathException22.getPattern();
        java.lang.String str25 = mathException22.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[1225.0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str25, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = org.apache.commons.math.stat.StatUtils.mean(doubleArray10, (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 12706.0d + "'", double13 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2310.0d + "'", double14 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-16.25d) + "'", double15 == (-16.25d));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        double[] doubleArray56 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl57 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray63 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double64 = org.apache.commons.math.stat.StatUtils.product(doubleArray63);
        double[] doubleArray69 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double72 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray63, doubleArray69, (double) 10.0f);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63, (int) (short) 1, (int) (short) 0);
        double double77 = tTestImpl57.t((double) 1, doubleArray63);
        double double78 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        double double79 = org.apache.commons.math.stat.StatUtils.product(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = tTestImpl0.homoscedasticTTest(doubleArray56, doubleArray63, 0.5739591588987152d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.5739591588987152");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1820.0d) + "'", double64 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5214.25d + "'", double72 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.5919401533569089d + "'", double77 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 3931.0d + "'", double78 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-1820.0d) + "'", double79 == (-1820.0d));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray39 = null;
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.min(doubleArray41);
        double[] doubleArray46 = new double[] { (-1.0f) };
        double double47 = org.apache.commons.math.stat.StatUtils.min(doubleArray46);
        double double48 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray41, doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = tTestImpl0.pairedTTest(doubleArray39, doubleArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 36.0d + "'", double48 == 36.0d);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution10 = distributionFactory0.createCauchyDistribution(0.5943989439169762d, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution13 = distributionFactory0.createBinomialDistribution((int) 'a', (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(cauchyDistribution10);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        double[] doubleArray63 = new double[] { '#' };
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        double double65 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.product(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = tTestImpl0.tTest(0.03982783727702899d, doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1225.0d + "'", double65 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 35.0d + "'", double66 == 35.0d);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.min(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary97 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double98 = tTestImpl0.t((double) '4', statisticalSummary97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray37, doubleArray43, (double) 10.0f);
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37, (int) (short) 1, (int) (short) 0);
        double double51 = tTestImpl31.t((double) 1, doubleArray37);
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double53 = org.apache.commons.math.stat.StatUtils.min(doubleArray37);
        double double56 = org.apache.commons.math.stat.StatUtils.min(doubleArray37, 1, (int) (byte) 1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl57 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray63 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double64 = org.apache.commons.math.stat.StatUtils.product(doubleArray63);
        double[] doubleArray69 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double72 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray63, doubleArray69, (double) 10.0f);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63, (int) (short) 1, (int) (short) 0);
        double double77 = tTestImpl57.t((double) 1, doubleArray63);
        double double78 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        double double79 = org.apache.commons.math.stat.StatUtils.product(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = tTestImpl1.tTest(doubleArray37, doubleArray63, (-1820.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1820.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1820.0d) + "'", double38 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5214.25d + "'", double46 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.5919401533569089d + "'", double51 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3931.0d + "'", double52 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1820.0d) + "'", double64 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5214.25d + "'", double72 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.5919401533569089d + "'", double77 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 3931.0d + "'", double78 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-1820.0d) + "'", double79 == (-1820.0d));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary97 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double98 = tTestImpl0.t(35.0d, statisticalSummary97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl61 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray67 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double76 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray67, doubleArray73, (double) 10.0f);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 1, (int) (short) 0);
        double double81 = tTestImpl61.t((double) 1, doubleArray67);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray88 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (double) 10.0f);
        double double92 = tTestImpl0.tTest(doubleArray67, doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (double) (short) 100, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1820.0d) + "'", double68 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5214.25d + "'", double76 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.5919401533569089d + "'", double81 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3931.0d + "'", double82 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1820.0d) + "'", double83 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1820.0d) + "'", double89 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 679.5833333333334d + "'", double91 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tDistribution34.inverseCumulativeProbability((double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray38 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray38, doubleArray44, (double) 10.0f);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38, (int) (short) 1, (int) (short) 0);
        double double52 = tTestImpl32.t((double) 1, doubleArray38);
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl56 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray62 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double63 = org.apache.commons.math.stat.StatUtils.product(doubleArray62);
        double[] doubleArray68 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double double71 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray62, doubleArray68, (double) 10.0f);
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray62);
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray62, (int) (short) 1, (int) (short) 0);
        double double76 = tTestImpl56.t((double) 1, doubleArray62);
        double double77 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        double double78 = org.apache.commons.math.stat.StatUtils.min(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = tTestImpl0.homoscedasticTTest(doubleArray38, doubleArray62, (-1820.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1820.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1820.0d) + "'", double39 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5214.25d + "'", double47 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.5919401533569089d + "'", double52 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3931.0d + "'", double53 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1820.0d) + "'", double55 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1820.0d) + "'", double63 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 5214.25d + "'", double71 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.5919401533569089d + "'", double76 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 3931.0d + "'", double77 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1.0d) + "'", double78 == (-1.0d));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = tTestImpl1.tTest(3.5553480614894135d, statisticalSummary11, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution12 = distributionFactory0.createChiSquareDistribution(100.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PoissonDistribution poissonDistribution14 = distributionFactory0.createPoissonDistribution((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(chiSquaredDistribution12);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution3 = distributionFactory0.createChiSquareDistribution((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution5 = distributionFactory0.createChiSquareDistribution(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(chiSquaredDistribution3);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.mean(doubleArray0, 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution11 = distributionFactory0.createBinomialDistribution(1, 36.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.t(statisticalSummary24, statisticalSummary25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution(10.858998997563567d, (double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution18 = distributionFactory0.createExponentialDistribution((double) 'a');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution(3931.0d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution22 = distributionFactory0.createExponentialDistribution(35.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(exponentialDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
        org.junit.Assert.assertNotNull(exponentialDistribution22);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math.stat.StatUtils.mean(doubleArray4, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray4, throwable5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", throwable5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        java.lang.Object[] objArray14 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("", objArray14);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray18);
        mathException15.addSuppressed((java.lang.Throwable) mathException19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray23);
        java.lang.Object[] objArray27 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", objArray27);
        mathException24.addSuppressed((java.lang.Throwable) mathException28);
        mathException15.addSuppressed((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray11, (java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        mathException7.addSuppressed((java.lang.Throwable) mathException32);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[1225.0]");
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray3, throwable4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", throwable4);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException11);
        mathException6.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.String str14 = mathException11.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.MathException: " + "'", str14, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl36 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray41 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.max(doubleArray41);
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double59 = tTestImpl36.t(doubleArray41, doubleArray48);
        double[] doubleArray65 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double66 = org.apache.commons.math.stat.StatUtils.product(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double74 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray65, doubleArray71, (double) 10.0f);
        double double75 = tTestImpl36.tTest(5214.25d, doubleArray71);
        org.apache.commons.math.distribution.TDistribution tDistribution76 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl77 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution76);
        double[] doubleArray83 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double84 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray83);
        double double85 = tTestImpl77.t((double) 1.0f, doubleArray83);
        double[] doubleArray90 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double91 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray90);
        double double92 = org.apache.commons.math.stat.StatUtils.max(doubleArray90);
        double double93 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray90);
        double double94 = org.apache.commons.math.stat.StatUtils.variance(doubleArray90);
        double double95 = org.apache.commons.math.stat.StatUtils.variance(doubleArray90);
        double double96 = tTestImpl36.homoscedasticT(doubleArray83, doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = tTestImpl0.tTest(doubleArray33, doubleArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.5943989439169762d + "'", double59 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1820.0d) + "'", double66 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 5214.25d + "'", double74 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2.2065780869162666E-7d + "'", double75 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.539663200366486d + "'", double85 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 100.0d + "'", double92 == 100.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 12706.0d + "'", double93 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2310.0d + "'", double94 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2310.0d + "'", double95 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double double31 = org.apache.commons.math.stat.StatUtils.min(doubleArray20);
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3931.0d + "'", double32 == 3931.0d);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.t(0.0d, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10, 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray0, (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray5);
        double[] doubleArray11 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double14 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray5, doubleArray11, (double) 10.0f);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5, (int) (short) 1, (int) (short) 0);
        double[] doubleArray20 = new double[] { '#' };
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray20);
        double double23 = org.apache.commons.math.stat.StatUtils.min(doubleArray20);
        double double24 = org.apache.commons.math.stat.StatUtils.min(doubleArray20);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = tTestImpl0.tTest(doubleArray5, doubleArray20, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1820.0d) + "'", double6 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 5214.25d + "'", double14 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1225.0d + "'", double21 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1225.0d + "'", double22 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl37 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43, (int) (short) 1, (int) (short) 0);
        double double57 = tTestImpl37.t((double) 1, doubleArray43);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl37.t(100.0d, doubleArray71);
        double[] doubleArray80 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80);
        double double82 = org.apache.commons.math.stat.StatUtils.max(doubleArray80);
        double double83 = tTestImpl1.pairedTTest(doubleArray71, doubleArray80);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary84 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary85 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = tTestImpl1.tTest(statisticalSummary84, statisticalSummary85, 12706.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 12706.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.5919401533569089d + "'", double57 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-2.579976173587085d) + "'", double75 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, (int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.min(doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, 0.0d, (int) (short) 0, 0);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double56 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray50, (double) 100.0f);
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = tTestImpl0.homoscedasticT(doubleArray41, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3.5553480614894135d + "'", double54 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray22 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray22, doubleArray28, (double) 10.0f);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22, (int) (short) 1, (int) (short) 0);
        double double36 = tTestImpl16.t((double) 1, doubleArray22);
        org.apache.commons.math.distribution.TDistribution tDistribution38 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution38);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.max(doubleArray50);
        double double53 = tTestImpl39.pairedT(doubleArray44, doubleArray50);
        double double54 = tTestImpl16.t(100.0d, doubleArray50);
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray50, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1820.0d) + "'", double23 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5214.25d + "'", double31 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.5919401533569089d + "'", double36 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-2.579976173587085d) + "'", double54 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12706.0d + "'", double55 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.min(doubleArray25);
        double[] doubleArray30 = new double[] { (-1.0f) };
        double double31 = org.apache.commons.math.stat.StatUtils.min(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray25, doubleArray30);
        double[] doubleArray34 = new double[] { '#' };
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = tTestImpl0.pairedTTest(doubleArray25, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 36.0d + "'", double32 == 36.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1225.0d + "'", double36 == 1225.0d);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46, (int) (short) 1, (int) (short) 0);
        double double60 = tTestImpl40.t((double) 1, doubleArray46);
        org.apache.commons.math.distribution.TDistribution tDistribution62 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl63 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution62);
        double[] doubleArray68 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.max(doubleArray74);
        double double77 = tTestImpl63.pairedT(doubleArray68, doubleArray74);
        double double78 = tTestImpl40.t(100.0d, doubleArray74);
        double[] doubleArray83 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double84 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray83);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray83);
        double double86 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray83);
        double[] doubleArray91 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double92 = org.apache.commons.math.stat.StatUtils.product(doubleArray91);
        double double94 = org.apache.commons.math.stat.StatUtils.variance(doubleArray91, (double) 10.0f);
        double double95 = tTestImpl40.tTest(doubleArray83, doubleArray91);
        double double97 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray35, doubleArray83, (double) '#');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.5919401533569089d + "'", double60 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-2.579976173587085d) + "'", double78 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 12706.0d + "'", double86 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + (-1820.0d) + "'", double92 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 679.5833333333334d + "'", double94 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.5801210456783388d + "'", double95 == 0.5801210456783388d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution((double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray81);
        double double87 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray59);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary88 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary89 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double90 = tTestImpl1.homoscedasticTTest(statisticalSummary88, statisticalSummary89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-16.25d) + "'", double86 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5943989439169762d + "'", double87 == 0.5943989439169762d);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.tTest(statisticalSummary40, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double[] doubleArray56 = new double[] { (-1.0f) };
        double double57 = org.apache.commons.math.stat.StatUtils.min(doubleArray56);
        double double58 = org.apache.commons.math.stat.StatUtils.max(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = tTestImpl0.pairedT(doubleArray44, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution15 = distributionFactory0.createExponentialDistribution(34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution18 = distributionFactory0.createNormalDistribution(0.0d, 35.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(exponentialDistribution15);
        org.junit.Assert.assertNotNull(normalDistribution18);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray32, (double) 100.0f);
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32, (int) (byte) 0, (int) (byte) 0);
        double[] doubleArray43 = new double[] { '#' };
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = tTestImpl1.t(doubleArray32, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3.5553480614894135d + "'", double47 == 3.5553480614894135d);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.TDistribution tDistribution31 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution31);
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double40 = tTestImpl32.t((double) 1.0f, doubleArray38);
        double[] doubleArray45 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray45);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray51, doubleArray57, (double) 10.0f);
        double double61 = tTestImpl32.pairedT(doubleArray45, doubleArray51);
        org.apache.commons.math.distribution.TDistribution tDistribution62 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl63 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution62);
        double[] doubleArray68 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.max(doubleArray74);
        double double77 = tTestImpl63.pairedT(doubleArray68, doubleArray74);
        double double78 = org.apache.commons.math.stat.StatUtils.mean(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = tTestImpl1.tTest(doubleArray51, doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.539663200366486d + "'", double40 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1820.0d) + "'", double46 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 5214.25d + "'", double60 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 38.0d + "'", double78 == 38.0d);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary21 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl0.homoscedasticT(statisticalSummary21, statisticalSummary22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution15 = distributionFactory0.createExponentialDistribution(34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution19 = distributionFactory0.createCauchyDistribution((double) 1, 152.0d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution22 = distributionFactory0.createGammaDistribution((double) 100L, 35.0d);
        double double24 = gammaDistribution22.cumulativeProbability((-2.579976173587085d));
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(exponentialDistribution15);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(cauchyDistribution19);
        org.junit.Assert.assertNotNull(gammaDistribution22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution(10.858998997563567d, (double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution18 = distributionFactory0.createExponentialDistribution((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution21 = distributionFactory0.createGammaDistribution((double) 'a', (-2.579976173587085d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: beta must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(exponentialDistribution18);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl0.homoscedasticT(statisticalSummary3, statisticalSummary4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution8 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution11 = distributionFactory0.createPascalDistribution((int) (byte) 100, 679.5833333333334d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(normalDistribution8);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        java.lang.Object[] objArray1 = null;
        java.lang.Object[] objArray5 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", objArray5);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", objArray9);
        mathException6.addSuppressed((java.lang.Throwable) mathException10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException10);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray14 = mathException10.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("", objArray1, (java.lang.Throwable) mathException10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary77 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = tTestImpl0.tTest(0.5739591588987152d, statisticalSummary77, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = normalDistribution4.cumulativeProbability((double) (short) 100, 0.9119233630588404d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution23 = null;
        tTestImpl22.setDistribution(tDistribution23);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
        double[] doubleArray38 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray38, doubleArray44, (double) 10.0f);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38, (int) (short) 1, (int) (short) 0);
        double double52 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray30, doubleArray38);
        double double53 = tTestImpl22.t((double) 100, doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = tTestImpl0.tTest(1.0d, doubleArray38, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 12706.0d + "'", double33 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1820.0d) + "'", double39 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5214.25d + "'", double47 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 16.25d + "'", double52 == 16.25d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-6.003340578321836d) + "'", double53 == (-6.003340578321836d));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double63 = tTestImpl0.t(statisticalSummary61, statisticalSummary62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl0.homoscedasticTTest(statisticalSummary3, statisticalSummary4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        double double78 = tDistribution71.cumulativeProbability((-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.1177019708001247d + "'", double78 == 0.1177019708001247d);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution8 = distributionFactory0.createBinomialDistribution((int) (short) 100, 3931.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray6, (int) (short) 1, 100, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray93, (-16.25d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: -16.25");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double16 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray7, doubleArray13, (double) 10.0f);
        double double17 = org.apache.commons.math.stat.StatUtils.min(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = tTestImpl1.tTest(5214.25d, doubleArray13, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1820.0d) + "'", double8 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5214.25d + "'", double16 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl5 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray11 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double12 = org.apache.commons.math.stat.StatUtils.product(doubleArray11);
        double[] doubleArray17 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray11, doubleArray17, (double) 10.0f);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11, (int) (short) 1, (int) (short) 0);
        double double25 = tTestImpl5.t((double) 1, doubleArray11);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution27);
        double[] doubleArray33 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double[] doubleArray39 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double double42 = tTestImpl28.pairedT(doubleArray33, doubleArray39);
        double double43 = tTestImpl5.t(100.0d, doubleArray39);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double[] doubleArray56 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double57 = org.apache.commons.math.stat.StatUtils.product(doubleArray56);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56, (double) 10.0f);
        double double60 = tTestImpl5.tTest(doubleArray48, doubleArray56);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray56, (double) '#');
        double[] doubleArray68 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double69 = org.apache.commons.math.stat.StatUtils.product(doubleArray68);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double77 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray68, doubleArray74, (double) 10.0f);
        double double78 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double double80 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = tTestImpl4.tTest(doubleArray56, doubleArray68, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1820.0d) + "'", double12 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5214.25d + "'", double20 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.5919401533569089d + "'", double25 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-2.579976173587085d) + "'", double43 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12706.0d + "'", double51 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1820.0d) + "'", double57 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 679.5833333333334d + "'", double59 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.5801210456783388d + "'", double60 == 0.5801210456783388d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 679.5833333333334d + "'", double63 == 679.5833333333334d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1820.0d) + "'", double69 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 5214.25d + "'", double77 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 679.5833333333334d + "'", double80 == 679.5833333333334d);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution27);
        double[] doubleArray33 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double[] doubleArray39 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double double42 = tTestImpl28.pairedT(doubleArray33, doubleArray39);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray49 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double50 = org.apache.commons.math.stat.StatUtils.product(doubleArray49);
        double[] doubleArray55 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray55);
        double double58 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray49, doubleArray55, (double) 10.0f);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49, (int) (short) 1, (int) (short) 0);
        double double63 = tTestImpl43.t((double) 1, doubleArray49);
        org.apache.commons.math.distribution.TDistribution tDistribution65 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl66 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double[] doubleArray77 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double78 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray77);
        double double79 = org.apache.commons.math.stat.StatUtils.max(doubleArray77);
        double double80 = tTestImpl66.pairedT(doubleArray71, doubleArray77);
        double double81 = tTestImpl43.t(100.0d, doubleArray77);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray77);
        double double84 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray39, doubleArray77, (double) (short) 100);
        double[] doubleArray86 = new double[] { '#' };
        double double87 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray86);
        double double88 = org.apache.commons.math.stat.StatUtils.min(doubleArray86);
        double double91 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray86, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = tTestImpl0.homoscedasticTTest(doubleArray77, doubleArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1820.0d) + "'", double50 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 5214.25d + "'", double58 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.5919401533569089d + "'", double63 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 100.0d + "'", double79 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-2.579976173587085d) + "'", double81 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 12706.0d + "'", double82 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1225.0d + "'", double87 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 35.0d + "'", double88 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        double[] doubleArray7 = new double[] { '#' };
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray7);
        double double9 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray7);
        double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray7);
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl4.t((double) (short) 1, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1225.0d + "'", double8 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1225.0d + "'", double9 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.5553480614894135d + "'", double11 == 3.5553480614894135d);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution6 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution((int) (short) 1, 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(weibullDistribution6);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        double double8 = normalDistribution6.cumulativeProbability(84.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9999999999999984d + "'", double8 == 0.9999999999999984d);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray4, 12706.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 12706.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 12706.0d + "'", double7 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2310.0d + "'", double8 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2310.0d + "'", double9 == 2310.0d);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution7 = distributionFactory0.createWeibullDistribution((double) 0, 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double[] doubleArray84 = new double[] { '#' };
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        double double86 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        double double87 = org.apache.commons.math.stat.StatUtils.product(doubleArray84);
        double double88 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray84);
        double double90 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray84, (double) 100.0f);
        double double91 = org.apache.commons.math.stat.StatUtils.product(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = tTestImpl1.pairedT(doubleArray81, doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[35.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1225.0d + "'", double85 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1225.0d + "'", double86 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 35.0d + "'", double87 == 35.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 3.5553480614894135d + "'", double88 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 35.0d + "'", double90 == 35.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 35.0d + "'", double91 == 35.0d);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double[] doubleArray26 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray26, doubleArray32, (double) 10.0f);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26, (int) (short) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = tTestImpl0.tTest(0.03982783727702899d, doubleArray26, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1820.0d) + "'", double27 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 5214.25d + "'", double35 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        java.lang.Object[] objArray2 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("", objArray2);
        java.lang.Object[] objArray6 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", objArray6);
        mathException3.addSuppressed((java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Object[] objArray12 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("", objArray12);
        mathException9.addSuppressed((java.lang.Throwable) mathException13);
        java.lang.Throwable[] throwableArray15 = mathException9.getSuppressed();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution(1225.0d, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution9 = distributionFactory0.createBinomialDistribution(10, 52.00000000000001d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        double[] doubleArray4 = new double[] { 1L, (short) 100, 0.433786033254294d, 2.2065780869162666E-7d };
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4, (int) '#', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0, 0.433786033254294, 2.2065780869162666E-7]");
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.variance(doubleArray0, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl0.tTest(84.0d, statisticalSummary4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution12 = distributionFactory0.createChiSquareDistribution(100.0d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution14 = distributionFactory0.createPoissonDistribution(0.8538434429284575d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(chiSquaredDistribution12);
        org.junit.Assert.assertNotNull(poissonDistribution14);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary77 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary78 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double79 = tTestImpl1.homoscedasticT(statisticalSummary77, statisticalSummary78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl0.tTest(84.0d, statisticalSummary4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) 'a', (int) (byte) 1, 1.5919401533569089d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary96 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary97 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double98 = tTestImpl0.tTest(statisticalSummary96, statisticalSummary97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        org.apache.commons.math.distribution.TDistribution tDistribution64 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl65 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution64);
        double[] doubleArray70 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double71 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double double78 = org.apache.commons.math.stat.StatUtils.max(doubleArray76);
        double double79 = tTestImpl65.pairedT(doubleArray70, doubleArray76);
        double double82 = org.apache.commons.math.stat.StatUtils.variance(doubleArray70, 1, (int) (short) 0);
        double[] doubleArray84 = new double[] { '#' };
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        double double86 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        double double87 = org.apache.commons.math.stat.StatUtils.sum(doubleArray84);
        double double88 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = tTestImpl0.pairedTTest(doubleArray70, doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[35.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1225.0d + "'", double85 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1225.0d + "'", double86 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 35.0d + "'", double87 == 35.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 3.5553480614894135d + "'", double88 == 3.5553480614894135d);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.t(1.5919401533569089d, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.mean(doubleArray4, (int) (byte) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        double[] doubleArray3 = new double[] { 1, 10.0d, 100 };
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.min(doubleArray3, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 10.0, 100.0]");
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        double double6 = gammaDistribution3.cumulativeProbability(5214.25d, 12706.0d);
        double double9 = gammaDistribution3.cumulativeProbability((double) (-1.0f), (double) 100);
        double double11 = gammaDistribution3.inverseCumulativeProbability(0.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.8538434429284575d + "'", double9 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double[] doubleArray25 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.max(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = tTestImpl31.t((double) 1.0f, doubleArray37);
        double double40 = tTestImpl0.t(doubleArray25, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math.stat.StatUtils.min(doubleArray37, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 12706.0d + "'", double28 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2310.0d + "'", double29 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.539663200366486d + "'", double39 == 1.539663200366486d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(0.9119233630588404d, statisticalSummary3, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl61 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray67 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double76 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray67, doubleArray73, (double) 10.0f);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 1, (int) (short) 0);
        double double81 = tTestImpl61.t((double) 1, doubleArray67);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray88 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (double) 10.0f);
        double double92 = tTestImpl0.tTest(doubleArray67, doubleArray88);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary93 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary94 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double95 = tTestImpl0.t(statisticalSummary93, statisticalSummary94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1820.0d) + "'", double68 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5214.25d + "'", double76 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.5919401533569089d + "'", double81 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3931.0d + "'", double82 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1820.0d) + "'", double83 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1820.0d) + "'", double89 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 679.5833333333334d + "'", double91 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl0.tTest((double) 0, statisticalSummary4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary77 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary78 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double79 = tTestImpl1.t(statisticalSummary77, statisticalSummary78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl6 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl8 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double[] doubleArray19 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        double double22 = tTestImpl8.pairedT(doubleArray13, doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray38);
        double double41 = tTestImpl27.pairedT(doubleArray32, doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1, (int) (short) 0);
        double double45 = tTestImpl6.tTest(doubleArray13, doubleArray32);
        double double46 = tTestImpl4.tTest(10.858998997563567d, doubleArray32);
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32, 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.34087447893070477d + "'", double46 == 0.34087447893070477d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray8 = mathException7.getSuppressed();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray8);
        mathException5.addSuppressed((java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        java.lang.String str14 = mathException12.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.MathException: " + "'", str14, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl61 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray67 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double76 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray67, doubleArray73, (double) 10.0f);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 1, (int) (short) 0);
        double double81 = tTestImpl61.t((double) 1, doubleArray67);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray88 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (double) 10.0f);
        double double92 = tTestImpl0.tTest(doubleArray67, doubleArray88);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary93 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary94 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = tTestImpl0.tTest(statisticalSummary93, statisticalSummary94, 0.5801210456783388d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.5801210456783388");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1820.0d) + "'", double68 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5214.25d + "'", double76 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.5919401533569089d + "'", double81 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3931.0d + "'", double82 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1820.0d) + "'", double83 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1820.0d) + "'", double89 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 679.5833333333334d + "'", double91 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, (double) 100, (int) 'a', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 12706.0d + "'", double13 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2310.0d + "'", double14 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-16.25d) + "'", double15 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution((-1820.0d), 0.433786033254294d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", objArray6);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", objArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", objArray15);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        mathException16.addSuppressed((java.lang.Throwable) mathException20);
        mathException7.addSuppressed((java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray3, (java.lang.Throwable) mathException7);
        java.lang.Object[] objArray24 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray24);
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray8 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double9 = org.apache.commons.math.stat.StatUtils.product(doubleArray8);
        double[] doubleArray14 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double17 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray8, doubleArray14, (double) 10.0f);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8, (int) (short) 1, (int) (short) 0);
        double double22 = tTestImpl2.t((double) 1, doubleArray8);
        double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray8);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.min(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = tTestImpl1.pairedT(doubleArray8, doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1820.0d) + "'", double9 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5214.25d + "'", double17 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.5919401533569089d + "'", double22 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 3931.0d + "'", double23 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1820.0d) + "'", double24 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) (byte) 0, 1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution((double) 0, 0.433786033254294d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.tTest(1.539663200366486d, statisticalSummary25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.min(doubleArray40);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution44 = null;
        tTestImpl43.setDistribution(tDistribution44);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray59);
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray59, (int) (short) 1, (int) (short) 0);
        double double73 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray51, doubleArray59);
        double double74 = tTestImpl43.t((double) 100, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = tTestImpl0.pairedTTest(doubleArray40, doubleArray59, 0.34087447893070477d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 12706.0d + "'", double54 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 16.25d + "'", double73 == 16.25d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-6.003340578321836d) + "'", double74 == (-6.003340578321836d));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", objArray6);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", objArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", objArray15);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        mathException16.addSuppressed((java.lang.Throwable) mathException20);
        mathException7.addSuppressed((java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray3, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray32);
        mathException29.addSuppressed((java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray3, (java.lang.Throwable) mathException29);
        java.lang.Object[] objArray36 = mathException29.getArguments();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray23);
        mathException20.addSuppressed((java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray28 = mathException27.getSuppressed();
        mathException26.addSuppressed((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException27);
        java.lang.Throwable[] throwableArray31 = mathException27.getSuppressed();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray28 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray28, doubleArray34, (double) 10.0f);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28, (int) (short) 1, (int) (short) 0);
        double double42 = tTestImpl22.t((double) 1, doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution43);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = tTestImpl44.t((double) 1.0f, doubleArray50);
        double[] doubleArray57 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.max(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double61 = tTestImpl22.pairedT(doubleArray50, doubleArray57);
        double double62 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        double double63 = tTestImpl0.tTest(0.0d, doubleArray50);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.tTest((double) (byte) 1, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1820.0d) + "'", double29 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5214.25d + "'", double37 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.5919401533569089d + "'", double42 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.539663200366486d + "'", double52 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12706.0d + "'", double60 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.21195550612870484d + "'", double63 == 0.21195550612870484d);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray42 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray42, doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double double55 = tTestImpl1.t(21.75d, doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = org.apache.commons.math.stat.StatUtils.max(doubleArray42, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1820.0d) + "'", double43 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12706.0d + "'", double51 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2310.0d + "'", double52 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-16.25d) + "'", double53 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.distribution.TDistribution tDistribution5 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl6 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution5);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = tTestImpl6.t((double) 1.0f, doubleArray12);
        double[] doubleArray19 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double20 = org.apache.commons.math.stat.StatUtils.product(doubleArray19);
        double[] doubleArray25 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray25);
        double[] doubleArray31 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double34 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray25, doubleArray31, (double) 10.0f);
        double double35 = tTestImpl6.pairedT(doubleArray19, doubleArray25);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray37, 0.34089313230206053d);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = tTestImpl4.homoscedasticTTest(doubleArray19, doubleArray37, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.539663200366486d + "'", double14 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1820.0d) + "'", double20 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1820.0d) + "'", double26 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5214.25d + "'", double34 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 34.99999999999999d + "'", double39 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray28 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray28, doubleArray34, (double) 10.0f);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28, (int) (short) 1, (int) (short) 0);
        double double42 = tTestImpl22.t((double) 1, doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution43);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = tTestImpl44.t((double) 1.0f, doubleArray50);
        double[] doubleArray57 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.max(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double61 = tTestImpl22.pairedT(doubleArray50, doubleArray57);
        double double62 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        double double63 = tTestImpl0.tTest(0.0d, doubleArray50);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.homoscedasticT(statisticalSummary64, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1820.0d) + "'", double29 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5214.25d + "'", double37 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.5919401533569089d + "'", double42 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.539663200366486d + "'", double52 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12706.0d + "'", double60 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.21195550612870484d + "'", double63 == 0.21195550612870484d);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = tTestImpl0.tTest(statisticalSummary3, statisticalSummary4, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray81);
        double double87 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray59);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary89 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double90 = tTestImpl1.t(1.053060673855556d, statisticalSummary89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-16.25d) + "'", double86 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5943989439169762d + "'", double87 == 0.5943989439169762d);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl37 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43, (int) (short) 1, (int) (short) 0);
        double double57 = tTestImpl37.t((double) 1, doubleArray43);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl37.t(100.0d, doubleArray71);
        double[] doubleArray80 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80);
        double double82 = org.apache.commons.math.stat.StatUtils.max(doubleArray80);
        double double83 = tTestImpl1.pairedTTest(doubleArray71, doubleArray80);
        double[] doubleArray86 = new double[] { '#' };
        double double87 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray86);
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray86);
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = tTestImpl1.tTest(10.858998997563567d, doubleArray86, 2310.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 2310.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.5919401533569089d + "'", double57 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-2.579976173587085d) + "'", double75 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1225.0d + "'", double87 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1225.0d + "'", double88 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 35.0d + "'", double89 == 35.0d);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.mean(doubleArray0, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 'a');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution(0.0d, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution16 = distributionFactory0.createWeibullDistribution((double) 0.0f, 152.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution13);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = tTestImpl0.tTest(34.99999999999999d, statisticalSummary28, 38.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 38.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = org.apache.commons.math.stat.StatUtils.product(doubleArray71, (int) '4', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray1, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray40 = null;
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double[] doubleArray53 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray53);
        double[] doubleArray59 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray59);
        double double62 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray53, doubleArray59, (double) 10.0f);
        double double63 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53, (int) (short) 1, (int) (short) 0);
        double double67 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray45, doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double68 = tTestImpl0.homoscedasticT(doubleArray40, doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 12706.0d + "'", double48 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 5214.25d + "'", double62 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.25d + "'", double67 == 16.25d);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double[] doubleArray25 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.max(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = tTestImpl31.t((double) 1.0f, doubleArray37);
        double double40 = tTestImpl0.t(doubleArray25, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math.stat.StatUtils.min(doubleArray25, 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 12706.0d + "'", double28 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2310.0d + "'", double29 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.539663200366486d + "'", double39 == 1.539663200366486d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl37 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43, (int) (short) 1, (int) (short) 0);
        double double57 = tTestImpl37.t((double) 1, doubleArray43);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl37.t(100.0d, doubleArray71);
        double[] doubleArray80 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80);
        double double82 = org.apache.commons.math.stat.StatUtils.max(doubleArray80);
        double double83 = tTestImpl1.pairedTTest(doubleArray71, doubleArray80);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary84 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary85 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double86 = tTestImpl1.homoscedasticT(statisticalSummary84, statisticalSummary85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.5919401533569089d + "'", double57 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-2.579976173587085d) + "'", double75 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray6 = new double[] { (-1.0f) };
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray6);
        double double9 = org.apache.commons.math.stat.StatUtils.mean(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.min(doubleArray6, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 36.0d + "'", double8 == 36.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution15 = distributionFactory0.createExponentialDistribution(34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution19 = distributionFactory0.createCauchyDistribution((double) 1, 152.0d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution22 = distributionFactory0.createGammaDistribution((double) 100L, 35.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution23 = distributionFactory0.createNormalDistribution();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(exponentialDistribution15);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(cauchyDistribution19);
        org.junit.Assert.assertNotNull(gammaDistribution22);
        org.junit.Assert.assertNotNull(normalDistribution23);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4, (int) (byte) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2310.0d + "'", double8 == 2310.0d);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        org.apache.commons.math.distribution.TDistribution tDistribution45 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl46 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double[] doubleArray57 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.max(doubleArray57);
        double double60 = tTestImpl46.pairedT(doubleArray51, doubleArray57);
        double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = tTestImpl0.pairedTTest(doubleArray40, doubleArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl0.t((double) (byte) -1, statisticalSummary4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double46 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray40, (double) 100.0f);
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double54 = org.apache.commons.math.stat.StatUtils.max(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60, (int) (short) 1, (int) (short) 0);
        double double74 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray52, doubleArray60);
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = tTestImpl0.tTest(doubleArray40, doubleArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 3.5553480614894135d + "'", double44 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12706.0d + "'", double55 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 16.25d + "'", double74 == 16.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray3 = new double[] { (byte) 100, 0.1177019708001247d };
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = tTestImpl0.pairedT(doubleArray3, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 0.1177019708001247]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        double double32 = org.apache.commons.math.stat.StatUtils.mean(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray16, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 21.75d + "'", double32 == 21.75d);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 152.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 152.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 0.34089313230206053d);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 34.99999999999999d + "'", double3 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        double[] doubleArray78 = new double[] { '#' };
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray78);
        double double80 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray78);
        double double81 = org.apache.commons.math.stat.StatUtils.product(doubleArray78);
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray78);
        double double84 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray78, (double) 100.0f);
        double[] doubleArray86 = new double[] { '#' };
        double double87 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray86);
        double double88 = org.apache.commons.math.stat.StatUtils.mean(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = tTestImpl1.homoscedasticTTest(doubleArray78, doubleArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1225.0d + "'", double79 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1225.0d + "'", double80 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 35.0d + "'", double81 == 35.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3.5553480614894135d + "'", double82 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 35.0d + "'", double84 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1225.0d + "'", double87 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 35.0d + "'", double88 == 35.0d);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray42, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = tTestImpl0.tTest(doubleArray36, doubleArray42, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 35.0d + "'", double46 == 35.0d);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution14 = distributionFactory0.createBinomialDistribution((int) (byte) 0, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution11);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double double16 = tTestImpl2.pairedT(doubleArray7, doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray7, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution20 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl21 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.max(doubleArray32);
        double double35 = tTestImpl21.pairedT(doubleArray26, doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, 1, (int) (short) 0);
        double double39 = tTestImpl0.tTest(doubleArray7, doubleArray26);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.t(0.5943989439169762d, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        org.apache.commons.math.MathException mathException0 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException0);
        java.lang.String str2 = mathException1.getPattern();
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution10 = distributionFactory0.createCauchyDistribution((double) (-1), (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution4 = distributionFactory0.createExponentialDistribution((double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(10.858998997563567d, 36.0d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution9 = distributionFactory0.createPoissonDistribution(3931.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(exponentialDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(poissonDistribution9);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray28 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray28, doubleArray34, (double) 10.0f);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28, (int) (short) 1, (int) (short) 0);
        double double42 = tTestImpl22.t((double) 1, doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution43);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = tTestImpl44.t((double) 1.0f, doubleArray50);
        double[] doubleArray57 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.max(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double61 = tTestImpl22.pairedT(doubleArray50, doubleArray57);
        double double62 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        double double63 = tTestImpl0.tTest(0.0d, doubleArray50);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.t(statisticalSummary64, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1820.0d) + "'", double29 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5214.25d + "'", double37 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.5919401533569089d + "'", double42 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.539663200366486d + "'", double52 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12706.0d + "'", double60 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.21195550612870484d + "'", double63 == 0.21195550612870484d);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = tTestImpl0.tTest((double) 1.0f, statisticalSummary2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution7 = distributionFactory0.createBinomialDistribution(100, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = tTestImpl42.t((double) 1, doubleArray48);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, 1, (int) (byte) 1);
        double double68 = tTestImpl0.homoscedasticTTest(doubleArray36, doubleArray48);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double71 = tTestImpl0.tTest(679.5833333333334d, statisticalSummary70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5919401533569089d + "'", double62 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3931.0d + "'", double63 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5739591588987152d + "'", double68 == 0.5739591588987152d);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = org.apache.commons.math.stat.StatUtils.product(doubleArray20, (int) (short) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double34 = tTestImpl0.homoscedasticTTest(statisticalSummary32, statisticalSummary33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl6 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl8 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double[] doubleArray19 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        double double22 = tTestImpl8.pairedT(doubleArray13, doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray38);
        double double41 = tTestImpl27.pairedT(doubleArray32, doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1, (int) (short) 0);
        double double45 = tTestImpl6.tTest(doubleArray13, doubleArray32);
        double double46 = tTestImpl4.tTest(10.858998997563567d, doubleArray32);
        double[] doubleArray48 = new double[] { '#' };
        double double49 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray48, (double) 100.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl55 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray61 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double62 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray61, doubleArray67, (double) 10.0f);
        double double71 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray61);
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray61, (int) (short) 1, (int) (short) 0);
        double double75 = tTestImpl55.t((double) 1, doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = tTestImpl4.pairedTTest(doubleArray48, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.34087447893070477d + "'", double46 == 0.34087447893070477d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1225.0d + "'", double49 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 3.5553480614894135d + "'", double52 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 35.0d + "'", double54 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1820.0d) + "'", double62 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 5214.25d + "'", double70 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.5919401533569089d + "'", double75 == 1.5919401533569089d);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1, (int) (byte) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.homoscedasticT(statisticalSummary64, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray25, (double) 100.0f);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25, (int) (byte) 0, 1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl35 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray41 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double50 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray41, doubleArray47, (double) 10.0f);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41, (int) (short) 1, (int) (short) 0);
        double double55 = tTestImpl35.t((double) 1, doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = tTestImpl0.tTest(doubleArray25, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1820.0d) + "'", double42 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 5214.25d + "'", double50 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.5919401533569089d + "'", double55 == 1.5919401533569089d);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution(1225.0d, 1.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 100, (double) (byte) 100);
        org.apache.commons.math.distribution.FDistribution fDistribution12 = distributionFactory0.createFDistribution(34.99999999999999d, 34.99999999999999d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution15 = distributionFactory0.createFDistribution((double) (byte) -1, 3931.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(fDistribution12);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6, 5214.25d);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray6, (int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 679.5833333333334d + "'", double22 == 679.5833333333334d);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = tTestImpl42.t((double) 1, doubleArray48);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, 1, (int) (byte) 1);
        double double68 = tTestImpl0.homoscedasticTTest(doubleArray36, doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray36, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5919401533569089d + "'", double62 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3931.0d + "'", double63 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5739591588987152d + "'", double68 == 0.5739591588987152d);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double35 = org.apache.commons.math.stat.StatUtils.sum(doubleArray32);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double[] doubleArray38 = new double[] { '#' };
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray38);
        double double42 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray38, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = tTestImpl1.homoscedasticTTest(doubleArray32, doubleArray38, 0.9119233630588404d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9119233630588404");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.5553480614894135d + "'", double36 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1225.0d + "'", double39 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1225.0d + "'", double40 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray2 = mathException1.getArguments();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100L);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl0.t(statisticalSummary39, statisticalSummary40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException4);
        java.lang.String str6 = mathException5.getPattern();
        java.lang.Throwable[] throwableArray7 = mathException5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.tTest(statisticalSummary37, statisticalSummary38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution3 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution(0.22127614024118358d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(chiSquaredDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary77 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary78 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double79 = tTestImpl1.homoscedasticTTest(statisticalSummary77, statisticalSummary78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = tTestImpl42.t((double) 1, doubleArray48);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, 1, (int) (byte) 1);
        double double68 = tTestImpl0.homoscedasticTTest(doubleArray36, doubleArray48);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double71 = tTestImpl0.homoscedasticTTest(statisticalSummary69, statisticalSummary70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5919401533569089d + "'", double62 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3931.0d + "'", double63 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5739591588987152d + "'", double68 == 0.5739591588987152d);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.homoscedasticTTest(statisticalSummary64, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution4 = distributionFactory0.createExponentialDistribution((double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(10.858998997563567d, 36.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution10 = distributionFactory0.createWeibullDistribution(0.0d, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(exponentialDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution13 = distributionFactory0.createCauchyDistribution((double) 1.0f, 10.858998997563567d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(cauchyDistribution13);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = tTestImpl40.tTest(0.0d, statisticalSummary42, 5214.25d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 5214.25");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution(1225.0d, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = cauchyDistribution6.inverseCumulativeProbability(3.5553480614894135d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability argument must be between 0 and 1 (inclusive)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution6 = distributionFactory0.createGammaDistribution(0.8538434429284575d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution9 = distributionFactory0.createCauchyDistribution(Double.NaN, (double) (short) 100);
        java.lang.Class<?> wildcardClass10 = cauchyDistribution9.getClass();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(gammaDistribution6);
        org.junit.Assert.assertNotNull(cauchyDistribution9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("hi!", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution(10.858998997563567d, (double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution18 = distributionFactory0.createExponentialDistribution((double) 'a');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution(3931.0d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution23 = distributionFactory0.createCauchyDistribution(34.99999999999999d, 0.5801210456783388d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution26 = distributionFactory0.createBinomialDistribution(1, 0.03982783727702899d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(exponentialDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
        org.junit.Assert.assertNotNull(cauchyDistribution23);
        org.junit.Assert.assertNotNull(binomialDistribution26);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.t(10.0d, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution(10.858998997563567d, (double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution18 = distributionFactory0.createExponentialDistribution((double) 'a');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution(3931.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution23 = distributionFactory0.createBinomialDistribution((int) (short) -1, 36.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of trials must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(exponentialDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        double double32 = org.apache.commons.math.stat.StatUtils.mean(doubleArray16);
        double double33 = org.apache.commons.math.stat.StatUtils.max(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray16, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 21.75d + "'", double32 == 21.75d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12, (int) (short) 1, (int) (short) 0);
        double double26 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray12);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray12, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 12706.0d + "'", double7 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 16.25d + "'", double26 == 16.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        double[] doubleArray1 = new double[] { (-1.0f) };
        double double2 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        double double77 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray71, 0.21195550612870484d);
        double double78 = org.apache.commons.math.stat.StatUtils.min(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1.0d) + "'", double78 == (-1.0d));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution11 = distributionFactory0.createGammaDistribution(0.9999999999999984d, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: beta must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        double double77 = tDistribution71.getDegreesOfFreedom();
        tDistribution71.setDegreesOfFreedom(3931.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) ' ', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray81);
        double double87 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray59);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary88 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary89 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double90 = tTestImpl1.homoscedasticTTest(statisticalSummary88, statisticalSummary89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-16.25d) + "'", double86 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5943989439169762d + "'", double87 == 0.5943989439169762d);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl1.tTest(statisticalSummary10, statisticalSummary11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = tTestImpl1.tTest(statisticalSummary2, statisticalSummary3, 0.433786033254294d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = org.apache.commons.math.stat.StatUtils.max(doubleArray51, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double29 = org.apache.commons.math.stat.StatUtils.max(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray27);
        double[] doubleArray35 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray35);
        double[] doubleArray41 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray35, doubleArray41, (double) 10.0f);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35, (int) (short) 1, (int) (short) 0);
        double double49 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray27, doubleArray35);
        double double50 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray12, doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray1, doubleArray12, 0.5739591588987152d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 12706.0d + "'", double30 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1820.0d) + "'", double36 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 5214.25d + "'", double44 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 16.25d + "'", double49 == 16.25d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-16.25d) + "'", double50 == (-16.25d));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl61 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray67 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double76 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray67, doubleArray73, (double) 10.0f);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 1, (int) (short) 0);
        double double81 = tTestImpl61.t((double) 1, doubleArray67);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray88 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (double) 10.0f);
        double double92 = tTestImpl0.tTest(doubleArray67, doubleArray88);
        double double93 = org.apache.commons.math.stat.StatUtils.mean(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1820.0d) + "'", double68 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5214.25d + "'", double76 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.5919401533569089d + "'", double81 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3931.0d + "'", double82 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1820.0d) + "'", double83 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1820.0d) + "'", double89 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 679.5833333333334d + "'", double91 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 21.75d + "'", double93 == 21.75d);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double double40 = org.apache.commons.math.stat.StatUtils.min(doubleArray35);
        double double42 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray35, 10.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = tTestImpl1.tTest(1.0d, statisticalSummary11, 36.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 36.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary96 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary97 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double98 = tTestImpl0.t(statisticalSummary96, statisticalSummary97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = tTestImpl42.t((double) 1, doubleArray48);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, 1, (int) (byte) 1);
        double double68 = tTestImpl0.homoscedasticTTest(doubleArray36, doubleArray48);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5919401533569089d + "'", double62 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3931.0d + "'", double63 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5739591588987152d + "'", double68 == 0.5739591588987152d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 679.5833333333334d + "'", double70 == 679.5833333333334d);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray6 = mathException5.getSuppressed();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray11);
        mathException8.addSuppressed((java.lang.Throwable) mathException12);
        java.lang.Throwable[] throwableArray14 = mathException12.getSuppressed();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException12);
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray16);
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        java.lang.Object[] objArray21 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray21);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("", objArray25);
        mathException22.addSuppressed((java.lang.Throwable) mathException26);
        java.lang.Object[] objArray30 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", objArray30);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray34);
        mathException31.addSuppressed((java.lang.Throwable) mathException35);
        mathException22.addSuppressed((java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray48);
        mathException45.addSuppressed((java.lang.Throwable) mathException49);
        java.lang.Throwable[] throwableArray51 = mathException49.getSuppressed();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException49);
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        java.lang.Object[] objArray57 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("", objArray57);
        java.lang.Object[] objArray61 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray61);
        mathException58.addSuppressed((java.lang.Throwable) mathException62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException62);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray66 = mathException65.getSuppressed();
        mathException64.addSuppressed((java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray69 = mathException65.getSuppressed();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray53, (java.lang.Throwable) mathException65);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray18, (java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray72 = mathException65.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46, (int) (short) 1, (int) (short) 0);
        double double60 = tTestImpl40.t((double) 1, doubleArray46);
        org.apache.commons.math.distribution.TDistribution tDistribution62 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl63 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution62);
        double[] doubleArray68 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.max(doubleArray74);
        double double77 = tTestImpl63.pairedT(doubleArray68, doubleArray74);
        double double78 = tTestImpl40.t(100.0d, doubleArray74);
        double double79 = org.apache.commons.math.stat.StatUtils.max(doubleArray74);
        double[] doubleArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = tTestImpl0.homoscedasticTTest(doubleArray74, doubleArray80, 679.5833333333335d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 679.5833333333335");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.5919401533569089d + "'", double60 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-2.579976173587085d) + "'", double78 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 100.0d + "'", double79 == 100.0d);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl61 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray67 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double76 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray67, doubleArray73, (double) 10.0f);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 1, (int) (short) 0);
        double double81 = tTestImpl61.t((double) 1, doubleArray67);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray88 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (double) 10.0f);
        double double92 = tTestImpl0.tTest(doubleArray67, doubleArray88);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary94 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double95 = tTestImpl0.t((double) (byte) 100, statisticalSummary94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1820.0d) + "'", double68 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5214.25d + "'", double76 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.5919401533569089d + "'", double81 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3931.0d + "'", double82 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1820.0d) + "'", double83 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1820.0d) + "'", double89 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 679.5833333333334d + "'", double91 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.tTest(statisticalSummary24, statisticalSummary25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray9 = mathException8.getSuppressed();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray9);
        mathException6.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray12 = mathException10.getSuppressed();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray18);
        java.lang.Object[] objArray22 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", objArray22);
        mathException19.addSuppressed((java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        mathException25.addSuppressed((java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException26);
        java.lang.Throwable[] throwableArray30 = mathException26.getSuppressed();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) mathException26);
        java.lang.Object[] objArray35 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("", objArray35);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("", objArray39);
        mathException36.addSuppressed((java.lang.Throwable) mathException40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        mathException42.addSuppressed((java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException43);
        java.lang.Throwable[] throwableArray47 = mathException43.getSuppressed();
        mathException31.addSuppressed((java.lang.Throwable) mathException43);
        java.lang.Object[] objArray49 = mathException43.getArguments();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double63 = tTestImpl0.t((double) (byte) 0, statisticalSummary62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray31 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double33 = tTestImpl25.t((double) 1.0f, doubleArray31);
        double[] doubleArray38 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = tTestImpl25.pairedT(doubleArray38, doubleArray44);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory55 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution56 = distributionFactory55.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution58 = distributionFactory55.createTDistribution(0.8538434429284575d);
        double double59 = tDistribution58.getDegreesOfFreedom();
        tTestImpl25.setDistribution(tDistribution58);
        tDistribution58.setDegreesOfFreedom((double) 1L);
        double double63 = tDistribution58.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution58);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory65 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution66 = distributionFactory65.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution68 = distributionFactory65.createTDistribution(0.8538434429284575d);
        double double69 = tDistribution68.getDegreesOfFreedom();
        double double70 = tDistribution68.getDegreesOfFreedom();
        tTestImpl64.setDistribution(tDistribution68);
        tTestImpl0.setDistribution(tDistribution68);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary74 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = tTestImpl0.tTest(0.0d, statisticalSummary74, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.539663200366486d + "'", double33 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1820.0d) + "'", double39 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(distributionFactory55);
        org.junit.Assert.assertNotNull(normalDistribution56);
        org.junit.Assert.assertNotNull(tDistribution58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.8538434429284575d + "'", double59 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory65);
        org.junit.Assert.assertNotNull(normalDistribution66);
        org.junit.Assert.assertNotNull(tDistribution68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.8538434429284575d + "'", double69 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.8538434429284575d + "'", double70 == 0.8538434429284575d);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PoissonDistribution poissonDistribution6 = distributionFactory0.createPoissonDistribution((double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34, 0, (int) (short) 1);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double39 = tTestImpl0.t(0.0d, doubleArray34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = tTestImpl0.tTest(0.34089313230206053d, statisticalSummary41, 679.5833333333334d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 679.5833333333334");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.00000000000001d + "'", double37 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 84.0d + "'", double38 == 84.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.7925163190605438d + "'", double39 == 1.7925163190605438d);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution5 = distributionFactory0.createPoissonDistribution(2.2065780869162666E-7d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution8 = distributionFactory0.createCauchyDistribution((double) (-1L), 0.34089313230206053d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(poissonDistribution5);
        org.junit.Assert.assertNotNull(cauchyDistribution8);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = tTestImpl42.t((double) 1, doubleArray48);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, 1, (int) (byte) 1);
        double double68 = tTestImpl0.homoscedasticTTest(doubleArray36, doubleArray48);
        double[] doubleArray71 = new double[] { '#' };
        double double72 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        double double74 = org.apache.commons.math.stat.StatUtils.min(doubleArray71);
        double[] doubleArray76 = new double[] { (-1.0f) };
        double double77 = org.apache.commons.math.stat.StatUtils.min(doubleArray76);
        double double78 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray71, doubleArray76);
        double double79 = org.apache.commons.math.stat.StatUtils.sum(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = tTestImpl0.t(1225.0d, doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5919401533569089d + "'", double62 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3931.0d + "'", double63 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5739591588987152d + "'", double68 == 0.5739591588987152d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1225.0d + "'", double72 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1225.0d + "'", double73 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 36.0d + "'", double78 == 36.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 35.0d + "'", double79 == 35.0d);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.t(statisticalSummary40, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution42 = distributionFactory41.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution44 = distributionFactory41.createTDistribution(0.8538434429284575d);
        double double45 = tDistribution44.getDegreesOfFreedom();
        double double46 = tDistribution44.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution44);
        double[] doubleArray52 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52, (double) 10.0f);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl56 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution57 = null;
        tTestImpl56.setDistribution(tDistribution57);
        double[] doubleArray64 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double65 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray64);
        double double66 = org.apache.commons.math.stat.StatUtils.max(doubleArray64);
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray64);
        double[] doubleArray72 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double73 = org.apache.commons.math.stat.StatUtils.product(doubleArray72);
        double[] doubleArray78 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double79 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray78);
        double double81 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray72, doubleArray78, (double) 10.0f);
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray72);
        double double85 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray72, (int) (short) 1, (int) (short) 0);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray64, doubleArray72);
        double double87 = tTestImpl56.t((double) 100, doubleArray72);
        double double88 = org.apache.commons.math.stat.StatUtils.mean(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = tTestImpl40.homoscedasticTTest(doubleArray52, doubleArray72, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(normalDistribution42);
        org.junit.Assert.assertNotNull(tDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.8538434429284575d + "'", double45 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.8538434429284575d + "'", double46 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1820.0d) + "'", double53 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 679.5833333333334d + "'", double55 == 679.5833333333334d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 12706.0d + "'", double67 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1820.0d) + "'", double73 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 5214.25d + "'", double81 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 16.25d + "'", double86 == 16.25d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-6.003340578321836d) + "'", double87 == (-6.003340578321836d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 21.75d + "'", double88 == 21.75d);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math.stat.StatUtils.variance(doubleArray0, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 679.5833333333334d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 34.99999999999999d + "'", double6 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution7 = distributionFactory0.createExponentialDistribution(2.2065780869162666E-7d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution8 = distributionFactory0.createNormalDistribution();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(exponentialDistribution7);
        org.junit.Assert.assertNotNull(normalDistribution8);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        org.apache.commons.math.MathException mathException0 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray1 = mathException0.getArguments();
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", objArray4);
        java.lang.Object[] objArray8 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", objArray8);
        mathException5.addSuppressed((java.lang.Throwable) mathException9);
        mathException0.addSuppressed((java.lang.Throwable) mathException9);
        java.lang.String str12 = mathException0.getPattern();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[1225.0]");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = tTestImpl0.tTest(1.053060673855556d, statisticalSummary28, 679.5833333333335d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 679.5833333333335");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl61 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray67 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double76 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray67, doubleArray73, (double) 10.0f);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 1, (int) (short) 0);
        double double81 = tTestImpl61.t((double) 1, doubleArray67);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray88 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (double) 10.0f);
        double double92 = tTestImpl0.tTest(doubleArray67, doubleArray88);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary94 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double95 = tTestImpl0.t(1.5919401533569089d, statisticalSummary94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1820.0d) + "'", double68 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5214.25d + "'", double76 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.5919401533569089d + "'", double81 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3931.0d + "'", double82 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1820.0d) + "'", double83 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1820.0d) + "'", double89 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 679.5833333333334d + "'", double91 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray28 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray28, doubleArray34, (double) 10.0f);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28, (int) (short) 1, (int) (short) 0);
        double double42 = tTestImpl22.t((double) 1, doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution43);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = tTestImpl44.t((double) 1.0f, doubleArray50);
        double[] doubleArray57 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.max(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double61 = tTestImpl22.pairedT(doubleArray50, doubleArray57);
        double double62 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        double double63 = tTestImpl0.tTest(0.0d, doubleArray50);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = tTestImpl0.tTest(statisticalSummary64, statisticalSummary65, 152.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 152.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1820.0d) + "'", double29 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5214.25d + "'", double37 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.5919401533569089d + "'", double42 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.539663200366486d + "'", double52 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12706.0d + "'", double60 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.21195550612870484d + "'", double63 == 0.21195550612870484d);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        java.lang.Object[] objArray3 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", objArray3);
        java.lang.Object[] objArray7 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray7);
        mathException4.addSuppressed((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException8);
        java.lang.Class<?> wildcardClass12 = mathException11.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1225.0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", objArray4);
        java.lang.Object[] objArray8 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", objArray8);
        mathException5.addSuppressed((java.lang.Throwable) mathException9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        mathException11.addSuppressed((java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException12);
        java.lang.Throwable[] throwableArray16 = mathException12.getSuppressed();
        java.lang.Object[] objArray17 = mathException12.getArguments();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray22 = mathException21.getArguments();
        mathException18.addSuppressed((java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", objArray17, (java.lang.Throwable) mathException21);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
    }
}


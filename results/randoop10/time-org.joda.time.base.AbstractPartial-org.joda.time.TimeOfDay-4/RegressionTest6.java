import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test03001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03001");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.LocalDate localDate7 = localDate4.withYear(20);
        org.joda.time.Chronology chronology8 = localDate4.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDate.Property property10 = localDate4.property(dateTimeFieldType9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 1, chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTime(localTime15, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = localDate13.toDateMidnight(dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfEra();
        int int21 = dateMidnight19.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property22 = dateMidnight19.year();
        int int23 = dateMidnight19.getMinuteOfDay();
        org.joda.time.DateMidnight.Property property24 = dateMidnight19.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale26.toLanguageTag();
        org.joda.time.DateMidnight dateMidnight28 = property24.setCopy("1970", locale26);
        int int29 = property10.getMaximumTextLength(locale26);
        org.joda.time.LocalDate localDate30 = property10.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = localDate30.toString("2022-02-22T07:17:02.735Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en-CA" + "'", str27, "en-CA");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test03002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03002");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        mutablePeriod3.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration8, readableInstant9, periodType10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutablePeriod11.add(readableDuration12);
        mutablePeriod11.addMonths((int) '#');
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableDuration17, readableInstant18, periodType19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutablePeriod20.add(readableDuration21);
        mutablePeriod20.addMonths((int) '#');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 1, chronology26);
        int int28 = localDate27.getDayOfYear();
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTime(localTime29, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = localDate27.toDateMidnight(dateTimeZone32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.yearOfEra();
        int int35 = dateMidnight33.getMinuteOfHour();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 100, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime40.copy();
        org.joda.time.Duration duration42 = period38.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight33.plus((org.joda.time.ReadableDuration) duration42);
        mutablePeriod20.add((org.joda.time.ReadableDuration) duration42);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration42);
        mutablePeriod3.setHours(14);
        java.lang.String str48 = mutablePeriod3.toString();
        mutablePeriod3.setWeeks(26171292);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "P35MT14H0.100S" + "'", str48, "P35MT14H0.100S");
    }

    @Test
    public void test03003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03003");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime(dateTimeZone11);
        mutableDateTime12.setDate((long) 26066836);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.addWrapField(26087745);
        org.joda.time.MutableDateTime mutableDateTime18 = property15.roundHalfEven();
        org.joda.time.Period period21 = new org.joda.time.Period((long) (-1), (long) 26061444);
        org.joda.time.format.PeriodFormatter periodFormatter22 = null;
        java.lang.String str23 = period21.toString(periodFormatter22);
        int int24 = period21.getMinutes();
        org.joda.time.Period period26 = period21.withMillis(915);
        org.joda.time.Hours hours27 = period26.toStandardHours();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period30 = period26.withMinutes(928);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT7H14M21.445S" + "'", str23, "PT7H14M21.445S");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test03004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03004");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis(0);
        org.joda.time.LocalDate localDate15 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        int int16 = localDate7.getDayOfMonth();
        org.joda.time.LocalDate.Property property17 = localDate7.weekyear();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay21 = dateMidnight18.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = yearMonthDay21.getFieldTypes();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        java.lang.String str26 = localDate25.toString();
        org.joda.time.LocalDate localDate28 = localDate25.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.year();
        long long35 = chronology29.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay21.withChronologyRetainFields(chronology29);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay21.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.LocalDate localDate40 = localDate7.withField(dateTimeFieldType38, 86399999);
        org.joda.time.LocalDate localDate42 = localDate40.plusMonths(44);
        org.joda.time.LocalDate localDate44 = localDate40.withWeekyear(26162193);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate46 = localDate40.withYearOfCentury(101);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 101 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1147058000L + "'", long35 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test03005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03005");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26103181");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test03006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03006");
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight.Property property7 = dateMidnight5.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay8 = dateMidnight5.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonthDay8.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 1, chronology11);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.year();
        long long22 = chronology16.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay8.withChronologyRetainFields(chronology16);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight24.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = yearMonthDay27.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone30 = dateMidnight29.getZone();
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay27.toDateMidnight(dateTimeZone30);
        int[] intArray36 = chronology16.get((org.joda.time.ReadablePartial) yearMonthDay27, (long) 26069970);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableDuration37, readableInstant38, periodType39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutablePeriod40.add(readableDuration41);
        mutablePeriod40.addSeconds(26061238);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay27.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod40, 1970);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.minusYears((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone50 = dateMidnight49.getZone();
        org.joda.time.DateMidnight.Property property51 = dateMidnight49.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay52 = dateMidnight49.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = yearMonthDay52.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight54.getZone();
        boolean boolean57 = dateTimeZone55.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight59 = yearMonthDay52.toDateMidnight(dateTimeZone55);
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay52.year();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = yearMonthDay52.toDateTimeAtCurrentTime(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = yearMonthDay48.toDateTimeAtCurrentTime(dateTimeZone61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(10, 26090164, 885, 898, 2021, dateTimeZone61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 898 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1147058000L + "'", long22 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test03007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03007");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.lang.String str19 = localDate7.toString("14", locale15);
        java.lang.String str20 = locale15.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withLocale(locale15);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withLocale(locale22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter21.withZone(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay30 = dateMidnight27.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = yearMonthDay30.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Interval interval33 = yearMonthDay30.toInterval(dateTimeZone32);
        long long36 = dateTimeZone32.adjustOffset((long) 26063479, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter21.withZone(dateTimeZone32);
        org.joda.time.Chronology chronology38 = dateTimeFormatter37.getChronolgy();
        java.lang.Integer int39 = dateTimeFormatter37.getPivotYear();
        java.lang.Integer int40 = dateTimeFormatter37.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.parse("0099-02-24T07:16:20.650Z", dateTimeFormatter37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italienisch" + "'", str17, "Italienisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Corea del Sud" + "'", str18, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "14" + "'", str19, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Koreanisch (S\374dkorea)" + "'", str20, "Koreanisch (S\374dkorea)");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Italienisch" + "'", str23, "Italienisch");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 26063479L + "'", long36 == 26063479L);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(chronology38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(int40);
    }

    @Test
    public void test03008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03008");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis(0);
        org.joda.time.LocalDate localDate15 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        int int16 = localDate7.getDayOfMonth();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = localDate7.toString("francese", locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
    }

    @Test
    public void test03009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03009");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(26081440L);
        org.joda.time.MutableDateTime mutableDateTime2 = dateTime1.toMutableDateTime();
        java.lang.Object obj3 = mutableDateTime2.clone();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "1970-01-01T07:14:41.440Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "1970-01-01T07:14:41.440Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "1970-01-01T07:14:41.440Z");
    }

    @Test
    public void test03010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03010");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate.Property property4 = localDate2.year();
        org.joda.time.LocalDate localDate5 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test03011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03011");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) '4');
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        mutableDateTime7.setZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone9);
        java.lang.String str13 = dateTime4.toString();
        org.joda.time.DateTime dateTime15 = dateTime4.plusMinutes(26102728);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime15.withDate(26260581, 26164611, 26186036);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26164611 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0099-02-24T07:18:05.065Z" + "'", str13, "0099-02-24T07:18:05.065Z");
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03012");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withLocale(locale5);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        java.lang.Integer int10 = dateTimeFormatter9.getPivotYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 1, chronology12);
        java.lang.String str14 = localDate13.toString();
        org.joda.time.LocalDate localDate16 = localDate13.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        org.joda.time.Chronology chronology25 = chronology17.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.minuteOfDay();
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) int10, chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) dateTimeFormatter6, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test03013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03013");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int15 = dateTimeField12.getDifference((long) (byte) 10, (long) (-1));
        long long18 = dateTimeField12.set((long) (byte) 100, "1970");
        java.lang.String str20 = dateTimeField12.getAsText((long) 26075615);
        java.lang.String str22 = dateTimeField12.getAsText((long) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 1, chronology26);
        int int28 = localDate27.getDayOfYear();
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTime(localTime29, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = localDate27.toDateMidnight(dateTimeZone32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.yearOfEra();
        int int35 = dateMidnight33.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property36 = dateMidnight33.year();
        org.joda.time.DateMidnight dateMidnight37 = property36.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight39 = property36.setCopy(26090096);
        org.joda.time.DateMidnight dateMidnight40 = property36.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField41 = property36.getField();
        long long43 = dateTimeField41.remainder((long) 26075615);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight44.getZone();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay47 = dateMidnight44.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = yearMonthDay47.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Interval interval50 = yearMonthDay47.toInterval(dateTimeZone49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (short) 1, chronology53);
        java.lang.String str55 = localDate54.toString();
        org.joda.time.LocalDate localDate57 = localDate54.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology58 = localDate57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.secondOfMinute();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 8, chronology58);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay47.withChronologyRetainFields(chronology58);
        org.joda.time.DateMidnight dateMidnight63 = yearMonthDay47.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay47.minusDays(38);
        org.joda.time.LocalDate localDate66 = yearMonthDay47.toLocalDate();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology68);
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime69.copy();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        mutableDateTime70.setZone(dateTimeZone71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) (short) 1, chronology74);
        int int76 = localDate75.getDayOfYear();
        org.joda.time.LocalTime localTime77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = localDate75.toDateTime(localTime77, dateTimeZone78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateMidnight dateMidnight81 = localDate75.toDateMidnight(dateTimeZone80);
        org.joda.time.DateMidnight.Property property82 = dateMidnight81.yearOfEra();
        int int83 = dateMidnight81.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property84 = dateMidnight81.year();
        boolean boolean85 = mutableDateTime70.isBefore((org.joda.time.ReadableInstant) dateMidnight81);
        mutableDateTime70.setMillisOfSecond(3);
        int int88 = mutableDateTime70.getYearOfCentury();
        org.joda.time.DateTime dateTime89 = mutableDateTime70.toDateTime();
        java.util.Locale locale92 = java.util.Locale.forLanguageTag("P35MT0.100S");
        java.lang.String str93 = mutableDateTime70.toString("2022", locale92);
        java.lang.String str94 = dateTimeField41.getAsText((org.joda.time.ReadablePartial) localDate66, 26097830, locale92);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = dateTimeField12.set((long) 26188640, "22 Feb 2022 07:15:35 GMT", locale92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"22 Feb 2022 07:15:35 GMT\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970" + "'", str22, "1970");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 26075615L + "'", long43 == 26075615L);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01" + "'", str55, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 22 + "'", int88 == 22);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2022" + "'", str93, "2022");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "26097830" + "'", str94, "26097830");
    }

    @Test
    public void test03014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03014");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        mutablePeriod3.addWeeks(26077858);
        mutablePeriod3.addSeconds(816);
        mutablePeriod3.addMillis(26266104);
    }

    @Test
    public void test03015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03015");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusYears(100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 1, chronology4);
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate localDate8 = localDate5.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property9 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate10 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = localDate10.minusYears(26073757);
        boolean boolean13 = localDate2.isBefore((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableDuration14, readableInstant15, periodType16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutablePeriod17.add(readableDuration18);
        mutablePeriod17.addYears((int) (short) 100);
        java.lang.Object obj22 = mutablePeriod17.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        int int26 = localDate25.getDayOfYear();
        org.joda.time.LocalTime localTime27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate25.toDateTime(localTime27, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableDuration30, readableInstant31, periodType32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutablePeriod33.add(readableDuration34);
        mutablePeriod33.addMonths((int) '#');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 1, chronology39);
        int int41 = localDate40.getDayOfYear();
        org.joda.time.LocalTime localTime42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate40.toDateTime(localTime42, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = localDate40.toDateMidnight(dateTimeZone45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.yearOfEra();
        int int48 = dateMidnight46.getMinuteOfHour();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 100, chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime53.copy();
        org.joda.time.Duration duration55 = period51.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight46.plus((org.joda.time.ReadableDuration) duration55);
        mutablePeriod33.add((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime58 = dateTime29.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 1, chronology60);
        java.lang.String str62 = localDate61.toString();
        org.joda.time.LocalDate localDate64 = localDate61.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology65 = localDate64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.eras();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.year();
        long long71 = chronology65.add(0L, (long) 26069500, 44);
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration55, chronology65);
        mutablePeriod17.setSeconds(9);
        org.joda.time.LocalDate localDate75 = localDate2.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.LocalDate.Property property76 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate78 = localDate2.withYear(26122158);
        int int79 = localDate2.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT9.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT9.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT9.100S");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1147058000L + "'", long71 == 1147058000L);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test03016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03016");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.addMillis(26069970);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 1, chronology10);
        int int12 = localDate11.getDayOfYear();
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate11.toDateTime(localTime13, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate11.toDateMidnight(dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.yearOfEra();
        int int19 = dateMidnight17.getMinuteOfHour();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 100, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime24.copy();
        org.joda.time.Duration duration26 = period22.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight17.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableDuration28, readableInstant29, periodType30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutablePeriod31.add(readableDuration32);
        mutablePeriod31.addMonths((int) '#');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 1, chronology37);
        int int39 = localDate38.getDayOfYear();
        org.joda.time.LocalTime localTime40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate38.toDateTime(localTime40, dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = localDate38.toDateMidnight(dateTimeZone43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.yearOfEra();
        int int46 = dateMidnight44.getMinuteOfHour();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 100, chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime51.copy();
        org.joda.time.Duration duration53 = period49.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight44.plus((org.joda.time.ReadableDuration) duration53);
        mutablePeriod31.add((org.joda.time.ReadableDuration) duration53);
        boolean boolean56 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (short) 1, chronology58);
        int int60 = localDate59.getDayOfYear();
        org.joda.time.LocalTime localTime61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate59.toDateTime(localTime61, dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = localDate59.toDateMidnight(dateTimeZone64);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.yearOfEra();
        int int67 = dateMidnight65.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property68 = dateMidnight65.year();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight65.plusYears((int) ' ');
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight65);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight65.withYear(666);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((long) (byte) 100, chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime(chronology77);
        org.joda.time.MutableDateTime mutableDateTime79 = mutableDateTime78.copy();
        org.joda.time.Duration duration80 = period76.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime79);
        org.joda.time.Seconds seconds81 = period76.toStandardSeconds();
        org.joda.time.Period period83 = period76.plusYears(0);
        org.joda.time.Period period85 = period76.withHours(26061238);
        org.joda.time.PeriodType periodType86 = period76.getPeriodType();
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateMidnight65, periodType86);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration26, 26069295);
        boolean boolean90 = mutableDateTime5.isAfterNow();
        mutableDateTime5.setMillis((long) 26068787);
        mutableDateTime5.addMonths(26252610);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(seconds81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test03017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03017");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.TimeOfDay timeOfDay1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.Duration duration8 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.setYear(26074093);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(periodType11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        java.lang.String str18 = localDate17.toString();
        org.joda.time.LocalDate localDate20 = localDate17.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        mutablePeriod12.setPeriod((long) (byte) 100, (long) 26062367, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfYear();
        mutableDateTime7.setChronology(chronology21);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        boolean boolean29 = dateTimeZone27.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(dateTimeZone27);
        org.joda.time.Chronology chronology32 = chronology21.withZone(dateTimeZone27);
        java.lang.String str34 = dateTimeZone27.getName((long) 2022);
        org.joda.time.DateTime dateTime35 = yearMonthDay0.toDateTime(timeOfDay1, dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay0.withYear(26131645);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 10);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.years();
        java.lang.String str41 = periodType40.getName();
        org.joda.time.PeriodType periodType42 = periodType40.withMonthsRemoved();
        org.joda.time.Period period43 = period39.normalizedStandard(periodType40);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay37.minus((org.joda.time.ReadablePeriod) period39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.withDayOfMonth(26248233);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26248233 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01" + "'", str18, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Years" + "'", str41, "Years");
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
    }

    @Test
    public void test03018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03018");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test03019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03019");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.DateTime dateTime5 = yearMonthDay3.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay3.minusDays(26094324);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay3.minusMonths(26072167);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusDays(26084973);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay11.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getRangeDurationField();
        long long16 = durationField13.getDifferenceAsLong((long) 26247752, 0L);
        long long19 = durationField13.getMillis(1970L, (long) 26133091);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 5180457600000L + "'", long19 == 5180457600000L);
    }

    @Test
    public void test03020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03020");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 100, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.copy();
        org.joda.time.Duration duration13 = period9.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.setYear(26074093);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(periodType16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 1, chronology21);
        java.lang.String str23 = localDate22.toString();
        org.joda.time.LocalDate localDate25 = localDate22.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        mutablePeriod17.setPeriod((long) (byte) 100, (long) 26062367, chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        mutableDateTime12.setChronology(chronology26);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        boolean boolean34 = dateTimeZone32.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(dateTimeZone32);
        org.joda.time.Chronology chronology37 = chronology26.withZone(dateTimeZone32);
        java.lang.String str39 = dateTimeZone32.getName((long) 2022);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 1, chronology42);
        int int44 = localDate43.getDayOfYear();
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate43.toDateTime(localTime45, dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = localDate43.toDateMidnight(dateTimeZone48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.yearOfEra();
        int int51 = dateMidnight49.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property52 = dateMidnight49.year();
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = property52.getAsText(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.lang.String str56 = locale53.getDisplayScript(locale55);
        java.lang.String str57 = dateTimeZone32.getName((long) 32769, locale53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(26076408, 26073757, 26092142, 21, 26085513, 26214897, 807, dateTimeZone32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26085513 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970" + "'", str54, "1970");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
    }

    @Test
    public void test03021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03021");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(26065744);
        int int6 = localDateTime3.getYear();
        int int7 = localDateTime3.getCenturyOfEra();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(periodType8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) periodType8, dateTimeZone10);
        int int12 = localDateTime11.getDayOfMonth();
        int int13 = localDateTime11.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.millisOfSecond();
        int int15 = localDateTime11.getEra();
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.era();
        org.joda.time.LocalDateTime.Property property17 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withMillisOfDay(26067972);
        int int20 = localDateTime19.getDayOfMonth();
        boolean boolean21 = localDateTime3.equals((java.lang.Object) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime3.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26290020 + "'", int13 == 26290020);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test03022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03022");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        mutableDateTime8.setZoneRetainFields(dateTimeZone11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        mutableDateTime15.setZone(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getName(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone17.getName((long) 26067972, locale23);
        long long26 = dateTimeZone17.nextTransition((long) 2);
        mutableDateTime8.setZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(168, 0, 26113657, 26068787, 28391857, 26138008, 26224192, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26068787 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
    }

    @Test
    public void test03023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03023");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(26062445);
        org.joda.time.DateTime.Property property9 = dateTime6.secondOfMinute();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        java.util.Locale locale13 = new java.util.Locale("French", "coreano (Corea del Sud)");
        int int14 = property9.getMaximumShortTextLength(locale13);
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale18 = new java.util.Locale("1970", "PT0.100S");
        java.lang.String str21 = nameProvider15.getName(locale18, "14", "PT0.100S");
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str26 = nameProvider15.getName(locale22, "ISOChronology[UTC]", "PT0.100S");
        java.lang.String str27 = locale13.getDisplayVariant(locale22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals(locale13.toString(), "french_COREANO (COREA DEL SUD)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertEquals(locale18.toString(), "1970_PT0.100S");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Italienisch" + "'", str23, "Italienisch");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test03024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03024");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        int int19 = yearMonthDay3.getDayOfMonth();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay3.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay22 = property20.addToCopy((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay24 = property20.setCopy("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ISOChronology[UTC]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test03025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03025");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 7, 100L, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withOffsetParsed();
        java.lang.StringBuffer stringBuffer18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay22 = dateMidnight19.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = yearMonthDay22.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay22.plusMonths(23);
        org.joda.time.LocalDate localDate26 = yearMonthDay25.toLocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusYears(26101009);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(stringBuffer18, (org.joda.time.ReadablePartial) localDate26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test03026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03026");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant1 = mutableDateTime0.toInstant();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        mutableDateTime0.setChronology(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.seconds();
        long long12 = durationField10.getValueAsLong((long) 26079926);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 26079L + "'", long12 == 26079L);
    }

    @Test
    public void test03027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03027");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone3);
        java.util.Calendar calendar5 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = calendar5.get(26205437);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26205437");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03028");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType1);
        org.joda.time.PeriodType periodType4 = periodType1.withYearsRemoved();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.LocalDate localDate12 = localDate9.withYear(20);
        org.joda.time.Chronology chronology13 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 26237807, periodType1, chronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType18 = periodType1.getFieldType((-712));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -712");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Years" + "'", str2, "Years");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test03029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03029");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyear();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(1645514076554L, chronology7);
        org.joda.time.DurationField durationField12 = chronology7.days();
        long long15 = durationField12.getDifferenceAsLong(822891955619671829L, 0L);
        long long17 = durationField12.getMillis(15);
        long long20 = durationField12.subtract((long) 26138097, 26169515);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 9524212449L + "'", long15 == 9524212449L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1296000000L + "'", long17 == 1296000000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-2261046069861903L) + "'", long20 == (-2261046069861903L));
    }

    @Test
    public void test03030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03030");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        int int7 = timeOfDay6.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.withMinuteOfHour(3);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 100, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.Duration duration17 = period13.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Period period19 = period13.plusDays((int) (byte) 10);
        int int20 = period19.getHours();
        org.joda.time.Period period22 = period19.plusMonths(2);
        org.joda.time.Period period24 = period19.minusMonths(12);
        org.joda.time.Period period26 = period19.plusWeeks(26073687);
        org.joda.time.Period period27 = period26.negated();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 119);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay6.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay32 = property30.addWrapFieldToCopy(26099010);
        org.joda.time.TimeOfDay timeOfDay33 = property30.getTimeOfDay();
        org.joda.time.DateTimeField dateTimeField34 = property30.getField();
        org.joda.time.DateTimeField dateTimeField35 = property30.getField();
        org.joda.time.TimeOfDay timeOfDay36 = property30.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
    }

    @Test
    public void test03031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03031");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.PeriodType periodType5 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType6 = periodType2.withWeeksRemoved();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        long long11 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.LocalTime localTime13 = property8.addCopy((long) (-292275054));
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(2L, (long) 26067972, periodType2, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField16.add((long) 20, 1645514195708L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514195708 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-27424361L) + "'", long11 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test03032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfDay();
        boolean boolean9 = dateTimeField8.isLenient();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03033");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Seconds seconds3 = period2.toStandardSeconds();
        int int4 = period2.getMonths();
        int int5 = period2.getHours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = period2.getFieldTypes();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.forFields(durationFieldTypeArray6);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(periodType7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = periodType7.getFieldType(70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 70");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test03034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03034");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.lang.String str19 = localDate7.toString("14", locale15);
        java.lang.String str20 = locale15.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withLocale(locale15);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withLocale(locale22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter21.withZone(dateTimeZone25);
        org.joda.time.Chronology chronology27 = dateTimeFormatter21.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 26140191);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime32.copy();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        mutableDateTime32.setZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate30.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter29.withZone(dateTimeZone35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.parse("2022-02-22T07:16:52.894Z", dateTimeFormatter29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "italien" + "'", str17, "italien");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Corea del Sud" + "'", str18, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "14" + "'", str19, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str20, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "italien" + "'", str23, "italien");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
    }

    @Test
    public void test03035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03035");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        mutableDateTime2.setMillisOfSecond(3);
        mutableDateTime2.addWeeks(26067332);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod();
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod22, 2);
        int int25 = mutableDateTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 1, chronology27);
        int int29 = localDate28.getDayOfYear();
        org.joda.time.LocalTime localTime30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDate28.toDateTime(localTime30, dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = localDate28.toDateMidnight(dateTimeZone33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.yearOfEra();
        int int36 = dateMidnight34.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property37 = dateMidnight34.year();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = property37.getAsText(locale38);
        java.lang.String str40 = property37.getAsShortText();
        org.joda.time.DateMidnight dateMidnight41 = property37.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.withYearOfEra((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 1, chronology45);
        int int47 = localDate46.getDayOfYear();
        org.joda.time.LocalTime localTime48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate46.toDateTime(localTime48, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableDuration51, readableInstant52, periodType53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutablePeriod54.add(readableDuration55);
        mutablePeriod54.addMonths((int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 1, chronology60);
        int int62 = localDate61.getDayOfYear();
        org.joda.time.LocalTime localTime63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDate61.toDateTime(localTime63, dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = localDate61.toDateMidnight(dateTimeZone66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.yearOfEra();
        int int69 = dateMidnight67.getMinuteOfHour();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 100, chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology73);
        org.joda.time.MutableDateTime mutableDateTime75 = mutableDateTime74.copy();
        org.joda.time.Duration duration76 = period72.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime75);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight67.plus((org.joda.time.ReadableDuration) duration76);
        mutablePeriod54.add((org.joda.time.ReadableDuration) duration76);
        org.joda.time.DateTime dateTime79 = dateTime50.minus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight41.minus((org.joda.time.ReadableDuration) duration76);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration76, 139);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime2.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDate(26199137, 26214516, 26101963);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26214516 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test03036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03036");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.centuryOfEra();
        mutableDateTime2.setTime(1645514129910L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        java.lang.String str26 = localDate25.toString();
        org.joda.time.LocalDate localDate28 = localDate25.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyearOfCentury();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 7, 100L, chronology29);
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime2.toMutableDateTime(chronology29);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.year();
        java.util.Locale locale37 = java.util.Locale.ITALY;
        java.util.Locale locale38 = locale37.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = mutableDateTime34.toString("2022-02-22T07:17:08.802", locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
    }

    @Test
    public void test03037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03037");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(26086371, (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26086371 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03038");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableDuration6, readableInstant7, periodType8);
        mutablePeriod9.addYears((int) (byte) 0);
        int int12 = mutablePeriod9.getMonths();
        mutablePeriod9.addMinutes((int) (byte) 0);
        int int15 = mutablePeriod9.getMinutes();
        org.joda.time.DateTime dateTime17 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod9, (int) 'a');
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime17.plus((long) 933);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test03039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03039");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay3.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property19.withMinimumValue();
        org.joda.time.DurationField durationField21 = property19.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay23 = property19.setCopy(26077394);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = yearMonthDay23.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
    }

    @Test
    public void test03040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03040");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = property12.setCopy("millisOfDay");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"millisOfDay\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26290648 + "'", int5 == 26290648);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test03041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03041");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(26140562, 182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26140562 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03042");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = dateTime4.getYearOfCentury();
        org.joda.time.DateTime.Property property6 = dateTime4.weekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test03043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03043");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        gregorianCalendar2.setTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight.Property property7 = dateMidnight5.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay8 = dateMidnight5.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonthDay8.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 1, chronology11);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.year();
        long long22 = chronology16.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay8.withChronologyRetainFields(chronology16);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay8.year();
        org.joda.time.YearMonthDay yearMonthDay25 = property24.getYearMonthDay();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        org.joda.time.DateTimeField dateTimeField27 = property24.getField();
        org.joda.time.YearMonthDay yearMonthDay28 = property24.withMinimumValue();
        boolean boolean29 = gregorianCalendar2.after((java.lang.Object) property24);
        java.util.Date date30 = gregorianCalendar2.getTime();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = gregorianCalendar2.getMaximum(26181184);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26181184");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1147058000L + "'", long22 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Feb 22 07:18:10 UTC 2022");
    }

    @Test
    public void test03044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03044");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(26070054);
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        int int9 = localDate7.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 234 + "'", int9 == 234);
    }

    @Test
    public void test03045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period8 = period2.plusDays((int) (byte) 10);
        int int9 = period8.getHours();
        org.joda.time.Period period11 = period8.plusMonths(2);
        int int12 = period8.getWeeks();
        org.joda.time.PeriodType periodType13 = period8.getPeriodType();
        java.lang.String str14 = periodType13.toString();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(periodType13);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PeriodType[Standard]" + "'", str14, "PeriodType[Standard]");
    }

    @Test
    public void test03046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03046");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(26114120, 35, 26234988);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26114120 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03047");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        mutablePeriod3.addMinutes((int) (byte) 0);
        int int9 = mutablePeriod3.getMinutes();
        mutablePeriod3.setMillis(15);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableDuration12, readableInstant13, periodType14);
        mutablePeriod15.addYears((int) (byte) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, chronology19);
        java.lang.String str21 = localDate20.toString();
        org.joda.time.LocalDate localDate23 = localDate20.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property24 = localDate20.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = localDate20.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.Duration duration27 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateTime26);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration27);
        mutablePeriod3.addYears(26186036);
        int int31 = mutablePeriod3.getDays();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test03048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03048");
        java.util.Locale locale2 = new java.util.Locale("T07:15:06.424", "french");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale2.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for t07:15:06.424");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "t07:15:06.424_FRENCH");
    }

    @Test
    public void test03049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03049");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay18.toDateMidnight();
        org.joda.time.Interval interval21 = yearMonthDay18.toInterval();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay18.minusDays(35);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime26.copy();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        mutableDateTime26.setZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate24.toDateTimeAtStartOfDay(dateTimeZone29);
        java.lang.String str32 = dateTimeZone29.getID();
        org.joda.time.DateTime dateTime33 = yearMonthDay23.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay23.minusDays(26063188);
        org.joda.time.LocalDate localDate36 = yearMonthDay23.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Etc/UTC" + "'", str32, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test03050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03050");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        boolean boolean4 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.plusYears((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int20 = dateMidnight13.get(dateTimeFieldType19);
        boolean boolean21 = strSet1.equals((java.lang.Object) dateMidnight13);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight13.withCenturyOfEra(2000);
        int int24 = dateMidnight23.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test03051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03051");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        mutablePeriod3.addMonths((int) '#');
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType8, 5);
        mutablePeriod3.add((long) 26106280);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod3.copy();
        mutablePeriod13.setPeriod(1645514252309L);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(mutablePeriod13);
    }

    @Test
    public void test03052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03052");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTime(localTime8, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = localDate6.toString("14", locale14);
        java.lang.String str19 = locale14.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale14);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withLocale(locale21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter20.withZone(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight26.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = yearMonthDay29.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Interval interval32 = yearMonthDay29.toInterval(dateTimeZone31);
        long long35 = dateTimeZone31.adjustOffset((long) 26063479, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter20.withZone(dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTimeFormatter20.parseDateTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str16, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Corea del Sud" + "'", str17, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "14" + "'", str18, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str19, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str22, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 26063479L + "'", long35 == 26063479L);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test03053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        mutableDateTime3.addMinutes(894);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.LocalDate localDate13 = localDate10.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutableDateTime6.setChronology(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.millis();
        mutableDateTime3.setChronology(chronology14);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime1, chronology14);
        java.lang.Object obj19 = mutableDateTime1.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDateTime(26120756, 26061877, 168, 26066836, 26182203, 26111175, 26131285);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26066836 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "2022-02-22T07:18:11.449Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "2022-02-22T07:18:11.449Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "2022-02-22T07:18:11.449Z");
    }

    @Test
    public void test03054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        int[] intArray7 = localDate5.getValues();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        mutableDateTime9.setZoneRetainFields(dateTimeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths(26076408);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks(472);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime20.withTime(26138097, 26165020, 15, 26081059);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26138097 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 1, 1]");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test03055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property6 = localDate2.weekOfWeekyear();
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 1, chronology10);
        int int12 = localDate11.getDayOfYear();
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate11.toDateTime(localTime13, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate11.toDateMidnight(dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.yearOfEra();
        int int19 = dateMidnight17.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property20 = dateMidnight17.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.plusYears((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int24 = dateMidnight17.get(dateTimeFieldType23);
        org.joda.time.DateTime.Property property25 = dateTime7.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime27 = dateTime7.withMillisOfDay((int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime27.toMutableDateTime();
        org.joda.time.DateTime dateTime30 = dateTime27.minusDays(26061397);
        org.joda.time.DateTime dateTime32 = dateTime27.minus(1645514093152L);
        org.joda.time.DateTime.Property property33 = dateTime27.yearOfCentury();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test03056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03056");
        java.util.Date date3 = new java.util.Date(0, 26085513, 26076408);
        java.util.Date date10 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        int int11 = date10.getSeconds();
        date10.setTime((long) (short) -1);
        java.util.Date date20 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        int int21 = date20.getSeconds();
        boolean boolean22 = date10.after(date20);
        date20.setHours(1970);
        int int25 = date20.getSeconds();
        boolean boolean26 = date3.after(date20);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 1, chronology28);
        java.lang.String str30 = localDate29.toString();
        org.joda.time.LocalDate localDate32 = localDate29.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) boolean26, chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Wed Jul 13 00:00:00 UTC 2247087");
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 44 + "'", int11 == 44);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Jan 24 02:22:44 UTC 26063514");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44 + "'", int21 == 44);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 44 + "'", int25 == 44);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test03057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03057");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 26188868);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test03058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03058");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(26186369, 26237756, 26279, 26188640, 26099010, (-434), 26086690);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26188640 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03059");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        mutablePeriod1.setPeriod((long) (byte) 100, (long) 26062367, chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfYear();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property15 = localTime14.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        long long18 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.LocalTime localTime20 = property15.addCopy((long) (-292275054));
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        org.joda.time.DateMidnight.Property property23 = dateMidnight21.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight21.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonthDay24.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 1, chronology27);
        java.lang.String str29 = localDate28.toString();
        org.joda.time.LocalDate localDate31 = localDate28.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.year();
        long long38 = chronology32.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay24.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay24.year();
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 1, chronology44);
        java.lang.String str46 = localDate45.toString();
        org.joda.time.LocalDate localDate48 = localDate45.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfMinute();
        int int53 = dateTimeField51.getMinimumValue((long) 26073757);
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.lang.String str56 = locale55.toLanguageTag();
        java.lang.String str57 = locale54.getDisplayCountry(locale55);
        int int58 = dateTimeField51.getMaximumTextLength(locale55);
        java.util.Set<java.lang.String> strSet59 = locale55.getUnicodeLocaleAttributes();
        java.lang.String str60 = dateTimeField41.getAsShortText(26071567, locale55);
        java.util.Set<java.lang.String> strSet61 = locale55.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localTime20, locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-27424361L) + "'", long18 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1147058000L + "'", long38 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01" + "'", str46, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "de-DE" + "'", str56, "de-DE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "26071567" + "'", str60, "26071567");
        org.junit.Assert.assertNotNull(strSet61);
    }

    @Test
    public void test03060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.setYear(26074093);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        mutablePeriod10.setPeriod((long) (byte) 100, (long) 26062367, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfYear();
        mutableDateTime5.setChronology(chronology19);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime5.getZone();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone24);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(26061877, (int) (short) 1, 10, 12, 26063479, (int) '#', 26061790, (int) (byte) 100);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 100, chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime39.copy();
        org.joda.time.Duration duration41 = period37.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime40);
        java.lang.String str42 = duration41.toString();
        long long43 = duration41.getMillis();
        java.lang.String str44 = duration41.toString();
        mutablePeriod34.add((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight25.minus((org.joda.time.ReadableDuration) duration41);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0.100S" + "'", str42, "PT0.100S");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0.100S" + "'", str44, "PT0.100S");
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test03061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03061");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        org.joda.time.MutableDateTime mutableDateTime11 = property5.add(26102304);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTimeISO();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        java.lang.String str18 = localDate17.toString();
        org.joda.time.LocalDate localDate20 = localDate17.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyearOfCentury();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 7, 100L, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.minuteOfDay();
        java.lang.String str26 = dateTimeField25.toString();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = dateTimeField25.getAsShortText(26118015, locale28);
        mutableDateTime11.setRounding(dateTimeField25);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01" + "'", str18, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str26, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "26118015" + "'", str30, "26118015");
    }

    @Test
    public void test03062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03062");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.addWeekyears(26073687);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 1, chronology10);
        int int12 = localDate11.getDayOfYear();
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate11.toDateTime(localTime13, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate11.toDateMidnight(dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.yearOfEra();
        int int19 = dateMidnight17.getMinuteOfHour();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 100, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime24.copy();
        org.joda.time.Duration duration26 = period22.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight17.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableDuration28, readableInstant29, periodType30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutablePeriod31.add(readableDuration32);
        mutablePeriod31.addMonths((int) '#');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 1, chronology37);
        int int39 = localDate38.getDayOfYear();
        org.joda.time.LocalTime localTime40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate38.toDateTime(localTime40, dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = localDate38.toDateMidnight(dateTimeZone43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.yearOfEra();
        int int46 = dateMidnight44.getMinuteOfHour();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 100, chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime51.copy();
        org.joda.time.Duration duration53 = period49.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight44.plus((org.joda.time.ReadableDuration) duration53);
        mutablePeriod31.add((org.joda.time.ReadableDuration) duration53);
        boolean boolean56 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (short) 1, chronology58);
        int int60 = localDate59.getDayOfYear();
        org.joda.time.LocalTime localTime61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate59.toDateTime(localTime61, dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime67 = dateTime63.plus((long) 100);
        int int68 = dateTime67.getWeekOfWeekyear();
        boolean boolean70 = dateTime67.isBefore((long) 26062445);
        int int71 = dateTime67.getYear();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((long) (byte) 100, chronology73);
        org.joda.time.Seconds seconds75 = period74.toStandardSeconds();
        org.joda.time.DateTime dateTime76 = dateTime67.plus((org.joda.time.ReadablePeriod) seconds75);
        org.joda.time.DateMidnight dateMidnight77 = dateTime76.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateMidnight77);
        mutablePeriod78.setHours(26085513);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.add((org.joda.time.ReadablePeriod) mutablePeriod78, 26271802);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 685313432604426 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(seconds75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateMidnight77);
    }

    @Test
    public void test03063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03063");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone9);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) localTime4, dateTimeZone9);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        org.joda.time.LocalTime localTime13 = property12.roundCeilingCopy();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        org.joda.time.PeriodType periodType16 = periodType14.withSecondsRemoved();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate localDate22 = localDate19.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property23 = localDate19.weekOfWeekyear();
        org.joda.time.DateTime dateTime24 = localDate19.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property25 = localDate19.dayOfYear();
        org.joda.time.LocalDate localDate27 = localDate19.plusWeeks(0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableDuration28, readableInstant29, periodType30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutablePeriod31.add(readableDuration32);
        mutablePeriod31.addYears((int) (short) 100);
        java.lang.Object obj36 = mutablePeriod31.clone();
        mutablePeriod31.setSeconds(894);
        mutablePeriod31.setMonths(26067310);
        mutablePeriod31.setHours(26063026);
        int int43 = mutablePeriod31.getWeeks();
        org.joda.time.LocalDate localDate44 = localDate27.minus((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        org.joda.time.DateMidnight dateMidnight46 = org.joda.time.DateMidnight.now(chronology45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period48 = new org.joda.time.Period((java.lang.Object) property12, periodType16, chronology45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "P100Y26067310MT26063026H894S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "P100Y26067310MT26063026H894S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "P100Y26067310MT26063026H894S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test03064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03064");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26063513-11-3 16:22:44");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"26063513-11-3 16:22:44\" is malformed at \" 16:22:44\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03065");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("Italian");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("1 Jan 26065413 07:17:50 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1 Jan 26065413 07:17:50 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03066");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        boolean boolean7 = localDate5.isSupported(dateTimeFieldType6);
        java.lang.String str9 = localDate5.toString("1969");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 1, chronology11);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        boolean boolean17 = localDate5.isBefore((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtStartOfDay();
        java.lang.Object obj19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = localTime20.withFields((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        int int27 = timeOfDay26.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.withMinuteOfHour(3);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 100, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime35.copy();
        org.joda.time.Duration duration37 = period33.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Period period39 = period33.plusDays((int) (byte) 10);
        int int40 = period39.getHours();
        org.joda.time.Period period42 = period39.plusMonths(2);
        org.joda.time.Period period44 = period39.minusMonths(12);
        org.joda.time.Period period46 = period39.plusWeeks(26073687);
        org.joda.time.Period period47 = period46.negated();
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay26.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 119);
        int int50 = timeOfDay26.getMinuteOfHour();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property52 = localTime51.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone54 = dateMidnight53.getZone();
        long long55 = property52.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.LocalTime localTime57 = property52.addCopy((long) (-292275054));
        org.joda.time.LocalTime localTime59 = localTime57.plusHours(26075615);
        org.joda.time.Chronology chronology60 = localTime57.getChronology();
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay26.withChronologyRetainFields(chronology60);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(obj19, chronology60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((java.lang.Object) localDate15, chronology60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969" + "'", str9, "1969");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-27424361L) + "'", long55 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(timeOfDay61);
    }

    @Test
    public void test03067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03067");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(2);
        java.lang.String str5 = localDateTime4.toString();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusYears(26217902);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:18:12.074" + "'", str5, "2022-02-22T07:18:12.074");
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test03068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03068");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        mutableDateTime3.addMinutes(894);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.LocalDate localDate13 = localDate10.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutableDateTime6.setChronology(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.millis();
        mutableDateTime3.setChronology(chronology14);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime1, chronology14);
        java.lang.Object obj19 = mutableDateTime1.clone();
        int int20 = mutableDateTime1.getYearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "2022-02-22T07:18:12.188Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "2022-02-22T07:18:12.188Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "2022-02-22T07:18:12.188Z");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
    }

    @Test
    public void test03069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03069");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.Interval interval11 = dateMidnight8.toInterval();
        org.joda.time.DateMidnight.Property property12 = dateMidnight8.dayOfYear();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.DateMidnight.Property property15 = dateMidnight13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = dateMidnight13.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonthDay16.getFieldTypes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, chronology19);
        java.lang.String str21 = localDate20.toString();
        org.joda.time.LocalDate localDate23 = localDate20.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.year();
        long long30 = chronology24.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay16.withChronologyRetainFields(chronology24);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay16.year();
        org.joda.time.YearMonthDay yearMonthDay33 = property32.withMinimumValue();
        org.joda.time.DurationField durationField34 = property32.getRangeDurationField();
        int int35 = property32.getMinimumValue();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 1, chronology38);
        java.lang.String str40 = localDate39.toString();
        org.joda.time.LocalDate localDate42 = localDate39.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        int int47 = dateTimeField45.getMinimumValue((long) 26073757);
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str51 = locale48.getDisplayCountry(locale49);
        int int52 = dateTimeField45.getMaximumTextLength(locale49);
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleAttributes();
        org.joda.time.YearMonthDay yearMonthDay54 = property32.setCopy("3", locale49);
        org.joda.time.YearMonthDay yearMonthDay55 = property32.withMinimumValue();
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.YearMonthDay yearMonthDay58 = property32.setCopy("26118015", locale57);
        java.lang.String str59 = property12.getAsShortText(locale57);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1147058000L + "'", long30 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-292275054) + "'", int35 == (-292275054));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01" + "'", str40, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "de-DE" + "'", str50, "de-DE");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
    }

    @Test
    public void test03070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03070");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone2 = dateMidnight1.getZone();
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(285296517L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, readableDuration8);
        org.joda.time.DateTime.Property property10 = dateTime7.hourOfDay();
        int int11 = dateTime7.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test03071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03071");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.plusYears((int) ' ');
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight8);
        int int15 = localDate14.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test03072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03072");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusYears(100);
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property4 = localDate2.weekyear();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = property4.setCopy("2022-02-22T07:16:52.850");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:16:52.850\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test03073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03073");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime2.copy();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate0.toDateTime(readableInstant8);
        org.joda.time.LocalDate.Property property10 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property11 = localDate0.dayOfWeek();
        int int12 = localDate0.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int14 = localDate0.indexOf(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = localDate0.getChronology();
        org.joda.time.LocalDate localDate17 = localDate0.plusWeeks(26071282);
        org.joda.time.LocalDate localDate19 = localDate17.plusWeeks(26229451);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test03074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03074");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(26065744);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withField(dateTimeFieldType13, 26067332);
        org.joda.time.LocalDateTime.Property property16 = localDateTime5.property(dateTimeFieldType13);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, (long) 0, periodType19, chronology20);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        int int23 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test03075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03075");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26068833);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.Chronology chronology16 = chronology8.withZone(dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getNameKey((long) 26061790);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        long long22 = dateTimeZone12.adjustOffset((long) 969, true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 969L + "'", long22 == 969L);
    }

    @Test
    public void test03076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03076");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        mutableDateTime14.setZoneRetainFields(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        mutablePeriod22.addYears((int) (byte) 0);
        mutableDateTime14.add((org.joda.time.ReadablePeriod) mutablePeriod22, 26062923);
        int int27 = mutablePeriod22.getMonths();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime12.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        mutablePeriod22.setSeconds(26272837);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26292461 + "'", int5 == 26292461);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test03077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03077");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        mutablePeriod3.addMinutes((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        java.lang.Object obj10 = null;
        boolean boolean11 = periodType9.equals(obj10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) periodType12, dateTimeZone14);
        int int16 = localDateTime15.getDayOfMonth();
        int int17 = localDateTime15.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.millisOfSecond();
        int int19 = localDateTime15.getEra();
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.era();
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.dayOfMonth();
        int int22 = localDateTime15.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property23 = localDateTime15.millisOfSecond();
        org.joda.time.Period period28 = new org.joda.time.Period((int) (byte) 10, (-1), 22, 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period28, (int) (byte) -1);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(periodType31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) periodType31, dateTimeZone33);
        int int35 = localDateTime34.getDayOfMonth();
        int int36 = localDateTime34.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.millisOfSecond();
        int int38 = localDateTime34.getEra();
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.era();
        org.joda.time.LocalDateTime.Property property40 = localDateTime34.dayOfMonth();
        int int41 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property42 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime.Property property43 = localDateTime34.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableDuration46, readableInstant47, periodType48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutablePeriod49.add(readableDuration50);
        mutablePeriod49.addMonths((int) '#');
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.millis();
        mutablePeriod49.add(durationFieldType54, 5);
        mutableDateTime45.add(durationFieldType54, 26071282);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime34.withFieldAdded(durationFieldType54, 26070054);
        boolean boolean61 = localDateTime30.isSupported(durationFieldType54);
        int int62 = periodType9.indexOf(durationFieldType54);
        boolean boolean63 = mutablePeriod3.isSupported(durationFieldType54);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType67 = periodType66.withWeeksRemoved();
        org.joda.time.PeriodType periodType68 = periodType66.withWeeksRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withWeeksRemoved();
        org.joda.time.PeriodType periodType70 = periodType69.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1645514239543L, (long) 449, periodType69);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26292475 + "'", int17 == 26292475);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 26292475 + "'", int36 == 26292475);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
    }

    @Test
    public void test03078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03078");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration15, readableInstant16, periodType17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutablePeriod18.add(readableDuration19);
        mutablePeriod18.addMonths((int) '#');
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.millis();
        mutablePeriod18.add(durationFieldType23, 5);
        mutableDateTime14.add(durationFieldType23, 26071282);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime3.withFieldAdded(durationFieldType23, 26070054);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime3.plusMillis(15);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime35 = dateTime32.withFieldAdded(durationFieldType33, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay36 = dateTime32.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = localDateTime3.compareTo((org.joda.time.ReadablePartial) timeOfDay36);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26292509 + "'", int5 == 26292509);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
    }

    @Test
    public void test03079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03079");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.yearOfEra();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.Instant instant5 = instant3.plus((long) '#');
        org.joda.time.Instant instant6 = instant5.toInstant();
        int int7 = property2.compareTo((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateMidnight dateMidnight8 = property2.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = property2.roundCeilingCopy();
        org.joda.time.DurationField durationField10 = property2.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test03080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03080");
        org.joda.time.Period period3 = new org.joda.time.Period((long) 10);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.PeriodType periodType6 = periodType4.withMonthsRemoved();
        org.joda.time.Period period7 = period3.normalizedStandard(periodType4);
        org.joda.time.PeriodType periodType8 = periodType4.withMinutesRemoved();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 1, chronology10);
        java.lang.String str12 = localDate11.toString();
        org.joda.time.LocalDate localDate14 = localDate11.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.years();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.years();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 26069958L, periodType8, chronology15);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod19.addHours(41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Years" + "'", str5, "Years");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test03081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03081");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        int int5 = localDate4.getDayOfYear();
        org.joda.time.LocalTime localTime6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate4.toDateTime(localTime6, dateTimeZone7);
        boolean boolean9 = strSet1.contains((java.lang.Object) dateTimeZone7);
        java.util.Collection<java.lang.String> strCollection10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = strSet1.addAll(strCollection10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03082");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime12 = dateTime5.withFieldAdded(durationFieldType10, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime5.withEra(26078357);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26078357 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test03083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03083");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property6 = localDate2.weekOfWeekyear();
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property8 = localDate2.dayOfYear();
        org.joda.time.LocalDate localDate10 = localDate2.withWeekyear(26118015);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate10.withDayOfMonth(26236061);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26236061 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test03084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03084");
        java.util.Date date5 = new java.util.Date(608, 26067310, 973, 99, 26077394);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromDateFields(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 01 10:14:00 UTC 2174836");
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test03085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03085");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant1 = mutableDateTime0.toInstant();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now(dateTimeZone3);
        mutableDateTime0.setZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant8 = mutableDateTime0.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfYear(26254185);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26254185 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test03086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03086");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone2 = dateMidnight1.getZone();
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 26081059, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plusYears(26092895);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.withYear(26114120);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusYears(0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test03087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03087");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime2.copy();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtStartOfDay(dateTimeZone5);
        java.lang.String str8 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 1, chronology11);
        int int13 = localDate12.getDayOfYear();
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTime(localTime14, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfEra();
        int int20 = dateMidnight18.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property21 = dateMidnight18.year();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = locale22.getDisplayScript(locale24);
        java.lang.String str26 = dateTimeZone5.getShortName((long) 666, locale24);
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale27.getCountry();
        java.lang.String str29 = locale24.getDisplayName(locale27);
        java.lang.String str30 = locale27.getDisplayLanguage();
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970" + "'", str23, "1970");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "IT" + "'", str28, "IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tedesco (Germania)" + "'", str29, "tedesco (Germania)");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str30, "\u610f\u5927\u5229\u6587");
    }

    @Test
    public void test03088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03088");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        java.lang.String str3 = property1.getAsText();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.LocalTime localTime5 = property1.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property1.getField();
        org.joda.time.LocalTime localTime8 = property1.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime9 = property1.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = localTime9.toString("PT0.010S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "18" + "'", str3, "18");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test03089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03089");
        java.io.IOException iOException1 = new java.io.IOException();
        java.io.IOException iOException2 = new java.io.IOException("", (java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = iOException3.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test03090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03090");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay18.toDateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.weekOfWeekyear();
        int int22 = dateMidnight20.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight24 = dateMidnight20.withYearOfCentury(26217674);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26217674 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
    }

    @Test
    public void test03091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03091");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay3.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property19.withMinimumValue();
        int int21 = property19.getMaximumValueOverall();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 1, chronology23);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTime(localTime26, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate24.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        int int32 = dateMidnight30.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property33 = dateMidnight30.year();
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = property33.getAsText(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale34.getDisplayScript(locale36);
        boolean boolean38 = locale34.hasExtensions();
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale34.getDisplayScript(locale39);
        java.lang.String str41 = property19.getAsShortText(locale39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = locale39.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
    }

    @Test
    public void test03092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03092");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime2.copy();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtStartOfDay(dateTimeZone5);
        int int8 = localDate0.getYearOfCentury();
        org.joda.time.LocalDate.Property property9 = localDate0.year();
        org.joda.time.LocalDate localDate11 = localDate0.plusYears(715);
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test03093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03093");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.year();
        long long11 = dateTimeField8.getDifferenceAsLong((long) 26064394, (long) ' ');
        java.lang.String str13 = dateTimeField8.getAsText(259200000L);
        java.lang.String str14 = dateTimeField8.getName();
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField8.getAsShortText(26136305, locale16);
        long long20 = dateTimeField8.getDifferenceAsLong(0L, (long) 26102923);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "year" + "'", str14, "year");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "26136305" + "'", str17, "26136305");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test03094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03094");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableDuration5, readableInstant6, periodType7);
        mutablePeriod8.addYears((int) (byte) 0);
        int int11 = mutablePeriod8.getMonths();
        mutablePeriod8.addMinutes((int) (byte) 0);
        mutablePeriod8.addMonths((int) 'x');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod8, (int) (short) 100);
        int int18 = localDateTime17.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusWeeks(26070203);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMonths(26117500);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusSeconds(807);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test03095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03095");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate.Property property4 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        int int6 = property4.getMaximumValueOverall();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        java.lang.String str11 = periodType10.getName();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.PeriodType periodType13 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType14 = periodType10.withWeeksRemoved();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property16 = localTime15.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        long long19 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.LocalTime localTime21 = property16.addCopy((long) (-292275054));
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(2L, (long) 26067972, periodType10, chronology22);
        org.joda.time.Period period24 = new org.joda.time.Period((long) 637, chronology22);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.secondOfMinute();
        org.joda.time.DurationField durationField27 = chronology22.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((java.lang.Object) property4, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Years" + "'", str11, "Years");
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-27424361L) + "'", long19 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test03096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03096");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(0L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.Duration duration8 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Period period9 = period4.toPeriod();
        org.joda.time.Period period11 = period9.minusWeeks(687120000);
        org.joda.time.Period period13 = period9.minusDays(38);
        org.joda.time.LocalTime localTime14 = localTime1.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period15 = period9.toPeriod();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test03097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03097");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property6 = localDate2.weekOfWeekyear();
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property8 = localDate2.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property8.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = localDate9.toDateMidnight(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test03098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03098");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime9.era();
        int int12 = property11.getMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03099");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(26065744);
        java.util.Date date6 = localDateTime3.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfMonth(26232555);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26232555 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:18:13 UTC 2022");
    }

    @Test
    public void test03100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03100");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.Period period16 = new org.joda.time.Period((int) (byte) 10, (-1), 22, 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period16, (int) (byte) -1);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(periodType19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) periodType19, dateTimeZone21);
        int int23 = localDateTime22.getDayOfMonth();
        int int24 = localDateTime22.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfSecond();
        int int26 = localDateTime22.getEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime22.era();
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.dayOfMonth();
        int int29 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property30 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime.Property property31 = localDateTime22.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableDuration34, readableInstant35, periodType36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutablePeriod37.add(readableDuration38);
        mutablePeriod37.addMonths((int) '#');
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.millis();
        mutablePeriod37.add(durationFieldType42, 5);
        mutableDateTime33.add(durationFieldType42, 26071282);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime22.withFieldAdded(durationFieldType42, 26070054);
        boolean boolean49 = localDateTime18.isSupported(durationFieldType42);
        org.joda.time.DateTime dateTime50 = localDateTime18.toDateTime();
        int int51 = localDateTime18.getWeekyear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26293565 + "'", int5 == 26293565);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26293565 + "'", int24 == 26293565);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
    }

    @Test
    public void test03101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03101");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(894);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableDuration13, readableInstant14, periodType15);
        mutablePeriod16.addYears((int) (byte) 0);
        int int19 = mutablePeriod16.getMonths();
        mutablePeriod16.addMinutes((int) (byte) 0);
        mutablePeriod16.addDays((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, 35);
        int int26 = dateTime10.getDayOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test03102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03102");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withField(dateTimeFieldType7, 26067332);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'x');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfSecond();
        int int13 = localDateTime11.getMillisOfDay();
        int int14 = localDateTime11.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withMillisOfDay(26175588);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDayOfMonth(26197151);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26197151 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26293614 + "'", int13 == 26293614);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 13 + "'", int14 == 13);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test03103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03103");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(26097958, 894, 26129834);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 894 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03104");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.plus((long) '#');
        org.joda.time.Instant instant4 = instant0.minus((long) 59);
        org.joda.time.Period period7 = new org.joda.time.Period((long) (-1), (long) 26061444);
        org.joda.time.format.PeriodFormatter periodFormatter8 = null;
        java.lang.String str9 = period7.toString(periodFormatter8);
        org.joda.time.Weeks weeks10 = period7.toStandardWeeks();
        org.joda.time.format.PeriodFormatter periodFormatter11 = null;
        java.lang.String str12 = period7.toString(periodFormatter11);
        org.joda.time.Duration duration13 = period7.toStandardDuration();
        org.joda.time.Instant instant14 = instant4.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant16 = instant14.minus((long) 26071567);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT7H14M21.445S" + "'", str9, "PT7H14M21.445S");
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT7H14M21.445S" + "'", str12, "PT7H14M21.445S");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test03105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03105");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay((int) ' ', 26061238, 3, 26061397);
        java.util.Calendar.Builder builder9 = builder0.setLenient(false);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder14 = builder11.set(26187689, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03106");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis(0);
        org.joda.time.LocalDate localDate15 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        java.lang.String str19 = localDate18.toString();
        org.joda.time.LocalDate localDate21 = localDate18.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyear();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.Duration duration25 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfDay(26061444);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test03107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTime(localTime17, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfEra();
        int int23 = dateMidnight21.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property24 = dateMidnight21.year();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.plusYears((int) ' ');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight21.plusDays(26063479);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plusYears(190);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        java.lang.String str32 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType31);
        org.joda.time.PeriodType periodType34 = periodType31.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType31.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateMidnight30, periodType35);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod36.copy();
        mutablePeriod37.clear();
        int int39 = mutablePeriod37.getMinutes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Years" + "'", str32, "Years");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test03108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03108");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTime(localTime8, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = localDate6.toString("14", locale14);
        java.lang.String str19 = locale14.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale14);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withLocale(locale21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter20.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTimeFormatter20.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 26140191);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime31.copy();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        mutableDateTime31.setZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate29.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter28.withZone(dateTimeZone34);
        int int38 = dateTimeFormatter28.getDefaultYear();
        java.lang.StringBuffer stringBuffer39 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter28.printTo(stringBuffer39, (long) 26205870);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str16, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Corea del Sud" + "'", str17, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "14" + "'", str18, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str19, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str22, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
    }

    @Test
    public void test03109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03109");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        mutableDateTime2.setMillisOfSecond(3);
        mutableDateTime2.addWeeks(26067332);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod();
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod22, 2);
        int int25 = mutableDateTime2.getMillisOfSecond();
        mutableDateTime2.addMillis(26084032);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime2.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setSecondOfDay(26218043);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26218043 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test03110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03110");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withWeeksRemoved();
        org.joda.time.PeriodType periodType3 = periodType1.withWeeksRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withMonthsRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 1, chronology7);
        int int9 = localDate8.getDayOfYear();
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate8.toDateTime(localTime10, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(26062445);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight16 = dateTime12.toDateMidnight();
        boolean boolean17 = periodType5.equals((java.lang.Object) dateMidnight16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period18 = new org.joda.time.Period((java.lang.Object) "ITA", periodType5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ITA\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03111");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(15, 26280866);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26280866 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03112");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("Italian");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("2022-02-22T07:15:25.001");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:15:25.001 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03113");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis((-1));
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear(1);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) periodType9, dateTimeZone11);
        int int13 = localDateTime12.getDayOfMonth();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        int int16 = localDateTime12.getEra();
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.era();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.dayOfMonth();
        int int19 = localDateTime12.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.millisOfSecond();
        org.joda.time.Period period25 = new org.joda.time.Period((int) (byte) 10, (-1), 22, 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime12.withPeriodAdded((org.joda.time.ReadablePeriod) period25, (int) (byte) -1);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(periodType28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) periodType28, dateTimeZone30);
        int int32 = localDateTime31.getDayOfMonth();
        int int33 = localDateTime31.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.millisOfSecond();
        int int35 = localDateTime31.getEra();
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.era();
        org.joda.time.LocalDateTime.Property property37 = localDateTime31.dayOfMonth();
        int int38 = localDateTime31.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property39 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime.Property property40 = localDateTime31.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(readableDuration43, readableInstant44, periodType45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutablePeriod46.add(readableDuration47);
        mutablePeriod46.addMonths((int) '#');
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.millis();
        mutablePeriod46.add(durationFieldType51, 5);
        mutableDateTime42.add(durationFieldType51, 26071282);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime31.withFieldAdded(durationFieldType51, 26070054);
        boolean boolean58 = localDateTime27.isSupported(durationFieldType51);
        java.lang.String str59 = durationFieldType51.getName();
        org.joda.time.DateTime dateTime61 = dateTime6.withFieldAdded(durationFieldType51, 894);
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime mutableDateTime63 = mutableDateTime62.copy();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(readableDuration64, readableInstant65, periodType66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutablePeriod67.add(readableDuration68);
        mutablePeriod67.addSeconds(26061238);
        mutablePeriod67.addMillis((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime75 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.Duration duration76 = mutablePeriod67.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime75);
        long long77 = duration76.getMillis();
        mutableDateTime62.add((org.joda.time.ReadableDuration) duration76);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableDuration) duration76, periodType79);
        org.joda.time.DateTime dateTime82 = dateTime61.minusYears(26181980);
        boolean boolean83 = dateTime82.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 26294149 + "'", int14 == 26294149);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 26294149 + "'", int33 == 26294149);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "millis" + "'", str59, "millis");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 26061238000L + "'", long77 == 26061238000L);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test03114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03114");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.yearOfEra();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.Instant instant5 = instant3.plus((long) '#');
        org.joda.time.Instant instant6 = instant5.toInstant();
        int int7 = property2.compareTo((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Instant instant9 = instant6.minus((long) 26072320);
        org.joda.time.Instant instant11 = instant9.plus((long) 26128514);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant14 = instant9.withDurationAdded(1645514235652L, 26085513);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514235652 * 26085513");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test03115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03115");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight2.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27424361L) + "'", long4 == (-27424361L));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test03116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03116");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        boolean boolean11 = dateMidnight8.equals((java.lang.Object) 1L);
        int int12 = dateMidnight8.getMinuteOfDay();
        org.joda.time.DateMidnight.Property property13 = dateMidnight8.centuryOfEra();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate16 = localDate14.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusHours(26076640);
        org.joda.time.DateTime dateTime21 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 1, chronology23);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTime(localTime26, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate24.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        int int32 = dateMidnight30.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property33 = dateMidnight30.year();
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = property33.getAsText(locale34);
        java.lang.String str36 = property33.getAsShortText();
        org.joda.time.DateMidnight dateMidnight38 = property33.setCopy(10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 1, chronology40);
        int int42 = localDate41.getDayOfYear();
        org.joda.time.LocalTime localTime43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate41.toDateTime(localTime43, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = localDate41.toDateMidnight(dateTimeZone46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.yearOfEra();
        int int49 = dateMidnight47.getMinuteOfHour();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 100, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime54.copy();
        org.joda.time.Duration duration56 = period52.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight47.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight38.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTime dateTime59 = dateTime21.minus((org.joda.time.ReadableDuration) duration56);
        java.lang.String str60 = duration56.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (short) 1, chronology64);
        java.lang.String str66 = localDate65.toString();
        org.joda.time.LocalDate localDate68 = localDate65.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology69 = localDate68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.weekyearOfCentury();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 7, 100L, chronology69);
        org.joda.time.Duration duration72 = period71.toStandardDuration();
        int int73 = duration56.compareTo((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration56);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970" + "'", str36, "1970");
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0.100S" + "'", str60, "PT0.100S");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01" + "'", str66, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(dateMidnight74);
    }

    @Test
    public void test03117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03117");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date7 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        java.lang.String str8 = date7.toLocaleString();
        int int9 = date7.getTimezoneOffset();
        calendar0.setTime(date7);
        date7.setMonth(26127216);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromDateFields(date7);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=822422887978964000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=26063513,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=307,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=22,SECOND=44,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date7.toString(), "Sat Jan 03 16:22:44 UTC 28240781");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "26063513-11-3 16:22:44" + "'", str8, "26063513-11-3 16:22:44");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test03118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03118");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 7, 100L, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology17.getDateTimeMillis(2172936, 26122365, 26277596, 26236402, 26279, 26092524, 26064003);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26236402 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test03119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03119");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.centuryOfEra();
        mutableDateTime2.setTime(1645514129910L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        java.lang.String str26 = localDate25.toString();
        org.joda.time.LocalDate localDate28 = localDate25.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyearOfCentury();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 7, 100L, chronology29);
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime2.toMutableDateTime(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfYear(26201844);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26201844 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test03120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03120");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        org.joda.time.DateTime dateTime3 = dateTime1.plusWeeks(26089534);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyear();
        java.lang.String str12 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.year();
        org.joda.time.DateTime dateTime15 = dateTime3.toDateTime(chronology10);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = dateMidnight16.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = yearMonthDay19.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay19.toDateMidnight(dateTimeZone22);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay19.plusDays(10);
        int int29 = yearMonthDay28.getMonthOfYear();
        org.joda.time.DateTime dateTime30 = dateTime3.withFields((org.joda.time.ReadablePartial) yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test03121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03121");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.hours();
        org.joda.time.DurationField durationField9 = chronology6.seconds();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test03122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03122");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        boolean boolean3 = strSet2.isEmpty();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test03123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03123");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = dateTimeFormatter4.parseLocalDateTime("00:02:16.689");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test03124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03124");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.joda.time.LocalTime localTime4 = property1.addWrapFieldToCopy((int) 'a');
        org.joda.time.LocalTime localTime6 = localTime4.minusMillis(26072569);
        org.joda.time.LocalTime.Property property7 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime9 = property7.addNoWrapToCopy(26141855);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = property7.setCopy("minutes");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"minutes\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test03125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03125");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableDuration6, readableInstant7, periodType8);
        mutablePeriod9.addYears((int) (byte) 0);
        int int12 = mutablePeriod9.getMonths();
        mutablePeriod9.addMinutes((int) (byte) 0);
        int int15 = mutablePeriod9.getMinutes();
        org.joda.time.DateTime dateTime17 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod9, (int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime5.withMillis((long) 26072569);
        org.joda.time.DateTime.Property property20 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime21 = property20.roundCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26091056);
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay26 = property25.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay27 = property25.getTimeOfDay();
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setVariant("Italian");
        java.util.Locale locale31 = builder30.build();
        java.util.Locale locale32 = builder30.build();
        int int33 = property25.getMaximumShortTextLength(locale32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = property20.setCopy("", locale32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
    }

    @Test
    public void test03126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03126");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 22);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar4 = dateTime2.toGregorianCalendar();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        gregorianCalendar4.setTimeZone(timeZone5);
        boolean boolean7 = localTime1.equals((java.lang.Object) gregorianCalendar4);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar10 = dateTime8.toGregorianCalendar();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("PT0.100S");
        gregorianCalendar10.setTimeZone(timeZone12);
        gregorianCalendar4.setTimeZone(timeZone12);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar4.clear(26131285);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26131285");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test03127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03127");
        java.util.Locale locale3 = new java.util.Locale("PT0.011S", "de-DE", "2022-02-22T07:16:54.767Z");
        org.junit.Assert.assertEquals(locale3.toString(), "pt0.011s_DE-DE_2022-02-22T07:16:54.767Z");
    }

    @Test
    public void test03128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03128");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTime(localTime8, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = localDate6.toString("14", locale14);
        java.lang.String str19 = locale14.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale14);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withLocale(locale21);
        org.joda.time.Chronology chronology24 = dateTimeFormatter20.getChronolgy();
        java.lang.Appendable appendable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter20.printTo(appendable25, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str16, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Corea del Sud" + "'", str17, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "14" + "'", str18, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str19, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str22, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
    }

    @Test
    public void test03129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03129");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("Italian");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 1, chronology4);
        int int6 = localDate5.getDayOfYear();
        org.joda.time.LocalTime localTime7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate5.toDateTime(localTime7, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = localDate5.toDateMidnight(dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.yearOfEra();
        int int13 = dateMidnight11.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property14 = dateMidnight11.year();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = property14.getAsText(locale15);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayScript(locale17);
        boolean boolean19 = locale15.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale15.getDisplayScript(locale20);
        java.util.Locale.Builder builder22 = builder0.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder0.setUnicodeLocaleKeyword("2022-02-22T07:14:46.489", "1970-01-01T07:14:55.175Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-22T07:14:46.489 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970" + "'", str16, "1970");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test03130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03130");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.Period period10 = new org.joda.time.Period((long) 7, 100L, chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        int int15 = localDate14.getDayOfYear();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate14.toDateTime(localTime16, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfEra();
        int int22 = dateMidnight20.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property23 = dateMidnight20.year();
        org.joda.time.DateMidnight.Property property24 = dateMidnight20.centuryOfEra();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str27 = durationFieldType26.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period29 = period25.withField(durationFieldType26, 716);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weekyears'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyears" + "'", str27, "weekyears");
    }

    @Test
    public void test03131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03131");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTime(localTime17, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfEra();
        int int23 = dateMidnight21.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property24 = dateMidnight21.year();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.plusYears((int) ' ');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight21.plusDays(26063479);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plusYears(190);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        java.lang.String str32 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType31);
        org.joda.time.PeriodType periodType34 = periodType31.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType31.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateMidnight30, periodType35);
        int int37 = mutablePeriod36.getSeconds();
        boolean boolean39 = mutablePeriod36.equals((java.lang.Object) "Property[minuteOfHour]");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime41.copy();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 1, chronology46);
        int int48 = localDate47.getDayOfYear();
        org.joda.time.LocalTime localTime49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate47.toDateTime(localTime49, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = localDate47.toDateMidnight(dateTimeZone52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.yearOfEra();
        int int55 = dateMidnight53.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property56 = dateMidnight53.year();
        boolean boolean57 = mutableDateTime42.isBefore((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.months();
        mutableDateTime42.add(durationFieldType58, 26064003);
        int int61 = mutablePeriod36.get(durationFieldType58);
        mutablePeriod36.addYears(248);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Years" + "'", str32, "Years");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test03132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03132");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay3.year();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = yearMonthDay3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime13.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay(26133204);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26133204 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03133");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableDuration3, readableInstant4, periodType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutablePeriod6.add(readableDuration7);
        mutablePeriod6.addYears((int) (short) 100);
        java.lang.Object obj11 = mutablePeriod6.clone();
        mutablePeriod6.setSeconds(894);
        mutablePeriod6.addSeconds(894);
        mutablePeriod6.setPeriod((long) '#');
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod6.copy();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 10);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        java.lang.String str25 = periodType24.getName();
        org.joda.time.PeriodType periodType26 = periodType24.withMonthsRemoved();
        org.joda.time.Period period27 = period23.normalizedStandard(periodType24);
        org.joda.time.PeriodType periodType28 = periodType24.withMinutesRemoved();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 1, chronology30);
        java.lang.String str32 = localDate31.toString();
        org.joda.time.LocalDate localDate34 = localDate31.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.years();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.years();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 26069958L, periodType28, chronology35);
        mutablePeriod18.setPeriod(26061238000L, chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(713, 26294987, 26282799, chronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26294987 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "P43WT15H13M58S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "P43WT15H13M58S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "P43WT15H13M58S");
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Years" + "'", str25, "Years");
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01" + "'", str32, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test03134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03134");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime11.withYear(26245930);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime11.withSecondOfMinute(26291659);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26291659 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test03135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03135");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        mutableDateTime7.addMinutes(894);
        boolean boolean10 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 1, chronology12);
        java.lang.String str14 = localDate13.toString();
        org.joda.time.LocalDate localDate16 = localDate13.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property17 = localDate13.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 1, chronology21);
        int int23 = localDate22.getDayOfYear();
        org.joda.time.LocalTime localTime24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate22.toDateTime(localTime24, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = localDate22.toDateMidnight(dateTimeZone27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.yearOfEra();
        int int30 = dateMidnight28.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property31 = dateMidnight28.year();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight28.plusYears((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int35 = dateMidnight28.get(dateTimeFieldType34);
        org.joda.time.DateTime.Property property36 = dateTime18.property(dateTimeFieldType34);
        org.joda.time.DateTime dateTime38 = dateTime18.withMillisOfDay((int) (short) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 100, chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime43.copy();
        org.joda.time.Duration duration45 = period41.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime44);
        mutableDateTime44.setYear(26074093);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(periodType48);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (short) 1, chronology53);
        java.lang.String str55 = localDate54.toString();
        org.joda.time.LocalDate localDate57 = localDate54.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology58 = localDate57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.eras();
        mutablePeriod49.setPeriod((long) (byte) 100, (long) 26062367, chronology58);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.dayOfYear();
        mutableDateTime44.setChronology(chronology58);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight64.getZone();
        boolean boolean67 = dateTimeZone65.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) 26081059, dateTimeZone65);
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime44.toMutableDateTime(dateTimeZone65);
        java.lang.Object obj70 = mutableDateTime69.clone();
        boolean boolean71 = dateTime18.isEqual((org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.Period period73 = new org.joda.time.Period((long) 10);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.years();
        java.lang.String str75 = periodType74.getName();
        org.joda.time.PeriodType periodType76 = periodType74.withMonthsRemoved();
        org.joda.time.Period period77 = period73.normalizedStandard(periodType74);
        org.joda.time.PeriodType periodType78 = periodType74.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime69, periodType78);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime69.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime81 = property80.roundHalfCeiling();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01" + "'", str55, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(obj70);
// flaky:         org.junit.Assert.assertEquals(obj70.toString(), "26074093-02-22T07:18:15.459Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "26074093-02-22T07:18:15.459Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "26074093-02-22T07:18:15.459Z");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Years" + "'", str75, "Years");
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
    }

    @Test
    public void test03136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03136");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        mutablePeriod3.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration8, readableInstant9, periodType10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutablePeriod11.add(readableDuration12);
        mutablePeriod11.addMonths((int) '#');
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        mutablePeriod11.add((-1L));
        mutablePeriod11.addDays(32769);
        mutablePeriod11.add((long) 687120000);
        mutablePeriod11.addHours(26175588);
        mutablePeriod11.addMinutes(26188442);
    }

    @Test
    public void test03137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03137");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime10 = property5.add((long) 26114272);
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26091056);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay14 = property13.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay15 = property13.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = property13.setCopy((int) 'a');
        org.joda.time.DurationField durationField18 = property13.getRangeDurationField();
        boolean boolean19 = mutableDateTime10.equals((java.lang.Object) property13);
        int int20 = property13.getMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 999 + "'", int20 == 999);
    }

    @Test
    public void test03138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03138");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime3.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.year();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime18 = property14.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfCentury(26173009);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26173009 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26295694 + "'", int5 == 26295694);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test03139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03139");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(26242000, 67114809, 26140330);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26242000 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03140");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withMillis((long) ' ');
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusMonths(867);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withYearOfEra(719);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate21 = localDate19.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtCurrentTime(dateTimeZone22);
        boolean boolean24 = dateMidnight13.equals((java.lang.Object) localDate21);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03141");
        java.util.Date date3 = new java.util.Date(26069970, 26152111, 26099010);
        java.lang.String str4 = date3.toGMTString();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Mar 30 00:00:00 GMT 28322669");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "30 Mar 28322669 00:00:00 GMT" + "'", str4, "30 Mar 28322669 00:00:00 GMT");
    }

    @Test
    public void test03142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03142");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.setYear(26074093);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        mutablePeriod10.setPeriod((long) (byte) 100, (long) 26062367, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfYear();
        mutableDateTime5.setChronology(chronology19);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime5.getZone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime26.copy();
        mutableDateTime26.addMinutes(0);
        mutableDateTime26.setSecondOfDay(22);
        org.joda.time.Chronology chronology32 = null;
        mutableDateTime26.setChronology(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime26.set(dateTimeFieldType34, 26069958);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundCeiling();
        mutableDateTime26.setTime((org.joda.time.ReadableInstant) mutableDateTime40);
        int int42 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.DateTimeField dateTimeField43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = mutableDateTime40.get(dateTimeField43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeField must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test03143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03143");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        int int12 = durationField10.getValue(1645514115611L);
        long long15 = durationField10.getMillis(26088944, (long) 26080940);
        long long18 = durationField10.add((long) 26221063, 26247428);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27425235 + "'", int12 == 27425235);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1565336640000L + "'", long15 == 1565336640000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1574871901063L + "'", long18 == 1574871901063L);
    }

    @Test
    public void test03144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03144");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime3.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.withMinuteOfHour(4);
        org.joda.time.LocalDateTime.Property property14 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        int int16 = localDateTime15.getEra();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26295848 + "'", int5 == 26295848);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test03145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03145");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) 26191301);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03146");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(248);
        int int13 = dateTime12.getYear();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime12.toGregorianCalendar();
        gregorianCalendar14.set(21731, 26193995, 26072867, 26097985, 26198483);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
    }

    @Test
    public void test03147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03147");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone3);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Calendar.Builder builder7 = builder0.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder10 = builder0.set(26256155, 867);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03148");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getRangeDurationField();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 1, chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTime(localTime15, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = localDate13.toDateMidnight(dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfEra();
        int int21 = dateMidnight19.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property22 = dateMidnight19.year();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = property22.getAsText(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale23.getDisplayScript(locale25);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale23.getDisplayScript(locale27);
        java.lang.String str29 = locale10.getDisplayVariant(locale27);
        java.lang.String str30 = dateTimeField7.getAsShortText((int) (short) 100, locale27);
        org.joda.time.DurationField durationField31 = dateTimeField7.getLeapDurationField();
        org.joda.time.DurationField durationField32 = dateTimeField7.getLeapDurationField();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970" + "'", str24, "1970");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertNull(durationField32);
    }

    @Test
    public void test03149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03149");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay3.plusDays(10);
        org.joda.time.LocalDate localDate13 = yearMonthDay3.toLocalDate();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate localDate22 = localDate19.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 7, 100L, chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) 424, chronology23);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) yearMonthDay3, chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.YearMonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test03150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03150");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        mutablePeriod3.addMinutes((int) (byte) 0);
        int int9 = mutablePeriod3.getMinutes();
        org.joda.time.Period period10 = mutablePeriod3.toPeriod();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration11, readableInstant12, periodType13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutablePeriod14.add(readableDuration15);
        mutablePeriod14.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutablePeriod22.add(readableDuration23);
        mutablePeriod22.addMonths((int) '#');
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableDuration28, readableInstant29, periodType30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutablePeriod31.add(readableDuration32);
        mutablePeriod31.addMonths((int) '#');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 1, chronology37);
        int int39 = localDate38.getDayOfYear();
        org.joda.time.LocalTime localTime40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDate38.toDateTime(localTime40, dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = localDate38.toDateMidnight(dateTimeZone43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.yearOfEra();
        int int46 = dateMidnight44.getMinuteOfHour();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 100, chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime51.copy();
        org.joda.time.Duration duration53 = period49.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight44.plus((org.joda.time.ReadableDuration) duration53);
        mutablePeriod31.add((org.joda.time.ReadableDuration) duration53);
        mutablePeriod14.add((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = duration53.toDuration();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 1, chronology59);
        int int61 = localDate60.getDayOfYear();
        org.joda.time.LocalTime localTime62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate60.toDateTime(localTime62, dateTimeZone63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone63);
        org.joda.time.DateTime dateTime67 = dateTime65.plusHours((int) 'a');
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) (short) 1, chronology71);
        java.lang.String str73 = localDate72.toString();
        org.joda.time.LocalDate localDate75 = localDate72.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology76 = localDate75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.weekyearOfCentury();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 7, 100L, chronology76);
        org.joda.time.Duration duration79 = period78.toStandardDuration();
        long long80 = duration79.getMillis();
        org.joda.time.DateTime dateTime82 = dateTime65.withDurationAdded((org.joda.time.ReadableDuration) duration79, 26199137);
        boolean boolean83 = duration57.isShorterThan((org.joda.time.ReadableDuration) duration79);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration57);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970-01-01" + "'", str73, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 93L + "'", long80 == 93L);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test03151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03151");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        mutableDateTime1.addSeconds(292278993);
        org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(4);
        org.joda.time.DateTime dateTime9 = dateTime7.plusDays(26091032);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) periodType10, dateTimeZone12);
        int int14 = localDateTime13.getDayOfMonth();
        int int15 = localDateTime13.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        int int17 = localDateTime13.getEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.era();
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.dayOfMonth();
        int int20 = localDateTime13.getDayOfWeek();
        org.joda.time.DateTime dateTime21 = dateTime9.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime9.getZone();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26296038 + "'", int15 == 26296038);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test03152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03152");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        gregorianCalendar2.setTimeZone(timeZone3);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar2);
        int int6 = gregorianCalendar2.getWeekYear();
        java.lang.Object obj7 = null;
        boolean boolean8 = gregorianCalendar2.before(obj7);
        java.lang.String str9 = gregorianCalendar2.toString();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.util.GregorianCalendar[time=1645514296066,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=16,MILLISECOND=66,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str9, "java.util.GregorianCalendar[time=1645514296066,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=16,MILLISECOND=66,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03153");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withField(dateTimeFieldType8, 190);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.plusHours(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int14 = localDateTime3.get(dateTimeFieldType13);
        int int15 = localDateTime3.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26296101 + "'", int5 == 26296101);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 438 + "'", int14 == 438);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
    }

    @Test
    public void test03154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03154");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("\uc624\ud6c4 4:22:44");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"26063513. 11. 3 ???? 4:22:44\" is malformed at \". 11. 3 ???? 4:22:44\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03155");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 26242837);
    }

    @Test
    public void test03156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03156");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("44", throwable1);
        java.io.IOException iOException3 = new java.io.IOException(throwable1);
        java.lang.Throwable throwable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            iOException3.addSuppressed(throwable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime2.copy();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(822868576470883957L, dateTimeZone5);
        long long12 = dateTimeZone5.adjustOffset(826038914051733543L, true);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 826038914051733543L + "'", long12 == 826038914051733543L);
    }

    @Test
    public void test03158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03158");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1970, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 26082282, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear(70);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        int int10 = localDateTime8.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
    }

    @Test
    public void test03159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03159");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = dateTimeField8.set((long) 26097958, 26118624);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26118624 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test03160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03160");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfMinute();
        int int10 = dateTimeField8.getMinimumValue((long) 26073757);
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale12.toLanguageTag();
        java.lang.String str14 = locale11.getDisplayCountry(locale12);
        int int15 = dateTimeField8.getMaximumTextLength(locale12);
        java.lang.String str16 = locale12.getScript();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "de-DE" + "'", str13, "de-DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test03161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03161");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date7 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        java.lang.String str8 = date7.toLocaleString();
        int int9 = date7.getTimezoneOffset();
        calendar0.setTime(date7);
        int int11 = calendar0.getWeekYear();
        java.util.TimeZone timeZone12 = calendar0.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = timeZone12.getDisplayName(false, 26271123);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26271123");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=822422887978964000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=26063513,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=307,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=22,SECOND=44,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Nov 03 16:22:44 GMT 26063513");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "26063513-11-3 16:22:44" + "'", str8, "26063513-11-3 16:22:44");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 26063513 + "'", int11 == 26063513);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test03162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03162");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(44);
        org.joda.time.Chronology chronology4 = timeOfDay3.getChronology();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateTime dateTime10 = dateMidnight9.toDateTime();
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property13 = localTime12.minuteOfHour();
        org.joda.time.LocalTime localTime15 = localTime12.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localTime12.toDateTimeToday(dateTimeZone16);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean20 = localTime18.isSupported(dateTimeFieldType19);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = localTime18.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.Period period23 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime12, (org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Period period26 = period23.withField(durationFieldType24, (int) '#');
        java.lang.String str27 = durationFieldType24.toString();
        org.joda.time.LocalTime localTime29 = localTime11.withFieldAdded(durationFieldType24, 26114272);
        int int30 = timeOfDay3.compareTo((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime.Property property31 = localTime11.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(4);
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.yearOfEra();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        int int44 = property42.getMaximumTextLength(locale43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime45 = property31.setCopy("DurationField[halfdays]", locale43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DurationField[halfdays]\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hours" + "'", str27, "hours");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
    }

    @Test
    public void test03163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03163");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(26069075);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(26182417);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMonths(164);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test03164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03164");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.LocalDate localDate7 = localDate4.withYear(20);
        org.joda.time.Chronology chronology8 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.yearOfCentury();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(periodType11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) periodType11, dateTimeZone13);
        int int15 = localDateTime14.getDayOfMonth();
        int int16 = localDateTime14.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        int int18 = localDateTime14.getEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withMillisOfDay((int) (byte) 0);
        int int21 = localDateTime14.size();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        java.lang.String str26 = localDate25.toString();
        org.joda.time.LocalDate localDate28 = localDate25.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        int[] intArray30 = localDate28.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray32 = dateTimeField10.set((org.joda.time.ReadablePartial) localDateTime14, 26247054, intArray30, 26259240);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26259240 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26296570 + "'", int16 == 26296570);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 1, 1]");
    }

    @Test
    public void test03165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03165");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        mutablePeriod3.addMonths((int) '#');
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        mutablePeriod3.add(durationFieldType8, 5);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod3.toMutablePeriod();
        mutablePeriod11.setPeriod(26084973, 26, 26097985, 26102728, 219, 26072939, 573, 26081440);
        mutablePeriod11.addMonths(26160348);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(mutablePeriod11);
    }

    @Test
    public void test03166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03166");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.PeriodType periodType5 = periodType2.withYearsRemoved();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean8 = localTime6.isSupported(dateTimeFieldType7);
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType7.getDurationType();
        boolean boolean10 = periodType5.isSupported(durationFieldType9);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 26069295, (long) 26102559, periodType5);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod11.setHours(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03167");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.LocalTime localTime6 = property1.addCopy((long) (-292275054));
        org.joda.time.LocalTime localTime8 = localTime6.plusMinutes(26092417);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutablePeriod12.add(readableDuration13);
        mutablePeriod12.addMonths((int) '#');
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.millis();
        mutablePeriod12.add(durationFieldType17, 5);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod12.toMutablePeriod();
        org.joda.time.LocalTime localTime21 = localTime6.minus((org.joda.time.ReadablePeriod) mutablePeriod20);
        int int22 = mutablePeriod20.getSeconds();
        mutablePeriod20.add(26186369, 26168439, 26267847, 26197853, 81, 511, 26277105, 26188261);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27424361L) + "'", long4 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test03168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03168");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(26141855);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03169");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 'a');
        boolean boolean12 = dateTimeZone8.isStandardOffset((long) 26067310);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.plusMillis(1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withTime(26218043, 26156205, 2021, 26118649);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26218043 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test03170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03170");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("PT0.100S");
        gregorianCalendar2.setTimeZone(timeZone4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar2);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar2.setWeekDate(26236520, 26140191, 19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 19");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test03171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03171");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours(26061790);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localTime5.getValue(26120371);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26120371");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test03172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03172");
        java.util.Date date5 = new java.util.Date(32772, (int) ' ', 53, 26071829, 0);
        int int6 = date5.getSeconds();
        int int7 = date5.getDay();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Jan 25 05:00:00 GMT 37649");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test03173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03173");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusYears(100);
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property4 = localDate2.weekyear();
        org.joda.time.LocalDate.Property property5 = localDate2.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone7);
        org.joda.time.Interval interval11 = localDate2.toInterval(dateTimeZone7);
        org.joda.time.LocalDate.Property property12 = localDate2.year();
        int int13 = property12.getLeapAmount();
        java.lang.String str14 = property12.getAsShortText();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1922" + "'", str14, "1922");
    }

    @Test
    public void test03174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03174");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundCeiling();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 100, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.Duration duration11 = period7.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime10);
        java.lang.String str12 = duration11.toString();
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration11, 885);
        org.joda.time.Duration duration15 = duration11.toDuration();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundCeiling();
        int int20 = mutableDateTime19.getHourOfDay();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableDuration21, readableInstant22, periodType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutablePeriod24.add(readableDuration25);
        mutablePeriod24.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableDuration29, readableInstant30, periodType31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutablePeriod32.add(readableDuration33);
        mutablePeriod32.addMonths((int) '#');
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(readableDuration38, readableInstant39, periodType40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutablePeriod41.add(readableDuration42);
        mutablePeriod41.addMonths((int) '#');
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 1, chronology47);
        int int49 = localDate48.getDayOfYear();
        org.joda.time.LocalTime localTime50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDate48.toDateTime(localTime50, dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = localDate48.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.yearOfEra();
        int int56 = dateMidnight54.getMinuteOfHour();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 100, chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(chronology60);
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime61.copy();
        org.joda.time.Duration duration63 = period59.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight54.plus((org.joda.time.ReadableDuration) duration63);
        mutablePeriod41.add((org.joda.time.ReadableDuration) duration63);
        mutablePeriod24.add((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration67 = duration63.toDuration();
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration69 = duration67.toDuration();
        boolean boolean70 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration67);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.100S" + "'", str12, "PT0.100S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test03175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03175");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        int int6 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate8 = localDate2.plusWeeks(26081086);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) 1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight12 = localDate8.toDateMidnight(dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableDuration13, readableInstant14, periodType15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutablePeriod16.add(readableDuration17);
        mutablePeriod16.addMonths((int) '#');
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.millis();
        mutablePeriod16.add(durationFieldType21, 5);
        org.joda.time.LocalDate localDate25 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = mutablePeriod16.getValue(26063479);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26063479");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test03176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03176");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        int int6 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate8 = localDate2.plusWeeks(26081086);
        int int9 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate.Property property10 = localDate2.dayOfYear();
        org.joda.time.LocalDate localDate11 = property10.withMinimumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate13 = property12.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = property12.setCopy(26252138);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26252138 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test03177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03177");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfDay();
        long long11 = dateTimeField9.roundHalfEven(1645514068164L);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property13 = localDate12.era();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        java.lang.String str18 = localDate17.toString();
        org.joda.time.LocalDate localDate20 = localDate17.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyearOfCentury();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 100, chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime27.copy();
        org.joda.time.Duration duration29 = period25.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.Period period31 = period25.plusDays((int) (byte) 10);
        int int32 = period31.getHours();
        org.joda.time.Period period34 = period31.plusMonths(2);
        org.joda.time.Period period36 = period31.minusMonths(12);
        org.joda.time.Period period38 = period31.plusWeeks(26073687);
        int[] intArray40 = chronology21.get((org.joda.time.ReadablePeriod) period31, (long) 12);
        int[] intArray42 = dateTimeField9.addWrapPartial((org.joda.time.ReadablePartial) localDate12, 26067972, intArray40, 0);
        org.joda.time.LocalDate.Property property43 = localDate12.dayOfWeek();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 1, chronology45);
        int int47 = localDate46.getDayOfYear();
        org.joda.time.LocalDate.Property property48 = localDate46.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean50 = localDate46.isSupported(dateTimeFieldType49);
        boolean boolean51 = localDate12.isAfter((org.joda.time.ReadablePartial) localDate46);
        int int52 = localDate12.getWeekyear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 1, chronology54);
        java.lang.String str56 = localDate55.toString();
        org.joda.time.LocalDate localDate58 = localDate55.withYearOfEra((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        boolean boolean60 = localDate58.isSupported(dateTimeFieldType59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) (short) 1, chronology62);
        java.lang.String str64 = localDate63.toString();
        org.joda.time.LocalDate localDate66 = localDate63.withYearOfEra((int) (byte) 100);
        int int67 = localDate63.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getRangeDurationType();
        boolean boolean70 = localDate63.isSupported(dateTimeFieldType68);
        boolean boolean71 = localDate58.isSupported(dateTimeFieldType68);
        boolean boolean72 = localDate12.isSupported(dateTimeFieldType68);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514068164L + "'", long11 == 1645514068164L);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01" + "'", str18, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 12]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 12]");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01" + "'", str56, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-01" + "'", str64, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test03178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03178");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(26131901, 26181867, 26081164, 26256155, 26186369, 854, 26295571);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26256155 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03179");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 1, chronology8);
        java.lang.String str10 = localDate9.toString();
        org.joda.time.LocalDate localDate12 = localDate9.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        java.lang.String str17 = chronology13.toString();
        org.joda.time.DurationField durationField18 = chronology13.hours();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField20 = chronology13.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(894, 26272416, 1216, 0, 26217739, 26198643, 21, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26217739 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test03180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03180");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMinutes(641);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.minusMonths(120);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test03181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03181");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 472);
        int int2 = timeOfDay1.getMinuteOfHour();
        int int3 = timeOfDay1.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 472 + "'", int3 == 472);
    }

    @Test
    public void test03182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03182");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(99, 26092087, 26195056);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03183");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.String str2 = locale0.getLanguage();
        boolean boolean3 = locale0.hasExtensions();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTime(localTime8, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfEra();
        int int14 = dateMidnight12.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property15 = dateMidnight12.year();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        int int20 = localDate19.getDayOfYear();
        org.joda.time.LocalTime localTime21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate19.toDateTime(localTime21, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = localDate19.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.yearOfEra();
        int int27 = dateMidnight25.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property28 = dateMidnight25.year();
        org.joda.time.DateMidnight dateMidnight29 = property28.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay33 = dateMidnight30.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = yearMonthDay33.getFieldTypes();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 1, chronology36);
        java.lang.String str38 = localDate37.toString();
        org.joda.time.LocalDate localDate40 = localDate37.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.year();
        long long47 = chronology41.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay33.withChronologyRetainFields(chronology41);
        int int49 = yearMonthDay33.size();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone51 = dateMidnight50.getZone();
        boolean boolean53 = dateTimeZone51.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay33.toDateMidnight(dateTimeZone51);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight29, dateTimeZone51);
        org.joda.time.LocalDate localDate58 = localDate56.withYear(26063026);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (short) 1, chronology61);
        java.lang.String str63 = localDate62.toString();
        org.joda.time.LocalDate localDate65 = localDate62.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.DurationField durationField68 = dateTimeField67.getRangeDurationField();
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) (short) 1, chronology72);
        int int74 = localDate73.getDayOfYear();
        org.joda.time.LocalTime localTime75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = localDate73.toDateTime(localTime75, dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = localDate73.toDateMidnight(dateTimeZone78);
        org.joda.time.DateMidnight.Property property80 = dateMidnight79.yearOfEra();
        int int81 = dateMidnight79.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property82 = dateMidnight79.year();
        java.util.Locale locale83 = java.util.Locale.FRENCH;
        java.lang.String str84 = property82.getAsText(locale83);
        java.util.Locale locale85 = java.util.Locale.GERMANY;
        java.lang.String str86 = locale83.getDisplayScript(locale85);
        java.util.Locale locale87 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str88 = locale83.getDisplayScript(locale87);
        java.lang.String str89 = locale70.getDisplayVariant(locale87);
        java.lang.String str90 = dateTimeField67.getAsShortText((int) (short) 100, locale87);
        java.lang.String str91 = locale87.getLanguage();
        java.lang.String str92 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) localDate58, 26186505, locale87);
        java.util.Set<java.lang.Character> charSet93 = locale87.getExtensionKeys();
        java.lang.String str94 = locale0.getDisplayLanguage(locale87);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr" + "'", str2, "fr");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1147058000L + "'", long47 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01" + "'", str63, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNull(durationField68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970" + "'", str84, "1970");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "100" + "'", str90, "100");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "fr" + "'", str91, "fr");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "26186505" + "'", str92, "26186505");
        org.junit.Assert.assertNotNull(charSet93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "fran\347ais" + "'", str94, "fran\347ais");
    }

    @Test
    public void test03184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03184");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        gregorianCalendar2.setTimeZone(timeZone3);
        java.util.Date date5 = gregorianCalendar2.getTime();
        gregorianCalendar2.set(26072320, 26067310, 26065744, 0, 26080940, 26096099);
        int int13 = gregorianCalendar2.getWeeksInWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("PT0.100S");
        boolean boolean17 = timeZone16.observesDaylightTime();
        boolean boolean18 = timeZone14.hasSameRules(timeZone16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14);
        java.util.TimeZone timeZone20 = calendar19.getTimeZone();
        gregorianCalendar2.setTimeZone(timeZone20);
        int int22 = timeZone20.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:18:17 GMT 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514297285,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=17,MILLISECOND=285,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test03185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03185");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 10);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.Period period5 = period1.normalizedStandard(periodType2);
        org.joda.time.Weeks weeks6 = period1.toStandardWeeks();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        java.lang.String str10 = periodType9.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.PeriodType periodType12 = periodType9.withYearsRemoved();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean15 = localTime13.isSupported(dateTimeFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getDurationType();
        boolean boolean17 = periodType12.isSupported(durationFieldType16);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 26069295, (long) 26102559, periodType12);
        org.joda.time.PeriodType periodType19 = periodType12.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = period1.withPeriodType(periodType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Years" + "'", str10, "Years");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test03186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03186");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(26134, 26188442);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26134 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03187");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localDateTime3.getValue(26131882);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26131882");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test03188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03188");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("T00:00:00.117");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: T00:00:00.117 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test03189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03189");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) periodType9, dateTimeZone11);
        int int13 = localDateTime12.getDayOfMonth();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        int int16 = localDateTime12.getEra();
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.era();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = localDateTime12.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime3.property(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime3.plusSeconds(579);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableDuration24, readableInstant25, periodType26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutablePeriod27.add(readableDuration28);
        mutablePeriod27.addMonths((int) '#');
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        mutablePeriod27.add(durationFieldType32, 5);
        int int35 = mutablePeriod27.getHours();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime23.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        int int37 = localDateTime23.getEra();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26297423 + "'", int5 == 26297423);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 26297423 + "'", int14 == 26297423);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test03190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03190");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(1645514111274L);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = localTime1.withMillisOfSecond(26212654);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26212654 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test03191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03191");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.years();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 915, chronology7);
        org.joda.time.DurationField durationField11 = chronology7.seconds();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = durationField11.getValue((-2261046069861903L), 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -2261046069861");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test03192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03192");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale3 = new java.util.Locale("T07:15:06.424", "Years");
        java.lang.String str4 = locale0.getDisplayVariant(locale3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, chronology19);
        int int21 = localDate20.getDayOfYear();
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate20.toDateTime(localTime22, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = localDate20.toDateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfEra();
        int int28 = dateMidnight26.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property29 = dateMidnight26.year();
        org.joda.time.DateMidnight dateMidnight30 = property29.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay34 = dateMidnight31.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = yearMonthDay34.getFieldTypes();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 1, chronology37);
        java.lang.String str39 = localDate38.toString();
        org.joda.time.LocalDate localDate41 = localDate38.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.year();
        long long48 = chronology42.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay34.withChronologyRetainFields(chronology42);
        int int50 = yearMonthDay34.size();
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone52 = dateMidnight51.getZone();
        boolean boolean54 = dateTimeZone52.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay34.toDateMidnight(dateTimeZone52);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight30, dateTimeZone52);
        org.joda.time.LocalDate localDate59 = localDate57.withYear(26063026);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) (short) 1, chronology62);
        java.lang.String str64 = localDate63.toString();
        org.joda.time.LocalDate localDate66 = localDate63.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology67 = localDate66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfEra();
        org.joda.time.DurationField durationField69 = dateTimeField68.getRangeDurationField();
        java.util.Locale locale71 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) (short) 1, chronology73);
        int int75 = localDate74.getDayOfYear();
        org.joda.time.LocalTime localTime76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = localDate74.toDateTime(localTime76, dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = localDate74.toDateMidnight(dateTimeZone79);
        org.joda.time.DateMidnight.Property property81 = dateMidnight80.yearOfEra();
        int int82 = dateMidnight80.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property83 = dateMidnight80.year();
        java.util.Locale locale84 = java.util.Locale.FRENCH;
        java.lang.String str85 = property83.getAsText(locale84);
        java.util.Locale locale86 = java.util.Locale.GERMANY;
        java.lang.String str87 = locale84.getDisplayScript(locale86);
        java.util.Locale locale88 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str89 = locale84.getDisplayScript(locale88);
        java.lang.String str90 = locale71.getDisplayVariant(locale88);
        java.lang.String str91 = dateTimeField68.getAsShortText((int) (short) 100, locale88);
        java.lang.String str92 = locale88.getLanguage();
        java.lang.String str93 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDate59, 26186505, locale88);
        java.lang.String str94 = locale3.getDisplayName(locale88);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals(locale3.toString(), "t07:15:06.424_YEARS");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01" + "'", str39, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1147058000L + "'", long48 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-01" + "'", str64, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNull(durationField69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1970" + "'", str85, "1970");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "100" + "'", str91, "100");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "fr" + "'", str92, "fr");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "26186505" + "'", str93, "26186505");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "t07:15:06.424 (YEARS)" + "'", str94, "t07:15:06.424 (YEARS)");
    }

    @Test
    public void test03193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03193");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime3 = dateTime0.withFieldAdded(durationFieldType1, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay4 = dateTime0.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime0.plusHours(573);
        org.joda.time.DateTime dateTime8 = dateTime0.plus((long) 777);
        org.joda.time.DateTime.Property property9 = dateTime0.centuryOfEra();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test03194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03194");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 7, 100L, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.Chronology chronology17 = dateTimeFormatter2.getChronology();
        java.io.Writer writer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer18, 45193531L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
    }

    @Test
    public void test03195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03195");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTime(localTime8, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = localDate6.toString("14", locale14);
        java.lang.String str19 = locale14.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale14);
        boolean boolean21 = dateTimeFormatter20.isParser();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime24.copy();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        mutableDateTime24.setZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate22.toDateTimeAtStartOfDay(dateTimeZone27);
        int int31 = dateTimeZone27.getOffsetFromLocal((long) 26092895);
        java.util.TimeZone timeZone32 = dateTimeZone27.toTimeZone();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter20.withZone(dateTimeZone27);
        boolean boolean35 = dateTimeFormatter34.isParser();
        java.io.Writer writer36 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter34.printTo(writer36, 1645514113387L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str16, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Corea del Sud" + "'", str17, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "14" + "'", str18, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str19, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test03196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03196");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField10 = chronology6.millis();
        long long13 = durationField10.getDifferenceAsLong(26087585L, (long) 26125522);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-37937L) + "'", long13 == (-37937L));
    }

    @Test
    public void test03197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03197");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.setVariant("26112925");
        java.util.Locale.Builder builder6 = builder0.setVariant("44783834");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.setLanguage("2022-02-22T07:16:50.070Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-22T07:16:50.070Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03198");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTime(localTime8, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = localDate6.toString("14", locale14);
        java.lang.String str19 = locale14.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale14);
        java.lang.Appendable appendable21 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter20.printTo(appendable21, (long) 26261090);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str16, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Corea del Sud" + "'", str17, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "14" + "'", str18, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str19, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
    }

    @Test
    public void test03199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03199");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 1, chronology4);
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate localDate8 = localDate5.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((java.lang.Object) localDate1, chronology17);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 244, chronology17);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.244S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.244S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.244S");
    }

    @Test
    public void test03200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03200");
        java.util.Date date5 = new java.util.Date(32772, (int) ' ', 53, 26071829, 0);
        java.time.Instant instant6 = date5.toInstant();
        java.lang.String str7 = date5.toString();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Jan 25 05:00:00 GMT 37649");
        org.junit.Assert.assertNotNull(instant6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Mon Jan 25 05:00:00 GMT 37649" + "'", str7, "Mon Jan 25 05:00:00 GMT 37649");
    }

    @Test
    public void test03201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03201");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusYears(100);
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate5 = localDate2.minusMonths(26061764);
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate5.withWeekOfWeekyear(26280533);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26280533 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test03202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03202");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusYears(100);
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property4 = localDate2.weekyear();
        org.joda.time.LocalDate localDate6 = localDate2.minusMonths(26061238);
        org.joda.time.LocalDate.Property property7 = localDate2.monthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test03203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03203");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekyear();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        mutableDateTime9.addMinutes(894);
        int int12 = mutableDateTime9.getYearOfEra();
        int int13 = property6.getDifference((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = property6.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withSecondOfMinute(26292475);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26292475 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26297775 + "'", int5 == 26297775);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test03204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03204");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(0L);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean5 = localTime3.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = localTime3.withFields((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean11 = localTime9.isSupported(dateTimeFieldType10);
        int int12 = mutableDateTime8.get(dateTimeFieldType10);
        boolean boolean13 = localTime6.isSupported(dateTimeFieldType10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property15 = localTime14.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        long long18 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.LocalTime localTime20 = property15.addCopy((long) (-292275054));
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType10.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology21.weeks();
        mutablePeriod1.add(600522L, chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-27424361L) + "'", long18 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test03205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03205");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withMillisOfDay(26067972);
        int int12 = localDateTime11.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withEra(593);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 593 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26297867 + "'", int5 == 26297867);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test03206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03206");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay3.plusMonths(23);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay3.plusYears(26069075);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay3.plus(readablePeriod9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay3.withYear(26079926);
        org.joda.time.LocalDate localDate13 = yearMonthDay3.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property16 = yearMonthDay3.property(dateTimeFieldType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
    }

    @Test
    public void test03207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03207");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        gregorianCalendar2.setTimeZone(timeZone3);
        java.util.Date date5 = gregorianCalendar2.getTime();
        java.util.TimeZone timeZone6 = gregorianCalendar2.getTimeZone();
        timeZone6.setRawOffset(26283226);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:18:17 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test03208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03208");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withYear(2022);
        int int10 = localDateTime3.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime3.withMonthOfYear(854);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 854 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26297982 + "'", int5 == 26297982);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
    }

    @Test
    public void test03209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03209");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        boolean boolean4 = locale0.hasExtensions();
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de-DE" + "'", str2, "de-DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test03210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03210");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds((int) (short) -1);
        org.joda.time.Period period15 = org.joda.time.Period.hours((-1));
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(23, (int) (short) -1, 26061790, 26077858, 0, 26062367, 0, 0);
        org.joda.time.Period period25 = period15.withFields((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.monthOfYear();
        int int28 = localDateTime26.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26298042 + "'", int5 == 26298042);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 13 + "'", int28 == 13);
    }

    @Test
    public void test03211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03211");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone3);
        java.util.Calendar calendar5 = builder0.build();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar8 = dateTime6.toGregorianCalendar();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        gregorianCalendar8.setTimeZone(timeZone9);
        calendar5.setTimeZone(timeZone9);
        int int12 = calendar5.getFirstDayOfWeek();
        calendar5.setFirstDayOfWeek(26072651);
        java.util.TimeZone timeZone15 = calendar5.getTimeZone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=26072651,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test03212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03212");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime5 = dateTime3.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis((-1));
        org.joda.time.DateTime dateTime9 = dateTime7.withMillis((long) 26090057);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.DateMidnight.Property property12 = dateMidnight10.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight10.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = yearMonthDay13.getFieldTypes();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        java.lang.String str18 = localDate17.toString();
        org.joda.time.LocalDate localDate20 = localDate17.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.year();
        long long27 = chronology21.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay13.withChronologyRetainFields(chronology21);
        int int29 = yearMonthDay13.size();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        boolean boolean33 = dateTimeZone31.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay13.toDateMidnight(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime9.withZone(dateTimeZone31);
        long long39 = dateTimeZone31.adjustOffset((long) 26084032, true);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 26097570, dateTimeZone31);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate43 = localDate41.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusHours(26076640);
        int int48 = dateTime45.getEra();
        boolean boolean49 = mutableDateTime40.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01" + "'", str18, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1147058000L + "'", long27 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 26084032L + "'", long39 == 26084032L);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test03213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03213");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        boolean boolean6 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet5);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        boolean boolean11 = strSet8.removeAll((java.util.Collection<java.lang.String>) strSet10);
        boolean boolean12 = strSet5.removeAll((java.util.Collection<java.lang.String>) strSet10);
        boolean boolean13 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet5);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = strSet5.add("2022-02-22T07:15:02.718");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test03214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03214");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        int int19 = yearMonthDay3.getDayOfMonth();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay3.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay21 = property20.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 26068833);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 1, chronology25);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.LocalDate localDate29 = localDate26.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        org.joda.time.Chronology chronology38 = chronology30.withZone(dateTimeZone34);
        java.lang.String str40 = dateTimeZone34.getNameKey((long) 26061790);
        mutableDateTime23.setZoneRetainFields(dateTimeZone34);
        boolean boolean42 = property20.equals((java.lang.Object) mutableDateTime23);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime45.copy();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone48 = dateMidnight47.getZone();
        mutableDateTime45.setZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate43.toDateTimeAtStartOfDay(dateTimeZone48);
        java.lang.String str51 = dateTimeZone48.getID();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 1, chronology54);
        int int56 = localDate55.getDayOfYear();
        org.joda.time.LocalTime localTime57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate55.toDateTime(localTime57, dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = localDate55.toDateMidnight(dateTimeZone60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.yearOfEra();
        int int63 = dateMidnight61.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property64 = dateMidnight61.year();
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.lang.String str66 = property64.getAsText(locale65);
        java.util.Locale locale67 = java.util.Locale.GERMANY;
        java.lang.String str68 = locale65.getDisplayScript(locale67);
        java.lang.String str69 = dateTimeZone48.getShortName((long) 666, locale67);
        java.lang.String str70 = property20.getAsShortText(locale67);
        java.lang.Object obj71 = locale67.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01" + "'", str27, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Etc/UTC" + "'", str51, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970" + "'", str66, "1970");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Feb" + "'", str70, "Feb");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "de_DE");
    }

    @Test
    public void test03215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03215");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int6 = dateTimeZone3.getOffsetFromLocal(31562062367L);
        java.util.TimeZone timeZone7 = dateTimeZone3.toTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 1, chronology10);
        java.lang.String str12 = localDate11.toString();
        org.joda.time.LocalDate localDate14 = localDate11.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.years();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfWeek();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("2022-02-22T07:14:26.152Z");
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = dateTimeField19.getAsShortText(0L, locale22);
        java.lang.String str25 = timeZone7.getDisplayName(locale22);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514298291,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=18,MILLISECOND=291,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Thu" + "'", str24, "Thu");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Coordinated Universal Time" + "'", str25, "Coordinated Universal Time");
    }

    @Test
    public void test03216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property6 = localDate2.weekOfWeekyear();
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        int int8 = localDate2.getYearOfCentury();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 1, chronology10);
        java.lang.String str12 = localDate11.toString();
        org.joda.time.LocalDate.Property property13 = localDate11.year();
        int int14 = property13.getMaximumValueOverall();
        org.joda.time.LocalDate localDate15 = property13.getLocalDate();
        org.joda.time.LocalDate localDate17 = property13.setCopy(26161994);
        org.joda.time.LocalDate localDate19 = property13.addWrapFieldToCopy(57780782);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableDuration20, readableInstant21, periodType22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutablePeriod23.add(readableDuration24);
        mutablePeriod23.addMonths((int) '#');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 1, chronology29);
        int int31 = localDate30.getDayOfYear();
        org.joda.time.LocalTime localTime32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate30.toDateTime(localTime32, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = localDate30.toDateMidnight(dateTimeZone35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfEra();
        int int38 = dateMidnight36.getMinuteOfHour();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 100, chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime43.copy();
        org.joda.time.Duration duration45 = period41.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight36.plus((org.joda.time.ReadableDuration) duration45);
        mutablePeriod23.add((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (short) 1, chronology49);
        int int51 = localDate50.getDayOfYear();
        org.joda.time.LocalTime localTime52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDate50.toDateTime(localTime52, dateTimeZone53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(readableDuration55, readableInstant56, periodType57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutablePeriod58.add(readableDuration59);
        mutablePeriod58.addMonths((int) '#');
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (short) 1, chronology64);
        int int66 = localDate65.getDayOfYear();
        org.joda.time.LocalTime localTime67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = localDate65.toDateTime(localTime67, dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = localDate65.toDateMidnight(dateTimeZone70);
        org.joda.time.DateMidnight.Property property72 = dateMidnight71.yearOfEra();
        int int73 = dateMidnight71.getMinuteOfHour();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((long) (byte) 100, chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime(chronology77);
        org.joda.time.MutableDateTime mutableDateTime79 = mutableDateTime78.copy();
        org.joda.time.Duration duration80 = period76.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime79);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight71.plus((org.joda.time.ReadableDuration) duration80);
        mutablePeriod58.add((org.joda.time.ReadableDuration) duration80);
        org.joda.time.DateTime dateTime83 = dateTime54.minus((org.joda.time.ReadableDuration) duration80);
        mutablePeriod23.add((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime(chronology85);
        org.joda.time.MutableDateTime mutableDateTime87 = mutableDateTime86.copy();
        mutableDateTime86.addMinutes(0);
        java.lang.String str90 = mutableDateTime86.toString();
        mutableDateTime86.setMillisOfSecond(894);
        boolean boolean94 = mutableDateTime86.isAfter((long) 26069958);
        org.joda.time.MutableDateTime mutableDateTime95 = mutableDateTime86.copy();
        org.joda.time.PeriodType periodType96 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period97 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration80, (org.joda.time.ReadableInstant) mutableDateTime86, periodType96);
        org.joda.time.Period period98 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate19, periodType96);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(mutableDateTime87);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "2022-02-22T07:18:18.307Z" + "'", str90, "2022-02-22T07:18:18.307Z");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(mutableDateTime95);
        org.junit.Assert.assertNotNull(periodType96);
    }

    @Test
    public void test03217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03217");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(26063479);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 1, chronology8);
        int int10 = localDate9.getDayOfYear();
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate9.toDateTime(localTime11, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = localDate9.toDateMidnight(dateTimeZone14);
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.lang.String str21 = localDate9.toString("14", locale17);
        java.lang.String str22 = locale17.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter5.withLocale(locale17);
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withLocale(locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay31 = dateMidnight28.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = yearMonthDay31.getFieldTypes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 1, chronology34);
        java.lang.String str36 = localDate35.toString();
        org.joda.time.LocalDate localDate38 = localDate35.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.eras();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.year();
        long long45 = chronology39.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType27.getField(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter26.withChronology(chronology39);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter26.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 0);
        java.util.Locale locale52 = dateTimeFormatter26.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter26.withZoneUTC();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight54.getZone();
        org.joda.time.DateMidnight.Property property56 = dateMidnight54.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay57 = dateMidnight54.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = yearMonthDay57.getFieldTypes();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 1, chronology60);
        java.lang.String str62 = localDate61.toString();
        org.joda.time.LocalDate localDate64 = localDate61.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology65 = localDate64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.eras();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.year();
        long long71 = chronology65.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay57.withChronologyRetainFields(chronology65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter53.withChronology(chronology65);
        mutableDateTime2.setChronology(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str19, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Corea del Sud" + "'", str20, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "14" + "'", str21, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str22, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str25, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1147058000L + "'", long45 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1147058000L + "'", long71 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
    }

    @Test
    public void test03218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03218");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        int int6 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusYears(816);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26298455 + "'", int5 == 26298455);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test03219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03219");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.LocalTime localTime5 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime6 = property1.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property1.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property1.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeFieldType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27424361L) + "'", long4 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test03220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03220");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        long long14 = dateTimeField12.remainder((long) (short) -1);
        int int15 = dateTimeField12.getMinimumValue();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        java.lang.String str19 = localDate18.toString();
        org.joda.time.LocalDate localDate21 = localDate18.withYearOfEra((int) (byte) 100);
        int int22 = localDate18.getDayOfYear();
        org.joda.time.LocalDate localDate24 = localDate18.withWeekyear(26067332);
        org.joda.time.LocalDate localDate26 = localDate24.withWeekyear(235);
        org.joda.time.LocalDate localDate28 = localDate24.minusYears(1970);
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale30.getDisplayVariant();
        java.lang.String str33 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDate24, 0, locale30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = locale30.getUnicodeLocaleType("2022-02-04T07:14:47.468");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-04T07:14:47.468");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31535999999L + "'", long14 == 31535999999L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292275054) + "'", int15 == (-292275054));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
    }

    @Test
    public void test03221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03221");
        org.joda.time.Period period1 = org.joda.time.Period.hours(0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03222");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = localTime3.get(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
    }

    @Test
    public void test03223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.util.Date date3 = localDate2.toDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        java.util.Date date7 = localDate6.toDate();
        boolean boolean8 = date3.before(date7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        boolean boolean12 = dateTimeZone10.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) boolean8, dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test03224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03224");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant1 = mutableDateTime0.toInstant();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        mutableDateTime0.setChronology(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.millis();
        long long13 = durationField10.getValueAsLong((long) 26069295, (long) 26071282);
        org.joda.time.DurationFieldType durationFieldType14 = durationField10.getType();
        long long17 = durationField10.subtract((long) 26267423, 0);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 26069295L + "'", long13 == 26069295L);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 26267423L + "'", long17 == 26267423L);
    }

    @Test
    public void test03225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03225");
        java.lang.String[] strArray32 = new java.lang.String[] { "+00:00", "PT0.100S", "java.io.IOException: java.io.IOException: ", "1970-01-01", "PT0.100S", "2022", "07:14:44.099", "31 Dec 1969 23:59:59 GMT", "2022-02-22T07:15:12.458", "0099-02-24T07:14:53.483Z", "2022-02-22T07:15:06.128", "DurationField[years]", "minuteOfHour", "100", "2022-02-22T07:15:01.825Z", "french", "weekyear", "", "\u65e5\u672c\u8a9e\u65e5\u672c)", "2022-02-22T07:14:42.802", "2022-02-22T07:15:01.963", "2022-02-04T07:14:47.468", "hi!", "Coordinated Universal Time", "de", "2022-02-22T07:15:12.458", "DateTimeField[year]", "14", "DateTimeField[minuteOfDay]", "fr_CA", "java.io.IOException: PT-1H", "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean36 = strSet33.equals((java.lang.Object) 26115921);
        java.util.stream.Stream<java.lang.String> strStream37 = strSet33.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream38 = strSet33.parallelStream();
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(strStream38);
    }

    @Test
    public void test03226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03226");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis((-1));
        int int16 = property8.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime21.copy();
        org.joda.time.Duration duration23 = period19.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Weeks weeks24 = period19.toStandardWeeks();
        org.joda.time.DateTime dateTime26 = dateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period19, 6);
        org.joda.time.DateTime.Property property27 = dateTime15.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1011396959 + "'", int16 == 1011396959);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test03227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03227");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1970, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 26082282, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear(70);
        int int9 = localDateTime8.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test03228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03228");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusYears(100);
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property4 = localDate2.weekyear();
        org.joda.time.LocalDate localDate6 = localDate2.minusMonths(26061238);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.LocalDate localDate13 = localDate10.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyear();
        java.lang.String str16 = chronology14.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.era();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(1645514076554L, chronology14);
        org.joda.time.DurationField durationField19 = chronology14.days();
        org.joda.time.DurationField durationField20 = chronology14.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay((java.lang.Object) localDate2, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test03229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03229");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(26071282);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusDays(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfYear(26176855);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26176855 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26298739 + "'", int5 == 26298739);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test03230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03230");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period8 = period2.plusDays((int) (byte) 10);
        int int9 = period8.getHours();
        org.joda.time.Period period11 = period8.plusMonths(2);
        org.joda.time.Period period13 = period8.minusMonths(12);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        int int15 = dateMidnight14.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusYears(26151097);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property19 = localTime18.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        long long22 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property19.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField24 = property19.getField();
        org.joda.time.LocalTime localTime25 = property19.roundFloorCopy();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        java.lang.String str27 = periodType26.getName();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(periodType26);
        org.joda.time.PeriodType periodType29 = periodType26.withYearsRemoved();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean32 = localTime30.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getDurationType();
        boolean boolean34 = periodType29.isSupported(durationFieldType33);
        boolean boolean35 = localTime25.isSupported(durationFieldType33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight14.withFieldAdded(durationFieldType33, 26160435);
        int int38 = period13.get(durationFieldType33);
        org.joda.time.Period period40 = period13.minusDays(26124);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-27424361L) + "'", long22 == (-27424361L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Years" + "'", str27, "Years");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period40);
    }

    @Test
    public void test03231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03231");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(26092524, 20, 26126391, 26092895);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder8 = builder5.set(26181980, 371);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03232");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 7, 100L, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withOffsetParsed();
        java.io.Writer writer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(writer18, 1645514117380L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test03233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03233");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03234");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(26065744);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withField(dateTimeFieldType13, 26067332);
        org.joda.time.LocalDateTime.Property property16 = localDateTime5.property(dateTimeFieldType13);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, (long) 0, periodType19, chronology20);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime5.year();
        int int24 = property23.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-292275054) + "'", int24 == (-292275054));
    }

    @Test
    public void test03235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03235");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime3.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime3.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime3.withDayOfWeek(26152556);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26152556 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26298944 + "'", int5 == 26298944);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test03236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03236");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.Duration duration8 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Period period10 = period4.plusDays((int) (byte) 10);
        int int11 = period10.getHours();
        org.joda.time.Period period13 = period10.plusMonths(2);
        org.joda.time.Period period15 = period10.minusMonths(12);
        org.joda.time.Seconds seconds16 = period10.toStandardSeconds();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay1.plus((org.joda.time.ReadablePeriod) seconds16);
        int[] intArray18 = timeOfDay1.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = timeOfDay1.withHourOfDay(26077394);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26077394 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 117]");
    }

    @Test
    public void test03237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03237");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 100);
        int int11 = dateTime10.getWeekOfWeekyear();
        boolean boolean13 = dateTime10.isBefore((long) 26062445);
        int int14 = dateTime10.getYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 100, chronology16);
        org.joda.time.Seconds seconds18 = period17.toStandardSeconds();
        org.joda.time.DateTime dateTime19 = dateTime10.plus((org.joda.time.ReadablePeriod) seconds18);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.DateTime dateTime22 = dateTime19.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime19.plusMinutes(1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime24.withEra(43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test03238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03238");
        java.util.Date date6 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        int int7 = date6.getSeconds();
        date6.setTime((long) (short) -1);
        java.lang.String str10 = date6.toGMTString();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter15.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = localDate11.toString(dateTimeFormatter15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 44 + "'", int7 == 44);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "31 Dec 1969 23:59:59 GMT" + "'", str10, "31 Dec 1969 23:59:59 GMT");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(dateTimeParser16);
    }

    @Test
    public void test03239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03239");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(26062445);
        org.joda.time.DateTime.Property property9 = dateTime6.secondOfMinute();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 1, chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTime(localTime15, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = localDate13.toDateMidnight(dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfEra();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight19.toMutableDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 1, chronology25);
        int int27 = localDate26.getDayOfYear();
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate26.toDateTime(localTime28, dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = localDate26.toDateMidnight(dateTimeZone31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.yearOfEra();
        int int34 = dateMidnight32.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property35 = dateMidnight32.year();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.plusYears((int) ' ');
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight32.plusDays(26063479);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plusYears(190);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        java.lang.String str43 = periodType42.getName();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(periodType42);
        org.joda.time.PeriodType periodType45 = periodType42.withYearsRemoved();
        org.joda.time.PeriodType periodType46 = periodType42.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateMidnight41, periodType46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime23.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime50 = property48.add((int) (short) 100);
        boolean boolean51 = dateTime10.isBefore((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.DateTime dateTime52 = dateTime10.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime54 = dateTime10.minusMonths(26132259);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime54.withMonthOfYear(99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Years" + "'", str43, "Years");
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test03240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03240");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        mutableDateTime2.setMillisOfSecond(3);
        mutableDateTime2.addWeeks(26067332);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod();
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod22, 2);
        int int25 = mutableDateTime2.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 1, chronology27);
        int int29 = localDate28.getDayOfYear();
        org.joda.time.LocalTime localTime30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDate28.toDateTime(localTime30, dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = localDate28.toDateMidnight(dateTimeZone33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.yearOfEra();
        int int36 = dateMidnight34.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property37 = dateMidnight34.year();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = property37.getAsText(locale38);
        java.lang.String str40 = property37.getAsShortText();
        org.joda.time.DateMidnight dateMidnight41 = property37.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.withYearOfEra((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 1, chronology45);
        int int47 = localDate46.getDayOfYear();
        org.joda.time.LocalTime localTime48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate46.toDateTime(localTime48, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableDuration51, readableInstant52, periodType53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutablePeriod54.add(readableDuration55);
        mutablePeriod54.addMonths((int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 1, chronology60);
        int int62 = localDate61.getDayOfYear();
        org.joda.time.LocalTime localTime63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDate61.toDateTime(localTime63, dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = localDate61.toDateMidnight(dateTimeZone66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.yearOfEra();
        int int69 = dateMidnight67.getMinuteOfHour();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 100, chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology73);
        org.joda.time.MutableDateTime mutableDateTime75 = mutableDateTime74.copy();
        org.joda.time.Duration duration76 = period72.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime75);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight67.plus((org.joda.time.ReadableDuration) duration76);
        mutablePeriod54.add((org.joda.time.ReadableDuration) duration76);
        org.joda.time.DateTime dateTime79 = dateTime50.minus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight41.minus((org.joda.time.ReadableDuration) duration76);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration76, 139);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime85 = property83.add(1645514132422L);
        org.joda.time.MutableDateTime mutableDateTime86 = mutableDateTime85.toMutableDateTimeISO();
        int int87 = mutableDateTime85.getRoundingMode();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test03241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03241");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date7 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        java.lang.String str8 = date7.toLocaleString();
        int int9 = date7.getTimezoneOffset();
        calendar0.setTime(date7);
        int int11 = calendar0.getWeekYear();
        java.util.TimeZone timeZone12 = calendar0.getTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder16 = builder14.setLenient(false);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder18 = builder14.setTimeZone(timeZone17);
        boolean boolean19 = timeZone12.hasSameRules(timeZone17);
        java.util.Locale locale23 = new java.util.Locale("T07:15:06.424", "years", "fr_CA");
        java.lang.String str24 = locale23.toLanguageTag();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone17, locale23);
        int int27 = timeZone17.getOffset((long) 50);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=822422887978964000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=26063513,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=307,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=22,SECOND=44,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date7.toString(), "Mon Nov 03 16:22:44 UTC 26063513");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "26063513-11-3 16:22:44" + "'", str8, "26063513-11-3 16:22:44");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 26063513 + "'", int11 == 26063513);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals(locale23.toString(), "t07:15:06.424_YEARS_fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "x-lvariant-fr-CA" + "'", str24, "x-lvariant-fr-CA");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514299215,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=19,MILLISECOND=215,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test03242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03242");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        gregorianCalendar2.setTimeZone(timeZone3);
        int int5 = gregorianCalendar2.getMinimalDaysInFirstWeek();
        long long6 = gregorianCalendar2.getTimeInMillis();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar2);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar2.set(861, 26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 861");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514299227L + "'", long6 == 1645514299227L);
        org.junit.Assert.assertNotNull(timeOfDay7);
    }

    @Test
    public void test03243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03243");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone3);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar.Builder builder9 = builder0.setDate((int) (byte) 0, 26072651, 26072939);
        java.util.Calendar.Builder builder14 = builder0.setTimeOfDay(978, 499, 26206663, 26174138);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03244");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfMonth(26237738);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26237738 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26299274 + "'", int5 == 26299274);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test03245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03245");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("2022-02-22T07:14:40.845Z");
        org.junit.Assert.assertNotNull(dateMidnight1);
    }

    @Test
    public void test03246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03246");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        int int6 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate8 = localDate2.withWeekyear(26067332);
        org.joda.time.LocalDate localDate10 = localDate8.withWeekyear(235);
        org.joda.time.LocalDate localDate12 = localDate8.minusYears(1970);
        int int13 = localDate8.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate8.withDayOfWeek(26224157);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26224157 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    }

    @Test
    public void test03247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03247");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        mutableDateTime2.setMillisOfSecond(3);
        int int20 = mutableDateTime2.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.plusYears(26062367);
        int int25 = dateMidnight21.getWeekyear();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight21.plus(readableDuration26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        int int29 = dateMidnight27.get(dateTimeFieldType28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime2.property(dateTimeFieldType28);
        mutableDateTime2.setMillisOfSecond(90);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test03248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03248");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("20", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03249");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withMillis((long) ' ');
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusMonths(867);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withMillis((long) 139);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.weekyear();
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.yearOfEra();
        org.joda.time.DateMidnight dateMidnight21 = property20.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight22 = property20.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test03250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03250");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 100, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.Duration duration17 = period13.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 1, chronology20);
        java.lang.String str22 = localDate21.toString();
        org.joda.time.LocalDate localDate24 = localDate21.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("2022-02-22T07:14:26.152Z");
        java.lang.String str30 = locale29.getDisplayScript();
        int int31 = dateTimeField27.getMaximumTextLength(locale29);
        boolean boolean32 = dateMidnight8.equals((java.lang.Object) int31);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test03251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03251");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(26129248, 234, 26243864, 26081086);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26129248 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03252");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime2.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add((long) 26063026);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfFloor();
        org.joda.time.Chronology chronology10 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfCentury();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((long) 27425235, chronology10);
        org.joda.time.DurationField durationField14 = chronology10.weekyears();
        long long17 = durationField14.subtract((long) 28391857, 26183125);
        long long20 = durationField14.add((long) 26141855, 0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-826259618390808143L) + "'", long17 == (-826259618390808143L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 26141855L + "'", long20 == 26141855L);
    }

    @Test
    public void test03253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03253");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        int int2 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setMillis((long) 26061397);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableDuration5, readableInstant6, periodType7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutablePeriod8.add(readableDuration9);
        mutablePeriod8.addMonths((int) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTime(localTime17, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfEra();
        int int23 = dateMidnight21.getMinuteOfHour();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 100, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime28.copy();
        org.joda.time.Duration duration30 = period26.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration30);
        mutablePeriod8.add((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime34.copy();
        mutableDateTime34.addMinutes(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime41 = dateTime38.withFieldAdded(durationFieldType39, (int) (byte) 0);
        mutableDateTime34.add(durationFieldType39, 4);
        org.joda.time.Duration duration44 = mutablePeriod8.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime34);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration44);
        long long46 = duration44.getMillis();
        java.lang.String str47 = duration44.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (short) 1, chronology49);
        int int51 = localDate50.getDayOfYear();
        org.joda.time.LocalTime localTime52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDate50.toDateTime(localTime52, dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = localDate50.toDateMidnight(dateTimeZone55);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.yearOfEra();
        int int58 = dateMidnight56.getMinuteOfHour();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 100, chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime63.copy();
        org.joda.time.Duration duration65 = period61.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight56.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(readableDuration67, readableInstant68, periodType69);
        org.joda.time.ReadableDuration readableDuration71 = null;
        mutablePeriod70.add(readableDuration71);
        mutablePeriod70.addMonths((int) '#');
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) (short) 1, chronology76);
        int int78 = localDate77.getDayOfYear();
        org.joda.time.LocalTime localTime79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = localDate77.toDateTime(localTime79, dateTimeZone80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = localDate77.toDateMidnight(dateTimeZone82);
        org.joda.time.DateMidnight.Property property84 = dateMidnight83.yearOfEra();
        int int85 = dateMidnight83.getMinuteOfHour();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Period period88 = new org.joda.time.Period((long) (byte) 100, chronology87);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime(chronology89);
        org.joda.time.MutableDateTime mutableDateTime91 = mutableDateTime90.copy();
        org.joda.time.Duration duration92 = period88.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime91);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight83.plus((org.joda.time.ReadableDuration) duration92);
        mutablePeriod70.add((org.joda.time.ReadableDuration) duration92);
        boolean boolean95 = duration65.isLongerThan((org.joda.time.ReadableDuration) duration92);
        int int96 = duration44.compareTo((org.joda.time.ReadableDuration) duration92);
        org.joda.time.ReadableDuration readableDuration97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int98 = duration92.compareTo(readableDuration97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 615 + "'", int2 == 615);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 92275200100L + "'", long46 == 92275200100L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT92275200.100S" + "'", str47, "PT92275200.100S");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime91);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test03254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03254");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone2 = dateMidnight1.getZone();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight1.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = yearMonthDay4.getFieldTypes();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 1, chronology7);
        java.lang.String str9 = localDate8.toString();
        org.joda.time.LocalDate localDate11 = localDate8.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        long long18 = chronology12.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeField dateTimeField20 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((java.lang.Object) 26092416, chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1147058000L + "'", long18 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test03255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03255");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(26097602);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        mutableDateTime14.setZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtStartOfDay(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 1, chronology23);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTime(localTime26, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate24.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        int int32 = dateMidnight30.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property33 = dateMidnight30.year();
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = property33.getAsText(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale34.getDisplayScript(locale36);
        java.lang.String str38 = dateTimeZone17.getShortName((long) 666, locale36);
        org.joda.time.DateTime dateTime39 = dateTime11.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight40.getZone();
        org.joda.time.DateMidnight.Property property42 = dateMidnight40.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay43 = dateMidnight40.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = yearMonthDay43.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 1, chronology46);
        java.lang.String str48 = localDate47.toString();
        org.joda.time.LocalDate localDate50 = localDate47.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.year();
        long long57 = chronology51.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay43.withChronologyRetainFields(chronology51);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay43.year();
        java.util.Locale locale60 = java.util.Locale.ITALY;
        int int61 = property59.getMaximumShortTextLength(locale60);
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.lang.String str63 = locale60.getDisplayCountry(locale62);
        java.util.Calendar calendar64 = dateTime39.toCalendar(locale60);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = calendar64.getGreatestMinimum(26208625);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26208625");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Etc/UTC" + "'", str20, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01" + "'", str48, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1147058000L + "'", long57 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u30a4\u30bf\u30ea\u30a2" + "'", str63, "\u30a4\u30bf\u30ea\u30a2");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=341656701770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1980,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=303,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=21,MILLISECOND=770,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03256");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 10);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.Period period5 = period1.normalizedStandard(periodType2);
        org.joda.time.Weeks weeks6 = period1.toStandardWeeks();
        org.joda.time.MutablePeriod mutablePeriod7 = weeks6.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        boolean boolean11 = dateTimeZone9.isStandardOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(dateTimeZone9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        int int16 = mutableDateTime15.getMillisOfSecond();
        mutableDateTime15.setMillis((long) 26061397);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutablePeriod22.add(readableDuration23);
        mutablePeriod22.addMonths((int) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 1, chronology28);
        int int30 = localDate29.getDayOfYear();
        org.joda.time.LocalTime localTime31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTime(localTime31, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = localDate29.toDateMidnight(dateTimeZone34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.yearOfEra();
        int int37 = dateMidnight35.getMinuteOfHour();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 100, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime42.copy();
        org.joda.time.Duration duration44 = period40.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration44);
        mutablePeriod22.add((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime48.copy();
        mutableDateTime48.addMinutes(0);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime55 = dateTime52.withFieldAdded(durationFieldType53, (int) (byte) 0);
        mutableDateTime48.add(durationFieldType53, 4);
        org.joda.time.Duration duration58 = mutablePeriod22.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration58);
        long long60 = duration58.getMillis();
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.years();
        java.lang.String str62 = periodType61.getName();
        org.joda.time.PeriodType periodType63 = periodType61.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration58, periodType61);
        org.joda.time.Period period65 = duration58.toPeriod();
        org.joda.time.Duration duration66 = duration58.toDuration();
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration66);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 797 + "'", int16 == 797);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 92275200100L + "'", long60 == 92275200100L);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Years" + "'", str62, "Years");
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration66);
    }

    @Test
    public void test03257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03257");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay18.toDateMidnight();
        org.joda.time.Interval interval21 = yearMonthDay18.toInterval();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay18.minusDays(35);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime26.copy();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        mutableDateTime26.setZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate24.toDateTimeAtStartOfDay(dateTimeZone29);
        java.lang.String str32 = dateTimeZone29.getID();
        org.joda.time.DateTime dateTime33 = yearMonthDay23.toDateTimeAtMidnight(dateTimeZone29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay23.withMonthOfYear(26295098);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26295098 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Etc/UTC" + "'", str32, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test03258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03258");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(26070054);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.LocalDate localDate13 = localDate10.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology14);
        int int17 = localDate7.compareTo((org.joda.time.ReadablePartial) yearMonthDay16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime20.copy();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDate18.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate18.toDateTime(readableInstant26);
        org.joda.time.LocalDate.Property property28 = localDate18.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate18.dayOfWeek();
        int int30 = localDate18.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int32 = localDate18.indexOf(dateTimeFieldType31);
        boolean boolean33 = yearMonthDay16.equals((java.lang.Object) localDate18);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime35 = localDate18.toDateTimeAtMidnight(dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime35.withSecondOfMinute(26231680);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26231680 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test03259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03259");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.Period period10 = new org.joda.time.Period((long) 7, 100L, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfDay();
        java.lang.String str13 = dateTimeField12.toString();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = dateTimeField12.getAsShortText(26118015, locale15);
        java.lang.String str18 = locale15.getScript();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str13, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "26118015" + "'", str17, "26118015");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test03260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03260");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone3);
        java.util.Calendar.Builder builder8 = builder4.setWeekDate(26086690, 0, 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar11 = dateTime9.toGregorianCalendar();
        long long12 = gregorianCalendar11.getTimeInMillis();
        java.util.TimeZone timeZone13 = gregorianCalendar11.getTimeZone();
        java.util.Calendar.Builder builder14 = builder8.setTimeZone(timeZone13);
        java.util.Calendar.Builder builder18 = builder14.setWeekDate(26086528, 915, 26112315);
        java.util.Calendar.Builder builder22 = builder18.setTimeOfDay(51, 26077617, 248);
        java.util.Calendar.Builder builder27 = builder22.setTimeOfDay(21, 26245930, 26138097, 26072167);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        boolean boolean32 = locale31.hasExtensions();
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet33, filteringMode34);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode38 = null;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet37, filteringMode38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 1, chronology42);
        java.lang.String str44 = localDate43.toString();
        org.joda.time.LocalDate localDate46 = localDate43.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology47 = localDate46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekyear();
        java.lang.String str49 = chronology47.toString();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.era();
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(1645514076554L, chronology47);
        org.joda.time.DurationField durationField52 = chronology47.days();
        org.joda.time.DurationField durationField53 = chronology47.hours();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (short) 1, chronology57);
        java.lang.String str59 = localDate58.toString();
        org.joda.time.LocalDate localDate61 = localDate58.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology62 = localDate61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.weekyearOfCentury();
        org.joda.time.Period period64 = new org.joda.time.Period((long) 7, 100L, chronology62);
        org.joda.time.Period period65 = period64.toPeriod();
        org.joda.time.Period period67 = period65.withHours(26071282);
        int[] intArray69 = chronology47.get((org.joda.time.ReadablePeriod) period67, (long) 26087745);
        boolean boolean70 = strSet37.equals((java.lang.Object) intArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder71 = builder27.setFields(intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514299993L + "'", long12 == 1645514299993L);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode34.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01" + "'", str44, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01" + "'", str59, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 7, 14, 47, 745]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test03261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03261");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 100, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime5.copy();
        org.joda.time.Duration duration7 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime6);
        mutableDateTime6.setYear(26074093);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 1, chronology15);
        java.lang.String str17 = localDate16.toString();
        org.joda.time.LocalDate localDate19 = localDate16.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        mutablePeriod11.setPeriod((long) (byte) 100, (long) 26062367, chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfYear();
        mutableDateTime6.setChronology(chronology20);
        long long28 = chronology20.add((long) 26088764, (long) 26061877, 219);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((java.lang.Object) 26077617, chronology20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 5733639827L + "'", long28 == 5733639827L);
    }

    @Test
    public void test03262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03262");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(4);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 5, (long) 26072167);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minus((org.joda.time.ReadablePeriod) period11);
        int int13 = localDateTime12.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusDays(44);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test03263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03263");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        mutableDateTime2.setMillisOfSecond(3);
        int int20 = mutableDateTime2.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDateTime((int) (short) -1, 26189131, 26165222, 26290020, 26154055, 26241058, 26181980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26290020 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
    }

    @Test
    public void test03264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03264");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate.Property property4 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate5 = property4.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDate8.getValue(26163354);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26163354");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test03265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03265");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean8 = localTime6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = localTime6.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.Period period11 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime9);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Period period14 = period11.withField(durationFieldType12, (int) '#');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        java.lang.String str16 = periodType15.getName();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(periodType15);
        org.joda.time.PeriodType periodType18 = periodType15.withYearsRemoved();
        org.joda.time.Period period19 = period11.normalizedStandard(periodType15);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Period period22 = period11.withFieldAdded(durationFieldType20, 867);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        java.lang.String str29 = periodType28.getName();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(periodType28);
        org.joda.time.PeriodType periodType31 = periodType28.withYearsRemoved();
        org.joda.time.PeriodType periodType32 = periodType28.withWeeksRemoved();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property34 = localTime33.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight35.getZone();
        long long37 = property34.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.LocalTime localTime39 = property34.addCopy((long) (-292275054));
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(2L, (long) 26067972, periodType28, chronology40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 86, (long) 26079825, periodType25, chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.monthOfYear();
        org.joda.time.DurationField durationField44 = durationFieldType20.getField(chronology40);
        long long47 = durationField44.subtract((long) 928, 26097570);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Years" + "'", str16, "Years");
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Years" + "'", str29, "Years");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-27424361L) + "'", long37 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-93951251999072L) + "'", long47 == (-93951251999072L));
    }

    @Test
    public void test03266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03266");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26091056);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(26076299);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay1.property(dateTimeFieldType4);
        int int6 = property5.get();
        org.joda.time.TimeOfDay timeOfDay7 = property5.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay8 = property5.withMaximumValue();
        int int9 = property5.get();
        int int10 = property5.get();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
    }

    @Test
    public void test03267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03267");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.joda.time.LocalTime localTime4 = property1.addWrapFieldToCopy((int) 'a');
        org.joda.time.LocalTime localTime6 = localTime4.minusMillis(26072569);
        org.joda.time.LocalTime.Property property7 = localTime4.millisOfDay();
        int int8 = localTime4.size();
        org.joda.time.LocalTime localTime10 = localTime4.plusHours(26081642);
        int int11 = localTime4.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = localTime4.withSecondOfMinute(26103928);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26103928 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 28520540 + "'", int11 == 28520540);
    }

    @Test
    public void test03268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03268");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate.Property property4 = localDate2.year();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 100, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.Duration duration11 = period7.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Period period12 = period7.toPeriod();
        boolean boolean13 = localDate2.equals((java.lang.Object) period12);
        org.joda.time.LocalDate.Property property14 = localDate2.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = property14.setCopy(26222219);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26222219 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test03269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03269");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(26150274);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test03270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03270");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfDay();
        org.joda.time.DurationField durationField10 = chronology6.days();
        java.lang.String str11 = durationField10.toString();
        java.lang.String str12 = durationField10.toString();
        long long15 = durationField10.subtract((long) 32772, (long) 26181184);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[days]" + "'", str11, "DurationField[days]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DurationField[days]" + "'", str12, "DurationField[days]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-2262054297567228L) + "'", long15 == (-2262054297567228L));
    }

    @Test
    public void test03271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03271");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(26097602);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        mutableDateTime14.setZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtStartOfDay(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 1, chronology23);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTime(localTime26, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate24.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        int int32 = dateMidnight30.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property33 = dateMidnight30.year();
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = property33.getAsText(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale34.getDisplayScript(locale36);
        java.lang.String str38 = dateTimeZone17.getShortName((long) 666, locale36);
        org.joda.time.DateTime dateTime39 = dateTime11.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight40.getZone();
        org.joda.time.DateMidnight.Property property42 = dateMidnight40.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay43 = dateMidnight40.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = yearMonthDay43.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 1, chronology46);
        java.lang.String str48 = localDate47.toString();
        org.joda.time.LocalDate localDate50 = localDate47.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.year();
        long long57 = chronology51.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay43.withChronologyRetainFields(chronology51);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay43.year();
        java.util.Locale locale60 = java.util.Locale.ITALY;
        int int61 = property59.getMaximumShortTextLength(locale60);
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.lang.String str63 = locale60.getDisplayCountry(locale62);
        java.util.Calendar calendar64 = dateTime39.toCalendar(locale60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = dateTime39.withMillisOfSecond(26272914);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26272914 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Etc/UTC" + "'", str20, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01" + "'", str48, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1147058000L + "'", long57 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u30a4\u30bf\u30ea\u30a2" + "'", str63, "\u30a4\u30bf\u30ea\u30a2");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=341656702725,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1980,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=303,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=38,SECOND=22,MILLISECOND=725,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime(dateTimeZone11);
        mutableDateTime12.setDate((long) 26066836);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundFloor();
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate19 = localDate17.minusYears(100);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property21 = localDate19.weekyear();
        org.joda.time.LocalDate.Property property22 = localDate19.centuryOfEra();
        org.joda.time.LocalDate localDate24 = localDate19.minusDays(435);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight26.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = yearMonthDay29.getFieldTypes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 1, chronology32);
        java.lang.String str34 = localDate33.toString();
        org.joda.time.LocalDate localDate36 = localDate33.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.year();
        long long43 = chronology37.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay29.withChronologyRetainFields(chronology37);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay48 = dateMidnight45.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = yearMonthDay48.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone51 = dateMidnight50.getZone();
        boolean boolean53 = dateTimeZone51.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay48.toDateMidnight(dateTimeZone51);
        int[] intArray57 = chronology37.get((org.joda.time.ReadablePartial) yearMonthDay48, (long) 26069970);
        org.joda.time.Period period58 = new org.joda.time.Period((long) 26072939, chronology37);
        org.joda.time.DateTimeZone dateTimeZone59 = chronology37.getZone();
        org.joda.time.DateMidnight dateMidnight60 = localDate24.toDateMidnight(dateTimeZone59);
        long long64 = dateTimeZone59.convertLocalToUTC((long) 26225640, true, (long) 58);
        mutableDateTime16.setZone(dateTimeZone59);
        mutableDateTime16.add((long) 26188788);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setHourOfDay(73343);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 73343 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01" + "'", str34, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1147058000L + "'", long43 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 26225640L + "'", long64 == 26225640L);
    }

    @Test
    public void test03273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03273");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyear();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(1645514076554L, chronology7);
        org.joda.time.DurationField durationField12 = chronology7.days();
        org.joda.time.DurationField durationField13 = chronology7.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = durationField13.subtract((long) 499, 26181000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -2618100000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test03274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03274");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 7, 100L, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter16.getZone();
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale19.getDisplayName();
        boolean boolean21 = locale19.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter16.withLocale(locale19);
        java.lang.StringBuffer stringBuffer23 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 1, chronology25);
        int int27 = localDate26.getDayOfYear();
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate26.toDateTime(localTime28, dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = localDate26.toDateMidnight(dateTimeZone31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.yearOfEra();
        int int34 = dateMidnight32.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property35 = dateMidnight32.year();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.withMillis((long) ' ');
        org.joda.time.Interval interval38 = dateMidnight37.toInterval();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.minusMonths(867);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight37.withYearOfEra(719);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter22.printTo(stringBuffer23, (org.joda.time.ReadableInstant) dateMidnight37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u6cd5\u6587\u52a0\u62ff\u5927)" + "'", str20, "\u6cd5\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
    }

    @Test
    public void test03275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03275");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.Duration duration8 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Period period10 = period4.plusDays((int) (byte) 10);
        int int11 = period10.getHours();
        org.joda.time.Period period13 = period10.plusMonths(2);
        org.joda.time.Period period15 = period10.minusMonths(12);
        org.joda.time.Seconds seconds16 = period10.toStandardSeconds();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay1.plus((org.joda.time.ReadablePeriod) seconds16);
        int int18 = timeOfDay1.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay1.withMinuteOfHour(3);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plusMinutes(26084973);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withMinuteOfHour(26124);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26124 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 117 + "'", int18 == 117);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeOfDay23);
    }

    @Test
    public void test03276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03276");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.Duration duration8 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Period period10 = period4.plusDays((int) (byte) 10);
        int int11 = period10.getHours();
        org.joda.time.Period period13 = period10.plusMonths(2);
        org.joda.time.Period period15 = period10.minusMonths(12);
        org.joda.time.Seconds seconds16 = period10.toStandardSeconds();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay1.plus((org.joda.time.ReadablePeriod) seconds16);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.plusMillis(687120000);
        int int20 = timeOfDay17.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 100, chronology22);
        org.joda.time.Seconds seconds24 = period23.toStandardSeconds();
        int int25 = period23.getMonths();
        int int26 = period23.getHours();
        org.joda.time.Period period28 = period23.withMillis(666);
        org.joda.time.Period period30 = period23.withMonths(0);
        org.joda.time.Period period31 = period23.normalizedStandard();
        org.joda.time.Period period33 = period31.plusYears(0);
        org.joda.time.PeriodType periodType34 = period31.getPeriodType();
        boolean boolean35 = timeOfDay17.equals((java.lang.Object) periodType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType37 = periodType34.getFieldType(26081164);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26081164");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 117 + "'", int20 == 117);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test03277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03277");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant1 = mutableDateTime0.toInstant();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        mutableDateTime0.setChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyear();
        org.joda.time.Chronology chronology11 = chronology8.withUTC();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.halfdayOfDay();
        long long15 = dateTimeField13.roundHalfEven((long) 393);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test03278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03278");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime2.copy();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDate0.toDateTime(readableInstant8);
        org.joda.time.LocalDate.Property property10 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property11 = localDate0.dayOfWeek();
        int int12 = localDate0.getYear();
        org.joda.time.LocalDate localDate14 = localDate0.withCenturyOfEra(19);
        int int15 = localDate0.getYear();
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
    }

    @Test
    public void test03279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03279");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay(10);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) periodType9, dateTimeZone11);
        int int13 = localDateTime12.getDayOfMonth();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        int int16 = localDateTime12.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withField(dateTimeFieldType17, 190);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime6.withField(dateTimeFieldType17, 26080518);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfDay(26062923);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusMinutes(472);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = localDateTime21.getValue(26217184);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26217184");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 26300960 + "'", int14 == 26300960);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test03280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03280");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.joda.time.LocalTime localTime4 = localTime2.plusMinutes((-292275054));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 100, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.Duration duration11 = period7.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Period period13 = period7.plusDays((int) (byte) 10);
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = period7.getFieldTypes();
        org.joda.time.Period period16 = period7.plusMinutes((int) (short) -1);
        org.joda.time.LocalTime localTime17 = localTime2.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalTime localTime19 = localTime17.minusMillis(26207668);
        java.lang.String str20 = localTime17.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "07:17:00.100" + "'", str20, "07:17:00.100");
    }

    @Test
    public void test03281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03281");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekyear();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.LocalDateTime localDateTime9 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(274);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = property15.setCopy(26151132);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26151132 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26301122 + "'", int5 == 26301122);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test03282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03282");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        boolean boolean8 = durationField7.isPrecise();
        int int11 = durationField7.getDifference((long) 26072867, (long) 0);
        long long14 = durationField7.subtract(15L, (long) 26085847);
        long long15 = durationField7.getUnitMillis();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-823189821667199985L) + "'", long14 == (-823189821667199985L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 31556952000L + "'", long15 == 31556952000L);
    }

    @Test
    public void test03283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03283");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str1 = locale0.getDisplayName();
        boolean boolean2 = locale0.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u6cd5\u6587\u52a0\u62ff\u5927)" + "'", str1, "\u6cd5\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test03284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03284");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = property11.getAsText(locale12);
        java.lang.String str14 = property11.getAsShortText();
        org.joda.time.DateMidnight dateMidnight15 = property11.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withYearOfEra((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plusMonths((int) '4');
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime22.copy();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        mutableDateTime22.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate20.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate20.toDateTime(readableInstant28);
        org.joda.time.LocalDate.Property property30 = localDate20.yearOfCentury();
        int int31 = localDate20.getCenturyOfEra();
        java.lang.String str32 = localDate20.toString();
        org.joda.time.LocalDate localDate34 = localDate20.plusMonths(0);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight19.withFields((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(periodType36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((java.lang.Object) periodType36, dateTimeZone38);
        int int40 = localDateTime39.getDayOfMonth();
        int int41 = localDateTime39.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.millisOfSecond();
        int int43 = localDateTime39.getEra();
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.era();
        org.joda.time.LocalDateTime.Property property45 = localDateTime39.dayOfMonth();
        int int46 = localDateTime39.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property47 = localDateTime39.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.withMillisOfDay(86399999);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime39.plusMillis(3);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime53.copy();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        mutableDateTime54.setZone(dateTimeZone55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.millisOfDay();
        mutableDateTime58.addWeeks(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime58.property(dateTimeFieldType62);
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType62.getDurationType();
        int int65 = localDateTime51.get(dateTimeFieldType62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property66 = localDate34.property(dateTimeFieldType62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20 + "'", int31 == 20);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22" + "'", str32, "2022-02-22");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 26301224 + "'", int41 == 26301224);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 7 + "'", int65 == 7);
    }

    @Test
    public void test03285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03285");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.util.Date date3 = localDate2.toDate();
        org.joda.time.LocalDate.Property property4 = localDate2.weekOfWeekyear();
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale6.getDisplayCountry(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = property4.setCopy("2022-02-22T07:16:58.782", locale7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:16:58.782\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str8, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Corea del Sud" + "'", str9, "Corea del Sud");
    }

    @Test
    public void test03286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03286");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime9.era();
        org.joda.time.DateTime dateTime14 = dateTime9.withDurationAdded((long) 946, 26294149);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test03287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03287");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("PT0.100S");
        boolean boolean3 = timeZone2.observesDaylightTime();
        boolean boolean4 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone6 = calendar5.getTimeZone();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar5);
        org.joda.time.LocalDate.Property property8 = localDate7.weekOfWeekyear();
        java.lang.String str10 = localDate7.toString("51");
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(periodType11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) periodType11, dateTimeZone13);
        int int15 = localDateTime14.getDayOfMonth();
        int int16 = localDateTime14.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfSecond();
        int int18 = localDateTime14.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.era();
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.dayOfMonth();
        int int21 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property22 = localDateTime14.millisOfSecond();
        org.joda.time.Period period27 = new org.joda.time.Period((int) (byte) 10, (-1), 22, 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period27, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(26071282);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localDate7.compareTo((org.joda.time.ReadablePartial) localDateTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514301270,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=21,MILLISECOND=270,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "51" + "'", str10, "51");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26301270 + "'", int16 == 26301270);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test03288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03288");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        int int8 = mutableDateTime7.getMillisOfSecond();
        mutableDateTime7.setMillis((long) 26061397);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration11, readableInstant12, periodType13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutablePeriod14.add(readableDuration15);
        mutablePeriod14.addMonths((int) '#');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 1, chronology20);
        int int22 = localDate21.getDayOfYear();
        org.joda.time.LocalTime localTime23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate21.toDateTime(localTime23, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = localDate21.toDateMidnight(dateTimeZone26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.yearOfEra();
        int int29 = dateMidnight27.getMinuteOfHour();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 100, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime34.copy();
        org.joda.time.Duration duration36 = period32.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration36);
        mutablePeriod14.add((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime40.copy();
        mutableDateTime40.addMinutes(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime47 = dateTime44.withFieldAdded(durationFieldType45, (int) (byte) 0);
        mutableDateTime40.add(durationFieldType45, 4);
        org.joda.time.Duration duration50 = mutablePeriod14.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime40);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration50);
        long long52 = duration50.getMillis();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.years();
        java.lang.String str54 = periodType53.getName();
        org.joda.time.PeriodType periodType55 = periodType53.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableDuration) duration50, periodType53);
        mutablePeriod56.setYears(26293446);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 320 + "'", int8 == 320);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 92275200100L + "'", long52 == 92275200100L);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Years" + "'", str54, "Years");
        org.junit.Assert.assertNotNull(periodType55);
    }

    @Test
    public void test03289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03289");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyear();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(1645514076554L, chronology7);
        org.joda.time.DurationField durationField12 = chronology7.days();
        org.joda.time.DurationField durationField13 = chronology7.hours();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        java.lang.String str19 = localDate18.toString();
        org.joda.time.LocalDate localDate21 = localDate18.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyearOfCentury();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 7, 100L, chronology22);
        org.joda.time.Period period25 = period24.toPeriod();
        org.joda.time.Period period27 = period25.withHours(26071282);
        int[] intArray29 = chronology7.get((org.joda.time.ReadablePeriod) period27, (long) 26087745);
        org.joda.time.DurationField durationField30 = chronology7.seconds();
        java.lang.String str31 = durationField30.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 7, 14, 47, 745]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DurationField[seconds]" + "'", str31, "DurationField[seconds]");
    }

    @Test
    public void test03290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03290");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("1970-03-11T07:14:42.282");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970-03-11T07:14:42.282\" is malformed at \"70-03-11T07:14:42.282\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03291");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getRangeDurationField();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 1, chronology12);
        int int14 = localDate13.getDayOfYear();
        org.joda.time.LocalTime localTime15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate13.toDateTime(localTime15, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = localDate13.toDateMidnight(dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfEra();
        int int21 = dateMidnight19.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property22 = dateMidnight19.year();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = property22.getAsText(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale23.getDisplayScript(locale25);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale23.getDisplayScript(locale27);
        java.lang.String str29 = locale10.getDisplayVariant(locale27);
        java.lang.String str30 = dateTimeField7.getAsShortText((int) (short) 100, locale27);
        java.lang.String str32 = dateTimeField7.getAsShortText((long) 26091056);
        long long35 = dateTimeField7.getDifferenceAsLong((long) 26130405, (long) 954);
        java.lang.String str37 = dateTimeField7.getAsText((long) 26229015);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970" + "'", str24, "1970");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970" + "'", str32, "1970");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970" + "'", str37, "1970");
    }

    @Test
    public void test03292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03292");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.lang.String str19 = localDate7.toString("14", locale15);
        java.lang.String str20 = locale15.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withLocale(locale15);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter21.getZone();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        java.lang.String str25 = periodType24.getName();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(periodType24);
        org.joda.time.PeriodType periodType27 = periodType24.withYearsRemoved();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 1, chronology29);
        java.lang.String str31 = localDate30.toString();
        org.joda.time.LocalDate localDate33 = localDate30.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.millisOfSecond();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 26061397, periodType27, chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter21.withChronology(chronology34);
        java.util.Locale locale40 = dateTimeFormatter39.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter39.withDefaultYear(184);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.parse("\u30a4\u30bf\u30ea\u30a2", dateTimeFormatter42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str17, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Corea del Sud" + "'", str18, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "14" + "'", str19, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str20, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Years" + "'", str25, "Years");
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01" + "'", str31, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test03293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03293");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.LocalTime localTime1 = timeOfDay0.toLocalTime();
        int int2 = timeOfDay0.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.minusMillis((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property6 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime8 = localTime5.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localTime5.toDateTimeToday(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration11, readableInstant12, periodType13);
        mutablePeriod14.addYears((int) (byte) 0);
        int int17 = mutablePeriod14.getMonths();
        mutablePeriod14.addMinutes((int) (byte) 0);
        int int20 = mutablePeriod14.getMinutes();
        org.joda.time.DateTime dateTime22 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime10.withMillis((long) 26072569);
        java.util.Date date25 = dateTime24.toDate();
        org.joda.time.DateTime dateTime27 = dateTime24.plusHours((int) 'x');
        org.joda.time.DateTime dateTime29 = dateTime24.plusMillis(26073687);
        org.joda.time.DateTime dateTime31 = dateTime24.minus((long) 32772);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime31.withField(dateTimeFieldType32, 26102637);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay36 = timeOfDay0.withField(dateTimeFieldType32, 26102637);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 435 + "'", int2 == 435);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 07:14:32 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test03294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03294");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 100, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.Duration duration17 = period13.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusYears((int) (short) -1);
        org.joda.time.DateMidnight.Property property21 = dateMidnight18.yearOfEra();
        org.joda.time.DateMidnight dateMidnight22 = property21.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test03295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03295");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay3.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property19.withMinimumValue();
        org.joda.time.DurationField durationField21 = property19.getRangeDurationField();
        int int22 = property19.getMinimumValue();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 1, chronology25);
        java.lang.String str27 = localDate26.toString();
        org.joda.time.LocalDate localDate29 = localDate26.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        int int34 = dateTimeField32.getMinimumValue((long) 26073757);
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale36.toLanguageTag();
        java.lang.String str38 = locale35.getDisplayCountry(locale36);
        int int39 = dateTimeField32.getMaximumTextLength(locale36);
        java.util.Set<java.lang.String> strSet40 = locale36.getUnicodeLocaleAttributes();
        org.joda.time.YearMonthDay yearMonthDay41 = property19.setCopy("3", locale36);
        org.joda.time.YearMonthDay yearMonthDay42 = property19.withMinimumValue();
        org.joda.time.ReadablePartial readablePartial43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = yearMonthDay42.compareTo(readablePartial43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-292275054) + "'", int22 == (-292275054));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01" + "'", str27, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "de-DE" + "'", str37, "de-DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
    }

    @Test
    public void test03296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03296");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        java.util.Date date11 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        java.lang.String str12 = date11.toLocaleString();
        int int13 = date11.getTimezoneOffset();
        calendar4.setTime(date11);
        gregorianCalendar2.setTime(date11);
        int int16 = date11.getHours();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=822422887978964000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=26063513,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=307,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=22,SECOND=44,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date11.toString(), "Mon Nov 03 16:22:44 UTC 26063513");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "26063513-11-3 16:22:44" + "'", str12, "26063513-11-3 16:22:44");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    }

    @Test
    public void test03297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03297");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.LocalDate localDate13 = localDate10.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyearOfCentury();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 7, 100L, chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.minuteOfDay();
        java.lang.String str19 = chronology14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(210, 26114091, 35, 26217741, 26265278, 26072651, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26217741 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
    }

    @Test
    public void test03298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03298");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(26062445);
        java.lang.String str12 = localDateTime11.toString();
        int int13 = localDateTime11.getWeekyear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26301641 + "'", int5 == 26301641);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "501518-01-01T00:00:00.000" + "'", str12, "501518-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 501518 + "'", int13 == 501518);
    }

    @Test
    public void test03299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03299");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 1, chronology12);
        java.lang.String str14 = localDate13.toString();
        org.joda.time.LocalDate localDate16 = localDate13.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 7, 100L, chronology17);
        org.joda.time.DateTime dateTime21 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period19, 26076640);
        org.joda.time.DateTime dateTime23 = dateTime8.minusMonths(26148786);
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test03300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03300");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.LocalTime localTime5 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime6 = property1.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property7 = localTime6.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.LocalTime localTime9 = property7.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) localTime9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27424361L) + "'", long4 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test03301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03301");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26091056);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(26076299);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay1.property(dateTimeFieldType4);
        int int6 = property5.get();
        org.joda.time.TimeOfDay timeOfDay7 = property5.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withMillisOfSecond(46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = timeOfDay7.toString("2022-02-22T07:16:41.770");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test03302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03302");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay3.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property19.getYearMonthDay();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        org.joda.time.DateMidnight.Property property23 = dateMidnight21.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay24 = dateMidnight21.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonthDay24.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 1, chronology27);
        java.lang.String str29 = localDate28.toString();
        org.joda.time.LocalDate localDate31 = localDate28.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.year();
        long long38 = chronology32.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay24.withChronologyRetainFields(chronology32);
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay24.year();
        org.joda.time.YearMonthDay yearMonthDay41 = property40.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone43 = dateMidnight42.getZone();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay45 = dateMidnight42.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = yearMonthDay45.getFieldTypes();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 1, chronology48);
        java.lang.String str50 = localDate49.toString();
        org.joda.time.LocalDate localDate52 = localDate49.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.eras();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.year();
        long long59 = chronology53.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay45.withChronologyRetainFields(chronology53);
        org.joda.time.YearMonthDay.Property property61 = yearMonthDay45.year();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        int int63 = property61.getMaximumShortTextLength(locale62);
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.lang.String str65 = locale62.getDisplayCountry(locale64);
        java.lang.String str66 = property40.getAsText(locale64);
        int int67 = property19.getMaximumShortTextLength(locale64);
        org.joda.time.YearMonthDay yearMonthDay68 = property19.getYearMonthDay();
        java.lang.String str69 = property19.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay71 = property19.setCopy("weekyear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weekyear\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1147058000L + "'", long38 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01" + "'", str50, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1147058000L + "'", long59 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u30a4\u30bf\u30ea\u30a2" + "'", str65, "\u30a4\u30bf\u30ea\u30a2");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022" + "'", str69, "2022");
    }

    @Test
    public void test03303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03303");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        int int7 = timeOfDay6.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.withMinuteOfHour(3);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 100, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.Duration duration17 = period13.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Period period19 = period13.plusDays((int) (byte) 10);
        int int20 = period19.getHours();
        org.joda.time.Period period22 = period19.plusMonths(2);
        org.joda.time.Period period24 = period19.minusMonths(12);
        org.joda.time.Period period26 = period19.plusWeeks(26073687);
        org.joda.time.Period period27 = period26.negated();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 119);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay6.hourOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime32.copy();
        mutableDateTime32.addMinutes(0);
        mutableDateTime32.setSecondOfDay(22);
        org.joda.time.Chronology chronology38 = null;
        mutableDateTime32.setChronology(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime32.set(dateTimeFieldType40, 26069958);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundCeiling();
        mutableDateTime32.setTime((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period(10L, (-1L), periodType50, chronology51);
        org.joda.time.Period period54 = period52.withSeconds(26071);
        int int55 = period54.getMonths();
        mutableDateTime46.add((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Weeks weeks57 = period54.toStandardWeeks();
        org.joda.time.Period period59 = period54.minusMonths(954);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay6.minus((org.joda.time.ReadablePeriod) period59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay62 = timeOfDay6.withSecondOfMinute(26170219);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26170219 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(weeks57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(timeOfDay60);
    }

    @Test
    public void test03304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03304");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusYears(100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 1, chronology4);
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate localDate8 = localDate5.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property9 = localDate5.dayOfWeek();
        org.joda.time.LocalDate localDate10 = property9.withMaximumValue();
        org.joda.time.LocalDate localDate12 = localDate10.minusYears(26073757);
        boolean boolean13 = localDate2.isBefore((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableDuration14, readableInstant15, periodType16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutablePeriod17.add(readableDuration18);
        mutablePeriod17.addYears((int) (short) 100);
        java.lang.Object obj22 = mutablePeriod17.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        int int26 = localDate25.getDayOfYear();
        org.joda.time.LocalTime localTime27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate25.toDateTime(localTime27, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableDuration30, readableInstant31, periodType32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutablePeriod33.add(readableDuration34);
        mutablePeriod33.addMonths((int) '#');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 1, chronology39);
        int int41 = localDate40.getDayOfYear();
        org.joda.time.LocalTime localTime42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate40.toDateTime(localTime42, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = localDate40.toDateMidnight(dateTimeZone45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.yearOfEra();
        int int48 = dateMidnight46.getMinuteOfHour();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 100, chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime53.copy();
        org.joda.time.Duration duration55 = period51.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight46.plus((org.joda.time.ReadableDuration) duration55);
        mutablePeriod33.add((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime58 = dateTime29.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 1, chronology60);
        java.lang.String str62 = localDate61.toString();
        org.joda.time.LocalDate localDate64 = localDate61.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology65 = localDate64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.eras();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.year();
        long long71 = chronology65.add(0L, (long) 26069500, 44);
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration55, chronology65);
        mutablePeriod17.setSeconds(9);
        org.joda.time.LocalDate localDate75 = localDate2.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.LocalDate.Property property76 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate78 = localDate2.withYear(26122158);
        java.util.Date date79 = localDate78.toDate();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT9.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT9.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT9.100S");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1147058000L + "'", long71 == 1147058000L);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Wed Feb 22 00:00:00 UTC 26122158");
    }

    @Test
    public void test03305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03305");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("de-DE");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        int int12 = dateTimeField10.getMinimumValue((long) 26073757);
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        int int17 = dateTimeField10.getMaximumTextLength(locale14);
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str30 = locale28.getExtension('a');
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale22, locale23, locale24, locale25, locale26, locale27, locale28, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet37.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet37);
        boolean boolean42 = strSet18.addAll((java.util.Collection<java.lang.String>) strSet37);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet18);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str55 = locale53.getExtension('a');
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale47, locale48, locale49, locale50, locale51, locale52, locale53, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleKeys();
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        boolean boolean65 = strSet62.removeAll((java.util.Collection<java.lang.String>) strSet64);
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        boolean boolean68 = strSet64.removeAll((java.util.Collection<java.lang.String>) strSet67);
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet64);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.lang.String str81 = locale79.getExtension('a');
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.util.Locale[] localeArray83 = new java.util.Locale[] { locale73, locale74, locale75, locale76, locale77, locale78, locale79, locale82 };
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList86, filteringMode87);
        java.util.Locale locale89 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList88);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "de-DE" + "'", str15, "de-DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertTrue("'" + filteringMode87 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode87.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNull(locale89);
    }

    @Test
    public void test03306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03306");
        org.joda.time.Period period8 = org.joda.time.Period.hours((-1));
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(23, (int) (short) -1, 26061790, 26077858, 0, 26062367, 0, 0);
        org.joda.time.Period period18 = period8.withFields((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 1, chronology20);
        int int22 = localDate21.getDayOfYear();
        org.joda.time.LocalTime localTime23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate21.toDateTime(localTime23, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = localDate21.toDateMidnight(dateTimeZone26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.yearOfEra();
        int int29 = dateMidnight27.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property30 = dateMidnight27.year();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 1, chronology32);
        int int34 = localDate33.getDayOfYear();
        org.joda.time.LocalTime localTime35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate33.toDateTime(localTime35, dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = localDate33.toDateMidnight(dateTimeZone38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.yearOfEra();
        int int41 = dateMidnight39.getMinuteOfHour();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 100, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime46.copy();
        org.joda.time.Duration duration48 = period44.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight39.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(readableDuration50, readableInstant51, periodType52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        mutablePeriod53.add(readableDuration54);
        mutablePeriod53.addMonths((int) '#');
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 1, chronology59);
        int int61 = localDate60.getDayOfYear();
        org.joda.time.LocalTime localTime62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate60.toDateTime(localTime62, dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = localDate60.toDateMidnight(dateTimeZone65);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.yearOfEra();
        int int68 = dateMidnight66.getMinuteOfHour();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((long) (byte) 100, chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(chronology72);
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime73.copy();
        org.joda.time.Duration duration75 = period71.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime74);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight66.plus((org.joda.time.ReadableDuration) duration75);
        mutablePeriod53.add((org.joda.time.ReadableDuration) duration75);
        boolean boolean78 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration75);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight27.withDurationAdded((org.joda.time.ReadableDuration) duration75, 608);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.years();
        java.lang.String str83 = periodType82.getName();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(periodType82);
        org.joda.time.PeriodType periodType85 = periodType82.withYearsRemoved();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate((long) (short) 1, chronology87);
        java.lang.String str89 = localDate88.toString();
        org.joda.time.LocalDate localDate91 = localDate88.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology92 = localDate91.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = chronology92.yearOfEra();
        org.joda.time.DateTimeField dateTimeField94 = chronology92.millisOfSecond();
        org.joda.time.Period period95 = new org.joda.time.Period((long) 26061397, periodType85, chronology92);
        org.joda.time.DateTimeField dateTimeField96 = chronology92.clockhourOfDay();
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration75, chronology92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime98 = new org.joda.time.LocalDateTime(32770, 26116754, 282, 18, 25, 501823, 42, chronology92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 501823 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Years" + "'", str83, "Years");
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970-01-01" + "'", str89, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test03307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03307");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 100, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime17.copy();
        org.joda.time.Duration duration19 = period15.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.Period period21 = period15.plusDays((int) (byte) 10);
        int int22 = period21.getHours();
        org.joda.time.Period period24 = period21.plusMonths(2);
        org.joda.time.Period period26 = period21.minusMonths(12);
        org.joda.time.Seconds seconds27 = period21.toStandardSeconds();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay12.plus((org.joda.time.ReadablePeriod) seconds27);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay12.minusMinutes(26067310);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableDuration31, readableInstant32, periodType33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutablePeriod34.add(readableDuration35);
        mutablePeriod34.addYears((int) (short) 100);
        java.lang.Object obj39 = mutablePeriod34.clone();
        mutablePeriod34.setSeconds(894);
        mutablePeriod34.setMonths(26067310);
        mutablePeriod34.setHours(26063026);
        int int46 = mutablePeriod34.getWeeks();
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay30.plus((org.joda.time.ReadablePeriod) mutablePeriod34);
        // The following exception was thrown during execution in test generation
        try {
            long long50 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 65893304, 26152701);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 2615270100");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "P100Y26067310MT26063026H894S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "P100Y26067310MT26063026H894S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "P100Y26067310MT26063026H894S");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(timeOfDay47);
    }

    @Test
    public void test03308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03308");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.LocalTime localTime1 = timeOfDay0.toLocalTime();
        int int2 = localTime1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 100, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        org.joda.time.Duration duration10 = period6.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime9);
        mutableDateTime9.setYear(26074093);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(periodType13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate localDate22 = localDate19.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        mutablePeriod14.setPeriod((long) (byte) 100, (long) 26062367, chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfYear();
        mutableDateTime9.setChronology(chronology23);
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime9.getZone();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone28);
        java.util.Locale locale31 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale31);
        java.lang.String str33 = dateTimeZone28.getShortName((long) 26159829, locale31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = localTime1.toString("cinese (Cina)", locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
    }

    @Test
    public void test03309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03309");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getScript();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 1, chronology4);
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate localDate8 = localDate5.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        int int13 = dateTimeField11.getMinimumValue((long) 26073757);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        int int18 = dateTimeField11.getMaximumTextLength(locale15);
        java.lang.String str19 = locale15.getISO3Country();
        java.util.Set<java.lang.String> strSet20 = locale15.getUnicodeLocaleKeys();
        java.lang.String str21 = locale0.getDisplayScript(locale15);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(26172047);
        int int29 = dateTime28.getSecondOfMinute();
        boolean boolean30 = locale0.equals((java.lang.Object) dateTime28);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "IT" + "'", str1, "IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "de-DE" + "'", str16, "de-DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DEU" + "'", str19, "DEU");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test03310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03310");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        long long3 = gregorianCalendar2.getTimeInMillis();
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar2);
        int int5 = gregorianCalendar2.getMinimalDaysInFirstWeek();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        java.lang.String str9 = periodType8.getName();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType8);
        org.joda.time.PeriodType periodType11 = periodType8.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType8.withWeeksRemoved();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        long long17 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.LocalTime localTime19 = property14.addCopy((long) (-292275054));
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(2L, (long) 26067972, periodType8, chronology20);
        boolean boolean22 = gregorianCalendar2.equals((java.lang.Object) 26067972);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514302359L + "'", long3 == 1645514302359L);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Years" + "'", str9, "Years");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-27424361L) + "'", long17 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03311");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        mutablePeriod3.addSeconds(26061238);
        mutablePeriod3.addMillis((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.Duration duration12 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime11);
        int int13 = mutableDateTime11.getMinuteOfDay();
        int int14 = mutableDateTime11.getRoundingMode();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        java.lang.String str18 = localDate17.toString();
        org.joda.time.LocalDate localDate20 = localDate17.withYearOfEra((int) (byte) 100);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.LocalDate localDate23 = localDate17.plusWeeks(26081086);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (short) 1, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight27 = localDate23.toDateMidnight(dateTimeZone25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 1, chronology29);
        java.lang.String str31 = localDate30.toString();
        org.joda.time.LocalDate localDate33 = localDate30.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.year();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight27.toMutableDateTime(chronology34);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime11, (org.joda.time.ReadableInstant) dateMidnight27);
        mutablePeriod39.setPeriod((long) 26220586, (long) 26192806);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 434 + "'", int13 == 434);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01" + "'", str18, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01" + "'", str31, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test03312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03312");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableDuration7, readableInstant8, periodType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutablePeriod10.add(readableDuration11);
        mutablePeriod10.addMonths((int) '#');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        int int18 = localDate17.getDayOfYear();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate17.toDateTime(localTime19, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.yearOfEra();
        int int25 = dateMidnight23.getMinuteOfHour();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 100, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime30.copy();
        org.joda.time.Duration duration32 = period28.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration32);
        mutablePeriod10.add((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime35 = dateTime6.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMillis(26063479);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 1, chronology39);
        int int41 = localDate40.getDayOfYear();
        org.joda.time.LocalTime localTime42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate40.toDateTime(localTime42, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = localDate40.toDateMidnight(dateTimeZone45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.yearOfEra();
        boolean boolean49 = dateMidnight46.equals((java.lang.Object) 1L);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight46.minus((long) 26062923);
        int int52 = dateMidnight46.getYearOfCentury();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.years();
        java.lang.String str55 = periodType54.getName();
        org.joda.time.PeriodType periodType56 = periodType54.withMonthsRemoved();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 434, periodType54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 1, chronology59);
        int int61 = localDate60.getDayOfYear();
        org.joda.time.LocalTime localTime62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate60.toDateTime(localTime62, dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = localDate60.toDateMidnight(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.withDayOfMonth(1);
        int int69 = dateMidnight68.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight68.withFieldAdded(durationFieldType70, 26074093);
        boolean boolean73 = periodType54.isSupported(durationFieldType70);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateMidnight46, periodType54);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 70 + "'", int52 == 70);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Years" + "'", str55, "Years");
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test03313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03313");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.PeriodType periodType5 = periodType2.withYearsRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 1, chronology7);
        java.lang.String str9 = localDate8.toString();
        org.joda.time.LocalDate localDate11 = localDate8.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfSecond();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 26061397, periodType5, chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType0.getField(chronology12);
        int int20 = dateTimeField18.get((long) 26090247);
        long long22 = dateTimeField18.roundFloor((long) 210);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight.Property property25 = dateMidnight23.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay26 = dateMidnight23.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = yearMonthDay26.getFieldTypes();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 1, chronology29);
        java.lang.String str31 = localDate30.toString();
        org.joda.time.LocalDate localDate33 = localDate30.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.year();
        long long40 = chronology34.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay26.withChronologyRetainFields(chronology34);
        int int42 = yearMonthDay26.size();
        java.lang.String str43 = yearMonthDay26.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 100, chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime48.copy();
        org.joda.time.Duration duration50 = period46.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.Period period51 = period46.toPeriod();
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay26.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone54 = dateMidnight53.getZone();
        org.joda.time.DateMidnight.Property property55 = dateMidnight53.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay56 = dateMidnight53.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = yearMonthDay56.getFieldTypes();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 1, chronology59);
        java.lang.String str61 = localDate60.toString();
        org.joda.time.LocalDate localDate63 = localDate60.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology64 = localDate63.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.eras();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.year();
        long long70 = chronology64.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay56.withChronologyRetainFields(chronology64);
        org.joda.time.YearMonthDay.Property property72 = yearMonthDay56.year();
        org.joda.time.YearMonthDay yearMonthDay73 = property72.withMinimumValue();
        org.joda.time.DurationField durationField74 = property72.getRangeDurationField();
        int int75 = property72.getMinimumValue();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) (short) 1, chronology78);
        java.lang.String str80 = localDate79.toString();
        org.joda.time.LocalDate localDate82 = localDate79.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology83 = localDate82.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.secondOfMinute();
        int int87 = dateTimeField85.getMinimumValue((long) 26073757);
        java.util.Locale locale88 = java.util.Locale.JAPANESE;
        java.util.Locale locale89 = java.util.Locale.GERMANY;
        java.lang.String str90 = locale89.toLanguageTag();
        java.lang.String str91 = locale88.getDisplayCountry(locale89);
        int int92 = dateTimeField85.getMaximumTextLength(locale89);
        java.util.Set<java.lang.String> strSet93 = locale89.getUnicodeLocaleAttributes();
        org.joda.time.YearMonthDay yearMonthDay94 = property72.setCopy("3", locale89);
        org.joda.time.YearMonthDay yearMonthDay95 = property72.withMinimumValue();
        java.util.Locale locale97 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.YearMonthDay yearMonthDay98 = property72.setCopy("26118015", locale97);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) yearMonthDay52, locale97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01" + "'", str31, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1147058000L + "'", long40 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22" + "'", str43, "2022-02-22");
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01" + "'", str61, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1147058000L + "'", long70 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNull(durationField74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-292275054) + "'", int75 == (-292275054));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1970-01-01" + "'", str80, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ja");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "de-DE" + "'", str90, "de-DE");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(yearMonthDay94);
        org.junit.Assert.assertNotNull(yearMonthDay95);
        org.junit.Assert.assertNotNull(locale97);
        org.junit.Assert.assertEquals(locale97.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(yearMonthDay98);
    }

    @Test
    public void test03314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03314");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        mutableDateTime3.addMinutes(894);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.LocalDate localDate13 = localDate10.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutableDateTime6.setChronology(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.millis();
        mutableDateTime3.setChronology(chronology14);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime1, chronology14);
        mutableDateTime1.add((long) 26095703);
        mutableDateTime1.setMillisOfDay(26296996);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test03315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03315");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        int int5 = property1.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField6 = property1.getField();
        org.joda.time.LocalTime localTime7 = property1.roundFloorCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.LocalDate localDate13 = localDate10.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.years();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfDay();
        long long19 = dateTimeField17.roundHalfEven(1645514068164L);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property21 = localDate20.era();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        java.lang.String str26 = localDate25.toString();
        org.joda.time.LocalDate localDate28 = localDate25.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyearOfCentury();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 100, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime35.copy();
        org.joda.time.Duration duration37 = period33.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Period period39 = period33.plusDays((int) (byte) 10);
        int int40 = period39.getHours();
        org.joda.time.Period period42 = period39.plusMonths(2);
        org.joda.time.Period period44 = period39.minusMonths(12);
        org.joda.time.Period period46 = period39.plusWeeks(26073687);
        int[] intArray48 = chronology29.get((org.joda.time.ReadablePeriod) period39, (long) 12);
        int[] intArray50 = dateTimeField17.addWrapPartial((org.joda.time.ReadablePartial) localDate20, 26067972, intArray48, 0);
        org.joda.time.LocalDate.Property property51 = localDate20.dayOfWeek();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (short) 1, chronology53);
        int int55 = localDate54.getDayOfYear();
        org.joda.time.LocalDate.Property property56 = localDate54.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean58 = localDate54.isSupported(dateTimeFieldType57);
        boolean boolean59 = localDate20.isAfter((org.joda.time.ReadablePartial) localDate54);
        int int60 = localDate20.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int61 = localTime7.compareTo((org.joda.time.ReadablePartial) localDate20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27424361L) + "'", long4 == (-27424361L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514068164L + "'", long19 == 1645514068164L);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 12]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 12]");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
    }

    @Test
    public void test03316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03316");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone9);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) localTime4, dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getRangeDurationType();
        int int14 = localTime11.get(dateTimeFieldType12);
        org.joda.time.LocalTime.Property property15 = localTime11.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy(26206663);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 26302741 + "'", int14 == 26302741);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test03317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03317");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        mutableDateTime1.addMinutes(0);
        java.lang.String str5 = mutableDateTime1.toString();
        mutableDateTime1.setMillisOfSecond(894);
        boolean boolean9 = mutableDateTime1.isAfter((long) 26069958);
        mutableDateTime1.addMonths(26097570);
        org.junit.Assert.assertNotNull(mutableDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:18:22.845Z" + "'", str5, "2022-02-22T07:18:22.845Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test03318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03318");
        org.joda.time.Period period1 = org.joda.time.Period.years(366);
        java.lang.String str2 = period1.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "P366Y" + "'", str2, "P366Y");
    }

    @Test
    public void test03319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03319");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 26069295);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = localTime1.toString("0099-02-24T07:14:53.483Z", locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test03320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03320");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = new java.util.Locale("1970", "PT0.100S");
        java.lang.String str6 = nameProvider0.getName(locale3, "14", "PT0.100S");
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str11 = nameProvider0.getName(locale7, "ISOChronology[UTC]", "PT0.100S");
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale7);
        java.util.Date date13 = calendar12.getTime();
        java.lang.String str14 = date13.toLocaleString();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale3.toString(), "1970_PT0.100S");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str8, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514303053,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=23,MILLISECOND=53,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 07:18:23 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-2-22 7:18:23" + "'", str14, "2022-2-22 7:18:23");
    }

    @Test
    public void test03321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03321");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundCeiling();
        int int4 = mutableDateTime3.getHourOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableDuration5, readableInstant6, periodType7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutablePeriod8.add(readableDuration9);
        mutablePeriod8.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableDuration13, readableInstant14, periodType15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutablePeriod16.add(readableDuration17);
        mutablePeriod16.addMonths((int) '#');
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableDuration22, readableInstant23, periodType24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutablePeriod25.add(readableDuration26);
        mutablePeriod25.addMonths((int) '#');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        int int33 = localDate32.getDayOfYear();
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate32.toDateTime(localTime34, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = localDate32.toDateMidnight(dateTimeZone37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.yearOfEra();
        int int40 = dateMidnight38.getMinuteOfHour();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 100, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime45.copy();
        org.joda.time.Duration duration47 = period43.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight38.plus((org.joda.time.ReadableDuration) duration47);
        mutablePeriod25.add((org.joda.time.ReadableDuration) duration47);
        mutablePeriod8.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration51 = duration47.toDuration();
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration51);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setDayOfMonth(26112905);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26112905 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(duration51);
    }

    @Test
    public void test03322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03322");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withField(dateTimeFieldType7, 26067332);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'x');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfSecond();
        int int13 = localDateTime11.getMillisOfDay();
        int int14 = localDateTime11.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withMillisOfDay(26175588);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDate(26114933, 26061790, 26211754);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26061790 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26303184 + "'", int13 == 26303184);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test03323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03323");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        mutableDateTime2.setMillisOfSecond(3);
        mutableDateTime2.addWeeks(26067332);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod();
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod22, 2);
        int int25 = mutableDateTime2.getMillisOfSecond();
        mutableDateTime2.addMillis(26084032);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.set(0);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test03324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03324");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.setYear(26074093);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        mutablePeriod10.setPeriod((long) (byte) 100, (long) 26062367, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfYear();
        mutableDateTime5.setChronology(chronology19);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) 26081059, dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime5.toMutableDateTime(dateTimeZone26);
        boolean boolean31 = mutableDateTime5.isEqualNow();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 1, chronology33);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight35.getZone();
        org.joda.time.DateTime dateTime37 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        long long39 = dateTimeZone36.previousTransition((long) 1);
        java.lang.String str40 = dateTimeZone36.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((java.lang.Object) boolean31, dateTimeZone36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
    }

    @Test
    public void test03325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03325");
        org.joda.time.Period period1 = org.joda.time.Period.months((int) (byte) 0);
        org.joda.time.Period period3 = period1.withHours(26181329);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test03326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03326");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 22);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar4 = dateTime2.toGregorianCalendar();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        gregorianCalendar4.setTimeZone(timeZone5);
        boolean boolean7 = localTime1.equals((java.lang.Object) gregorianCalendar4);
        java.util.Date date14 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        int int15 = date14.getSeconds();
        date14.setTime((long) (short) -1);
        java.util.Date date24 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        int int25 = date24.getSeconds();
        boolean boolean26 = date14.after(date24);
        gregorianCalendar4.setTime(date14);
        gregorianCalendar4.setMinimalDaysInFirstWeek(26077617);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = gregorianCalendar4.getActualMinimum(26224157);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26224157");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(date14.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 44 + "'", int15 == 44);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Nov 03 16:22:44 UTC 26063513");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 44 + "'", int25 == 44);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03327");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(10L, (-1L), periodType2, chronology3);
        org.joda.time.Period period6 = period4.withSeconds(26071);
        int int7 = period6.getMonths();
        org.joda.time.Period period9 = period6.multipliedBy((int) '#');
        org.joda.time.Hours hours10 = period6.toStandardHours();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(hours10);
    }

    @Test
    public void test03328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03328");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay3.year();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.plusYears(26062367);
        int int24 = property19.compareTo((org.joda.time.ReadableInstant) dateMidnight20);
        int int25 = dateMidnight20.getEra();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight20.withWeekyear((-26115370));
        boolean boolean29 = dateMidnight27.isAfter(26118649L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test03329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03329");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.lang.String str19 = localDate7.toString("14", locale15);
        java.lang.String str20 = locale15.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withLocale(locale15);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withLocale(locale22);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight26.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = yearMonthDay29.getFieldTypes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 1, chronology32);
        java.lang.String str34 = localDate33.toString();
        org.joda.time.LocalDate localDate36 = localDate33.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.year();
        long long43 = chronology37.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay29.withChronologyRetainFields(chronology37);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay48 = dateMidnight45.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = yearMonthDay48.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone51 = dateMidnight50.getZone();
        boolean boolean53 = dateTimeZone51.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay48.toDateMidnight(dateTimeZone51);
        int[] intArray57 = chronology37.get((org.joda.time.ReadablePartial) yearMonthDay48, (long) 26069970);
        org.joda.time.Period period58 = new org.joda.time.Period((long) 26072939, chronology37);
        org.joda.time.DateTimeZone dateTimeZone59 = chronology37.getZone();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (short) 1, chronology61);
        java.lang.String str63 = localDate62.toString();
        org.joda.time.LocalDate localDate65 = localDate62.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone70 = dateMidnight69.getZone();
        boolean boolean72 = dateTimeZone70.isStandardOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now(dateTimeZone70);
        org.joda.time.Chronology chronology74 = chronology66.withZone(dateTimeZone70);
        org.joda.time.Chronology chronology75 = chronology37.withZone(dateTimeZone70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter21.withChronology(chronology75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter76.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter77.withDefaultYear(26151350);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.parse("2022-02-22T07:16:41.552Z", dateTimeFormatter77);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str17, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Corea del Sud" + "'", str18, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "14" + "'", str19, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str20, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str23, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01" + "'", str34, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1147058000L + "'", long43 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01" + "'", str63, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
    }

    @Test
    public void test03330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03330");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(894);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableDuration13, readableInstant14, periodType15);
        mutablePeriod16.addYears((int) (byte) 0);
        int int19 = mutablePeriod16.getMonths();
        mutablePeriod16.addMinutes((int) (byte) 0);
        mutablePeriod16.addDays((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, 35);
        mutablePeriod16.setPeriod((long) 26067972, (long) ' ');
        int int29 = mutablePeriod16.getMinutes();
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.Instant instant32 = instant30.plus((long) '#');
        long long33 = instant32.getMillis();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) mutablePeriod16, chronology34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-14) + "'", int29 == (-14));
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645514303431L + "'", long33 == 1645514303431L);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test03331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03331");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight12 = property11.roundFloorCopy();
        org.joda.time.LocalDate localDate13 = dateMidnight12.toLocalDate();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 1, chronology15);
        int int17 = localDate16.getDayOfYear();
        org.joda.time.LocalTime localTime18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate16.toDateTime(localTime18, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime20.plus((long) 100);
        int int25 = dateTime24.getWeekOfWeekyear();
        boolean boolean27 = dateTime24.isBefore((long) 26062445);
        int int28 = dateTime24.getYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 100, chronology30);
        org.joda.time.Seconds seconds32 = period31.toStandardSeconds();
        org.joda.time.DateTime dateTime33 = dateTime24.plus((org.joda.time.ReadablePeriod) seconds32);
        org.joda.time.DateMidnight dateMidnight34 = dateTime33.toDateMidnight();
        org.joda.time.DateTime dateTime36 = dateTime33.withCenturyOfEra((int) (byte) 1);
        boolean boolean37 = dateMidnight12.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime38 = dateTime33.toDateTime();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight40.getZone();
        org.joda.time.DateMidnight.Property property42 = dateMidnight40.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay43 = dateMidnight40.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = yearMonthDay43.getFieldTypes();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 1, chronology46);
        java.lang.String str48 = localDate47.toString();
        org.joda.time.LocalDate localDate50 = localDate47.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.year();
        long long57 = chronology51.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay43.withChronologyRetainFields(chronology51);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay43.year();
        org.joda.time.YearMonthDay yearMonthDay60 = property59.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone62 = dateMidnight61.getZone();
        org.joda.time.DateMidnight.Property property63 = dateMidnight61.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay64 = dateMidnight61.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = yearMonthDay64.getFieldTypes();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (short) 1, chronology67);
        java.lang.String str69 = localDate68.toString();
        org.joda.time.LocalDate localDate71 = localDate68.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology72 = localDate71.getChronology();
        org.joda.time.DurationField durationField73 = chronology72.eras();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.year();
        long long78 = chronology72.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay64.withChronologyRetainFields(chronology72);
        org.joda.time.YearMonthDay.Property property80 = yearMonthDay64.year();
        java.util.Locale locale81 = java.util.Locale.ITALY;
        int int82 = property80.getMaximumShortTextLength(locale81);
        java.util.Locale locale83 = java.util.Locale.JAPAN;
        java.lang.String str84 = locale81.getDisplayCountry(locale83);
        java.lang.String str85 = property59.getAsText(locale83);
        java.util.Set<java.lang.Character> charSet86 = locale83.getExtensionKeys();
        java.lang.String str87 = dateTime38.toString("\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)", locale83);
        java.lang.String str88 = locale83.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01" + "'", str48, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1147058000L + "'", long57 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-01" + "'", str69, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1147058000L + "'", long78 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u30a4\u30bf\u30ea\u30a2" + "'", str84, "\u30a4\u30bf\u30ea\u30a2");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022" + "'", str85, "2022");
        org.junit.Assert.assertNotNull(charSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str87, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ja_JP" + "'", str88, "ja_JP");
    }

    @Test
    public void test03332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03332");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.add((long) 20);
        int int11 = mutableDateTime10.getDayOfMonth();
        int int12 = mutableDateTime10.getYear();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
    }

    @Test
    public void test03333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03333");
        org.joda.time.Chronology chronology4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(26133204, 26189637, 26227189, 26263128, chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26133204 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03334");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(4);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis(26219492);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test03335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03335");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay3.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property19.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        org.joda.time.Period period24 = new org.joda.time.Period((long) (-1), (long) 26061444);
        org.joda.time.Period period26 = period24.minusWeeks((-1));
        org.joda.time.Period period28 = period26.withMonths(26081059);
        boolean boolean29 = property19.equals((java.lang.Object) period28);
        org.joda.time.Period period31 = period28.plusSeconds(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test03336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03336");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = property11.getAsText(locale12);
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight15 = property11.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight16 = property11.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test03337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03337");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours((int) 'a');
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        java.lang.String str15 = localDate14.toString();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight10.withFields((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        mutablePeriod22.setMillis(0);
        org.joda.time.LocalDate localDate25 = localDate17.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (short) 1, chronology27);
        java.lang.String str29 = localDate28.toString();
        org.joda.time.LocalDate localDate31 = localDate28.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.weekyear();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology32);
        org.joda.time.Duration duration35 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.DateTime dateTime38 = dateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration35, 26064394);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test03338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03338");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay3.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay14 = property11.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay15 = property11.getYearMonthDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        java.lang.String str19 = localDate18.toString();
        org.joda.time.LocalDate localDate21 = localDate18.withYearOfEra((int) (byte) 100);
        int int22 = localDate18.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getRangeDurationType();
        boolean boolean25 = localDate18.isSupported(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = yearMonthDay15.get(dateTimeFieldType23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test03339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03339");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime7.plusHours((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime9.withYearOfEra(977);
        org.joda.time.DateTime dateTime14 = dateTime9.minusHours(26175031);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test03340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03340");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        int int19 = yearMonthDay3.getDayOfMonth();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay3.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay22 = property20.addToCopy((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = property20.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.plusYears(26206735);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
    }

    @Test
    public void test03341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03341");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTime(localTime8, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = localDate6.toString("14", locale14);
        java.lang.String str19 = locale14.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale14);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withLocale(locale21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter20.withZone(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight26.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = yearMonthDay29.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Interval interval32 = yearMonthDay29.toInterval(dateTimeZone31);
        long long35 = dateTimeZone31.adjustOffset((long) 26063479, true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter20.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology37 = dateTimeFormatter36.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter36.withPivotYear(26102637);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTimeFormatter39.parseDateTime("PeriodType[Years]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str16, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Corea del Sud" + "'", str17, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "14" + "'", str18, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str19, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str22, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 26063479L + "'", long35 == 26063479L);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
    }

    @Test
    public void test03342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03342");
        java.util.Date date3 = new java.util.Date(26061764, 26072569, 26072167);
        int int4 = date3.getDate();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromDateFields(date3);
        java.lang.Object obj6 = date3.clone();
        org.junit.Assert.assertEquals(date3.toString(), "Thu Apr 02 00:00:00 UTC 28307761");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "Thu Apr 02 00:00:00 UTC 28307761");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "Thu Apr 02 00:00:00 UTC 28307761");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "Thu Apr 02 00:00:00 UTC 28307761");
    }

    @Test
    public void test03343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03343");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        mutablePeriod3.addMinutes((int) (byte) 0);
        int int9 = mutablePeriod3.getMinutes();
        mutablePeriod3.setMillis(15);
        mutablePeriod3.setSeconds(26160495);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test03344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03344");
        java.util.Date date6 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        int int7 = date6.getSeconds();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromDateFields(date6);
        java.time.Instant instant9 = date6.toInstant();
        org.junit.Assert.assertEquals(date6.toString(), "Mon Nov 03 16:22:44 UTC 26063513");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 44 + "'", int7 == 44);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test03345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03345");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withDayOfMonth(1);
        int int11 = dateMidnight10.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withFieldAdded(durationFieldType12, 26074093);
        org.joda.time.Interval interval15 = dateMidnight10.toInterval();
        int int16 = dateMidnight10.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
    }

    @Test
    public void test03346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03346");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis(0);
        org.joda.time.LocalDate localDate15 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        java.lang.String str19 = localDate18.toString();
        org.joda.time.LocalDate localDate21 = localDate18.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyear();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.Duration duration25 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.minusDays(26133091);
        org.joda.time.LocalDate localDate28 = dateTime27.toLocalDate();
        int int29 = dateTime27.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 28 + "'", int29 == 28);
    }

    @Test
    public void test03347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03347");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone3);
        java.util.Calendar calendar5 = builder0.build();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar8 = dateTime6.toGregorianCalendar();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        gregorianCalendar8.setTimeZone(timeZone9);
        calendar5.setTimeZone(timeZone9);
        java.time.ZoneId zoneId12 = timeZone9.toZoneId();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone(zoneId12);
        java.util.TimeZone.setDefault(timeZone13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
    }

    @Test
    public void test03348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03348");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType2 = localTime0.getFieldType(26073687);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26073687");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
    }

    @Test
    public void test03349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03349");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getExtension('a');
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7, locale8, locale9, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        boolean boolean21 = strSet18.removeAll((java.util.Collection<java.lang.String>) strSet20);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        boolean boolean24 = strSet20.removeAll((java.util.Collection<java.lang.String>) strSet23);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap26);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(languageRangeList27);
    }

    @Test
    public void test03350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03350");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("P26084973Y26M26097985W26102728DT219H26072939M26654.440S");
        java.lang.String str2 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4" + "'", str2, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test03351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03351");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(26, 26188442, 26062445);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03352");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(44);
        org.joda.time.Chronology chronology4 = timeOfDay3.getChronology();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay3.plusSeconds(46);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay3.plusMinutes(26082282);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMillis(26065744);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.plusSeconds(26129643);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.LocalTime localTime16 = localTime13.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localTime13.toDateTimeToday(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localTime13.toDateTimeToday();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime21.copy();
        mutableDateTime21.addMinutes(0);
        mutableDateTime21.setSecondOfDay(22);
        org.joda.time.Chronology chronology27 = null;
        mutableDateTime21.setChronology(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime21.set(dateTimeFieldType29, 26069958);
        int int32 = dateTime19.get(dateTimeFieldType29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay34 = timeOfDay12.withField(dateTimeFieldType29, 985);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 26304925 + "'", int32 == 26304925);
    }

    @Test
    public void test03353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03353");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        int int7 = timeOfDay6.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.withMinuteOfHour(3);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 100, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.Duration duration17 = period13.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Period period19 = period13.plusDays((int) (byte) 10);
        int int20 = period19.getHours();
        org.joda.time.Period period22 = period19.plusMonths(2);
        org.joda.time.Period period24 = period19.minusMonths(12);
        org.joda.time.Period period26 = period19.plusWeeks(26073687);
        org.joda.time.Period period27 = period26.negated();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 119);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay6.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay32 = property30.addWrapFieldToCopy(26099010);
        org.joda.time.TimeOfDay timeOfDay33 = property30.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusSeconds(26125);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
    }

    @Test
    public void test03354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03354");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("Italian");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2022-02-22T07:15:38.980");
        java.lang.String str6 = locale5.getVariant();
        java.util.Locale.Builder builder7 = builder0.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setVariant("ITA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ITA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03355");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.era();
        org.joda.time.LocalDate localDate2 = property1.roundHalfFloorCopy();
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = localDate2.toString("14", locale4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.LocalDate.Property property11 = localDate10.monthOfYear();
        org.joda.time.LocalDate localDate13 = localDate10.withYear(20);
        org.joda.time.Chronology chronology14 = localDate10.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDate.Property property16 = localDate10.property(dateTimeFieldType15);
        int int17 = localDate2.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = localDate2.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate2.withDayOfYear(26205870);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26205870 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "14" + "'", str5, "14");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test03356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03356");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        java.lang.String str4 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.PeriodType periodType6 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType7 = periodType3.withWeeksRemoved();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        long long12 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.LocalTime localTime14 = property9.addCopy((long) (-292275054));
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(2L, (long) 26067972, periodType3, chronology15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) 637, chronology15);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.centuryOfEra();
        org.joda.time.DurationField durationField21 = chronology15.centuries();
        long long23 = durationField21.getValueAsLong((long) 26219756);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Years" + "'", str4, "Years");
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-27424361L) + "'", long12 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test03357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03357");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        mutableDateTime2.setMillisOfSecond(3);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime2.secondOfMinute();
        int int21 = mutableDateTime2.getWeekOfWeekyear();
        int int22 = mutableDateTime2.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfYear(26069958);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26069958 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test03358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03358");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMinutes(26101963);
        org.joda.time.DateMidnight dateMidnight13 = dateTime12.toDateMidnight();
        org.joda.time.DateTime dateTime15 = dateTime12.minusSeconds(41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime12.withEra(26303232);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26303232 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03359");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime3 = dateTime0.withFieldAdded(durationFieldType1, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay4 = dateTime0.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = dateTime0.plusHours(573);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime0.withDate(26086371, 26243864, 26163125);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26243864 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test03360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03360");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.lang.String str19 = localDate7.toString("14", locale15);
        java.lang.String str20 = locale15.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withLocale(locale15);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withLocale(locale22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter21.withZone(dateTimeZone25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter21.withPivotYear(26062367);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime31.copy();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        mutableDateTime31.setZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate29.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate29.toDateTime(readableInstant37);
        org.joda.time.LocalDate.Property property39 = localDate29.yearOfCentury();
        org.joda.time.LocalDate.Property property40 = localDate29.weekyear();
        int int41 = localDate29.getWeekyear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 100, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime46.copy();
        org.joda.time.Duration duration48 = period44.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime47);
        mutableDateTime47.setYear(26074093);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime47.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime47.getZone();
        org.joda.time.DateTime dateTime53 = localDate29.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter28.withZone(dateTimeZone52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter28.withPivotYear((java.lang.Integer) 26204727);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant57 = org.joda.time.Instant.parse("", dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str17, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Corea del Sud" + "'", str18, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "14" + "'", str19, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str20, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str23, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
    }

    @Test
    public void test03361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03361");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
    }

    @Test
    public void test03362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03362");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1970, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 26082282, dateTimeZone3);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        long long12 = dateTimeField9.add(31556952000L, 1434L);
        boolean boolean13 = dateTimeField9.isSupported();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        int int19 = localDate18.getDayOfYear();
        org.joda.time.LocalTime localTime20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate18.toDateTime(localTime20, dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.yearOfEra();
        int int26 = dateMidnight24.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property27 = dateMidnight24.year();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        long long30 = dateTimeField28.remainder((long) (short) -1);
        int int31 = dateTimeField28.getMaximumValue();
        int int32 = dateTimeField28.getMinimumValue();
        java.util.Locale locale37 = new java.util.Locale("de-DE", "en-CA", "UnsupportedDurationField[eras]");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = dateTimeField28.getAsShortText(26068787, locale37);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = dateTimeField9.set((long) 26265658, "DurationField[days]", locale37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DurationField[days]\" for hourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 36719352000L + "'", long12 == 36719352000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 31535999999L + "'", long30 == 31535999999L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-292275054) + "'", int32 == (-292275054));
        org.junit.Assert.assertEquals(locale37.toString(), "de-de_EN-CA_UnsupportedDurationField[eras]");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "26068787" + "'", str39, "26068787");
    }

    @Test
    public void test03363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03363");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays(26062445);
        org.joda.time.DateTime.Property property9 = dateTime6.secondOfMinute();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        java.util.Locale locale13 = new java.util.Locale("French", "coreano (Corea del Sud)");
        int int14 = property9.getMaximumShortTextLength(locale13);
        java.lang.String str15 = locale13.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = locale13.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals(locale13.toString(), "french_COREANO (COREA DEL SUD)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test03364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03364");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight.Property property7 = dateMidnight5.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay8 = dateMidnight5.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonthDay8.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 1, chronology11);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.year();
        long long22 = chronology16.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay8.withChronologyRetainFields(chronology16);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight24.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = yearMonthDay27.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone30 = dateMidnight29.getZone();
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay27.toDateMidnight(dateTimeZone30);
        int[] intArray36 = chronology16.get((org.joda.time.ReadablePartial) yearMonthDay27, (long) 26069970);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder37 = builder4.setFields(intArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1147058000L + "'", long22 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1]");
    }

    @Test
    public void test03365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03365");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("891");
        mutableDateTime1.setTime((long) 26097830);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableDateTime1.add(readablePeriod4, 26146834);
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test03366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03366");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = dateMidnight8.isSupported(dateTimeFieldType11);
        org.joda.time.Period period17 = new org.joda.time.Period((int) (byte) 10, (-1), 22, 100);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight8.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateMidnight18.toString(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969-12-31T00:00:00.000Z" + "'", str20, "1969-12-31T00:00:00.000Z");
    }

    @Test
    public void test03367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03367");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        boolean boolean11 = dateMidnight8.equals((java.lang.Object) 1L);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.minus((long) 26062923);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusYears(26068787);
        org.joda.time.Chronology chronology16 = dateMidnight13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test03368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03368");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.parse("2022-02-04T07:16:47.920Z", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(dateTimeParser5);
    }

    @Test
    public void test03369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03369");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        int int4 = localTime0.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = localTime0.withMillisOfDay((-22428));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -22428 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test03370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03370");
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate8 = localDate6.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(26272416, 26160348, (int) (byte) -1, 478, 0, 894, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 478 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test03371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03371");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime2.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add((long) 26063026);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfFloor();
        org.joda.time.Chronology chronology10 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfCentury();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((long) 27425235, chronology10);
        org.joda.time.DurationField durationField14 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.yearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test03372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03372");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 1, chronology8);
        java.lang.String str10 = localDate9.toString();
        org.joda.time.LocalDate localDate12 = localDate9.withYearOfEra((int) (byte) 100);
        int int13 = localDate9.getDayOfYear();
        org.joda.time.LocalDate localDate15 = localDate9.plusWeeks(26081086);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate9.toDateTimeAtMidnight(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) property5, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test03373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03373");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 8, chronology11);
        org.joda.time.Period period15 = new org.joda.time.Period((long) 26141855, chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(26081086, 26187037, 26222649, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26081086 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test03374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03374");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withMillis((long) ' ');
        org.joda.time.Interval interval14 = dateMidnight13.toInterval();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusMonths(867);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withMillis((long) 139);
        boolean boolean20 = dateMidnight18.isEqual((long) 26085847);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03375");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.LocalTime localTime6 = property1.addCopy((long) (-292275054));
        org.joda.time.LocalTime localTime8 = localTime6.plusMinutes(26092417);
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds((-19045));
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale11.getLanguage();
        java.util.Set<java.lang.Character> charSet14 = locale11.getExtensionKeys();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale11);
        boolean boolean16 = localTime8.equals((java.lang.Object) calendar15);
        int int17 = localTime8.size();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27424361L) + "'", long4 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514306174,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=26,MILLISECOND=174,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test03376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03376");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.add((long) 20);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime13.copy();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        mutableDateTime13.setZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDate11.toDateTimeAtStartOfDay(dateTimeZone16);
        java.lang.String str19 = dateTimeZone16.getID();
        mutableDateTime10.setZoneRetainFields(dateTimeZone16);
        mutableDateTime10.addSeconds(593);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        int int26 = localDate25.getDayOfYear();
        org.joda.time.LocalTime localTime27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate25.toDateTime(localTime27, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = localDate25.toDateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.yearOfEra();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight31.toMutableDateTime(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        int int37 = mutableDateTime35.get(dateTimeFieldType36);
        mutableDateTime10.set(dateTimeFieldType36, 26273159);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Etc/UTC" + "'", str19, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
    }

    @Test
    public void test03377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03377");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.plusYears(26062367);
        int int4 = dateMidnight0.getWeekyear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight0.plus(readableDuration5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime12.copy();
        org.joda.time.Duration duration14 = period10.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Period period15 = period10.toPeriod();
        org.joda.time.Period period17 = period15.minusWeeks(687120000);
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.PeriodType periodType19 = periodType18.withMonthsRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 117, periodType18);
        org.joda.time.Period period21 = new org.joda.time.Period((java.lang.Object) readableDuration5, periodType18);
        org.joda.time.DurationFieldType[] durationFieldTypeArray22 = period21.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldTypeArray22);
    }

    @Test
    public void test03378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03378");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(26079926, 26256, 26132057, 28, 26145847, 0, 26261480, 26264815);
    }

    @Test
    public void test03379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03379");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set(13, 26074772, (int) 'a', 26077394, 26097830);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(periodType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) periodType7, dateTimeZone9);
        int int11 = localDateTime10.getDayOfMonth();
        int int12 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfSecond();
        int int14 = localDateTime10.getEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.era();
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.dayOfMonth();
        int int17 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property18 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks(26071282);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.monthOfYear();
        boolean boolean23 = calendar0.after((java.lang.Object) property22);
        int int24 = calendar0.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=26074772,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=97,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=26077394,MINUTE=26097830,SECOND=29,MILLISECOND=972,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 26309972 + "'", int12 == 26309972);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test03380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03380");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(26151453, 26205437, 641, 186);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26151453 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03381");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.millisOfDay();
        org.joda.time.Chronology chronology13 = localDateTime3.getChronology();
        int int14 = localDateTime3.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime3.withHourOfDay(0);
        java.lang.String str17 = localDateTime16.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26309994 + "'", int5 == 26309994);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T00:18:29.994" + "'", str17, "2022-02-22T00:18:29.994");
    }

    @Test
    public void test03382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03382");
        org.joda.time.Period period1 = org.joda.time.Period.years(26219441);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03383");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("44", throwable1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
    }

    @Test
    public void test03384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03384");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        mutableDateTime6.addMinutes(0);
        mutableDateTime6.setSecondOfDay(22);
        org.joda.time.Chronology chronology12 = null;
        mutableDateTime6.setChronology(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime6.set(dateTimeFieldType14, 26069958);
        org.joda.time.LocalTime.Property property17 = localTime3.property(dateTimeFieldType14);
        org.joda.time.LocalTime localTime18 = property17.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = property17.setCopy("StandardNoMillis");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"StandardNoMillis\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test03385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03385");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        boolean boolean8 = durationField7.isPrecise();
        long long11 = durationField7.subtract((long) 26062367, (-1L));
        long long14 = durationField7.getMillis((int) (short) 1, (long) 26083497);
        long long16 = durationField7.getValueAsLong((long) 26159808);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 31562062367L + "'", long11 == 31562062367L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31536000000L + "'", long14 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test03386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03386");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(26080518);
        org.joda.time.Period period3 = period1.withWeeks(26080419);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test03387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03387");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        gregorianCalendar2.setTimeZone(timeZone3);
        int int5 = gregorianCalendar2.getMinimalDaysInFirstWeek();
        boolean boolean6 = gregorianCalendar2.isWeekDateSupported();
        java.util.Date date7 = gregorianCalendar2.getTime();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar2.clear(37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 37");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 07:18:30 UTC 2022");
    }

    @Test
    public void test03388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03388");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test03389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03389");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 7, 100L, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronolgy();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfDay();
        boolean boolean19 = dateTimeField18.isSupported();
        int int21 = dateTimeField18.get((long) 26125522);
        int int22 = dateTimeField18.getMaximumValue();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26125 + "'", int21 == 26125);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 86399 + "'", int22 == 86399);
    }

    @Test
    public void test03390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03390");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property5.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test03391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03391");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1970, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 26082282, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear(70);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundCeiling();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(periodType14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) periodType14, dateTimeZone16);
        int int18 = localDateTime17.getDayOfMonth();
        int int19 = localDateTime17.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.millisOfSecond();
        int int21 = localDateTime17.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withField(dateTimeFieldType22, 190);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableDuration25, readableInstant26, periodType27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutablePeriod28.add(readableDuration29);
        mutablePeriod28.addSeconds(26061238);
        mutablePeriod28.addMillis((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.Duration duration37 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime17.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(periodType39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) periodType39, dateTimeZone41);
        int int43 = localDateTime42.getDayOfMonth();
        int int44 = localDateTime42.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.millisOfSecond();
        int int46 = localDateTime42.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.withField(dateTimeFieldType47, 190);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(readableDuration50, readableInstant51, periodType52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        mutablePeriod53.add(readableDuration54);
        mutablePeriod53.addSeconds(26061238);
        mutablePeriod53.addMillis((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.Duration duration62 = mutablePeriod53.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime42.plus((org.joda.time.ReadableDuration) duration62);
        boolean boolean64 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration62);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration37, 26103181);
        org.joda.time.Period period67 = duration37.toPeriod();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime8.minus((org.joda.time.ReadableDuration) duration37);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 26310605 + "'", int19 == 26310605);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 26310605 + "'", int44 == 26310605);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(localDateTime68);
    }

    @Test
    public void test03392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03392");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType1);
        org.joda.time.PeriodType periodType4 = periodType1.withYearsRemoved();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfSecond();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 26061397, periodType4, chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        int int20 = localDate19.getDayOfYear();
        org.joda.time.LocalTime localTime21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate19.toDateTime(localTime21, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = localDate19.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.yearOfEra();
        int int27 = dateMidnight25.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property28 = dateMidnight25.year();
        org.joda.time.DateMidnight dateMidnight29 = property28.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay33 = dateMidnight30.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = yearMonthDay33.getFieldTypes();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 1, chronology36);
        java.lang.String str38 = localDate37.toString();
        org.joda.time.LocalDate localDate40 = localDate37.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.year();
        long long47 = chronology41.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay33.withChronologyRetainFields(chronology41);
        int int49 = yearMonthDay33.size();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone51 = dateMidnight50.getZone();
        boolean boolean53 = dateTimeZone51.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay33.toDateMidnight(dateTimeZone51);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight29, dateTimeZone51);
        org.joda.time.LocalDate.Property property57 = localDate56.weekOfWeekyear();
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.years();
        java.lang.String str62 = periodType61.getName();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(periodType61);
        org.joda.time.PeriodType periodType64 = periodType61.withYearsRemoved();
        org.joda.time.PeriodType periodType65 = periodType61.withWeeksRemoved();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property67 = localTime66.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone69 = dateMidnight68.getZone();
        long long70 = property67.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.LocalTime localTime72 = property67.addCopy((long) (-292275054));
        org.joda.time.Chronology chronology73 = localTime72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(2L, (long) 26067972, periodType61, chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.era();
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean79 = localTime77.isSupported(dateTimeFieldType78);
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime81 = localTime77.withFields((org.joda.time.ReadablePartial) localTime80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(chronology82);
        org.joda.time.MutableDateTime mutableDateTime84 = mutableDateTime83.copy();
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone86 = dateMidnight85.getZone();
        mutableDateTime83.setZoneRetainFields(dateTimeZone86);
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime((java.lang.Object) localTime81, dateTimeZone86);
        java.lang.String str90 = localTime88.toString("\u5354\u5b9a\u4e16\u754c\u6642");
        org.joda.time.LocalTime localTime92 = localTime88.plusMillis(0);
        int[] intArray94 = chronology73.get((org.joda.time.ReadablePartial) localTime92, (long) 26140330);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = dateTimeField16.addWrapField((org.joda.time.ReadablePartial) localDate56, 26260581, intArray94, 26178531);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26260581");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Years" + "'", str2, "Years");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1147058000L + "'", long47 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Years" + "'", str62, "Years");
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-27424361L) + "'", long70 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u5354\u5b9a\u4e16\u754c\u6642" + "'", str90, "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[7, 15, 40, 330]");
    }

    @Test
    public void test03393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03393");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(26155449);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test03394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03394");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:29.089Z");
        org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test03395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03395");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        mutableDateTime3.addMinutes(894);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.LocalDate localDate13 = localDate10.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        mutableDateTime6.setChronology(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.millis();
        mutableDateTime3.setChronology(chronology14);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime1, chronology14);
        java.lang.Object obj19 = mutableDateTime1.clone();
        mutableDateTime1.addSeconds((-1));
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.secondOfDay();
        java.lang.String str23 = property22.getAsText();
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "2022-02-22T07:18:30.862Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "2022-02-22T07:18:30.862Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "2022-02-22T07:18:30.862Z");
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "26309" + "'", str23, "26309");
    }

    @Test
    public void test03396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03396");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        long long3 = gregorianCalendar2.getTimeInMillis();
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar2);
        int int5 = gregorianCalendar2.getMinimalDaysInFirstWeek();
        gregorianCalendar2.set(2000, 320, 0, 26191243, 26097536, 26089534);
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale18 = new java.util.Locale("1970", "PT0.100S");
        java.lang.String str21 = nameProvider15.getName(locale18, "14", "PT0.100S");
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str25 = nameProvider15.getName(locale22, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", "1969");
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight26.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = yearMonthDay29.getFieldTypes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 1, chronology32);
        java.lang.String str34 = localDate33.toString();
        org.joda.time.LocalDate localDate36 = localDate33.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.year();
        long long43 = chronology37.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay29.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 1, chronology46);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone49 = dateMidnight48.getZone();
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = yearMonthDay44.toDateTimeAtMidnight(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = yearMonthDay44.toLocalDate();
        org.joda.time.LocalDate.Property property53 = localDate52.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight54.getZone();
        org.joda.time.DateMidnight.Property property56 = dateMidnight54.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay57 = dateMidnight54.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = yearMonthDay57.getFieldTypes();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 1, chronology60);
        java.lang.String str62 = localDate61.toString();
        org.joda.time.LocalDate localDate64 = localDate61.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology65 = localDate64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.eras();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.year();
        long long71 = chronology65.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay57.withChronologyRetainFields(chronology65);
        org.joda.time.YearMonthDay.Property property73 = yearMonthDay57.year();
        org.joda.time.YearMonthDay yearMonthDay74 = property73.withMinimumValue();
        int int75 = property73.getMaximumValueOverall();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) (short) 1, chronology77);
        int int79 = localDate78.getDayOfYear();
        org.joda.time.LocalTime localTime80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = localDate78.toDateTime(localTime80, dateTimeZone81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = localDate78.toDateMidnight(dateTimeZone83);
        org.joda.time.DateMidnight.Property property85 = dateMidnight84.yearOfEra();
        int int86 = dateMidnight84.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property87 = dateMidnight84.year();
        java.util.Locale locale88 = java.util.Locale.FRENCH;
        java.lang.String str89 = property87.getAsText(locale88);
        java.util.Locale locale90 = java.util.Locale.GERMANY;
        java.lang.String str91 = locale88.getDisplayScript(locale90);
        boolean boolean92 = locale88.hasExtensions();
        java.util.Locale locale93 = java.util.Locale.FRENCH;
        java.lang.String str94 = locale88.getDisplayScript(locale93);
        java.lang.String str95 = property73.getAsShortText(locale93);
        java.lang.String str96 = property53.getAsText(locale93);
        java.lang.String str97 = locale22.getDisplayCountry(locale93);
        java.lang.String str98 = locale22.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = gregorianCalendar2.getDisplayName(26170219, 26068787, locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514311025L + "'", long3 == 1645514311025L);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertEquals(locale18.toString(), "1970_PT0.100S");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01" + "'", str34, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1147058000L + "'", long43 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1147058000L + "'", long71 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 292278993 + "'", int75 == 292278993);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970" + "'", str89, "1970");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022" + "'", str95, "2022");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "8" + "'", str96, "8");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Etats-Unis" + "'", str97, "Etats-Unis");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "en" + "'", str98, "en");
    }

    @Test
    public void test03397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03397");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 100, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.Duration duration17 = period13.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutablePeriod22.add(readableDuration23);
        mutablePeriod22.addMonths((int) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 1, chronology28);
        int int30 = localDate29.getDayOfYear();
        org.joda.time.LocalTime localTime31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTime(localTime31, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = localDate29.toDateMidnight(dateTimeZone34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.yearOfEra();
        int int37 = dateMidnight35.getMinuteOfHour();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 100, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime42.copy();
        org.joda.time.Duration duration44 = period40.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration44);
        mutablePeriod22.add((org.joda.time.ReadableDuration) duration44);
        boolean boolean47 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = dateTime48.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar50 = dateTime48.toGregorianCalendar();
        long long51 = gregorianCalendar50.getTimeInMillis();
        java.util.TimeZone timeZone52 = gregorianCalendar50.getTimeZone();
        java.lang.String str53 = timeZone52.getID();
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone52, locale54);
        boolean boolean56 = duration17.equals((java.lang.Object) calendar55);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(gregorianCalendar50);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645514311105L + "'", long51 == 1645514311105L);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Etc/UTC" + "'", str53, "Etc/UTC");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645514311106,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=31,MILLISECOND=106,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test03398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03398");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("fr");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"fr\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03399");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        int int2 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.toMutableDateTimeISO();
        int int9 = mutableDateTime1.getMillisOfDay();
        boolean boolean10 = mutableDateTime1.isBeforeNow();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 176 + "'", int2 == 176);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26311176 + "'", int9 == 26311176);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03400");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        int int7 = timeOfDay6.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.withMinuteOfHour(3);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) timeOfDay6);
        int int11 = localTime3.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
    }

    @Test
    public void test03401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03401");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.weekOfWeekyear();
        mutableDateTime1.addMillis(26077617);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean8 = localTime6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = localTime6.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean14 = localTime12.isSupported(dateTimeFieldType13);
        int int15 = mutableDateTime11.get(dateTimeFieldType13);
        boolean boolean16 = localTime9.isSupported(dateTimeFieldType13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property18 = localTime17.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        long long21 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.LocalTime localTime23 = property18.addCopy((long) (-292275054));
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology24);
        mutableDateTime1.set(dateTimeFieldType13, 393);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime29.copy();
        mutableDateTime29.addMinutes(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime36 = dateTime33.withFieldAdded(durationFieldType34, (int) (byte) 0);
        mutableDateTime29.add(durationFieldType34, 4);
        mutableDateTime29.setMillis(36719352000L);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-27424361L) + "'", long21 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test03402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03402");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.joda.time.LocalTime localTime4 = localTime2.plusMinutes((-292275054));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 100, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.Duration duration11 = period7.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Period period13 = period7.plusDays((int) (byte) 10);
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = period7.getFieldTypes();
        org.joda.time.Period period16 = period7.plusMinutes((int) (short) -1);
        org.joda.time.LocalTime localTime17 = localTime2.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfDay();
        int int19 = localTime17.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test03403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03403");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(26183095);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test03404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03404");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone2 = dateMidnight1.getZone();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay4 = dateMidnight1.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = yearMonthDay4.getFieldTypes();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 1, chronology7);
        java.lang.String str9 = localDate8.toString();
        org.joda.time.LocalDate localDate11 = localDate8.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        long long18 = chronology12.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeField dateTimeField20 = chronology12.era();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 26062923, chronology12);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        java.lang.String str23 = durationFieldType22.getName();
        int int24 = period21.get(durationFieldType22);
        int int25 = period21.getDays();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1147058000L + "'", long18 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "days" + "'", str23, "days");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test03405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03405");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "German" + "'", str1, "German");
    }

    @Test
    public void test03406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03406");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property11 = localDate7.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property13 = localDate7.dayOfYear();
        org.joda.time.LocalDate localDate15 = localDate7.plusWeeks(0);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableDuration16, readableInstant17, periodType18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutablePeriod19.add(readableDuration20);
        mutablePeriod19.addYears((int) (short) 100);
        java.lang.Object obj24 = mutablePeriod19.clone();
        mutablePeriod19.setSeconds(894);
        mutablePeriod19.setMonths(26067310);
        mutablePeriod19.setHours(26063026);
        int int31 = mutablePeriod19.getWeeks();
        org.joda.time.LocalDate localDate32 = localDate15.minus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(43, 26200565, 26295098, 854, 0, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 854 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "P100Y26067310MT26063026H894S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "P100Y26067310MT26063026H894S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "P100Y26067310MT26063026H894S");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight34);
    }

    @Test
    public void test03407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03407");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime14 = localTime11.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localTime11.toDateTimeToday(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableDuration17, readableInstant18, periodType19);
        mutablePeriod20.addYears((int) (byte) 0);
        int int23 = mutablePeriod20.getMonths();
        mutablePeriod20.addMinutes((int) (byte) 0);
        int int26 = mutablePeriod20.getMinutes();
        org.joda.time.DateTime dateTime28 = dateTime16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod20, (int) 'a');
        org.joda.time.DateTime dateTime30 = dateTime16.withMillis((long) 26072569);
        java.util.Date date31 = dateTime30.toDate();
        org.joda.time.DateTime dateTime33 = dateTime30.plusHours((int) 'x');
        org.joda.time.DateTime dateTime35 = dateTime30.plusMillis(26073687);
        org.joda.time.DateTime.Property property36 = dateTime30.minuteOfHour();
        org.joda.time.DateTime.Property property37 = dateTime30.era();
        org.joda.time.DateTime.Property property38 = dateTime30.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay39 = dateTime30.toTimeOfDay();
        int int40 = property9.compareTo((org.joda.time.ReadableInstant) dateTime30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = property9.setCopy("12:26:43.144");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"12:26:43.144\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 07:14:32 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test03408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03408");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period7 = period2.toPeriod();
        org.joda.time.Period period9 = period7.minusWeeks(687120000);
        org.joda.time.Period period11 = period9.plusSeconds(26064394);
        org.joda.time.Period period13 = period11.minusDays(26086669);
        java.lang.Object obj14 = null;
        boolean boolean15 = period11.equals(obj14);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03409");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        mutablePeriod3.addMinutes((int) (byte) 0);
        int int9 = mutablePeriod3.getMinutes();
        org.joda.time.ReadableInterval readableInterval10 = null;
        mutablePeriod3.setPeriod(readableInterval10);
        mutablePeriod3.setPeriod(32772, 26103181, 26232117, 43, 26292382, 0, 303, 26062367);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test03410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03410");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        int int7 = timeOfDay6.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.withMinuteOfHour(3);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 100, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.Duration duration17 = period13.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Period period19 = period13.plusDays((int) (byte) 10);
        int int20 = period19.getHours();
        org.joda.time.Period period22 = period19.plusMonths(2);
        org.joda.time.Period period24 = period19.minusMonths(12);
        org.joda.time.Period period26 = period19.plusWeeks(26073687);
        org.joda.time.Period period27 = period26.negated();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 119);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay6.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay32 = property30.addWrapFieldToCopy(26104957);
        org.joda.time.TimeOfDay timeOfDay33 = property30.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusMinutes(26129834);
        org.joda.time.LocalTime localTime36 = timeOfDay35.toLocalTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        org.joda.time.Chronology chronology40 = dateTimeFormatter39.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 1, chronology42);
        int int44 = localDate43.getDayOfYear();
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate43.toDateTime(localTime45, dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = localDate43.toDateMidnight(dateTimeZone48);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getDisplayLanguage();
        java.lang.String str54 = locale51.getDisplayCountry(locale52);
        java.lang.String str55 = localDate43.toString("14", locale51);
        java.lang.String str56 = locale51.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter39.withLocale(locale51);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter57.withLocale(locale58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = timeOfDay35.toString(dateTimeFormatter57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNull(chronology40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Italian" + "'", str53, "Italian");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Corea del Sud" + "'", str54, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "14" + "'", str55, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Korean (South Korea)" + "'", str56, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
    }

    @Test
    public void test03411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03411");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.Period period14 = new org.joda.time.Period((long) (-1), (long) 26061444);
        org.joda.time.format.PeriodFormatter periodFormatter15 = null;
        java.lang.String str16 = period14.toString(periodFormatter15);
        org.joda.time.Weeks weeks17 = period14.toStandardWeeks();
        org.joda.time.format.PeriodFormatter periodFormatter18 = null;
        java.lang.String str19 = period14.toString(periodFormatter18);
        org.joda.time.Duration duration20 = period14.toStandardDuration();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight8.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT7H14M21.445S" + "'", str16, "PT7H14M21.445S");
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT7H14M21.445S" + "'", str19, "PT7H14M21.445S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test03412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03412");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(periodType13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) periodType13, dateTimeZone15);
        int int17 = localDateTime16.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableDuration18, readableInstant19, periodType20);
        mutablePeriod21.addYears((int) (byte) 0);
        int int24 = mutablePeriod21.getMonths();
        mutablePeriod21.addMinutes((int) (byte) 0);
        mutablePeriod21.addMonths((int) 'x');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod21, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) periodType32, dateTimeZone34);
        int int36 = localDateTime35.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableDuration37, readableInstant38, periodType39);
        mutablePeriod40.addYears((int) (byte) 0);
        int int43 = mutablePeriod40.getMonths();
        mutablePeriod40.addMinutes((int) (byte) 0);
        mutablePeriod40.addMonths((int) 'x');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime35.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod40, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime35);
        int int51 = localDateTime31.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26311812 + "'", int5 == 26311812);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 18 + "'", int51 == 18);
    }

    @Test
    public void test03413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03413");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        int int7 = timeOfDay6.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.withMinuteOfHour(3);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 100, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.Duration duration17 = period13.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Period period19 = period13.plusDays((int) (byte) 10);
        int int20 = period19.getHours();
        org.joda.time.Period period22 = period19.plusMonths(2);
        org.joda.time.Period period24 = period19.minusMonths(12);
        org.joda.time.Period period26 = period19.plusWeeks(26073687);
        org.joda.time.Period period27 = period26.negated();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 119);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay6.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay32 = property30.addWrapFieldToCopy(26099010);
        org.joda.time.TimeOfDay timeOfDay33 = property30.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay35 = property30.addToCopy(0);
        int int36 = property30.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay38 = property30.addToCopy(0);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(dateTimeZone40);
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        org.joda.time.LocalDate localDate46 = localDate43.withYear(20);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime50 = dateTime47.withFieldAdded(durationFieldType48, (int) (byte) 0);
        boolean boolean51 = localDate46.isSupported(durationFieldType48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay53 = timeOfDay38.withFieldAdded(durationFieldType48, (-19045));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23 + "'", int36 == 23);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test03414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03414");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        mutableDateTime1.addMinutes(0);
        mutableDateTime1.addHours(7);
        mutableDateTime1.addWeeks(21);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime1.setZone(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.millisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03415");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(894);
        boolean boolean14 = dateTime12.isAfter((long) 26259240);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test03416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03416");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.weekOfWeekyear();
        int int4 = property3.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundFloor();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test03417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03417");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) periodType12, dateTimeZone14);
        int int16 = localDateTime15.getDayOfMonth();
        int int17 = localDateTime15.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.millisOfSecond();
        int int19 = localDateTime15.getEra();
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.era();
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.dayOfMonth();
        int int22 = localDateTime15.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property23 = localDateTime15.millisOfSecond();
        org.joda.time.Period period28 = new org.joda.time.Period((int) (byte) 10, (-1), 22, 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period28, (int) (byte) -1);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(periodType31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) periodType31, dateTimeZone33);
        int int35 = localDateTime34.getDayOfMonth();
        int int36 = localDateTime34.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.millisOfSecond();
        int int38 = localDateTime34.getEra();
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.era();
        org.joda.time.LocalDateTime.Property property40 = localDateTime34.dayOfMonth();
        int int41 = localDateTime34.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property42 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime.Property property43 = localDateTime34.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableDuration46, readableInstant47, periodType48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutablePeriod49.add(readableDuration50);
        mutablePeriod49.addMonths((int) '#');
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.millis();
        mutablePeriod49.add(durationFieldType54, 5);
        mutableDateTime45.add(durationFieldType54, 26071282);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime34.withFieldAdded(durationFieldType54, 26070054);
        boolean boolean61 = localDateTime30.isSupported(durationFieldType54);
        org.joda.time.LocalDateTime.Property property62 = localDateTime30.millisOfSecond();
        int int63 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property64 = localDateTime30.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = localDateTime30.withDayOfYear(26187037);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26187037 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26312033 + "'", int5 == 26312033);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26312033 + "'", int17 == 26312033);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 26312033 + "'", int36 == 26312033);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test03418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03418");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(26195320, 0, 26062445);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03419");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period8 = period2.plusDays((int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod9 = period2.toMutablePeriod();
        mutablePeriod9.setMinutes((-1));
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        int int15 = localDate14.getDayOfYear();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate14.toDateTime(localTime16, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 100);
        int int23 = dateTime22.getWeekOfWeekyear();
        boolean boolean25 = dateTime22.isBefore((long) 26062445);
        int int26 = dateTime22.getYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 100, chronology28);
        org.joda.time.Seconds seconds30 = period29.toStandardSeconds();
        org.joda.time.DateTime dateTime31 = dateTime22.plus((org.joda.time.ReadablePeriod) seconds30);
        org.joda.time.DateMidnight dateMidnight32 = dateTime31.toDateMidnight();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime35.copy();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = dateMidnight37.getZone();
        mutableDateTime35.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate33.toDateTimeAtStartOfDay(dateTimeZone38);
        java.lang.String str41 = dateTimeZone38.getID();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 1, chronology44);
        int int46 = localDate45.getDayOfYear();
        org.joda.time.LocalTime localTime47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = localDate45.toDateTime(localTime47, dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = localDate45.toDateMidnight(dateTimeZone50);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.yearOfEra();
        int int53 = dateMidnight51.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property54 = dateMidnight51.year();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = property54.getAsText(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.lang.String str58 = locale55.getDisplayScript(locale57);
        java.lang.String str59 = dateTimeZone38.getShortName((long) 666, locale57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight32.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Duration duration61 = mutablePeriod9.toDurationTo((org.joda.time.ReadableInstant) dateMidnight60);
        mutablePeriod9.addDays(958);
        mutablePeriod9.setPeriod((long) 26151000, (long) 501823);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970" + "'", str56, "1970");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(duration61);
    }

    @Test
    public void test03420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03420");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(26272914, 0, 26118133);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03421");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay3.toDateMidnight(dateTimeZone6);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay3.year();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.setVariant("Italian");
        java.util.Locale locale16 = builder15.build();
        org.joda.time.YearMonthDay yearMonthDay17 = property11.setCopy("690", locale16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, chronology19);
        java.lang.String str21 = localDate20.toString();
        org.joda.time.LocalDate localDate23 = localDate20.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.year();
        long long29 = dateTimeField26.getDifferenceAsLong((long) 26064394, (long) ' ');
        java.lang.String str31 = dateTimeField26.getAsText(259200000L);
        java.lang.String str32 = dateTimeField26.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField26.getType();
        org.joda.time.YearMonthDay.Property property34 = yearMonthDay17.property(dateTimeFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay17.withMonthOfYear(101);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 101 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "year" + "'", str32, "year");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test03422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03422");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("PT0.100S");
        gregorianCalendar2.setTimeZone(timeZone4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar2);
        gregorianCalendar2.setLenient(false);
        java.lang.String str9 = gregorianCalendar2.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = gregorianCalendar2.get(1216);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1216");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
    }

    @Test
    public void test03423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03423");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay3.minusYears(973);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.year();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay6.plusYears(26215856);
        int int10 = yearMonthDay9.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = yearMonthDay9.getValue(36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test03424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03424");
        java.util.Date date3 = new java.util.Date(26061764, 26072569, 26072167);
        java.util.Date date10 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        int int11 = date10.getSeconds();
        date10.setTime((long) (short) -1);
        java.util.Date date20 = new java.util.Date(26061444, 2022, 190, 1, 0, 26061764);
        int int21 = date20.getSeconds();
        boolean boolean22 = date10.after(date20);
        boolean boolean23 = date3.before(date20);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromDateFields(date3);
        date3.setTime((long) 53);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date10.toString(), "Wed Dec 31 23:59:59 UTC 1969");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 44 + "'", int11 == 44);
        org.junit.Assert.assertEquals(date20.toString(), "Mon Nov 03 16:22:44 UTC 26063513");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44 + "'", int21 == 44);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test03425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03425");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = dateTimeFormatter2.parseLocalTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test03426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03426");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(26071282);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusDays(12);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = localDateTime12.getValue(26206663);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26206663");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26312487 + "'", int5 == 26312487);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test03427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03427");
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        java.lang.String str10 = periodType9.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.PeriodType periodType12 = periodType9.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType9.withWeeksRemoved();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property15 = localTime14.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        long long18 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.LocalTime localTime20 = property15.addCopy((long) (-292275054));
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(2L, (long) 26067972, periodType9, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.era();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean27 = localTime25.isSupported(dateTimeFieldType26);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime29 = localTime25.withFields((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime31.copy();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        mutableDateTime31.setZoneRetainFields(dateTimeZone34);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((java.lang.Object) localTime29, dateTimeZone34);
        java.lang.String str38 = localTime36.toString("\u5354\u5b9a\u4e16\u754c\u6642");
        org.joda.time.LocalTime localTime40 = localTime36.plusMillis(0);
        int[] intArray42 = chronology21.get((org.joda.time.ReadablePartial) localTime40, (long) 26140330);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(90, 26242601, 10, 26114272, 478, 434, 3022, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26114272 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Years" + "'", str10, "Years");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-27424361L) + "'", long18 == (-27424361L));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u5354\u5b9a\u4e16\u754c\u6642" + "'", str38, "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[7, 15, 40, 330]");
    }

    @Test
    public void test03428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03428");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfMinute();
        int int10 = dateTimeField8.getMinimumValue((long) 26073757);
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale12.toLanguageTag();
        java.lang.String str14 = locale11.getDisplayCountry(locale12);
        int int15 = dateTimeField8.getMaximumTextLength(locale12);
        java.util.Set<java.lang.String> strSet16 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getExtension('a');
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale26, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        boolean boolean38 = strSet35.removeAll((java.util.Collection<java.lang.String>) strSet37);
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet35);
        boolean boolean40 = strSet16.addAll((java.util.Collection<java.lang.String>) strSet35);
        java.lang.Object[] objArray41 = strSet16.toArray();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "de-DE" + "'", str13, "de-DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
    }

    @Test
    public void test03429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03429");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = property11.getAsText(locale12);
        int int14 = property11.getMaximumValueOverall();
        org.joda.time.DateMidnight dateMidnight15 = property11.roundFloorCopy();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfMonth();
        int int17 = dateMidnight15.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.plusMonths(24);
        org.joda.time.LocalDate localDate20 = dateMidnight15.toLocalDate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test03430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03430");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(10L, (-1L), periodType2, chronology3);
        org.joda.time.Period period6 = period4.withSeconds(26071);
        org.joda.time.Period period7 = period4.toPeriod();
        java.lang.String str8 = period4.toString();
        org.joda.time.Period period10 = period4.plusSeconds(26207216);
        int int11 = period4.getSeconds();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.011S" + "'", str8, "PT0.011S");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03431");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis(0);
        org.joda.time.LocalDate localDate15 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        int int16 = localDate7.getDayOfMonth();
        org.joda.time.LocalDate.Property property17 = localDate7.weekyear();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime20.copy();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDate18.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate18.toDateTime(readableInstant26);
        org.joda.time.LocalDate.Property property28 = localDate18.yearOfCentury();
        org.joda.time.LocalDate.Property property29 = localDate18.dayOfWeek();
        int int30 = localDate18.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int32 = localDate18.indexOf(dateTimeFieldType31);
        java.lang.String str33 = dateTimeFieldType31.getName();
        int int34 = localDate7.indexOf(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "centuryOfEra" + "'", str33, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test03432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03432");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.lang.String str19 = localDate7.toString("14", locale15);
        java.lang.String str20 = locale15.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withLocale(locale15);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withLocale(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay29 = dateMidnight26.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = yearMonthDay29.getFieldTypes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 1, chronology32);
        java.lang.String str34 = localDate33.toString();
        org.joda.time.LocalDate localDate36 = localDate33.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.year();
        long long43 = chronology37.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay29.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType25.getField(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter24.withChronology(chronology37);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeFormatter24.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter24.withPivotYear((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter24.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.parse("Etc/UTC", dateTimeFormatter24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italian" + "'", str17, "Italian");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Corea del Sud" + "'", str18, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "14" + "'", str19, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Korean (South Korea)" + "'", str20, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Italian" + "'", str23, "Italian");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01" + "'", str34, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1147058000L + "'", long43 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(dateTimeZone50);
    }

    @Test
    public void test03433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03433");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTime(localTime8, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = localDate6.toString("14", locale14);
        java.lang.String str19 = locale14.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale14);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withLocale(locale21);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        org.joda.time.DateMidnight.Property property27 = dateMidnight25.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight25.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = yearMonthDay28.getFieldTypes();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        java.lang.String str33 = localDate32.toString();
        org.joda.time.LocalDate localDate35 = localDate32.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.year();
        long long42 = chronology36.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay28.withChronologyRetainFields(chronology36);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight44.getZone();
        org.joda.time.DateMidnight.Property property46 = dateMidnight44.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay47 = dateMidnight44.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = yearMonthDay47.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone50 = dateMidnight49.getZone();
        boolean boolean52 = dateTimeZone50.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight54 = yearMonthDay47.toDateMidnight(dateTimeZone50);
        int[] intArray56 = chronology36.get((org.joda.time.ReadablePartial) yearMonthDay47, (long) 26069970);
        org.joda.time.Period period57 = new org.joda.time.Period((long) 26072939, chronology36);
        org.joda.time.DateTimeZone dateTimeZone58 = chronology36.getZone();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 1, chronology60);
        java.lang.String str62 = localDate61.toString();
        org.joda.time.LocalDate localDate64 = localDate61.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology65 = localDate64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone69 = dateMidnight68.getZone();
        boolean boolean71 = dateTimeZone69.isStandardOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(dateTimeZone69);
        org.joda.time.Chronology chronology73 = chronology65.withZone(dateTimeZone69);
        org.joda.time.Chronology chronology74 = chronology36.withZone(dateTimeZone69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter20.withChronology(chronology74);
        boolean boolean76 = dateTimeFormatter75.isPrinter();
        java.lang.StringBuffer stringBuffer77 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter75.printTo(stringBuffer77, 16L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italian" + "'", str16, "Italian");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Corea del Sud" + "'", str17, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "14" + "'", str18, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Korean (South Korea)" + "'", str19, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1147058000L + "'", long42 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test03434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03434");
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone8);
        long long13 = dateTimeZone8.convertUTCToLocal((long) 26072867);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(26195056, 26225640, 45, 0, 26290916, 573, 26256, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26290916 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 26072867L + "'", long13 == 26072867L);
    }

    @Test
    public void test03435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03435");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        mutablePeriod1.setPeriod((long) (byte) 100, (long) 26062367, chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfYear();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        java.lang.String str16 = periodType15.getName();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(periodType15);
        org.joda.time.PeriodType periodType18 = periodType15.withYearsRemoved();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 1, chronology20);
        java.lang.String str22 = localDate21.toString();
        org.joda.time.LocalDate localDate24 = localDate21.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfSecond();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 26061397, periodType18, chronology25);
        org.joda.time.PeriodType periodType29 = periodType18.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) chronology10, periodType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Years" + "'", str16, "Years");
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(periodType29);
    }

    @Test
    public void test03436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03436");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 7, 100L, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.hourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withChronology(chronology11);
        org.joda.time.Chronology chronology17 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withDefaultYear(26141564);
        org.joda.time.Chronology chronology21 = dateTimeFormatter2.getChronolgy();
        java.io.Writer writer22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar25 = dateTime23.toGregorianCalendar();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        gregorianCalendar25.setTimeZone(timeZone26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(periodType29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) periodType29, dateTimeZone31);
        int int33 = localDateTime32.getDayOfMonth();
        int int34 = localDateTime32.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.millisOfSecond();
        int int36 = localDateTime32.getEra();
        org.joda.time.LocalDateTime.Property property37 = localDateTime32.era();
        org.joda.time.LocalDateTime.Property property38 = localDateTime32.dayOfMonth();
        int int39 = localDateTime32.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property40 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundFloorCopy();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime28, (org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        int int45 = mutableDateTime44.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone47 = dateMidnight46.getZone();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        mutableDateTime44.setZoneRetainFields(dateTimeZone47);
        org.joda.time.Duration duration50 = period42.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime44);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer22, (org.joda.time.ReadableInstant) mutableDateTime44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 26312918 + "'", int34 == 26312918);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 918 + "'", int45 == 918);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(duration50);
    }

    @Test
    public void test03437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03437");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        int int2 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.toMutableDateTimeISO();
        int int9 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1970, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 26082282, dateTimeZone13);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        mutableDateTime1.setChronology(chronology17);
        mutableDateTime1.setWeekyear(26169515);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 970 + "'", int2 == 970);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26312 + "'", int9 == 26312);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test03438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03438");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime2.copy();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtStartOfDay(dateTimeZone5);
        int int9 = dateTimeZone5.getOffsetFromLocal((long) 26092895);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale11.getCountry();
        java.lang.String str14 = locale11.getVariant();
        java.lang.String str15 = dateTimeZone5.getShortName((long) 26125319, locale11);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate18 = localDate16.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusHours(26076640);
        org.joda.time.DateTime dateTime23 = dateTime20.withEarlierOffsetAtOverlap();
        int int24 = dateTime20.getCenturyOfEra();
        org.joda.time.DateTime dateTime26 = dateTime20.plusHours(26097830);
        int int27 = dateTime26.getDayOfWeek();
        org.joda.time.DateTime.Property property28 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime30 = property28.addWrapFieldToCopy(234);
        boolean boolean31 = locale11.equals((java.lang.Object) 234);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CA" + "'", str13, "CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test03439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03439");
        java.io.IOException iOException0 = new java.io.IOException();
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("", throwable2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        iOException0.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.lang.Throwable[] throwableArray7 = iOException4.getSuppressed();
        java.lang.String str8 = iOException4.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.io.IOException: java.io.IOException: " + "'", str8, "java.io.IOException: java.io.IOException: ");
    }

    @Test
    public void test03440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03440");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        gregorianCalendar2.setTimeZone(timeZone3);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar2);
        int int6 = gregorianCalendar2.getWeekYear();
        int int7 = gregorianCalendar2.getFirstDayOfWeek();
        java.lang.Object obj8 = gregorianCalendar2.clone();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "java.util.GregorianCalendar[time=1645514313028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=33,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "java.util.GregorianCalendar[time=1645514313028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=33,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "java.util.GregorianCalendar[time=1645514313028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=18,SECOND=33,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03441");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime2.copy();
        mutableDateTime2.addMinutes(0);
        mutableDateTime2.setSecondOfDay(22);
        org.joda.time.Chronology chronology8 = null;
        mutableDateTime2.setChronology(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType10, 26069958);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        java.lang.String str15 = periodType14.getName();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(periodType14);
        org.joda.time.PeriodType periodType17 = periodType14.withYearsRemoved();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, chronology19);
        java.lang.String str21 = localDate20.toString();
        org.joda.time.LocalDate localDate23 = localDate20.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.millisOfSecond();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 26061397, periodType17, chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology24);
        mutableDateTime2.setChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField31 = chronology24.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, chronology24);
        org.joda.time.Period period34 = org.joda.time.Period.weeks(26069075);
        org.joda.time.Period period35 = period34.toPeriod();
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) period34);
        mutablePeriod32.clear();
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Years" + "'", str15, "Years");
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
    }

    @Test
    public void test03442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03442");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTime(localTime17, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfEra();
        int int23 = dateMidnight21.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property24 = dateMidnight21.year();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.plusYears((int) ' ');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight21.plusDays(26063479);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plusYears(190);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        java.lang.String str32 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType31);
        org.joda.time.PeriodType periodType34 = periodType31.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType31.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateMidnight30, periodType35);
        int int37 = mutablePeriod36.getSeconds();
        boolean boolean39 = mutablePeriod36.equals((java.lang.Object) "Property[minuteOfHour]");
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod36.addMonths(915);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Years" + "'", str32, "Years");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test03443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03443");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 28391857);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test03444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03444");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 5);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusHours(0);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay3.minusHours(608);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = timeOfDay3.toString("501518-01-01T00:00:00.000", locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "de" + "'", str10, "de");
    }

    @Test
    public void test03445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03445");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Interval interval6 = yearMonthDay3.toInterval(dateTimeZone5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.LocalDate localDate13 = localDate10.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 8, chronology14);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology14);
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay3.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay3.plusMonths(0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        java.lang.String str26 = localDate25.toString();
        org.joda.time.LocalDate localDate28 = localDate25.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.years();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.hourOfHalfday();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 915, chronology29);
        org.joda.time.LocalDate localDate34 = localDate32.withWeekyear(0);
        int int35 = localDate32.getYearOfCentury();
        int int36 = localDate32.getCenturyOfEra();
        boolean boolean37 = yearMonthDay21.isAfter((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate localDate39 = localDate32.withYear(26172107);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 70 + "'", int35 == 70);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test03446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03446");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(44);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) periodType4, dateTimeZone6);
        int int8 = localDateTime7.getDayOfMonth();
        int int9 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekyear();
        java.lang.String str11 = localDateTime7.toString();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) periodType12, dateTimeZone14);
        int int16 = localDateTime15.getDayOfMonth();
        int int17 = localDateTime15.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.millisOfSecond();
        int int19 = localDateTime15.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.withField(dateTimeFieldType20, 190);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableDuration23, readableInstant24, periodType25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutablePeriod26.add(readableDuration27);
        mutablePeriod26.addSeconds(26061238);
        mutablePeriod26.addMillis((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.Duration duration35 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime15.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime7.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property38.addToCopy(26074772);
        int int41 = localDateTime40.getWeekOfWeekyear();
        int int42 = localDateTime40.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = timeOfDay1.isEqual((org.joda.time.ReadablePartial) localDateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26313169 + "'", int9 == 26313169);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:18:33.169" + "'", str11, "2022-02-22T07:18:33.169");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26313169 + "'", int17 == 26313169);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 17 + "'", int41 == 17);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
    }

    @Test
    public void test03447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03447");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        int int18 = mutableDateTime2.getDayOfMonth();
        java.lang.Object obj19 = mutableDateTime2.clone();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime2.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime20.copy();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "2022-02-22T07:18:33.222Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "2022-02-22T07:18:33.222Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "2022-02-22T07:18:33.222Z");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test03448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03448");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(26290153);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test03449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03449");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        gregorianCalendar2.setTimeZone(timeZone3);
        timeZone3.setID("tedesco (Germania)");
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight9.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = yearMonthDay12.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay12.toDateMidnight(dateTimeZone15);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay12.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight24.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = yearMonthDay27.getFieldTypes();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 1, chronology30);
        java.lang.String str32 = localDate31.toString();
        org.joda.time.LocalDate localDate34 = localDate31.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.year();
        long long41 = chronology35.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay27.withChronologyRetainFields(chronology35);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay27.year();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        int int45 = property43.getMaximumShortTextLength(locale44);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.lang.String str47 = locale44.getDisplayCountry(locale46);
        java.util.Locale.setDefault(locale46);
        int int49 = property20.getMaximumShortTextLength(locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = timeZone3.getDisplayName(true, 26131376, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26131376");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01" + "'", str32, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1147058000L + "'", long41 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u610f\u5927\u5229" + "'", str47, "\u610f\u5927\u5229");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
    }

    @Test
    public void test03450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03450");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay18.toDateMidnight();
        org.joda.time.Interval interval21 = yearMonthDay18.toInterval();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay18.minusDays(35);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime26.copy();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        mutableDateTime26.setZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate24.toDateTimeAtStartOfDay(dateTimeZone29);
        java.lang.String str32 = dateTimeZone29.getID();
        org.joda.time.DateTime dateTime33 = yearMonthDay23.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay23.minusDays(26063188);
        org.joda.time.DateMidnight dateMidnight36 = yearMonthDay35.toDateMidnight();
        org.joda.time.Period period39 = new org.joda.time.Period((long) (-1), (long) 26061444);
        org.joda.time.format.PeriodFormatter periodFormatter40 = null;
        java.lang.String str41 = period39.toString(periodFormatter40);
        org.joda.time.Weeks weeks42 = period39.toStandardWeeks();
        org.joda.time.format.PeriodFormatter periodFormatter43 = null;
        java.lang.String str44 = period39.toString(periodFormatter43);
        org.joda.time.Duration duration45 = period39.toStandardDuration();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        int int48 = mutableDateTime47.getMillisOfSecond();
        mutableDateTime47.setMillis((long) 26061397);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableDuration51, readableInstant52, periodType53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutablePeriod54.add(readableDuration55);
        mutablePeriod54.addMonths((int) '#');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 1, chronology60);
        int int62 = localDate61.getDayOfYear();
        org.joda.time.LocalTime localTime63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDate61.toDateTime(localTime63, dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = localDate61.toDateMidnight(dateTimeZone66);
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.yearOfEra();
        int int69 = dateMidnight67.getMinuteOfHour();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 100, chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology73);
        org.joda.time.MutableDateTime mutableDateTime75 = mutableDateTime74.copy();
        org.joda.time.Duration duration76 = period72.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime75);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight67.plus((org.joda.time.ReadableDuration) duration76);
        mutablePeriod54.add((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(chronology79);
        org.joda.time.MutableDateTime mutableDateTime81 = mutableDateTime80.copy();
        mutableDateTime80.addMinutes(0);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime87 = dateTime84.withFieldAdded(durationFieldType85, (int) (byte) 0);
        mutableDateTime80.add(durationFieldType85, 4);
        org.joda.time.Duration duration90 = mutablePeriod54.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime80);
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration90);
        long long92 = duration90.getMillis();
        boolean boolean93 = duration45.isLongerThan((org.joda.time.ReadableDuration) duration90);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight36.withDurationAdded((org.joda.time.ReadableDuration) duration45, 713);
        org.joda.time.DateMidnight.Property property96 = dateMidnight95.weekyear();
        org.joda.time.DateMidnight dateMidnight97 = property96.roundCeilingCopy();
        java.lang.String str98 = property96.getAsShortText();
        boolean boolean99 = property96.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Etc/UTC" + "'", str32, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT7H14M21.445S" + "'", str41, "PT7H14M21.445S");
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT7H14M21.445S" + "'", str44, "PT7H14M21.445S");
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 561 + "'", int48 == 561);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 92275200100L + "'", long92 == 92275200100L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(dateMidnight97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "-69336" + "'", str98, "-69336");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test03451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03451");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period7 = period2.toPeriod();
        org.joda.time.Period period9 = period7.minusWeeks(687120000);
        org.joda.time.Period period11 = period9.plusSeconds(26064394);
        org.joda.time.Period period13 = period9.withSeconds(573);
        org.joda.time.Period period15 = period13.plusHours(636);
        org.joda.time.Period period17 = period15.withHours(26129643);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test03452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03452");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.year();
        long long17 = chronology11.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay3.year();
        org.joda.time.YearMonthDay yearMonthDay20 = property19.withMinimumValue();
        org.joda.time.DurationField durationField21 = property19.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay23 = property19.setCopy(26077394);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.plusYears(928);
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay23.withDayOfMonth(26114933);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26114933 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1147058000L + "'", long17 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test03453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03453");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 10);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.Period period5 = period1.normalizedStandard(periodType2);
        org.joda.time.Weeks weeks6 = period1.toStandardWeeks();
        org.joda.time.MutablePeriod mutablePeriod7 = weeks6.toMutablePeriod();
        mutablePeriod7.addMinutes(26160796);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
    }

    @Test
    public void test03454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03454");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(26113319, 26263128, 26186505, 26257909, 840, 26295571, 26072320, 29699547, periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test03455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03455");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property6 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDate7.getFieldTypes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
    }

    @Test
    public void test03456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03456");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Weeks weeks7 = period2.toStandardWeeks();
        org.joda.time.MutablePeriod mutablePeriod8 = period2.toMutablePeriod();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime10.copy();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration15, readableInstant16, periodType17);
        mutablePeriod18.addYears((int) (byte) 0);
        mutableDateTime10.add((org.joda.time.ReadablePeriod) mutablePeriod18, 26062923);
        org.joda.time.Period period23 = period2.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Period period24 = period2.normalizedStandard();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test03457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03457");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        mutableDateTime1.addMinutes(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime8 = dateTime5.withFieldAdded(durationFieldType6, (int) (byte) 0);
        mutableDateTime1.add(durationFieldType6, 4);
        int int11 = mutableDateTime1.getDayOfYear();
        java.util.GregorianCalendar gregorianCalendar12 = mutableDateTime1.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = gregorianCalendar12.isSet(26181867);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26181867");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
    }

    @Test
    public void test03458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03458");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = property11.getAsText(locale12);
        org.joda.time.DateMidnight dateMidnight15 = property11.setCopy(26084032);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight17 = property11.addToCopy(1645514237377L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645514237377");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test03459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03459");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromDateFields(date0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03460");
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant4 = mutableDateTime3.toInstant();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        mutableDateTime3.setChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.weekyear();
        org.joda.time.Chronology chronology14 = chronology11.withUTC();
        org.joda.time.DurationField durationField15 = chronology14.weeks();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(637, 26184153, 512, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 637 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test03461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03461");
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        java.lang.String str10 = periodType9.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.PeriodType periodType12 = periodType9.withYearsRemoved();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.millisOfSecond();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 26061397, periodType12, chronology19);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(periodType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period24 = new org.joda.time.Period(28, 26085228, 244, 26172435, 26298042, 184, 26237807, 26294586, periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Years" + "'", str10, "Years");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test03462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03462");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType2 = periodType1.withWeeksRemoved();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 1, chronology4);
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate localDate8 = localDate5.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology9);
        org.joda.time.Period period13 = new org.joda.time.Period((-11340202850L), periodType1, chronology9);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfCentury();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test03463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03463");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period7 = period2.toPeriod();
        org.joda.time.Period period9 = period7.minusWeeks(687120000);
        org.joda.time.PeriodType periodType10 = period9.getPeriodType();
        org.joda.time.PeriodType periodType11 = periodType10.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType10);
        mutablePeriod13.setPeriod((long) 26184320);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test03464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03464");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableDuration6, readableInstant7, periodType8);
        mutablePeriod9.addYears((int) (byte) 0);
        int int12 = mutablePeriod9.getMonths();
        mutablePeriod9.addMinutes((int) (byte) 0);
        int int15 = mutablePeriod9.getMinutes();
        org.joda.time.DateTime dateTime17 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod9, (int) 'a');
        org.joda.time.DateTime dateTime19 = dateTime5.withMillis((long) 26072569);
        java.util.Date date20 = dateTime19.toDate();
        org.joda.time.DateTime.Property property21 = dateTime19.era();
        org.joda.time.DurationField durationField22 = property21.getLeapDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 07:14:32 UTC 1970");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNull(durationField22);
    }

    @Test
    public void test03465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03465");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        java.lang.String str3 = property1.getAsText();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        mutableDateTime5.addSeconds(292278993);
        int int9 = property1.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.LocalTime localTime11 = property1.addCopy(90);
        org.joda.time.LocalTime localTime12 = property1.roundCeilingCopy();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.LocalTime localTime16 = localTime13.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localTime13.toDateTimeToday(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        mutablePeriod22.addYears((int) (byte) 0);
        int int25 = mutablePeriod22.getMonths();
        mutablePeriod22.addMinutes((int) (byte) 0);
        int int28 = mutablePeriod22.getMinutes();
        org.joda.time.DateTime dateTime30 = dateTime18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod22, (int) 'a');
        org.joda.time.DateTime dateTime32 = dateTime18.withMillis((long) 26072569);
        java.util.Date date33 = dateTime32.toDate();
        org.joda.time.DateTime dateTime35 = dateTime32.plusHours((int) 'x');
        org.joda.time.DateTime dateTime37 = dateTime32.plusMillis(26073687);
        org.joda.time.DateTime.Property property38 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime39 = property38.withMaximumValue();
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime43 = dateTime39.withFieldAdded(durationFieldType41, 26065744);
        org.joda.time.DateTime.Property property44 = dateTime43.weekOfWeekyear();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(10L, (-1L), periodType47, chronology48);
        org.joda.time.Period period51 = period49.withSeconds(26071);
        org.joda.time.DateTime dateTime52 = dateTime43.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period54 = period49.withWeeks(26070054);
        int int55 = period54.getYears();
        org.joda.time.LocalTime localTime56 = localTime12.minus((org.joda.time.ReadablePeriod) period54);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "18" + "'", str3, "18");
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 07:14:32 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(localTime56);
    }

    @Test
    public void test03466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03466");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableDuration5, readableInstant6, periodType7);
        mutablePeriod8.addYears((int) (byte) 0);
        int int11 = mutablePeriod8.getMonths();
        mutablePeriod8.addMinutes((int) (byte) 0);
        mutablePeriod8.addMonths((int) 'x');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod8, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears(26064003);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy(26182160);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test03467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03467");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property6 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate2.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = property7.setCopy("2022-02-22T07:18:19.644");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:18:19.644\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test03468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03468");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.Duration duration8 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Period period10 = period4.plusDays((int) (byte) 10);
        int int11 = period10.getHours();
        org.joda.time.Period period13 = period10.plusMonths(2);
        org.joda.time.Period period15 = period10.minusMonths(12);
        org.joda.time.Seconds seconds16 = period10.toStandardSeconds();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay1.plus((org.joda.time.ReadablePeriod) seconds16);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.plusMillis(687120000);
        int int20 = timeOfDay17.getMillisOfSecond();
        org.joda.time.LocalTime localTime21 = timeOfDay17.toLocalTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableDuration22, readableInstant23, periodType24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutablePeriod25.add(readableDuration26);
        mutablePeriod25.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableDuration30, readableInstant31, periodType32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutablePeriod33.add(readableDuration34);
        mutablePeriod33.addMonths((int) '#');
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod33.add((-1L));
        int int41 = mutablePeriod33.getMonths();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay17.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, 26204636);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType45 = timeOfDay17.getFieldType(26222437);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26222437");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 117 + "'", int20 == 117);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(timeOfDay43);
    }

    @Test
    public void test03469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03469");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withHoursRemoved();
        org.joda.time.PeriodType periodType3 = periodType1.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 524, periodType1);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod4.setPeriod((long) 26092417, 0L, chronology7);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test03470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03470");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(periodType13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) periodType13, dateTimeZone15);
        int int17 = localDateTime16.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableDuration18, readableInstant19, periodType20);
        mutablePeriod21.addYears((int) (byte) 0);
        int int24 = mutablePeriod21.getMonths();
        mutablePeriod21.addMinutes((int) (byte) 0);
        mutablePeriod21.addMonths((int) 'x');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod21, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) periodType32, dateTimeZone34);
        int int36 = localDateTime35.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableDuration37, readableInstant38, periodType39);
        mutablePeriod40.addYears((int) (byte) 0);
        int int43 = mutablePeriod40.getMonths();
        mutablePeriod40.addMinutes((int) (byte) 0);
        mutablePeriod40.addMonths((int) 'x');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime35.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod40, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime52 = localDateTime35.withEra(2021);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2021 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26314499 + "'", int5 == 26314499);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test03471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03471");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTime(localTime8, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = localDate6.toString("14", locale14);
        java.lang.String str19 = locale14.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale14);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        org.joda.time.DateMidnight.Property property27 = dateMidnight25.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight25.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = yearMonthDay28.getFieldTypes();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        java.lang.String str33 = localDate32.toString();
        org.joda.time.LocalDate localDate35 = localDate32.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.year();
        long long42 = chronology36.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay28.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType24.getField(chronology36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter23.withChronology(chronology36);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeFormatter23.getZone();
        java.lang.Integer int47 = dateTimeFormatter23.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter23.withPivotYear(26102559);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = dateTimeFormatter49.parseLocalDateTime("2022-02-22T07:15:06.128");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str16, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Corea del Sud" + "'", str17, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "14" + "'", str18, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str19, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str22, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1147058000L + "'", long42 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(dateTimeZone46);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
    }

    @Test
    public void test03472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03472");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        boolean boolean8 = durationField7.isPrecise();
        long long11 = durationField7.subtract((long) 26062367, (-1L));
        int int13 = durationField7.getValue((long) 56);
        java.lang.String str14 = durationField7.toString();
        long long17 = durationField7.getValueAsLong((long) 27, (long) 943);
        long long18 = durationField7.getUnitMillis();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 31562062367L + "'", long11 == 31562062367L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DurationField[years]" + "'", str14, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 31556952000L + "'", long18 == 31556952000L);
    }

    @Test
    public void test03473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03473");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withLocale(locale5);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter4.getParser();
        java.lang.Integer int8 = dateTimeFormatter4.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test03474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03474");
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 1, chronology8);
        int int10 = localDate9.getDayOfYear();
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate9.toDateTime(localTime11, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = localDate9.toDateMidnight(dateTimeZone14);
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.lang.String str21 = localDate9.toString("14", locale17);
        java.lang.String str22 = locale17.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter5.withLocale(locale17);
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withLocale(locale24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter23.withZone(dateTimeZone27);
        org.joda.time.Chronology chronology29 = dateTimeFormatter23.getChronolgy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        java.lang.String str33 = localDate32.toString();
        org.joda.time.LocalDate localDate35 = localDate32.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekyear();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.weekyearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter23.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField42 = chronology36.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(26259298, 579, 26171176, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26259298 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str19, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Corea del Sud" + "'", str20, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "14" + "'", str21, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str22, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str25, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test03475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03475");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalTime localTime8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate6.toDateTime(localTime8, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.lang.String str18 = localDate6.toString("14", locale14);
        java.lang.String str19 = locale14.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withLocale(locale14);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withLocale(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        org.joda.time.DateMidnight.Property property27 = dateMidnight25.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay28 = dateMidnight25.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = yearMonthDay28.getFieldTypes();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        java.lang.String str33 = localDate32.toString();
        org.joda.time.LocalDate localDate35 = localDate32.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.year();
        long long42 = chronology36.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay28.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType24.getField(chronology36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter23.withChronology(chronology36);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeFormatter23.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter23.withPivotYear((java.lang.Integer) 0);
        boolean boolean49 = dateTimeFormatter23.isParser();
        org.joda.time.format.DateTimeParser dateTimeParser50 = dateTimeFormatter23.getParser();
        boolean boolean51 = dateTimeFormatter23.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime53 = dateTimeFormatter23.parseLocalTime("P366Y");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str16, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Corea del Sud" + "'", str17, "Corea del Sud");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "14" + "'", str18, "14");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str19, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str22, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1147058000L + "'", long42 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(dateTimeParser50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test03476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03476");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.plusYears(26062367);
        int int4 = dateMidnight0.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight0.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test03477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03477");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("Italian");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03478");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.setYear(26074093);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.dayOfWeek();
        mutableDateTime5.setMillis((long) 26181867);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test03479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03479");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 'u');
        int int2 = timeOfDay1.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.withMinuteOfHour(3);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = chronology6.getDateTimeMillis((long) 969, 26157332, 26291659, 26186036, 164);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26157332 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test03480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03480");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay3.plusMonths(23);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay3.plusYears(26069075);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay3.plus(readablePeriod9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay3.withYear(26079926);
        org.joda.time.LocalDate localDate13 = yearMonthDay3.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = yearMonthDay3.getValue(26242837);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26242837");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test03481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03481");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(894);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableDuration6, readableInstant7, periodType8);
        mutablePeriod9.addYears((int) (byte) 0);
        int int12 = mutablePeriod9.getMonths();
        mutablePeriod9.addMinutes((int) (byte) 0);
        int int15 = mutablePeriod9.getMinutes();
        org.joda.time.DateTime dateTime17 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod9, (int) 'a');
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime19.withDayOfMonth(26145847);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26145847 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03482");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.plusYears((int) ' ');
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight8.plusDays(26063479);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        java.lang.String str19 = localDate18.toString();
        org.joda.time.LocalDate localDate21 = localDate18.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateMidnight8.toDateTime(chronology22);
        org.joda.time.DateMidnight.Property property26 = dateMidnight8.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight28 = property26.setCopy("Cina");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Cina\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test03483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03483");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 100);
        int int11 = dateTime10.getWeekOfWeekyear();
        boolean boolean13 = dateTime10.isBefore((long) 26062445);
        int int14 = dateTime10.getYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 100, chronology16);
        org.joda.time.Seconds seconds18 = period17.toStandardSeconds();
        org.joda.time.DateTime dateTime19 = dateTime10.plus((org.joda.time.ReadablePeriod) seconds18);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.minus((long) 499);
        org.joda.time.DateTime dateTime24 = dateMidnight20.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant26 = mutableDateTime25.toInstant();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 1, chronology28);
        java.lang.String str30 = localDate29.toString();
        org.joda.time.LocalDate localDate32 = localDate29.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        mutableDateTime25.setChronology(chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 1, chronology36);
        int int38 = localDate37.getDayOfYear();
        org.joda.time.LocalTime localTime39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate37.toDateTime(localTime39, dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = localDate37.toDateMidnight(dateTimeZone42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateMidnight43, periodType44);
        org.joda.time.Period period47 = period45.plusSeconds(12);
        org.joda.time.Period period49 = period45.withMinutes(26086669);
        org.joda.time.Period period51 = period49.minusYears(26127216);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight20.minus((org.joda.time.ReadablePeriod) period51);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateMidnight52);
    }

    @Test
    public void test03484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03484");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("26214897", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03485");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        mutableDateTime1.addSeconds(292278993);
        org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(4);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight9.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = yearMonthDay12.getFieldTypes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 1, chronology15);
        java.lang.String str17 = localDate16.toString();
        org.joda.time.LocalDate localDate19 = localDate16.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.year();
        long long26 = chronology20.add(0L, (long) 26069500, 44);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay12.withChronologyRetainFields(chronology20);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay31 = dateMidnight28.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = yearMonthDay31.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight38 = yearMonthDay31.toDateMidnight(dateTimeZone34);
        int[] intArray40 = chronology20.get((org.joda.time.ReadablePartial) yearMonthDay31, (long) 26069970);
        org.joda.time.Period period41 = new org.joda.time.Period((long) 26072939, chronology20);
        org.joda.time.DateTime dateTime42 = dateTime5.toDateTime(chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime5.withDayOfWeek((-19045));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19045 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1147058000L + "'", long26 == 1147058000L);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test03486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03486");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1970, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 26082282, dateTimeZone3);
        int int7 = localDateTime6.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMinuteOfHour(593);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 593 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
    }

    @Test
    public void test03487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03487");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        long long3 = gregorianCalendar2.getTimeInMillis();
        gregorianCalendar2.setFirstDayOfWeek(26256993);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar2.roll(26227189, 26131645);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514315005L + "'", long3 == 1645514315005L);
    }

    @Test
    public void test03488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03488");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay3 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = yearMonthDay3.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay3.plusMonths(23);
        org.joda.time.LocalDate localDate7 = yearMonthDay6.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(26118624);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) localDate7, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test03489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03489");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((int) (short) 1, 26094289, 511, 26275945, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26094289 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test03490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03490");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusYears(100);
        int int3 = localDate0.getEra();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 10);
        org.joda.time.Period period7 = period5.withMillis(35);
        org.joda.time.LocalDate localDate8 = localDate0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period10 = period5.minusWeeks(27425235);
        org.joda.time.Period period11 = period10.normalizedStandard();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test03491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03491");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(26071282);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths(26185952);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusWeeks(26075615);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26315881 + "'", int5 == 26315881);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test03492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03492");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfDay();
        java.lang.String str10 = chronology6.toString();
        org.joda.time.DurationField durationField11 = chronology6.hours();
        org.joda.time.DurationField durationField12 = chronology6.halfdays();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test03493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03493");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(0L);
    }

    @Test
    public void test03494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03494");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.plus((long) '#');
        org.joda.time.Instant instant4 = instant0.minus((long) 59);
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime6 = instant4.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test03495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03495");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.joda.time.LocalTime localTime4 = property1.addWrapFieldToCopy((int) 'a');
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime8 = property5.addCopy(26118133);
        boolean boolean9 = property5.isLeap();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03496");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear(26100725);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test03497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03497");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.joda.time.LocalTime localTime4 = property1.addWrapFieldToCopy((int) 'a');
        org.joda.time.LocalTime localTime6 = property1.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime7 = property1.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test03498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03498");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = dateTime0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar2 = dateTime0.toGregorianCalendar();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        gregorianCalendar2.setTimeZone(timeZone3);
        int int5 = gregorianCalendar2.getMinimalDaysInFirstWeek();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 26068833);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        long long12 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.DateMidnight.Property property13 = dateMidnight10.dayOfWeek();
        boolean boolean14 = mutableDateTime7.isBefore((org.joda.time.ReadableInstant) dateMidnight10);
        boolean boolean15 = gregorianCalendar2.before((java.lang.Object) dateMidnight10);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight10.plus((long) 26247724);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight10.withDurationAdded((long) 449, 26197853);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-27424361L) + "'", long12 == (-27424361L));
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test03499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03499");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withDefaultYear(26182160);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
    }

    @Test
    public void test03500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03500");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant1 = mutableDateTime0.toInstant();
        long long2 = instant1.getMillis();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) periodType3, dateTimeZone5);
        int int7 = localDateTime6.getDayOfMonth();
        int int8 = localDateTime6.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusHours(1970);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundCeiling();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(periodType16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) periodType16, dateTimeZone18);
        int int20 = localDateTime19.getDayOfMonth();
        int int21 = localDateTime19.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfSecond();
        int int23 = localDateTime19.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withField(dateTimeFieldType24, 190);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableDuration27, readableInstant28, periodType29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutablePeriod30.add(readableDuration31);
        mutablePeriod30.addSeconds(26061238);
        mutablePeriod30.addMillis((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.Duration duration39 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime19.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(periodType41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) periodType41, dateTimeZone43);
        int int45 = localDateTime44.getDayOfMonth();
        int int46 = localDateTime44.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.millisOfSecond();
        int int48 = localDateTime44.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime44.withField(dateTimeFieldType49, 190);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableDuration52, readableInstant53, periodType54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutablePeriod55.add(readableDuration56);
        mutablePeriod55.addSeconds(26061238);
        mutablePeriod55.addMillis((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.parse("2022-02-22T07:14:26.152Z");
        org.joda.time.Duration duration64 = mutablePeriod55.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime44.plus((org.joda.time.ReadableDuration) duration64);
        boolean boolean66 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration64);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration39, 26103181);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime11.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Instant instant70 = instant1.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone71 = instant1.getZone();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514316847L + "'", long2 == 1645514316847L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26316847 + "'", int8 == 26316847);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26316847 + "'", int21 == 26316847);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 22 + "'", int45 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 26316847 + "'", int46 == 26316847);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
    }
}

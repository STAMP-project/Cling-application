import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest38 {

    public static boolean debug = false;

    @Test
    public void test19001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19001");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        int int8 = dateTimeFormatter5.getDefaultYear();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.util.Locale locale11 = locale9.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter5.withLocale(locale9);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale16, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter5.withChronology(chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withPivotYear((int) (byte) 100);
        boolean boolean31 = dateTimeFormatter30.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter30.withDefaultYear((int) (short) -1);
        java.util.Locale locale34 = dateTimeFormatter33.getLocale();
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatter33.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertNotNull(dateTimeParser35);
    }

    @Test
    public void test19002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19002");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.setVariant("Italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.setVariant("java.io.IOException: Chinese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: java.io.IOException: Chinese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test19003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19003");
        java.util.Locale locale1 = new java.util.Locale("+40:01");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str4 = locale1.getExtension('a');
        java.lang.String str5 = locale1.toLanguageTag();
        org.junit.Assert.assertEquals(locale1.toString(), "+40:01");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
    }

    @Test
    public void test19004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19004");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.Locale.FilteringMode filteringMode8 = null;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6, filteringMode8);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale17 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale26 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale locale33 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale37 = locale34.stripExtensions();
        java.lang.String str38 = locale37.getDisplayVariant();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet39);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "und" + "'", str27, "und");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test19005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19005");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DurationField durationField10 = chronology8.days();
        long long16 = chronology8.getDateTimeMillis((long) (-121), (int) (short) 1, (int) (byte) 10, 0, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField17 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology8.millis();
        java.lang.String str19 = chronology8.toString();
        org.joda.time.DurationField durationField20 = chronology8.months();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-82200000L) + "'", long16 == (-82200000L));
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test19006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19006");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = dateTimeFormatter3.parseLocalDate("FRANCE");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"FRANCE\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeParser10);
    }

    @Test
    public void test19007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19007");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale0);
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology6, locale7, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str11 = locale4.getDisplayCountry(locale7);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale4.getDisplayLanguage(locale12);
        java.lang.String str14 = locale4.getCountry();
        java.util.Locale.setDefault(locale4);
        java.lang.String str16 = locale0.getDisplayVariant(locale4);
        java.lang.String str17 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet18 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str2, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "giapponese" + "'", str13, "giapponese");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test19008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19008");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("java.io.IOException: 01.01.70");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19009");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("it");
        java.lang.String str5 = locale3.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale3);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean9 = dateTimeZone7.equals((java.lang.Object) dateTimeZone8);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setExtension('a', "en-US");
        java.util.Locale.Builder builder17 = builder15.setLanguageTag("it");
        java.util.Locale locale18 = builder15.build();
        java.util.Locale.setDefault(category11, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category11);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder21.setExtension('a', "en-US");
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str33 = locale26.getDisplayCountry(locale29);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale26.getDisplayLanguage(locale34);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str42 = locale38.toLanguageTag();
        java.lang.String str43 = locale26.getDisplayCountry(locale38);
        java.util.Locale.Builder builder44 = builder24.setLocale(locale38);
        java.util.Locale.setDefault(category11, locale38);
        java.util.Locale locale46 = java.util.Locale.getDefault(category11);
        java.lang.String str47 = dateTimeZone8.getShortName(97L, locale46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        long long51 = dateTimeZone48.adjustOffset((long) 0, true);
        java.util.TimeZone timeZone52 = dateTimeZone48.toTimeZone();
        long long54 = dateTimeZone8.getMillisKeepLocal(dateTimeZone48, (long) (-41));
        java.lang.String str56 = dateTimeZone8.getName((-154919999L));
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "giapponese" + "'", str35, "giapponese");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-41L) + "'", long54 == (-41L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
    }

    @Test
    public void test19010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19010");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale locale6 = builder3.build();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.setVariant("Chinese");
        java.util.Locale locale10 = builder3.build();
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setExtension('a', "en-US");
        java.util.Locale.Builder builder17 = builder15.setLanguageTag("it");
        java.util.Locale locale18 = builder15.build();
        java.util.Locale.setDefault(category11, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category11);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder21.setExtension('a', "en-US");
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str33 = locale26.getDisplayCountry(locale29);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale26.getDisplayLanguage(locale34);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str42 = locale38.toLanguageTag();
        java.lang.String str43 = locale26.getDisplayCountry(locale38);
        java.util.Locale.Builder builder44 = builder24.setLocale(locale38);
        java.util.Locale.setDefault(category11, locale38);
        java.util.Locale locale47 = new java.util.Locale("hi!");
        java.lang.String str48 = locale47.getDisplayCountry();
        java.lang.String str49 = locale47.toLanguageTag();
        java.lang.String str50 = locale47.getISO3Country();
        java.lang.String str51 = locale47.getDisplayCountry();
        java.lang.String str52 = locale47.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale47);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder54.setExtension('a', "en-US");
        java.util.Locale locale58 = builder57.build();
        java.util.Locale.setDefault(category11, locale58);
        java.util.Locale locale61 = new java.util.Locale("1/5/70");
        java.lang.String str62 = locale58.getDisplayCountry(locale61);
        boolean boolean63 = locale10.equals((java.lang.Object) str62);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "giapponese" + "'", str35, "giapponese");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "und" + "'", str49, "und");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals(locale61.toString(), "1/5/70");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test19011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19011");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology9.add(readablePeriod18, 1L, 0);
        org.joda.time.DateTimeZone dateTimeZone22 = chronology9.getZone();
        org.joda.time.Chronology chronology23 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        long long28 = chronology23.add((-346198000L), (-144059880L), (-2001));
        org.joda.time.DurationField durationField29 = chronology23.seconds();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.secondOfDay();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 287917621880L + "'", long28 == 287917621880L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test19012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19012");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology5, locale6, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str10 = locale3.getDisplayCountry(locale6);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale3.getDisplayLanguage(locale11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str19 = locale15.toLanguageTag();
        java.lang.String str20 = locale3.getDisplayCountry(locale15);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("+00:00:00.035");
        java.lang.String str27 = locale26.getISO3Language();
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.getDefault(category29);
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale31.toLanguageTag();
        java.util.Locale.setDefault(category0, locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter35.withOffsetParsed();
        java.lang.String str38 = dateTimeFormatter36.print((long) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter36.withZoneUTC();
        java.util.Locale locale40 = java.util.Locale.KOREA;
        boolean boolean41 = locale40.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter39.withLocale(locale40);
        java.util.Locale.setDefault(category0, locale40);
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.lang.String str47 = locale46.toLanguageTag();
        java.util.Locale locale49 = new java.util.Locale("hi!");
        java.lang.String str50 = locale49.getDisplayCountry();
        java.lang.String str51 = locale49.toLanguageTag();
        java.lang.String str52 = locale46.getDisplayName(locale49);
        java.lang.String str53 = locale44.getDisplayCountry(locale49);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        java.lang.String str56 = locale49.getDisplayVariant(locale54);
        java.util.Set<java.lang.String> strSet57 = locale54.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet58 = locale54.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet59 = locale54.getExtensionKeys();
        java.lang.String str60 = locale54.getDisplayName();
        java.util.Locale.setDefault(category0, locale54);
        java.util.Locale locale62 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "giapponese" + "'", str12, "giapponese");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh-TW" + "'", str33, "zh-TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "70/01/01" + "'", str38, "70/01/01");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ja" + "'", str47, "ja");
        org.junit.Assert.assertEquals(locale49.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "und" + "'", str51, "und");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Japanese" + "'", str52, "Japanese");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str60, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
    }

    @Test
    public void test19013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19013");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) (-1));
        boolean boolean6 = dateTimeZone0.isFixed();
        int int8 = dateTimeZone0.getOffset((long) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        boolean boolean20 = dateTimeZone0.equals((java.lang.Object) chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.minuteOfDay();
        org.joda.time.DurationField durationField24 = chronology17.weekyears();
        org.joda.time.DurationField durationField25 = chronology17.seconds();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getName((long) 2000);
        long long30 = dateTimeZone26.nextTransition((long) 'a');
        boolean boolean31 = dateTimeZone26.isFixed();
        int int33 = dateTimeZone26.getOffset(40L);
        int int35 = dateTimeZone26.getOffsetFromLocal((long) (short) 1);
        org.joda.time.Chronology chronology36 = chronology17.withZone(dateTimeZone26);
        java.lang.String str37 = dateTimeZone26.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 97L + "'", long30 == 97L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
    }

    @Test
    public void test19014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19014");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) 2000);
        long long4 = dateTimeZone0.nextTransition((long) 'a');
        java.util.TimeZone timeZone5 = dateTimeZone0.toTimeZone();
        long long8 = dateTimeZone0.convertLocalToUTC((long) 3600000, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 97L + "'", long4 == 97L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3600000L + "'", long8 == 3600000L);
    }

    @Test
    public void test19015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19015");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) (-1));
        boolean boolean6 = dateTimeZone0.isFixed();
        int int8 = dateTimeZone0.getOffset((long) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        boolean boolean20 = dateTimeZone0.equals((java.lang.Object) chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19016");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.year();
        java.lang.String str16 = chronology9.toString();
        org.joda.time.DurationField durationField17 = chronology9.hours();
        java.lang.String str18 = chronology9.toString();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
    }

    @Test
    public void test19017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19017");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clearExtensions();
        java.util.Locale.Builder builder9 = builder3.setLanguage("UTC");
        java.util.Locale.Builder builder11 = builder3.setRegion("fr");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder11.clear();
        java.util.Locale.Builder builder16 = builder11.removeUnicodeLocaleAttribute("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder11.removeUnicodeLocaleAttribute("\u5e74\u6708\u65e5");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1969?12?30? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test19018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19018");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        java.lang.String str9 = languageRange1.getRange();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eng" + "'", str7, "eng");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
    }

    @Test
    public void test19019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19019");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder6.setExtension('a', "it");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder12 = builder10.clear();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder15 = builder12.setLanguageTag("cinese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder12.setExtension(' ', "-04:10");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test19020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19020");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        java.lang.Integer int9 = dateTimeFormatter0.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = dateTimeFormatter10.parseLocalTime("\u5e74\u6708\u65e5\u661f\u671f\u4e8c");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1969?12?30? ???\" is malformed at \"?12?30? ???\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test19021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19021");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.Chronology chronology14 = chronology8.withUTC();
        org.joda.time.DurationField durationField15 = chronology8.weekyears();
        long long19 = chronology8.add((long) 3600000, (-10799999L), (int) ' ');
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-341999968L) + "'", long19 == (-341999968L));
    }

    @Test
    public void test19022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19022");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) (-121));
        java.lang.Integer int3 = dateTimeFormatter0.getPivotYear();
        java.lang.Integer int4 = dateTimeFormatter0.getPivotYear();
        org.joda.time.Chronology chronology5 = dateTimeFormatter0.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter0.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test19023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19023");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.minuteOfDay();
        org.joda.time.Chronology chronology14 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.halfdayOfDay();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale locale19 = builder18.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(13600522824L, chronology17, locale19, (java.lang.Integer) (-33), (-101));
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((-4019760010199990L), chronology9, locale19, (java.lang.Integer) (-115200001), 12);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
    }

    @Test
    public void test19024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19024");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withOffsetParsed();
        boolean boolean9 = dateTimeFormatter0.isOffsetParsed();
        java.lang.String str11 = dateTimeFormatter0.print((-4200000L));
        org.joda.time.LocalDateTime localDateTime13 = dateTimeFormatter0.parseLocalDateTime("2/11/22");
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "69/12/31" + "'", str11, "69/12/31");
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test19025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19025");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.era();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder19.setExtension('a', "en-US");
        java.util.Locale.Builder builder24 = builder22.setVariant("");
        java.util.Locale.Builder builder26 = builder22.setScript("");
        java.util.Locale.Builder builder28 = builder22.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder29 = builder22.clear();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str37 = locale30.getDisplayCountry(locale33);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale30.getDisplayLanguage(locale38);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str46 = locale42.toLanguageTag();
        java.lang.String str47 = locale30.getDisplayCountry(locale42);
        java.util.Locale.Builder builder48 = builder22.setLocale(locale42);
        java.lang.String str49 = locale42.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((-190800000L), chronology9, locale42, (java.lang.Integer) 117, (int) (byte) 10);
        java.lang.String str53 = locale42.getDisplayScript();
        java.lang.String str54 = locale42.getDisplayName();
        boolean boolean55 = locale42.hasExtensions();
        java.lang.String str56 = locale42.getVariant();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "giapponese" + "'", str39, "giapponese");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "it" + "'", str46, "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str54, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test19026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19026");
        java.io.IOException iOException1 = new java.io.IOException("chinese (china) (CAN,italiano)");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test19027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19027");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale5.getDisplayLanguage(locale13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str21 = locale17.toLanguageTag();
        java.lang.String str22 = locale5.getDisplayCountry(locale17);
        java.util.Locale.Builder builder23 = builder3.setLocale(locale17);
        java.util.Locale.Builder builder24 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder3.addUnicodeLocaleAttribute("\u4e2d\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.io.IOException: java.io.IOException: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "giapponese" + "'", str14, "giapponese");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test19028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19028");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField14 = chronology9.days();
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.weekyear();
        org.joda.time.DurationField durationField17 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.dayOfWeek();
        org.joda.time.Chronology chronology19 = chronology9.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) (short) 0);
        int int24 = dateTimeZone20.getStandardOffset((long) (-1));
        int int26 = dateTimeZone20.getOffsetFromLocal((long) (byte) 1);
        int int28 = dateTimeZone20.getStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        long long32 = dateTimeZone20.getMillisKeepLocal(dateTimeZone30, (long) (byte) 1);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale37 = new java.util.Locale("hi!");
        java.lang.String str38 = locale37.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale37, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.days();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.millisOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        long long51 = dateTimeZone48.adjustOffset((long) 0, true);
        java.lang.String str53 = dateTimeZone48.getNameKey((long) (-1));
        boolean boolean54 = dateTimeZone48.isFixed();
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology58, locale59, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str63 = locale56.getDisplayCountry(locale59);
        java.lang.String str64 = dateTimeZone48.getName((long) (short) 100, locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology42, locale56, (java.lang.Integer) 10, (int) '4');
        java.lang.String str68 = chronology42.toString();
        org.joda.time.DurationField durationField69 = chronology42.halfdays();
        org.joda.time.DateTimeZone dateTimeZone70 = chronology42.getZone();
        java.lang.String str71 = dateTimeZone70.toString();
        java.util.TimeZone timeZone72 = dateTimeZone70.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        long long77 = dateTimeZone73.convertLocalToUTC(115261970L, false, (-464399883L));
        boolean boolean78 = dateTimeZone30.equals((java.lang.Object) dateTimeZone73);
        org.joda.time.Chronology chronology79 = chronology9.withZone(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.hourOfHalfday();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[UTC]" + "'", str68, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "UTC" + "'", str71, "UTC");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 115261970L + "'", long77 == 115261970L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
    }

    @Test
    public void test19029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19029");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u97d3\u56fd\u8a9e" + "'", str2, "\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u97d3\u56fd\u8a9e" + "'", str4, "\u97d3\u56fd\u8a9e");
    }

    @Test
    public void test19030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19030");
        java.util.Locale locale2 = new java.util.Locale("en-US", "zh-CN");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = locale2.getDisplayScript();
        java.util.Locale locale8 = new java.util.Locale("+00:00:00.035", "", "");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getDisplayLanguage();
        java.lang.String str11 = locale2.getDisplayVariant(locale8);
        java.lang.String str12 = locale2.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "en-us_ZH-CN");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale8.toString(), "+00:00:00.035");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.035" + "'", str10, "+00:00:00.035");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZH-CN" + "'", str12, "ZH-CN");
    }

    @Test
    public void test19031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19031");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("69/12/31", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=69/12/31");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19032");
        java.util.Locale locale1 = new java.util.Locale("italiano");
        java.lang.String str3 = locale1.getExtension('x');
        java.lang.String str4 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "italiano");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test19033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19033");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField13 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.monthOfYear();
        org.joda.time.DurationField durationField19 = chronology8.days();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test19034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19034");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2000);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear((java.lang.Integer) (-41));
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        int int17 = dateTimeParserBucket16.getOffset();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket16.getZone();
        java.lang.Integer int19 = dateTimeParserBucket16.getOffsetInteger();
        int int22 = dateTimeParser8.parseInto(dateTimeParserBucket16, "zh-cn", (-41));
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket16.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter24.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getName((long) 2000);
        boolean boolean29 = dateTimeZone26.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter24.withZone(dateTimeZone26);
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatter24.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatter24.getPrinter();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale36 = new java.util.Locale("hi!");
        java.lang.String str37 = locale36.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale36, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.monthOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter24.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.year();
        org.joda.time.DurationField durationField50 = chronology41.centuries();
        boolean boolean51 = dateTimeParserBucket16.restoreState((java.lang.Object) chronology41);
        org.joda.time.DateTimeField dateTimeField52 = chronology41.millisOfDay();
        org.joda.time.DurationField durationField53 = chronology41.hours();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-41) + "'", int22 == (-41));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeParser31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test19035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19035");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withZone(dateTimeZone5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter6.getPrinter();
        java.util.Locale locale9 = dateTimeFormatter6.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale16, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.dayOfYear();
        java.util.Locale.Category category29 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale30 = java.util.Locale.getDefault(category29);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str38 = locale31.getDisplayCountry(locale34);
        java.util.Locale.setDefault(category29, locale31);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.util.Locale.setDefault(category40, locale41);
        java.util.Locale locale44 = java.util.Locale.getDefault(category40);
        java.lang.String str45 = locale31.getDisplayName(locale44);
        java.lang.String str46 = locale31.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(2040L, chronology21, locale31, (java.lang.Integer) (-33));
        java.util.Locale locale49 = locale31.stripExtensions();
        java.lang.String str50 = locale49.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter6.withLocale(locale49);
        java.lang.StringBuffer stringBuffer52 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer52, 115260079L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.FORMAT + "'", category29.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "japonais" + "'", str45, "japonais");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str50, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
    }

    @Test
    public void test19036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19036");
        java.io.IOException iOException2 = new java.io.IOException("22/02/11");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("1/5/70", (java.lang.Throwable) iOException2);
        java.lang.String str6 = iOException5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.io.IOException: 1/5/70" + "'", str6, "java.io.IOException: 1/5/70");
    }

    @Test
    public void test19037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19037");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        boolean boolean2 = dateTimeFormatter0.isParser();
        org.joda.time.Chronology chronology3 = dateTimeFormatter0.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withDefaultYear((-187200001));
        org.joda.time.Chronology chronology6 = dateTimeFormatter0.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
    }

    @Test
    public void test19038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19038");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder4.setExtension('a', "en-US");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("it");
        java.util.Locale locale10 = builder7.build();
        java.util.Locale.setDefault(category3, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category3);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder13.setExtension('a', "en-US");
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str25 = locale18.getDisplayCountry(locale21);
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.lang.String str27 = locale18.getDisplayLanguage(locale26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str34 = locale30.toLanguageTag();
        java.lang.String str35 = locale18.getDisplayCountry(locale30);
        java.util.Locale.Builder builder36 = builder16.setLocale(locale30);
        java.util.Locale.setDefault(category3, locale30);
        java.util.Locale locale39 = new java.util.Locale("\u82f1\u8a9e");
        java.util.Locale.setDefault(category3, locale39);
        java.util.Locale.setDefault(category0, locale39);
        java.util.Locale locale45 = new java.util.Locale("Chinese (China)", "CAN", "italiano");
        java.util.Locale.setDefault(category0, locale45);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "giapponese" + "'", str27, "giapponese");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals(locale39.toString(), "\u82f1\u8a9e");
        org.junit.Assert.assertEquals(locale45.toString(), "chinese (china)_CAN_italiano");
    }

    @Test
    public void test19039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19039");
        java.io.IOException iOException1 = new java.io.IOException("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        java.io.IOException iOException4 = new java.io.IOException("en-US");
        java.io.IOException iOException6 = new java.io.IOException("hi!");
        java.io.IOException iOException7 = new java.io.IOException();
        java.io.IOException iOException8 = new java.io.IOException();
        iOException7.addSuppressed((java.lang.Throwable) iOException8);
        iOException6.addSuppressed((java.lang.Throwable) iOException8);
        java.lang.Throwable[] throwableArray11 = iOException8.getSuppressed();
        iOException4.addSuppressed((java.lang.Throwable) iOException8);
        java.io.IOException iOException14 = new java.io.IOException("en-US");
        java.io.IOException iOException16 = new java.io.IOException("hi!");
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException();
        iOException17.addSuppressed((java.lang.Throwable) iOException18);
        iOException16.addSuppressed((java.lang.Throwable) iOException18);
        java.lang.Throwable[] throwableArray21 = iOException18.getSuppressed();
        iOException14.addSuppressed((java.lang.Throwable) iOException18);
        java.io.IOException iOException24 = new java.io.IOException("hi!");
        java.io.IOException iOException25 = new java.io.IOException();
        java.io.IOException iOException26 = new java.io.IOException();
        iOException25.addSuppressed((java.lang.Throwable) iOException26);
        iOException24.addSuppressed((java.lang.Throwable) iOException26);
        iOException18.addSuppressed((java.lang.Throwable) iOException24);
        java.io.IOException iOException31 = new java.io.IOException("fr");
        iOException24.addSuppressed((java.lang.Throwable) iOException31);
        iOException8.addSuppressed((java.lang.Throwable) iOException24);
        java.io.IOException iOException34 = new java.io.IOException("und-a-it", (java.lang.Throwable) iOException24);
        iOException1.addSuppressed((java.lang.Throwable) iOException24);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test19040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19040");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2000);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withDefaultYear((-2));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear((int) '#');
        int int11 = dateTimeFormatter10.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = dateTimeFormatter12.parseLocalTime("\u6cd5\u6587\u6cd5\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"?? (??)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test19041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19041");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("fr-FR");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder2.setExtension('a', "en-US");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder12 = builder8.setExtension('a', "it");
        java.util.Locale locale13 = builder8.build();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str17 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('a', "en-US");
        java.util.Locale.Builder builder23 = builder21.setVariant("");
        java.util.Locale.Builder builder25 = builder21.setScript("");
        java.util.Locale locale26 = builder25.build();
        java.util.Locale.Builder builder27 = builder25.clear();
        java.util.Locale locale29 = new java.util.Locale("it");
        java.util.Locale.Builder builder30 = builder27.setLocale(locale29);
        java.util.Locale.Builder builder32 = builder27.addUnicodeLocaleAttribute("china");
        java.util.Locale.Builder builder33 = builder32.clearExtensions();
        java.util.Locale locale34 = builder32.build();
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str36 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet35);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test19042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19042");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh-TW", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("en-US", strMap4);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("English (United Kingdom)");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet8);
        java.lang.String str10 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale locale11 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.parse("FRA");
        java.util.Locale locale18 = new java.util.Locale("+00:00:00.035", "", "");
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = locale23.toLanguageTag();
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale23 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.Locale locale30 = new java.util.Locale("eng");
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet32, filteringMode33);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strSet19, filteringMode33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12, filteringMode33);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertEquals(locale18.toString(), "+00:00:00.035");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ja" + "'", str24, "ja");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertEquals(locale30.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
    }

    @Test
    public void test19043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19043");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getName((long) 2000);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter7.getParser();
        int int15 = dateTimeParser14.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser14);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale20, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfDay();
        org.joda.time.Chronology chronology29 = chronology25.withUTC();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        long long33 = dateTimeZone30.adjustOffset((long) 0, true);
        java.lang.String str35 = dateTimeZone30.getNameKey((long) (-1));
        boolean boolean36 = dateTimeZone30.isFixed();
        int int38 = dateTimeZone30.getOffset((long) (short) 0);
        long long41 = dateTimeZone30.convertLocalToUTC(0L, true);
        long long44 = dateTimeZone30.convertLocalToUTC((long) 'u', false);
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = dateTimeZone30.getOffset(readableInstant45);
        org.joda.time.Chronology chronology47 = chronology25.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter16.withChronology(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean51 = dateTimeZone49.isStandardOffset((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter16.withZone(dateTimeZone49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter52.withPivotYear((java.lang.Integer) (-3600000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter54.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter55.withPivotYear(3);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale62 = new java.util.Locale("hi!");
        java.lang.String str63 = locale62.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale62, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology67 = dateTimeParserBucket66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.weeks();
        long long72 = chronology67.add(0L, (long) 'a', (int) '4');
        org.joda.time.DurationField durationField73 = chronology67.minutes();
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.lang.String str76 = locale74.getDisplayScript(locale75);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(5044L, chronology67, locale74, (java.lang.Integer) 100, 0);
        org.joda.time.DurationField durationField80 = chronology67.seconds();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter57.withChronology(chronology67);
        org.joda.time.DateTimeZone dateTimeZone82 = dateTimeFormatter57.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 117L + "'", long44 == 117L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 5044L + "'", long72 == 5044L);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertNull(dateTimeZone82);
    }

    @Test
    public void test19044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19044");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology15.halfdays();
        org.joda.time.DurationField durationField19 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfMonth();
        org.joda.time.DurationField durationField22 = chronology15.days();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test19045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19045");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology8.add(readablePeriod12, (long) 'u', (int) (short) -1);
        org.joda.time.Chronology chronology16 = chronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        org.joda.time.DurationField durationField18 = chronology16.days();
        org.joda.time.DurationField durationField19 = chronology16.minutes();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 117L + "'", long15 == 117L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test19046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19046");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField14 = chronology9.millis();
        long long18 = chronology9.add((long) (byte) 100, (long) (byte) 1, 0);
        org.joda.time.DateTimeField dateTimeField19 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology9.weekOfWeekyear();
        java.lang.String str22 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology9.dayOfMonth();
        org.joda.time.Chronology chronology24 = chronology9.withUTC();
        org.joda.time.DurationField durationField25 = chronology9.hours();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test19047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19047");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DurationField durationField10 = chronology8.halfdays();
        org.joda.time.DurationField durationField11 = chronology8.years();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale16, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        java.util.Locale locale23 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale23, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology21.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = chronology27.getZone();
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale30);
        java.lang.String str32 = dateTimeZone28.getShortName((long) 'u', locale30);
        org.joda.time.Chronology chronology33 = chronology8.withZone(dateTimeZone28);
        long long36 = dateTimeZone28.convertLocalToUTC(3600000L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale41 = new java.util.Locale("hi!");
        java.lang.String str42 = locale41.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale41, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.year();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        long long53 = chronology46.add(readablePeriod50, (long) 'u', (int) (short) -1);
        org.joda.time.Chronology chronology54 = chronology46.withUTC();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology54.getZone();
        int int57 = dateTimeZone55.getOffsetFromLocal((-3152L));
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder59.setExtension('a', "en-US");
        java.util.Locale.Builder builder64 = builder62.setVariant("");
        java.util.Locale.Builder builder66 = builder62.setScript("");
        java.util.Locale.Builder builder68 = builder62.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder69 = builder62.clear();
        java.util.Locale.Builder builder71 = builder69.setLanguage("");
        java.util.Locale locale72 = builder69.build();
        java.util.Set<java.lang.Character> charSet73 = locale72.getExtensionKeys();
        java.lang.String str74 = dateTimeZone55.getShortName((-349799615L), locale72);
        boolean boolean75 = dateTimeZone28.equals((java.lang.Object) locale72);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals(locale23.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3600000L + "'", long36 == 3600000L);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 117L + "'", long53 == 117L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test19048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19048");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology9 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getName((long) 2000);
        org.joda.time.Chronology chronology14 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField16 = chronology8.weeks();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test19049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19049");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        java.lang.String str18 = locale16.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayName(locale16);
        java.lang.String str20 = locale11.getDisplayCountry(locale16);
        java.util.Set<java.lang.String> strSet21 = locale16.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 1, chronology9, locale16, (java.lang.Integer) (-53), (int) (short) -1);
        java.lang.Integer int25 = dateTimeParserBucket24.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket24.getZone();
        java.lang.Integer int27 = dateTimeParserBucket24.getOffsetInteger();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale31, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.days();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.secondOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.halfdayOfDay();
        org.joda.time.DurationField durationField43 = chronology36.centuries();
        org.joda.time.DurationField durationField44 = chronology36.weeks();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.Chronology chronology51 = chronology36.withZone(dateTimeZone50);
        dateTimeParserBucket24.setZone(dateTimeZone50);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-CN" + "'", str14, "zh-CN");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "China" + "'", str20, "China");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test19050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19050");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("+00:00:00.035");
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.lang.String str5 = locale3.toLanguageTag();
        java.lang.String str6 = locale3.getISO3Country();
        boolean boolean7 = locale3.hasExtensions();
        java.lang.String str8 = locale1.getDisplayScript(locale3);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder9.setExtension('a', "en-US");
        java.util.Locale.Builder builder14 = builder12.setVariant("");
        java.util.Locale.Builder builder16 = builder12.setScript("");
        java.util.Locale.Builder builder18 = builder12.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder19 = builder12.clear();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str27 = locale20.getDisplayCountry(locale23);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale20.getDisplayLanguage(locale28);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str36 = locale32.toLanguageTag();
        java.lang.String str37 = locale20.getDisplayCountry(locale32);
        java.util.Locale.Builder builder38 = builder12.setLocale(locale32);
        java.lang.String str39 = locale32.toLanguageTag();
        java.lang.String str40 = locale32.getVariant();
        java.util.Locale locale42 = new java.util.Locale("UTC");
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale47 = new java.util.Locale("hi!");
        java.lang.String str48 = locale47.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale47, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology52 = dateTimeParserBucket51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.days();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.year();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter56.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str60 = dateTimeZone58.getName((long) 2000);
        boolean boolean61 = dateTimeZone58.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter56.withZone(dateTimeZone58);
        org.joda.time.Chronology chronology63 = chronology52.withZone(dateTimeZone58);
        java.util.Locale locale64 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        java.util.Locale locale66 = locale64.stripExtensions();
        java.lang.String str67 = locale64.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (-101), chronology63, locale64, (java.lang.Integer) 100, (-1));
        java.lang.String str71 = locale42.getDisplayScript(locale64);
        java.lang.String str72 = locale64.getDisplayCountry();
        java.lang.String str73 = locale32.getDisplayCountry(locale64);
        java.lang.String str74 = locale1.getDisplayCountry(locale32);
        java.util.Set<java.lang.Character> charSet75 = locale32.getExtensionKeys();
        java.util.Locale.setDefault(locale32);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "giapponese" + "'", str29, "giapponese");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals(locale42.toString(), "utc");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u4e2d\u6587" + "'", str67, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u4e2d\u56fd" + "'", str72, "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(charSet75);
    }

    @Test
    public void test19051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19051");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) 10);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        long long10 = dateTimeParserBucket5.computeMillis(true, "");
        dateTimeParserBucket5.setOffset((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter13.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withChronology(chronology17);
        java.util.Locale locale19 = dateTimeFormatter18.getLocale();
        boolean boolean20 = dateTimeFormatter18.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeFormatter18.getZone();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter18.withLocale(locale22);
        boolean boolean24 = dateTimeFormatter18.isOffsetParsed();
        boolean boolean25 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTimeFormatter18);
        long long27 = dateTimeParserBucket5.computeMillis(false);
        java.util.Locale locale28 = dateTimeParserBucket5.getLocale();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-2L) + "'", long27 == (-2L));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
    }

    @Test
    public void test19052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19052");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str4 = dateTimeZone2.getShortName(1L);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.lang.String str9 = locale8.toLanguageTag();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = locale11.toLanguageTag();
        java.lang.String str14 = locale8.getDisplayName(locale11);
        java.lang.String str15 = locale6.getDisplayCountry(locale11);
        java.lang.String str16 = locale5.getDisplayScript(locale6);
        java.lang.String str17 = locale5.getDisplayScript();
        java.lang.String str18 = locale5.getLanguage();
        boolean boolean19 = dateTimeZone2.equals((java.lang.Object) locale5);
        java.lang.String str20 = locale5.getDisplayName();
        java.lang.String str21 = locale0.getDisplayCountry(locale5);
        java.lang.String str22 = locale0.getDisplayVariant();
        java.util.Set<java.lang.String> strSet23 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.120" + "'", str4, "+00:00:00.120");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "it" + "'", str9, "it");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italian" + "'", str14, "Italian");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "it" + "'", str18, "it");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "italiano" + "'", str20, "italiano");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
    }

    @Test
    public void test19053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19053");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.String str2 = locale0.getLanguage();
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayScript(locale4);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.parse("it");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList8, strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.Locale.FilteringMode filteringMode23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList21, filteringMode23);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale locale28 = new java.util.Locale("hi!");
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        java.lang.String str37 = locale36.getDisplayCountry();
        java.lang.String str38 = locale36.toLanguageTag();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.lang.String str40 = locale31.getDisplayCountry(locale36);
        java.util.Locale locale42 = new java.util.Locale("hi!");
        java.util.Locale locale43 = locale42.stripExtensions();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale48 = new java.util.Locale("hi!");
        java.lang.String str49 = locale48.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale48, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology53 = dateTimeParserBucket52.getChronology();
        java.util.Locale locale55 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology53, locale55, (java.lang.Integer) 10);
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        java.lang.String str61 = locale58.getExtension('a');
        java.util.Locale locale63 = new java.util.Locale("hi!");
        java.lang.String str64 = locale63.getDisplayCountry();
        java.lang.String str65 = locale63.toLanguageTag();
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        java.lang.String str67 = locale66.getLanguage();
        java.util.Locale locale68 = java.util.Locale.ITALIAN;
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.lang.String str71 = locale70.toLanguageTag();
        java.util.Locale locale73 = new java.util.Locale("hi!");
        java.lang.String str74 = locale73.getDisplayCountry();
        java.lang.String str75 = locale73.toLanguageTag();
        java.lang.String str76 = locale70.getDisplayName(locale73);
        java.util.Locale[] localeArray77 = new java.util.Locale[] { locale26, locale29, locale30, locale31, locale43, locale55, locale58, locale63, locale66, locale68, locale69, locale73 };
        java.util.ArrayList<java.util.Locale> localeList78 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList78, localeArray77);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList78);
        java.util.Locale locale81 = java.util.Locale.lookup(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList78);
        java.lang.String str83 = locale81.getExtension('u');
        java.util.Locale.setDefault(locale81);
        java.lang.String str85 = locale4.getDisplayName(locale81);
        java.util.Set<java.lang.Character> charSet86 = locale81.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ja" + "'", str2, "ja");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "und" + "'", str38, "und");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Italian" + "'", str39, "Italian");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertEquals(locale55.toString(), "eng");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "und" + "'", str65, "und");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it" + "'", str67, "it");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
        org.junit.Assert.assertEquals(locale73.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "und" + "'", str75, "und");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Italian" + "'", str76, "Italian");
        org.junit.Assert.assertNotNull(localeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(charSet86);
    }

    @Test
    public void test19054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19054");
        java.util.Locale locale3 = new java.util.Locale("23:59:59", "", "70-3-23");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str13 = locale6.getDisplayCountry(locale9);
        java.util.Locale.setDefault(category4, locale6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder19.setExtension('a', "en-US");
        java.util.Locale.Builder builder24 = builder22.setLanguageTag("it");
        java.util.Locale locale25 = builder22.build();
        java.util.Locale.setDefault(category18, locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault(category18);
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = dateTimeZone15.getName((long) 0, locale27);
        java.util.Locale.setDefault(category4, locale27);
        java.util.Locale locale31 = locale27.stripExtensions();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder32.setExtension('a', "en-US");
        java.util.Locale.Builder builder37 = builder35.setLanguageTag("it");
        java.util.Locale.Builder builder38 = builder35.clear();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = locale39.getDisplayScript(locale40);
        java.util.Locale.Builder builder42 = builder35.setLocale(locale39);
        java.util.Locale locale43 = builder35.build();
        java.lang.String str44 = locale43.getDisplayVariant();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale48 = new java.util.Locale("hi!");
        java.lang.String str49 = locale48.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale48, (java.lang.Integer) 10, (int) 'a');
        int int53 = dateTimeParserBucket52.getOffset();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket52.getZone();
        long long57 = dateTimeZone54.adjustOffset((-1L), true);
        long long60 = dateTimeZone54.adjustOffset((long) 'a', true);
        boolean boolean62 = dateTimeZone54.isStandardOffset((long) 100);
        boolean boolean63 = dateTimeZone54.isFixed();
        java.util.Locale locale65 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology67, locale68, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str72 = locale65.getDisplayCountry(locale68);
        java.lang.String str73 = dateTimeZone54.getShortName((long) (short) -1, locale65);
        java.lang.String str75 = dateTimeZone54.getNameKey(100L);
        java.lang.String str76 = dateTimeZone54.getID();
        java.util.Locale locale80 = new java.util.Locale("\u7fa9\u5927\u5229\u6587", "\u4e2d\u6587");
        java.lang.String str81 = dateTimeZone54.getName((long) ' ', locale80);
        java.lang.String str82 = locale43.getDisplayScript(locale80);
        java.lang.String str83 = locale43.getISO3Language();
        java.lang.String str84 = locale27.getDisplayVariant(locale43);
        java.lang.String str85 = locale3.getDisplayLanguage(locale27);
        org.junit.Assert.assertEquals(locale3.toString(), "23:59:59__70-3-23");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 97L + "'", long60 == 97L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "UTC" + "'", str76, "UTC");
// flaky:         org.junit.Assert.assertEquals(locale80.toString(), "\u7fa9\u5927\u5229\u6587\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "zho" + "'", str83, "zho");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "23:59:59" + "'", str85, "23:59:59");
    }

    @Test
    public void test19055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19055");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long4 = dateTimeZone1.adjustOffset((long) 0, true);
        java.lang.String str6 = dateTimeZone1.getNameKey((long) (-1));
        boolean boolean7 = dateTimeZone1.isFixed();
        int int9 = dateTimeZone1.getOffset((long) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale13, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        boolean boolean21 = dateTimeZone1.equals((java.lang.Object) chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.minuteOfHour();
        org.joda.time.DurationField durationField24 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.clockhourOfDay();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('a', "en-US");
        java.util.Locale.Builder builder31 = builder29.setVariant("");
        java.util.Locale.Builder builder33 = builder29.setScript("");
        java.util.Locale locale34 = builder33.build();
        java.util.Locale.Builder builder35 = builder33.clear();
        java.util.Locale locale37 = new java.util.Locale("it");
        java.util.Locale.Builder builder38 = builder35.setLocale(locale37);
        java.util.Locale.Builder builder40 = builder35.addUnicodeLocaleAttribute("china");
        java.util.Locale.Builder builder41 = builder40.clearExtensions();
        java.util.Locale.Builder builder42 = builder41.clear();
        java.util.Locale locale43 = builder42.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (-101), chronology18, locale43, (java.lang.Integer) (-351300001));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
    }

    @Test
    public void test19056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19056");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter5.getZone();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withLocale(locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter5.getZone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter5.withChronology(chronology12);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale19, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekyearOfCentury();
        org.joda.time.Chronology chronology28 = chronology24.withUTC();
        org.joda.time.DurationField durationField29 = chronology24.minutes();
        java.util.Locale locale33 = new java.util.Locale("UTC", "1/1/70", "it");
        java.lang.String str34 = locale33.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) ' ', chronology24, locale33, (java.lang.Integer) 10, (int) (short) 100);
        org.joda.time.DurationField durationField38 = chronology24.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter13.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField40 = chronology24.yearOfCentury();
        org.joda.time.DurationField durationField41 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField42 = chronology24.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertEquals(locale33.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test19057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19057");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        long long10 = dateTimeParserBucket7.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket7.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((-349199935L));
        java.lang.String str14 = dateTimeZone11.getID();
        long long16 = dateTimeZone11.convertUTCToLocal((-100L));
        java.lang.String str18 = dateTimeZone11.getName((-527259859320117L));
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-100L) + "'", long16 == (-100L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
    }

    @Test
    public void test19058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19058");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale.Builder builder10 = builder5.setLanguageTag("en-us");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setLanguage("\u53f0\u7063");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test19059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19059");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.lang.String str4 = dateTimeZone0.toString();
        java.lang.String str6 = dateTimeZone0.getName((long) 'u');
        int int8 = dateTimeZone0.getOffsetFromLocal(100L);
        long long11 = dateTimeZone0.adjustOffset((long) (-36), true);
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int16 = dateTimeZone14.getStandardOffset((-115259876L));
        java.util.TimeZone timeZone17 = dateTimeZone14.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-36L) + "'", long11 == (-36L));
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Tempo universale coordinato");
    }

    @Test
    public void test19060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19060");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean8 = dateTimeFormatter7.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(2000);
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter10.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser11);
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser13);
        java.lang.StringBuffer stringBuffer15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale22, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        java.util.Locale locale29 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale29, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology27.withZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        java.util.Locale locale36 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale36);
        java.lang.String str38 = dateTimeZone34.getShortName((long) 'u', locale36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter17.withLocale(locale36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter39.withPivotYear((java.lang.Integer) 40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter41.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter41.withPivotYear((java.lang.Integer) 2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter45.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str49 = dateTimeZone47.getName((long) 2000);
        boolean boolean50 = dateTimeZone47.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter45.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeParser dateTimeParser52 = dateTimeFormatter45.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter53 = dateTimeFormatter45.getPrinter();
        org.joda.time.Chronology chronology54 = dateTimeFormatter45.getChronolgy();
        org.joda.time.LocalDate localDate56 = dateTimeFormatter45.parseLocalDate("69-12-31");
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder57.setExtension('a', "en-US");
        java.util.Locale.Builder builder62 = builder60.setVariant("");
        java.util.Locale.Builder builder63 = builder62.clear();
        java.util.Locale.Builder builder64 = builder62.clearExtensions();
        java.util.Locale.Builder builder65 = builder64.clearExtensions();
        java.util.Locale.Builder builder67 = builder64.setVariant("Italian");
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder68.setExtension('a', "en-US");
        java.util.Locale.Builder builder73 = builder71.setLanguageTag("it");
        java.util.Locale.Builder builder74 = builder71.clear();
        java.util.Locale.Builder builder76 = builder71.setRegion("");
        java.util.Locale locale77 = builder76.build();
        java.util.Locale.Builder builder78 = builder67.setLocale(locale77);
        java.lang.String str79 = locale77.getISO3Language();
        java.lang.String str80 = locale77.getLanguage();
        java.lang.String str81 = locale77.getDisplayCountry();
        java.util.Locale locale82 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet83 = locale82.getExtensionKeys();
        java.lang.String str85 = locale82.getExtension('a');
        java.lang.String str86 = locale77.getDisplayCountry(locale82);
        java.util.Set<java.lang.Character> charSet87 = locale82.getExtensionKeys();
        boolean boolean88 = localDate56.equals((java.lang.Object) charSet87);
        int int89 = localDate56.size();
        org.joda.time.Chronology chronology90 = localDate56.getChronology();
        java.lang.String str91 = dateTimeFormatter44.print((org.joda.time.ReadablePartial) localDate56);
        java.util.Locale locale94 = new java.util.Locale("", "");
        java.lang.String str95 = locale94.toLanguageTag();
        java.lang.String str96 = locale94.getLanguage();
        java.lang.String str97 = locale94.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter6.printTo(stringBuffer15, (org.joda.time.ReadablePartial) localDate56, locale94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals(locale29.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeParser52);
        org.junit.Assert.assertNotNull(dateTimePrinter53);
        org.junit.Assert.assertNull(chronology54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(charSet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
        org.junit.Assert.assertNotNull(chronology90);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u4e09\ufffd\ufffd\ufffd\u65f6\ufffd\ufffd\u5206\ufffd\ufffd\u79d2 " + "'", str91, "\u5e74\u6708\u65e5\u661f\u671f\u4e09\ufffd\ufffd\ufffd\u65f6\ufffd\ufffd\u5206\ufffd\ufffd\u79d2 ");
        org.junit.Assert.assertEquals(locale94.toString(), "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "und" + "'", str95, "und");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test19061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19061");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("taiwan", (double) (-37L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-37.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19062");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        long long10 = dateTimeParserBucket7.computeMillis(true, "hi!");
        dateTimeParserBucket7.setOffset((java.lang.Integer) (-1));
        long long14 = dateTimeParserBucket7.computeMillis(true);
        long long16 = dateTimeParserBucket7.computeMillis(false);
        java.lang.Object obj17 = dateTimeParserBucket7.saveState();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket7.getChronology();
        dateTimeParserBucket7.setPivotYear((java.lang.Integer) 3600000);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test19063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19063");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("chinois", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
    }

    @Test
    public void test19064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19064");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology9 = chronology8.withUTC();
        org.joda.time.DurationField durationField10 = chronology8.seconds();
        org.joda.time.DurationField durationField11 = chronology8.months();
        org.joda.time.DurationField durationField12 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.minuteOfDay();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test19065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19065");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder6.setExtension('a', "it");
        java.util.Locale locale11 = builder6.build();
        java.util.Locale.Builder builder13 = builder6.setLanguageTag("en-us");
        java.util.Locale.Builder builder15 = builder6.removeUnicodeLocaleAttribute("tedesco");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setVariant("java.io.IOException: 11:00:00 PM");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: java.io.IOException: 11:00:00 PM [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test19066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19066");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter3.getParser();
        int int8 = dateTimeParser7.estimateParsedLength();
        int int9 = dateTimeParser7.estimateParsedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 40 + "'", int8 == 40);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
    }

    @Test
    public void test19067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19067");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        int int8 = dateTimeFormatter5.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter5.getZone();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale13, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter5.withChronology(chronology18);
        org.joda.time.DurationField durationField24 = chronology18.centuries();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.dayOfYear();
        org.joda.time.DurationField durationField27 = chronology18.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test19068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19068");
        java.util.Locale locale2 = new java.util.Locale("french", "\u30c9\u30a4\u30c4\u8a9e)");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u30c9\u30a4\u30c4\u8a9e)");
    }

    @Test
    public void test19069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19069");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weeks();
        long long15 = chronology10.add(0L, (long) 'a', (int) '4');
        org.joda.time.DurationField durationField16 = chronology10.minutes();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(5044L, chronology10, locale17, (java.lang.Integer) 100, 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology10.era();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Locale locale27 = new java.util.Locale("hi!");
        java.lang.String str28 = locale27.getDisplayCountry();
        java.lang.String str29 = locale27.toLanguageTag();
        java.lang.String str30 = locale24.getDisplayName(locale27);
        java.lang.String str31 = locale27.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((-117119900L), chronology10, locale27, (java.lang.Integer) (-41));
        int int34 = dateTimeParserBucket33.getOffset();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale38 = new java.util.Locale("hi!");
        java.lang.String str39 = locale38.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale38, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.days();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.year();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = chronology43.add(readablePeriod46, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField50 = chronology43.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField51 = chronology43.minuteOfHour();
        dateTimeParserBucket33.saveField(dateTimeField51, (int) '#');
        java.lang.Integer int54 = dateTimeParserBucket33.getOffsetInteger();
        long long57 = dateTimeParserBucket33.computeMillis(false, "\u5e74\u6708\u65e5\u661f\u671f\u4e09\u4e0b\u5348\u65f6\u5206\u79d2 +00:00");
        long long60 = dateTimeParserBucket33.computeMillis(false, "ko_KR");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 5044L + "'", long15 == 5044L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-CN" + "'", str25, "zh-CN");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "und" + "'", str29, "und");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese (China)" + "'", str30, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-116699900L) + "'", long57 == (-116699900L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-116699900L) + "'", long60 == (-116699900L));
    }

    @Test
    public void test19070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19070");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        int int18 = dateTimeZone16.getOffsetFromLocal((-3659948L));
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale23, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology28.millisOfDay();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology28, locale36, (java.lang.Integer) 2000);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale43 = new java.util.Locale("hi!");
        java.lang.String str44 = locale43.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale43, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        java.util.Locale locale50 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology48, locale50, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology48.withZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = chronology54.getZone();
        long long59 = dateTimeZone55.convertLocalToUTC((long) (short) 10, true, (long) 2000);
        int int61 = dateTimeZone55.getOffset((long) (short) 100);
        dateTimeParserBucket38.setZone(dateTimeZone55);
        java.util.Locale locale63 = dateTimeParserBucket38.getLocale();
        boolean boolean64 = dateTimeZone16.equals((java.lang.Object) locale63);
        java.lang.String str65 = locale63.getLanguage();
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = locale63.getDisplayName(locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals(locale50.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "zh" + "'", str65, "zh");
    }

    @Test
    public void test19071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19071");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getName((long) 2000);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter7.getParser();
        int int15 = dateTimeParser14.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser14);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter16.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withPivotYear((java.lang.Integer) 40);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale23, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.year();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.era();
        org.joda.time.DurationField durationField33 = chronology28.halfdays();
        org.joda.time.DurationField durationField34 = chronology28.minutes();
        org.joda.time.DurationField durationField35 = chronology28.seconds();
        java.lang.String str36 = chronology28.toString();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology28.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter16.withChronology(chronology28);
        boolean boolean40 = dateTimeFormatter16.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test19072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19072");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) (-1));
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((int) (short) 1);
        org.joda.time.Chronology chronology12 = dateTimeFormatter11.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatter11.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser13);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeParser13);
    }

    @Test
    public void test19073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19073");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        java.io.IOException iOException6 = new java.io.IOException();
        java.io.IOException iOException7 = new java.io.IOException();
        iOException6.addSuppressed((java.lang.Throwable) iOException7);
        java.io.IOException iOException10 = new java.io.IOException("hi!");
        java.io.IOException iOException11 = new java.io.IOException();
        java.io.IOException iOException12 = new java.io.IOException();
        iOException11.addSuppressed((java.lang.Throwable) iOException12);
        iOException10.addSuppressed((java.lang.Throwable) iOException12);
        iOException7.addSuppressed((java.lang.Throwable) iOException10);
        java.io.IOException iOException16 = new java.io.IOException("CAN", (java.lang.Throwable) iOException7);
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException();
        iOException17.addSuppressed((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException22 = new java.io.IOException("fr");
        iOException20.addSuppressed((java.lang.Throwable) iOException22);
        iOException16.addSuppressed((java.lang.Throwable) iOException22);
        java.io.IOException iOException25 = new java.io.IOException("German", (java.lang.Throwable) iOException22);
        java.io.IOException iOException26 = new java.io.IOException((java.lang.Throwable) iOException22);
        iOException1.addSuppressed((java.lang.Throwable) iOException22);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test19074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19074");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.centuryOfEra();
        java.lang.String str11 = chronology9.toString();
        org.joda.time.DurationField durationField12 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        long long17 = dateTimeZone14.adjustOffset((long) 0, true);
        java.lang.String str19 = dateTimeZone14.getNameKey((long) (-1));
        boolean boolean20 = dateTimeZone14.isFixed();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str29 = locale22.getDisplayCountry(locale25);
        java.lang.String str30 = dateTimeZone14.getName((long) (short) 100, locale22);
        java.lang.String str31 = locale22.getDisplayName();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder32.setExtension('a', "en-US");
        java.util.Locale.Builder builder37 = builder35.setLanguageTag("it");
        java.util.Locale.Builder builder38 = builder35.clear();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = locale39.getDisplayScript(locale40);
        java.util.Locale.Builder builder42 = builder35.setLocale(locale39);
        java.util.Locale.Builder builder44 = builder35.addUnicodeLocaleAttribute("Japanese");
        java.util.Locale.Category category45 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.lang.String str49 = locale46.getExtension('a');
        java.util.Locale.setDefault(category45, locale46);
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder54 = builder51.setExtension('a', "en-US");
        java.util.Locale.Builder builder56 = builder54.setLanguageTag("it");
        java.util.Locale locale57 = builder56.build();
        java.util.Locale.setDefault(category45, locale57);
        boolean boolean59 = locale57.hasExtensions();
        java.util.Locale.Builder builder60 = builder35.setLocale(locale57);
        java.util.Locale locale61 = builder60.build();
        java.lang.String str62 = locale22.getDisplayVariant(locale61);
        java.lang.String str63 = locale61.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 13, chronology9, locale61, (java.lang.Integer) (-98), (int) 'u');
        java.lang.Integer int67 = dateTimeParserBucket66.getOffsetInteger();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u65e5\u6587" + "'", str31, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.FORMAT + "'", category45.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(int67);
    }

    @Test
    public void test19075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19075");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField13 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = chronology8.centuries();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test19076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19076");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("und-Italian");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: und-Italian");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19077");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter9.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withDefaultYear((-115200001));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withZoneUTC();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = locale16.stripExtensions();
        java.lang.String str20 = locale19.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withLocale(locale19);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u6cd5\u6587" + "'", str20, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test19078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19078");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        int int8 = dateTimeParserBucket7.getOffset();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket7.getZone();
        long long12 = dateTimeZone9.adjustOffset((-1L), true);
        long long15 = dateTimeZone9.adjustOffset((long) 'a', true);
        boolean boolean17 = dateTimeZone9.isStandardOffset((long) 100);
        long long20 = dateTimeZone9.convertLocalToUTC((long) 0, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        boolean boolean23 = dateTimeZone9.isStandardOffset((long) (short) 0);
        long long27 = dateTimeZone9.convertLocalToUTC((-52L), true, (-17999935L));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, 0);
        java.lang.String str32 = dateTimeZone30.getShortName((long) (-1));
        long long35 = dateTimeZone30.convertLocalToUTC(385L, false);
        int int37 = dateTimeZone30.getOffsetFromLocal((-144060000L));
        boolean boolean38 = dateTimeZone9.equals((java.lang.Object) dateTimeZone30);
        boolean boolean40 = dateTimeZone9.isStandardOffset((-144060092L));
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-52L) + "'", long27 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 385L + "'", long35 == 385L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test19079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19079");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology9.add(readablePeriod16, (long) 'a', (int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = chronology9.secondOfDay();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str28 = locale21.getDisplayCountry(locale24);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale21.getDisplayLanguage(locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str33 = locale29.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(2040L, chronology9, locale29, (java.lang.Integer) 40);
        org.joda.time.DurationField durationField36 = chronology9.weekyears();
        org.joda.time.Chronology chronology37 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology9.millisOfDay();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 97L + "'", long19 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "giapponese" + "'", str30, "giapponese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test19080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19080");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        boolean boolean2 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        java.util.Locale locale10 = new java.util.Locale("\u4e2d\u6587\u4e2d\u570b)", "english (united states) (UND,en-US)", "\u5fb7\u6587\u5fb7\u56fd)");
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale15, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.secondOfMinute();
        java.util.Locale locale28 = new java.util.Locale("United States", "hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(10L, chronology20, locale28, (java.lang.Integer) 0);
        java.lang.String str32 = locale28.getExtension('a');
        java.lang.String str33 = locale28.getDisplayLanguage();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.lang.String str35 = locale28.getDisplayLanguage(locale34);
        java.lang.String str36 = locale10.getDisplayName(locale28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter6.withLocale(locale10);
        java.util.Locale.setDefault(locale10);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "\u4e2d\u6587\u4e2d\u570b\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale28.toString(), "united states_HI!");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "united states" + "'", str33, "united states");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "united states" + "'", str35, "united states");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u4e2d\u570b\u5fb7\u6587\u5fb7\u56fd))" + "'", str36, "\u4e2d\u6587\u4e2d\u570b\u5fb7\u6587\u5fb7\u56fd))");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
    }

    @Test
    public void test19081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19081");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder6.setExtension('a', "it");
        java.util.Locale.Builder builder12 = builder10.setVariant("English");
        java.util.Locale.Builder builder14 = builder10.setScript("");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withChronology(chronology19);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withChronology(chronology22);
        boolean boolean24 = dateTimeFormatter20.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter20.getZone();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale26.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter20.withLocale(locale26);
        boolean boolean30 = locale26.hasExtensions();
        java.util.Locale.Builder builder31 = builder10.setLocale(locale26);
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder34 = builder32.addUnicodeLocaleAttribute("English (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test19082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19082");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter0.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.weekyear();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale31, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekyear();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.monthOfYear();
        org.joda.time.DurationField durationField41 = chronology36.seconds();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology36.getZone();
        org.joda.time.Chronology chronology43 = chronology17.withZone(dateTimeZone42);
        org.joda.time.DurationField durationField44 = chronology17.days();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test19083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19083");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DurationField durationField10 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.yearOfEra();
        org.joda.time.DurationField durationField12 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfDay();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test19084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19084");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology8.centuries();
        org.joda.time.DurationField durationField18 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology8.add(readablePeriod21, (-34980199880L), (int) (byte) 0);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-34980199880L) + "'", long24 == (-34980199880L));
    }

    @Test
    public void test19085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19085");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeParser dateTimeParser1 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 100);
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withChronology(chronology12);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        boolean boolean15 = dateTimeFormatter13.isOffsetParsed();
        int int16 = dateTimeFormatter13.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter13.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser17);
        int int19 = dateTimeParser17.estimateParsedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeParser1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2000 + "'", int16 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 40 + "'", int19 == 40);
    }

    @Test
    public void test19086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19086");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter3.getZone();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter3.getZone();
        org.joda.time.Chronology chronology10 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology11 = dateTimeFormatter3.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
    }

    @Test
    public void test19087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19087");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((int) (short) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter6.getPrinter();
        int int10 = dateTimePrinter9.estimatePrintedLength();
        int int11 = dateTimePrinter9.estimatePrintedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimePrinter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
    }

    @Test
    public void test19088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19088");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1969);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str3 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:01.969" + "'", str3, "+00:00:01.969");
    }

    @Test
    public void test19089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19089");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("UTC");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.Locale.FilteringMode filteringMode12 = null;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList10, filteringMode12);
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = locale22.toLanguageTag();
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale22 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList27);
        java.util.Locale locale29 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("CAN");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.parse("it");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList33, strMap34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList35, strMap36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.lang.String str42 = locale41.toLanguageTag();
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale41 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList44);
        java.util.Locale locale47 = java.util.Locale.lookup(languageRangeList37, (java.util.Collection<java.util.Locale>) localeList44);
        java.util.Locale locale48 = java.util.Locale.lookup(languageRangeList31, (java.util.Collection<java.util.Locale>) localeList44);
        java.util.Locale locale49 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList44);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "\u4e2d\u6587\u4e2d\u570b\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und" + "'", str23, "und");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "\u4e2d\u6587\u4e2d\u570b\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNull(locale47);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertNull(locale49);
    }

    @Test
    public void test19090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19090");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField13 = chronology8.hours();
        org.joda.time.DurationField durationField14 = chronology8.months();
        org.joda.time.DurationField durationField15 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.hourOfDay();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19091");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???(???????)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19092");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(locale1);
        java.util.Locale.setDefault(locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "en-US");
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("it");
        java.util.Locale locale11 = builder8.build();
        java.util.Locale.setDefault(category4, locale11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category4);
        java.util.Locale locale14 = java.util.Locale.getDefault(category4);
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = locale15.stripExtensions();
        java.lang.String str19 = locale15.getCountry();
        boolean boolean20 = locale15.hasExtensions();
        java.util.Locale.setDefault(category4, locale15);
        java.util.Locale locale22 = java.util.Locale.getDefault(category4);
        java.lang.String str23 = locale1.getDisplayCountry(locale22);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale28 = new java.util.Locale("hi!");
        java.lang.String str29 = locale28.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale28, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.era();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.clockhourOfHalfday();
        org.joda.time.Chronology chronology39 = chronology33.withUTC();
        org.joda.time.DurationField durationField40 = chronology33.centuries();
        org.joda.time.DateTimeField dateTimeField41 = chronology33.yearOfEra();
        java.util.Locale locale42 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        java.lang.String str46 = locale42.getDisplayScript(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((-59105980800100L), chronology33, locale42);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale51 = new java.util.Locale("it");
        java.lang.String str53 = locale51.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology49, locale51);
        dateTimeParserBucket54.setOffset((java.lang.Integer) 2000);
        java.lang.Object obj57 = null;
        boolean boolean58 = dateTimeParserBucket54.restoreState(obj57);
        java.lang.Object obj59 = dateTimeParserBucket54.saveState();
        long long62 = dateTimeParserBucket54.computeMillis(false, "java.io.IOException: Chinese");
        long long65 = dateTimeParserBucket54.computeMillis(true, "de-de");
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeParserBucket54.getZone();
        org.joda.time.Chronology chronology67 = chronology33.withZone(dateTimeZone66);
        boolean boolean68 = locale22.equals((java.lang.Object) dateTimeZone66);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DE" + "'", str19, "DE");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-2000L) + "'", long62 == (-2000L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-2000L) + "'", long65 == (-2000L));
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test19093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19093");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale14 = new java.util.Locale("hi!");
        java.lang.String str15 = locale14.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale14, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        java.util.Locale locale21 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale21, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = chronology19.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter9.withChronology(chronology19);
        org.joda.time.Chronology chronology29 = dateTimeFormatter9.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals(locale21.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
    }

    @Test
    public void test19094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19094");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter5.getZone();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withLocale(locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter5.getZone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter5.withChronology(chronology12);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withChronology(chronology19);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withChronology(chronology26);
        java.util.Locale locale28 = dateTimeFormatter27.getLocale();
        boolean boolean29 = dateTimeFormatter27.isOffsetParsed();
        boolean boolean30 = dateTimeFormatter27.isOffsetParsed();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter27.withChronology(chronology31);
        org.joda.time.format.DateTimeParser dateTimeParser33 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale38 = new java.util.Locale("it");
        java.lang.String str40 = locale38.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale38);
        dateTimeParserBucket41.setOffset((java.lang.Integer) 2000);
        java.lang.Object obj44 = null;
        boolean boolean45 = dateTimeParserBucket41.restoreState(obj44);
        int int48 = dateTimeParser33.parseInto(dateTimeParserBucket41, "\u4e2d\u6587\u4e2d\u570b)", (-41));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter50.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter50.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter53.withChronology(chronology54);
        org.joda.time.format.DateTimePrinter dateTimePrinter56 = dateTimeFormatter55.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter57.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getName((long) 2000);
        boolean boolean62 = dateTimeZone59.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter57.withZone(dateTimeZone59);
        org.joda.time.format.DateTimeParser dateTimeParser64 = dateTimeFormatter57.getParser();
        int int65 = dateTimeParser64.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter56, dateTimeParser64);
        int int67 = dateTimeParser64.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser64);
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale73 = new java.util.Locale("hi!");
        java.lang.String str74 = locale73.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(0L, chronology71, locale73, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology78 = dateTimeParserBucket77.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.days();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.year();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.weekyearOfCentury();
        org.joda.time.Chronology chronology82 = chronology78.withUTC();
        org.joda.time.DateTimeField dateTimeField83 = chronology78.yearOfEra();
        java.util.Locale locale84 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((-99L), chronology78, locale84, (java.lang.Integer) 1);
        int int89 = dateTimeParser64.parseInto(dateTimeParserBucket86, "\u7fa9\u5927\u5229\u6587", (int) (short) 0);
        int int90 = dateTimeParser64.estimateParsedLength();
        int int91 = dateTimeParser64.estimateParsedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeParser33);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-41) + "'", int48 == (-41));
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimePrinter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeParser64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 40 + "'", int65 == 40);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 40 + "'", int67 == 40);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 40 + "'", int90 == 40);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 40 + "'", int91 == 40);
    }

    @Test
    public void test19095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19095");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfYear();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = locale15.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(120L, chronology9, locale15, (java.lang.Integer) (-121));
        java.util.Locale locale20 = dateTimeParserBucket19.getLocale();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale24 = new java.util.Locale("hi!");
        java.lang.String str25 = locale24.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale24, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.days();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.year();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.era();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.clockhourOfHalfday();
        org.joda.time.Chronology chronology35 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.secondOfDay();
        dateTimeParserBucket19.saveField(dateTimeField36, (int) (short) 100);
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder39.setExtension('a', "en-US");
        java.util.Locale.Builder builder44 = builder42.setLanguageTag("it");
        boolean boolean45 = dateTimeParserBucket19.restoreState((java.lang.Object) builder42);
        java.lang.Object obj46 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale50 = new java.util.Locale("hi!");
        java.lang.String str51 = locale50.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology48, locale50, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.days();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.year();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.millisOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.era();
        org.joda.time.DateTimeField dateTimeField60 = chronology55.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = chronology55.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = chronology55.getZone();
        org.joda.time.DurationField durationField63 = chronology55.weeks();
        org.joda.time.DateTimeField dateTimeField64 = chronology55.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField65 = chronology55.monthOfYear();
        boolean boolean66 = dateTimeParserBucket19.restoreState((java.lang.Object) dateTimeField65);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test19096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19096");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('a', "en-US");
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("it");
        java.util.Locale locale14 = builder11.build();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter5.withLocale(locale14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale19, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter15.withChronology(chronology24);
        org.joda.time.DurationField durationField32 = chronology24.years();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        long long36 = dateTimeZone33.adjustOffset((long) 0, true);
        java.lang.String str38 = dateTimeZone33.getNameKey((long) (-1));
        boolean boolean39 = dateTimeZone33.isFixed();
        int int41 = dateTimeZone33.getOffset((long) (short) 0);
        long long44 = dateTimeZone33.convertLocalToUTC(0L, true);
        long long47 = dateTimeZone33.adjustOffset((long) (short) 1, true);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        long long51 = dateTimeZone48.adjustOffset((long) 0, true);
        java.util.TimeZone timeZone52 = dateTimeZone48.toTimeZone();
        int int54 = dateTimeZone48.getOffsetFromLocal(100L);
        long long56 = dateTimeZone48.nextTransition((long) ' ');
        long long58 = dateTimeZone33.getMillisKeepLocal(dateTimeZone48, (long) 40);
        long long60 = dateTimeZone33.previousTransition((long) 100);
        java.util.TimeZone timeZone61 = dateTimeZone33.toTimeZone();
        org.joda.time.Chronology chronology62 = chronology24.withZone(dateTimeZone33);
        boolean boolean64 = dateTimeZone33.isStandardOffset((-13489065593L));
        long long66 = dateTimeZone33.nextTransition(72000117L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 32L + "'", long56 == 32L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 40L + "'", long58 == 40L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 72000117L + "'", long66 == 72000117L);
    }

    @Test
    public void test19097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19097");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter0.withChronology(chronology17);
        java.lang.String str23 = chronology17.toString();
        org.joda.time.DurationField durationField24 = chronology17.eras();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test19098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19098");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Japanese");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale locale10 = builder8.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setVariant("sabato 27 dicembre 1969");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: sabato 27 dicembre 1969 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "japanese");
    }

    @Test
    public void test19099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19099");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DurationField durationField10 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.year();
        org.joda.time.DurationField durationField13 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfMinute();
        org.joda.time.DurationField durationField16 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.weekyearOfCentury();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19100");
        java.io.IOException iOException2 = new java.io.IOException("en-US");
        java.io.IOException iOException4 = new java.io.IOException("hi!");
        java.io.IOException iOException5 = new java.io.IOException();
        java.io.IOException iOException6 = new java.io.IOException();
        iOException5.addSuppressed((java.lang.Throwable) iOException6);
        iOException4.addSuppressed((java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray9 = iOException6.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException12 = new java.io.IOException("en-US");
        java.io.IOException iOException14 = new java.io.IOException("hi!");
        java.io.IOException iOException15 = new java.io.IOException();
        java.io.IOException iOException16 = new java.io.IOException();
        iOException15.addSuppressed((java.lang.Throwable) iOException16);
        iOException14.addSuppressed((java.lang.Throwable) iOException16);
        java.lang.Throwable[] throwableArray19 = iOException16.getSuppressed();
        iOException12.addSuppressed((java.lang.Throwable) iOException16);
        java.io.IOException iOException22 = new java.io.IOException("hi!");
        java.io.IOException iOException23 = new java.io.IOException();
        java.io.IOException iOException24 = new java.io.IOException();
        iOException23.addSuppressed((java.lang.Throwable) iOException24);
        iOException22.addSuppressed((java.lang.Throwable) iOException24);
        iOException16.addSuppressed((java.lang.Throwable) iOException22);
        java.io.IOException iOException29 = new java.io.IOException("fr");
        iOException22.addSuppressed((java.lang.Throwable) iOException29);
        iOException6.addSuppressed((java.lang.Throwable) iOException22);
        java.io.IOException iOException32 = new java.io.IOException("java.io.IOException: java.io.IOException: 01/01/70", (java.lang.Throwable) iOException22);
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test19101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19101");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.convertLocalToUTC((-1L), true, (long) (byte) 100);
        java.lang.String str6 = dateTimeZone0.getShortName((long) (byte) 1);
        long long10 = dateTimeZone0.convertLocalToUTC(971L, false, (-117119900L));
        long long14 = dateTimeZone0.convertLocalToUTC((-62111231999989L), false, (long) 'a');
        boolean boolean16 = dateTimeZone0.isStandardOffset(32L);
        long long19 = dateTimeZone0.adjustOffset((long) (-118), false);
        int int21 = dateTimeZone0.getStandardOffset(120L);
        long long24 = dateTimeZone0.convertLocalToUTC(108060385L, true);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        java.util.Locale locale28 = java.util.Locale.getDefault(category26);
        java.util.Locale locale29 = java.util.Locale.getDefault(category26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category26);
        java.lang.String str31 = dateTimeZone0.getName(118800000L, locale30);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 971L + "'", long10 == 971L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62111231999989L) + "'", long14 == (-62111231999989L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-118L) + "'", long19 == (-118L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 108060385L + "'", long24 == 108060385L);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
    }

    @Test
    public void test19102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19102");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        java.util.Locale.Builder builder9 = builder3.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder10 = builder3.clear();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setVariant("15:28:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 15:28:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test19103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19103");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2000);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withChronology(chronology4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear((int) 'x');
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category8);
        java.lang.String str11 = locale10.getScript();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale10.getDisplayScript(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter5.withLocale(locale10);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter14.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimePrinter15);
    }

    @Test
    public void test19104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19104");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("china");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.lang.String str10 = locale9.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale9, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        long long19 = chronology14.add((long) 1, 100L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.minuteOfDay();
        org.joda.time.Chronology chronology22 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology14.dayOfWeek();
        boolean boolean25 = languageRange1.equals((java.lang.Object) chronology14);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "china" + "'", str5, "china");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-99L) + "'", long19 == (-99L));
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test19105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19105");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale locale10 = builder9.build();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale locale12 = builder9.build();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder13.setExtension('a', "en-US");
        java.util.Locale.Builder builder18 = builder16.setVariant("");
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale.Builder builder20 = builder18.clearExtensions();
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder23 = builder20.setVariant("Italian");
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder24.setExtension('a', "en-US");
        java.util.Locale.Builder builder29 = builder27.setLanguageTag("it");
        java.util.Locale.Builder builder30 = builder27.clear();
        java.util.Locale.Builder builder32 = builder27.setRegion("");
        java.util.Locale locale33 = builder32.build();
        java.util.Locale.Builder builder34 = builder23.setLocale(locale33);
        java.util.Set<java.lang.Character> charSet35 = locale33.getExtensionKeys();
        java.lang.String str36 = locale12.getDisplayVariant(locale33);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder37.setExtension('a', "en-US");
        java.util.Locale.Builder builder42 = builder40.setLanguageTag("it");
        java.util.Locale.Builder builder43 = builder40.clearExtensions();
        java.util.Locale.Builder builder45 = builder40.setLanguageTag("Cina");
        java.util.Locale.Builder builder46 = builder40.clearExtensions();
        java.util.Locale locale47 = builder40.build();
        java.lang.String str48 = locale33.getDisplayVariant(locale47);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "cina");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test19106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19106");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getName((long) 2000);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter7.getParser();
        int int15 = dateTimeParser14.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser14);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale20, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfDay();
        org.joda.time.Chronology chronology29 = chronology25.withUTC();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        long long33 = dateTimeZone30.adjustOffset((long) 0, true);
        java.lang.String str35 = dateTimeZone30.getNameKey((long) (-1));
        boolean boolean36 = dateTimeZone30.isFixed();
        int int38 = dateTimeZone30.getOffset((long) (short) 0);
        long long41 = dateTimeZone30.convertLocalToUTC(0L, true);
        long long44 = dateTimeZone30.convertLocalToUTC((long) 'u', false);
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = dateTimeZone30.getOffset(readableInstant45);
        org.joda.time.Chronology chronology47 = chronology25.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter16.withChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.millisOfDay();
        org.joda.time.DurationField durationField50 = chronology47.months();
        org.joda.time.DurationField durationField51 = chronology47.millis();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 117L + "'", long44 == 117L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test19107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19107");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.era();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology9.add(readablePeriod19, (long) 2000, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField23 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology9.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology9.getDateTimeMillis((int) ' ', (int) (short) 0, (-11), 360000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360000000 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2000L + "'", long22 == 2000L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test19108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19108");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale18);
        java.lang.String str20 = dateTimeZone16.getShortName((long) 'u', locale18);
        java.util.Locale locale23 = new java.util.Locale("\u65e5\u672c\u8a9e", "English");
        java.lang.String str24 = locale18.getDisplayVariant(locale23);
        boolean boolean25 = locale23.hasExtensions();
        java.lang.String str26 = locale23.getDisplayCountry();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals(locale23.toString(), "\u65e5\u672c\u8a9e_ENGLISH");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ENGLISH" + "'", str26, "ENGLISH");
    }

    @Test
    public void test19109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19109");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isFixed();
        int int7 = dateTimeZone0.getOffset(2000L);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("jpn");
        java.lang.String str11 = dateTimeZone0.getName(45L, locale10);
        java.lang.String str13 = dateTimeZone0.getName((long) 351300000);
        long long15 = dateTimeZone0.previousTransition((-338400033L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "jpn");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-338400033L) + "'", long15 == (-338400033L));
    }

    @Test
    public void test19110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19110");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology8.add(readablePeriod11, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology8.minutes();
        org.joda.time.DurationField durationField21 = chronology8.weekyears();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test19111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19111");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        java.lang.Integer int9 = dateTimeParserBucket7.getOffsetInteger();
        dateTimeParserBucket7.setOffset((java.lang.Integer) 0);
        dateTimeParserBucket7.setOffset((java.lang.Integer) 3600000);
        java.util.Locale locale14 = dateTimeParserBucket7.getLocale();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
    }

    @Test
    public void test19112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19112");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weeks();
        long long13 = chronology8.add(0L, (long) 'a', (int) '4');
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.millisOfSecond();
        org.joda.time.DurationField durationField18 = chronology8.minutes();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5044L + "'", long13 == 5044L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test19113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19113");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale.Builder builder10 = builder5.setLanguageTag("en-us");
        java.util.Locale.Builder builder11 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder5.removeUnicodeLocaleAttribute("05/01/70");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 05/01/70 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test19114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19114");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        java.util.Locale locale9 = new java.util.Locale("it");
        java.lang.String str11 = locale9.getExtension('a');
        java.lang.String str12 = locale3.getDisplayName(locale9);
        java.lang.String str13 = locale3.getLanguage();
        java.lang.String str15 = locale3.getExtension('u');
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test19115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19115");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        long long14 = chronology9.add(0L, (long) 'a', (int) '4');
        org.joda.time.DurationField durationField15 = chronology9.minutes();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale16.getDisplayScript(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(5044L, chronology9, locale16, (java.lang.Integer) 100, 0);
        org.joda.time.DurationField durationField22 = chronology9.seconds();
        org.joda.time.DurationField durationField23 = chronology9.millis();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5044L + "'", long14 == 5044L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test19116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19116");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, 10);
        java.lang.Integer int11 = dateTimeParserBucket7.getOffsetInteger();
        dateTimeParserBucket7.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket7.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket7.setPivotYear((java.lang.Integer) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        dateTimeParserBucket7.setZone(dateTimeZone19);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket7.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology21.getDateTimeMillis((int) (short) 1, 117, (int) (short) -1, 117, 3600000, (-7200000), (-3));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test19117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19117");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField14 = chronology9.days();
        org.joda.time.Chronology chronology15 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.hourOfDay();
        org.joda.time.Chronology chronology18 = chronology9.withUTC();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale22, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = chronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology27.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC(0L, true);
        java.lang.String str35 = dateTimeZone31.getID();
        int int37 = dateTimeZone31.getOffset((long) 35);
        java.lang.String str39 = dateTimeZone31.getNameKey((-187194956L));
        org.joda.time.Chronology chronology40 = chronology9.withZone(dateTimeZone31);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test19118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19118");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weeks();
        long long13 = chronology8.add(0L, (long) 'a', (int) '4');
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        long long18 = chronology8.add((-41L), (long) (-53), (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField19 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.secondOfMinute();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5044L + "'", long13 == 5044L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-5341L) + "'", long18 == (-5341L));
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test19119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19119");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("it");
        java.lang.String str5 = locale3.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale3);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = chronology7.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.year();
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test19120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19120");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField15 = chronology8.years();
        long long19 = chronology8.add((long) 1, (long) (short) 10, (int) '4');
        org.joda.time.DurationField durationField20 = chronology8.centuries();
        org.joda.time.DurationField durationField21 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField22 = chronology8.dayOfYear();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 521L + "'", long19 == 521L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19121");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.setLanguage("Japanese");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test19122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19122");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        int int8 = dateTimeParserBucket7.getOffset();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket7.getZone();
        long long10 = dateTimeParserBucket7.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long15 = dateTimeZone11.convertLocalToUTC((-1L), true, (long) (byte) 100);
        dateTimeParserBucket7.setZone(dateTimeZone11);
        dateTimeParserBucket7.setPivotYear((java.lang.Integer) 0);
        dateTimeParserBucket7.setOffset((java.lang.Integer) 36000000);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket7.getZone();
        int int22 = dateTimeParserBucket7.getOffset();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
    }

    @Test
    public void test19123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19123");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) (-1));
        boolean boolean6 = dateTimeZone0.isFixed();
        int int8 = dateTimeZone0.getOffset((long) (short) 0);
        long long11 = dateTimeZone0.convertLocalToUTC(0L, true);
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.Locale locale18 = new java.util.Locale("UTC", "1/1/70", "it");
        java.lang.String str19 = locale18.getDisplayVariant();
        java.lang.String str20 = dateTimeZone13.getShortName((-115200033L), locale18);
        java.lang.String str22 = dateTimeZone13.getNameKey((-349199987L));
        long long26 = dateTimeZone13.convertLocalToUTC((-117119900L), false, (-2L));
        java.lang.String str27 = dateTimeZone13.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals(locale18.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-117119900L) + "'", long26 == (-117119900L));
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
    }

    @Test
    public void test19124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19124");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("de-DE", (double) 0L);
        java.lang.String str3 = languageRange2.getRange();
        java.lang.String str4 = languageRange2.getRange();
        java.lang.String str5 = languageRange2.getRange();
        double double6 = languageRange2.getWeight();
        double double7 = languageRange2.getWeight();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "de-de" + "'", str3, "de-de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "de-de" + "'", str4, "de-de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de-de" + "'", str5, "de-de");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test19125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19125");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.yearOfEra();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((-99L), chronology9, locale15, (java.lang.Integer) 1);
        java.lang.Integer int18 = dateTimeParserBucket17.getOffsetInteger();
        java.util.Locale locale19 = dateTimeParserBucket17.getLocale();
        java.lang.String str20 = locale19.getScript();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test19126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19126");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology8.add(readablePeriod15, (-35L), 0);
        org.joda.time.DurationField durationField19 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology8.clockhourOfHalfday();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-35L) + "'", long18 == (-35L));
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test19127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19127");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter8.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withZoneUTC();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale23 = locale22.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withLocale(locale23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale28 = new java.util.Locale("hi!");
        java.lang.String str29 = locale28.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale28, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekyear();
        org.joda.time.DurationField durationField35 = chronology33.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.hourOfDay();
        long long41 = chronology33.add((-62111231999999L), 1L, 10);
        org.joda.time.DurationField durationField42 = chronology33.hours();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter43.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getName((long) 2000);
        boolean boolean48 = dateTimeZone45.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter43.withZone(dateTimeZone45);
        org.joda.time.format.DateTimeParser dateTimeParser50 = dateTimeFormatter43.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = dateTimeFormatter43.getPrinter();
        org.joda.time.Chronology chronology52 = dateTimeFormatter43.getChronolgy();
        org.joda.time.LocalDate localDate54 = dateTimeFormatter43.parseLocalDate("69-12-31");
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale59 = new java.util.Locale("hi!");
        java.lang.String str60 = locale59.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale59, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology64 = dateTimeParserBucket63.getChronology();
        java.util.Locale locale66 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology64, locale66, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField69 = chronology64.days();
        org.joda.time.DurationField durationField70 = chronology64.halfdays();
        long long74 = chronology64.add(0L, (long) (short) 0, (-1));
        org.joda.time.DateTimeField dateTimeField75 = chronology64.hourOfDay();
        boolean boolean76 = localDate54.equals((java.lang.Object) dateTimeField75);
        org.joda.time.DateTimeField dateTimeField78 = localDate54.getField((int) (byte) 1);
        int[] intArray80 = chronology33.get((org.joda.time.ReadablePartial) localDate54, (long) 117);
        java.lang.String str81 = dateTimeFormatter24.print((org.joda.time.ReadablePartial) localDate54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType83 = localDate54.getFieldType(115260000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 115260000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-62111231999989L) + "'", long41 == (-62111231999989L));
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeParser50);
        org.junit.Assert.assertNotNull(dateTimePrinter51);
        org.junit.Assert.assertNull(chronology52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertEquals(locale66.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1970, 1, 1]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "69-12-31" + "'", str81, "69-12-31");
    }

    @Test
    public void test19128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19128");
        java.io.IOException iOException3 = new java.io.IOException("\u65e5\u672c\u8a9e");
        java.io.IOException iOException4 = new java.io.IOException("utc-x-lvariant-it", (java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.lang.Throwable[] throwableArray6 = iOException5.getSuppressed();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException8 = new java.io.IOException("+32:32", (java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.lang.Throwable throwable11 = null;
        java.io.IOException iOException12 = new java.io.IOException("-00:00:00.001", throwable11);
        java.io.IOException iOException14 = new java.io.IOException("hi!");
        java.lang.Throwable[] throwableArray15 = iOException14.getSuppressed();
        iOException12.addSuppressed((java.lang.Throwable) iOException14);
        java.lang.Throwable[] throwableArray17 = iOException14.getSuppressed();
        java.io.IOException iOException19 = new java.io.IOException("en-US");
        java.io.IOException iOException21 = new java.io.IOException("hi!");
        java.io.IOException iOException22 = new java.io.IOException();
        java.io.IOException iOException23 = new java.io.IOException();
        iOException22.addSuppressed((java.lang.Throwable) iOException23);
        iOException21.addSuppressed((java.lang.Throwable) iOException23);
        java.lang.Throwable[] throwableArray26 = iOException23.getSuppressed();
        iOException19.addSuppressed((java.lang.Throwable) iOException23);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException23);
        iOException14.addSuppressed((java.lang.Throwable) iOException23);
        iOException9.addSuppressed((java.lang.Throwable) iOException23);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test19129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19129");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("en-us", strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap4);
        java.util.Locale locale9 = new java.util.Locale("Japanese", "en-us", "zh_CN");
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str17 = locale10.getDisplayCountry(locale13);
        java.lang.String str18 = locale10.getDisplayCountry();
        java.lang.String str19 = locale10.getISO3Language();
        java.lang.String str20 = locale10.getLanguage();
        java.lang.String str21 = locale9.getDisplayCountry(locale10);
        java.lang.String str22 = locale10.getDisplayVariant();
        java.util.Set<java.lang.String> strSet23 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str24 = java.util.Locale.lookupTag(languageRangeList5, (java.util.Collection<java.lang.String>) strSet23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertEquals(locale9.toString(), "japanese_EN-US_zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "jpn" + "'", str19, "jpn");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ja" + "'", str20, "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "EN-US" + "'", str21, "EN-US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test19130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19130");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.Chronology chronology14 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology8.getZone();
        long long21 = dateTimeZone19.previousTransition((-59117431020197L));
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-59117431020197L) + "'", long21 == (-59117431020197L));
    }

    @Test
    public void test19131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19131");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DurationField durationField11 = chronology9.years();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.year();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology9, locale15, (java.lang.Integer) 0);
        dateTimeParserBucket17.setOffset((java.lang.Integer) (-101));
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale25 = new java.util.Locale("hi!");
        java.lang.String str26 = locale25.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale25, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        java.util.Locale locale32 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale32, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField35 = chronology30.millis();
        boolean boolean36 = dateTimeZone20.equals((java.lang.Object) chronology30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "tw__en-us");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals(locale32.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test19132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19132");
        java.util.Locale locale3 = new java.util.Locale("it", "\u4e2d\u6587\u4e2d\u570b\u5fb7\u6587\u5fb7\u56fd))", "01.01.1970");
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.getDisplayName();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587\u4e2d\u570b\u5fb7\u6587\u5fb7\u56fd))_01.01.1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "01.01.1970" + "'", str4, "01.01.1970");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u4e2d\u6587\u4e2d\u570b\u5fb7\u6587\u5fb7\u56fd)),01.01.1970)" + "'", str5, "\u4e2d\u6587\u4e2d\u570b\u5fb7\u6587\u5fb7\u56fd)),01.01.1970)");
    }

    @Test
    public void test19133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19133");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField15 = chronology8.centuries();
        org.joda.time.DurationField durationField16 = chronology8.weeks();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.Chronology chronology23 = chronology8.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfWeek();
        org.joda.time.DurationField durationField26 = chronology23.days();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test19134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19134");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        java.util.Locale locale8 = builder3.build();
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str10 = locale8.getLanguage();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test19135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19135");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.era();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((-351299880L), chronology9, locale19);
        org.joda.time.DateTimeZone dateTimeZone21 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology9.millisOfDay();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19136");
        java.util.Locale locale3 = new java.util.Locale("java.io.IOException: ja", "ja", "00-1-1");
        boolean boolean4 = locale3.hasExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "java.io.ioexception: ja_JA_00-1-1");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test19137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19137");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DurationField durationField11 = chronology9.years();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.year();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((int) (short) -1);
        org.joda.time.Chronology chronology19 = dateTimeFormatter16.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone20.adjustOffset((long) 0, true);
        java.lang.String str25 = dateTimeZone20.getNameKey((long) (-1));
        boolean boolean26 = dateTimeZone20.isFixed();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str35 = locale28.getDisplayCountry(locale31);
        java.lang.String str36 = dateTimeZone20.getName((long) (short) 100, locale28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter16.withZone(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter16.withDefaultYear(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter16.withOffsetParsed();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.util.Locale locale43 = locale41.stripExtensions();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.lang.String str45 = locale43.getDisplayScript(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter16.withLocale(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((-99L), chronology9, locale43, (java.lang.Integer) 100, 0);
        org.joda.time.DateTimeField dateTimeField50 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = chronology9.millisOfDay();
        org.joda.time.DurationField durationField52 = chronology9.years();
        org.joda.time.DateTimeField dateTimeField53 = chronology9.secondOfMinute();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "tw__en-us");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(locale43);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "tw__en-us");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test19138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19138");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology9.add(readablePeriod12, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.millisOfSecond();
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = locale18.stripExtensions();
        java.lang.String str22 = locale18.getCountry();
        boolean boolean23 = locale18.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str31 = locale24.getDisplayCountry(locale27);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale24.getDisplayLanguage(locale32);
        java.util.Locale.setDefault(locale24);
        java.lang.String str35 = locale18.getDisplayCountry(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(10L, chronology9, locale24);
        java.util.Locale locale37 = dateTimeParserBucket36.getLocale();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfDay();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DE" + "'", str22, "DE");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "giapponese" + "'", str33, "giapponese");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u30c9\u30a4\u30c4" + "'", str35, "\u30c9\u30a4\u30c4");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test19139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19139");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale locale11 = new java.util.Locale("it");
        java.util.Locale.Builder builder12 = builder9.setLocale(locale11);
        java.util.Locale.Builder builder14 = builder9.addUnicodeLocaleAttribute("china");
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = builder14.build();
        java.util.Locale.Builder builder17 = builder14.clearExtensions();
        java.util.Locale locale18 = builder14.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder14.setUnicodeLocaleKeyword("german", "france (JAVA.IO.IOEXCEPTION: JAVA.IO.IOEXCEPTION)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: german [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
    }

    @Test
    public void test19140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19140");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2000);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(0);
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter7.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter7.getZone();
        org.joda.time.Chronology chronology10 = dateTimeFormatter7.getChronology();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale15, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        java.util.Locale locale22 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale22, (java.lang.Integer) 10);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology20.add(readablePeriod25, (long) '#', (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField29 = chronology20.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology20.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter7.withChronology(chronology20);
        org.joda.time.DurationField durationField32 = chronology20.years();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals(locale22.toString(), "eng");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 35L + "'", long28 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test19141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19141");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.millisOfDay();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology10, locale18, (java.lang.Integer) 2000);
        org.joda.time.DateTimeField dateTimeField21 = chronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.minuteOfHour();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale28 = new java.util.Locale("hi!");
        java.lang.String str29 = locale28.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale28, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        java.util.Locale locale35 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale35, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField38 = chronology33.weekyearOfCentury();
        org.joda.time.DurationField durationField39 = chronology33.months();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = locale43.toLanguageTag();
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getDisplayCountry();
        java.lang.String str48 = locale46.toLanguageTag();
        java.lang.String str49 = locale43.getDisplayName(locale46);
        java.lang.String str50 = locale41.getDisplayCountry(locale46);
        java.lang.String str51 = locale40.getDisplayScript(locale41);
        java.util.Locale.Category category52 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale53 = java.util.Locale.getDefault(category52);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.lang.String str56 = locale40.getDisplayName(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 2000, chronology33, locale40, (java.lang.Integer) 0, (int) 'x');
        java.util.Locale locale63 = new java.util.Locale("UTC", "1/1/70", "it");
        java.lang.String str64 = locale63.getCountry();
        java.util.Locale locale66 = new java.util.Locale("eng");
        java.util.Locale locale67 = locale66.stripExtensions();
        java.lang.String str68 = locale66.getDisplayCountry();
        java.lang.String str69 = locale63.getDisplayScript(locale66);
        java.lang.String str70 = locale40.getDisplayName(locale66);
        java.lang.String str71 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology10, locale40, (java.lang.Integer) (-1970), (int) '#');
        org.joda.time.DateTimeField dateTimeField75 = chronology10.weekyear();
        org.joda.time.DurationField durationField76 = chronology10.hours();
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals(locale35.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ja" + "'", str44, "ja");
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "und" + "'", str48, "und");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Japanese" + "'", str49, "Japanese");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + category52 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category52.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u6587" + "'", str56, "\u65e5\u6587");
        org.junit.Assert.assertEquals(locale63.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1/1/70" + "'", str64, "1/1/70");
        org.junit.Assert.assertEquals(locale66.toString(), "eng");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Japanese" + "'", str70, "Japanese");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test19142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19142");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getName((long) 2000);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter7.getParser();
        int int15 = dateTimeParser14.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withDefaultYear(10);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeFormatter16.parseMillis("\u5fb7\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.io.IOException: ??\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test19143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19143");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale5.getDisplayLanguage(locale13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str21 = locale17.toLanguageTag();
        java.lang.String str22 = locale5.getDisplayCountry(locale17);
        java.util.Locale.Builder builder23 = builder3.setLocale(locale17);
        java.util.Locale.Builder builder24 = builder3.clear();
        java.util.Locale.Builder builder26 = builder24.setVariant("");
        java.util.Locale.Builder builder27 = builder26.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder26.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "giapponese" + "'", str14, "giapponese");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test19144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19144");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale7);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale11);
        java.util.Locale.setDefault(locale11);
        java.util.Locale.Builder builder14 = builder10.setLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale21, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        java.util.Locale locale28 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale28, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology26.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        java.util.Locale locale35 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale35);
        java.lang.String str37 = dateTimeZone33.getShortName((long) 'u', locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter16.withLocale(locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withPivotYear((java.lang.Integer) 40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withPivotYear(0);
        java.util.Locale locale43 = dateTimeFormatter40.getLocale();
        java.util.Locale.Builder builder44 = builder10.setLocale(locale43);
        java.util.Locale.Builder builder46 = builder44.setLanguageTag("en-GB");
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale51 = new java.util.Locale("hi!");
        java.lang.String str52 = locale51.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale51, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.days();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.year();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.hourOfHalfday();
        org.joda.time.DurationField durationField61 = chronology56.minutes();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("zh-CN");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology56, locale63, (java.lang.Integer) 40, 10);
        java.lang.String str67 = locale63.getISO3Language();
        java.lang.String str68 = locale63.getScript();
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale63.getDisplayScript(locale69);
        java.util.Locale.setDefault(locale63);
        java.util.Locale.Builder builder72 = builder46.setLocale(locale63);
        java.lang.Class<?> wildcardClass73 = builder46.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals(locale28.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zho" + "'", str67, "zho");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test19145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19145");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear((int) ' ');
        java.lang.String str5 = dateTimeFormatter3.print(97L);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter3.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u56db\u4e0a\u5348\u65f6\u5206\u79d2 +00:00" + "'", str5, "\u5e74\u6708\u65e5\u661f\u671f\u56db\u4e0a\u5348\u65f6\u5206\u79d2 +00:00");
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test19146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19146");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology5, locale6, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str10 = locale3.getDisplayCountry(locale6);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale3.getDisplayLanguage(locale11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str19 = locale15.toLanguageTag();
        java.lang.String str20 = locale3.getDisplayCountry(locale15);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale22 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.getDefault(category23);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale25.getScript();
        java.lang.String str28 = locale25.getDisplayName();
        java.util.Locale.setDefault(category0, locale25);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.lang.String str31 = locale30.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale30);
        java.lang.String str33 = locale30.getDisplayScript();
        java.lang.String str34 = locale30.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "giapponese" + "'", str12, "giapponese");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)" + "'", str28, "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u570b" + "'", str31, "\u4e2d\u570b");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
    }

    @Test
    public void test19147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19147");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DurationField durationField10 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology8.withUTC();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DurationField durationField16 = chronology13.minutes();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test19148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19148");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale.Builder builder10 = builder5.setLanguageTag("en-us");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setLanguageTag("chinese (china) (CAN,italiano)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: chinese (china) (CAN,italiano) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test19149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19149");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale18);
        java.lang.String str20 = dateTimeZone16.getShortName((long) 'u', locale18);
        java.util.Locale locale23 = new java.util.Locale("\u65e5\u672c\u8a9e", "English");
        java.lang.String str24 = locale18.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale18.getDisplayVariant(locale25);
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals(locale23.toString(), "\u65e5\u672c\u8a9e_ENGLISH");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
    }

    @Test
    public void test19150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19150");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfWeek();
        org.joda.time.DurationField durationField14 = chronology8.days();
        org.joda.time.DurationField durationField15 = chronology8.years();
        org.joda.time.DurationField durationField16 = chronology8.years();
        org.joda.time.DurationField durationField17 = chronology8.years();
        org.joda.time.DurationField durationField18 = chronology8.centuries();
        org.joda.time.Chronology chronology19 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test19151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19151");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.setVariant("Italian");
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder11.setExtension('a', "en-US");
        java.util.Locale.Builder builder16 = builder14.setLanguageTag("it");
        java.util.Locale.Builder builder17 = builder14.clear();
        java.util.Locale.Builder builder19 = builder14.setRegion("");
        java.util.Locale locale20 = builder19.build();
        java.util.Locale.Builder builder21 = builder10.setLocale(locale20);
        java.util.Locale locale22 = builder21.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
    }

    @Test
    public void test19152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19152");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.era();
        org.joda.time.DurationField durationField18 = chronology8.seconds();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test19153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19153");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalTime localTime3 = dateTimeFormatter1.parseLocalTime("1969-12-31");
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter1.getPrinter();
        java.lang.StringBuffer stringBuffer5 = null;
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale11 = new java.util.Locale("hi!");
        java.lang.String str12 = locale11.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale11, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        java.util.Locale locale18 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale18, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.weekyearOfCentury();
        org.joda.time.DurationField durationField22 = chronology16.months();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone25.convertLocalToUTC((-1L), true, (long) (byte) 100);
        java.lang.String str31 = dateTimeZone25.getShortName((long) (byte) 1);
        boolean boolean33 = dateTimeZone25.isStandardOffset(0L);
        org.joda.time.Chronology chronology34 = chronology16.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfDay();
        org.joda.time.DurationField durationField37 = chronology34.weekyears();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        long long42 = dateTimeZone39.adjustOffset((long) 0, true);
        java.util.TimeZone timeZone43 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        long long47 = dateTimeZone44.convertLocalToUTC((long) 2000, false);
        int int49 = dateTimeZone44.getStandardOffset(2040L);
        java.lang.String str51 = dateTimeZone44.getNameKey((long) 1);
        java.lang.String str53 = dateTimeZone44.getShortName(3660000L);
        int int55 = dateTimeZone44.getStandardOffset(832L);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("ja");
        java.lang.String str58 = locale57.getISO3Language();
        java.lang.String str59 = locale57.getScript();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter4.printTo(stringBuffer5, 144060064L, chronology34, (-115200001), dateTimeZone44, locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimePrinter4);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals(locale18.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2000L + "'", long47 == 2000L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "jpn" + "'", str58, "jpn");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test19154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19154");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        int int8 = dateTimeFormatter5.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter5.getZone();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale13, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter5.withChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField29 = chronology18.minutes();
        org.joda.time.DurationField durationField30 = chronology18.hours();
        org.joda.time.DurationField durationField31 = chronology18.millis();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test19155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19155");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter8.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser10);
        int int12 = dateTimePrinter7.estimatePrintedLength();
        java.lang.StringBuffer stringBuffer13 = null;
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale17 = new java.util.Locale("hi!");
        java.lang.String str18 = locale17.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale17, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyear();
        org.joda.time.DurationField durationField24 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.hourOfDay();
        long long30 = chronology22.add((-62111231999999L), 1L, 10);
        org.joda.time.DurationField durationField31 = chronology22.hours();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getName((long) 2000);
        boolean boolean37 = dateTimeZone34.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter32.withZone(dateTimeZone34);
        org.joda.time.format.DateTimeParser dateTimeParser39 = dateTimeFormatter32.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = dateTimeFormatter32.getPrinter();
        org.joda.time.Chronology chronology41 = dateTimeFormatter32.getChronolgy();
        org.joda.time.LocalDate localDate43 = dateTimeFormatter32.parseLocalDate("69-12-31");
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale48 = new java.util.Locale("hi!");
        java.lang.String str49 = locale48.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale48, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology53 = dateTimeParserBucket52.getChronology();
        java.util.Locale locale55 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology53, locale55, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField58 = chronology53.days();
        org.joda.time.DurationField durationField59 = chronology53.halfdays();
        long long63 = chronology53.add(0L, (long) (short) 0, (-1));
        org.joda.time.DateTimeField dateTimeField64 = chronology53.hourOfDay();
        boolean boolean65 = localDate43.equals((java.lang.Object) dateTimeField64);
        org.joda.time.DateTimeField dateTimeField67 = localDate43.getField((int) (byte) 1);
        int[] intArray69 = chronology22.get((org.joda.time.ReadablePartial) localDate43, (long) 117);
        org.joda.time.Chronology chronology70 = localDate43.getChronology();
        org.joda.time.Chronology chronology71 = localDate43.getChronology();
        int int73 = localDate43.getValue(0);
        java.util.Locale locale77 = new java.util.Locale("UTC", "1/1/70", "it");
        java.lang.String str78 = locale77.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter7.printTo(stringBuffer13, (org.joda.time.ReadablePartial) localDate43, locale77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeParser10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-62111231999989L) + "'", long30 == (-62111231999989L));
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeParser39);
        org.junit.Assert.assertNotNull(dateTimePrinter40);
        org.junit.Assert.assertNull(chronology41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertEquals(locale55.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1969 + "'", int73 == 1969);
        org.junit.Assert.assertEquals(locale77.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "it" + "'", str78, "it");
    }

    @Test
    public void test19156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19156");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.yearOfCentury();
        java.util.Locale locale17 = new java.util.Locale("", "");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((-115260000L), chronology9, locale17);
        java.lang.String str19 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology9.dayOfYear();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test19157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19157");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder3.addUnicodeLocaleAttribute("Japanese");
        java.util.Locale.Builder builder14 = builder12.setLanguage("it");
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder17 = builder15.clearExtensions();
        java.util.Locale.Builder builder18 = builder17.clear();
        java.util.Locale.Builder builder19 = builder18.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.addUnicodeLocaleAttribute("java.io.IOException: java.io.IOException: hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.io.IOException: java.io.IOException: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test19158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19158");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        boolean boolean2 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter0.getParser();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale7, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology12.centuries();
        org.joda.time.DurationField durationField20 = chronology12.hours();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology12.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter0.withZone(dateTimeZone21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withDefaultYear(117120000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter22.withDefaultYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test19159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19159");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter8.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter22.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter22.getPrinter();
        boolean boolean25 = dateTimeFormatter22.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter22.withDefaultYear((-3600000));
        int int28 = dateTimeFormatter22.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = dateTimeFormatter22.parseLocalDate("Francia");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimePrinter23);
        org.junit.Assert.assertNotNull(dateTimePrinter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
    }

    @Test
    public void test19160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19160");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.clockhourOfHalfday();
        org.joda.time.Chronology chronology15 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone17.adjustOffset((long) 0, true);
        java.lang.String str22 = dateTimeZone17.getNameKey((long) (-1));
        long long25 = dateTimeZone17.adjustOffset((long) (byte) 100, false);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.lang.String str29 = dateTimeZone17.getShortName(117L, locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology15, locale27);
        java.lang.String str31 = chronology15.toString();
        org.joda.time.DateTimeField dateTimeField32 = chronology15.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = chronology15.getDateTimeMillis((-126000001), (-101), 52, (-148200000), 351300000, 117120000, (-148200000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -148200000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test19161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19161");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.era();
        org.joda.time.DurationField durationField17 = chronology8.millis();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test19162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19162");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology9 = dateTimeFormatter0.getChronolgy();
        org.joda.time.LocalDate localDate11 = dateTimeFormatter0.parseLocalDate("69-12-31");
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        int int14 = localDate11.getValue(1);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale19, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.hourOfHalfday();
        org.joda.time.DurationField durationField29 = chronology24.minutes();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("zh-CN");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology24, locale31, (java.lang.Integer) 40, 10);
        org.joda.time.DateTimeField dateTimeField35 = chronology24.yearOfCentury();
        java.lang.String str36 = chronology24.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter37.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getName((long) 2000);
        boolean boolean42 = dateTimeZone39.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter37.withZone(dateTimeZone39);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter37.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology46 = dateTimeFormatter37.getChronolgy();
        org.joda.time.LocalDate localDate48 = dateTimeFormatter37.parseLocalDate("69-12-31");
        java.lang.String str49 = localDate48.toString();
        long long51 = chronology24.set((org.joda.time.ReadablePartial) localDate48, 2040L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean53 = dateTimeFormatter52.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter52.withPivotYear(2000);
        org.joda.time.format.DateTimeParser dateTimeParser56 = dateTimeFormatter55.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter57.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getName((long) 2000);
        boolean boolean62 = dateTimeZone59.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter57.withZone(dateTimeZone59);
        org.joda.time.format.DateTimeParser dateTimeParser64 = dateTimeFormatter57.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter65 = dateTimeFormatter57.getPrinter();
        org.joda.time.Chronology chronology66 = dateTimeFormatter57.getChronolgy();
        org.joda.time.LocalDate localDate68 = dateTimeFormatter57.parseLocalDate("69-12-31");
        java.lang.String str69 = localDate68.toString();
        int int70 = localDate68.size();
        java.lang.String str71 = dateTimeFormatter55.print((org.joda.time.ReadablePartial) localDate68);
        int int72 = localDate48.compareTo((org.joda.time.ReadablePartial) localDate68);
        int int73 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate68);
        java.lang.String str74 = localDate11.toString();
        java.util.Locale locale76 = new java.util.Locale("jpn");
        boolean boolean77 = localDate11.equals((java.lang.Object) locale76);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeParser44);
        org.junit.Assert.assertNotNull(dateTimePrinter45);
        org.junit.Assert.assertNull(chronology46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1969-12-31" + "'", str49, "1969-12-31");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-86397960L) + "'", long51 == (-86397960L));
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeParser56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeParser64);
        org.junit.Assert.assertNotNull(dateTimePrinter65);
        org.junit.Assert.assertNull(chronology66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1969-12-31" + "'", str69, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u4e09" + "'", str71, "\u5e74\u6708\u65e5\u661f\u671f\u4e09");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1969-12-31" + "'", str74, "1969-12-31");
        org.junit.Assert.assertEquals(locale76.toString(), "jpn");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test19163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19163");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, 10);
        java.lang.Integer int11 = dateTimeParserBucket7.getOffsetInteger();
        dateTimeParserBucket7.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket7.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket7.setPivotYear((java.lang.Integer) 100);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.era();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19164");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('a', "en-US");
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("it");
        java.util.Locale locale14 = builder11.build();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter5.withLocale(locale14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale19, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter15.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField32 = chronology24.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology24.weekyear();
        org.joda.time.DateTimeField dateTimeField34 = chronology24.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test19165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19165");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology8.add(readablePeriod15, (long) 'a', (int) 'a');
        org.joda.time.DurationField durationField19 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = chronology8.get(readablePeriod21, (-3659999L), 1900L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test19166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19166");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        long long10 = dateTimeParserBucket7.computeMillis(true, "hi!");
        long long12 = dateTimeParserBucket7.computeMillis(true);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale16, (java.lang.Integer) 10, (int) 'a');
        int int21 = dateTimeParserBucket20.getOffset();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket20.getZone();
        long long25 = dateTimeZone22.adjustOffset((-1L), true);
        long long28 = dateTimeZone22.adjustOffset((long) 'a', true);
        boolean boolean30 = dateTimeZone22.isStandardOffset((long) 100);
        long long33 = dateTimeZone22.adjustOffset((long) (byte) 10, false);
        dateTimeParserBucket7.setZone(dateTimeZone22);
        int int36 = dateTimeZone22.getOffsetFromLocal(3600000L);
        java.lang.String str37 = dateTimeZone22.getID();
        java.lang.String str39 = dateTimeZone22.getNameKey((long) (-3660001));
        java.lang.String str40 = dateTimeZone22.getID();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 97L + "'", long28 == 97L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
    }

    @Test
    public void test19167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19167");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.secondOfDay();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test19168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19168");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("java.io.IOException: java.io.IOException: 01.01.70", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.io.ioexception:java.io.ioexception:01.01.70");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19169");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale7);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale11);
        java.util.Locale.setDefault(locale11);
        java.util.Locale.Builder builder14 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder15 = builder10.clear();
        java.util.Locale locale16 = builder15.build();
        java.util.Locale.Builder builder18 = builder15.setVariant("");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withChronology(chronology23);
        java.util.Locale locale25 = dateTimeFormatter24.getLocale();
        boolean boolean26 = dateTimeFormatter24.isOffsetParsed();
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder27.setExtension('a', "en-US");
        java.util.Locale.Builder builder32 = builder30.setLanguageTag("it");
        java.util.Locale locale33 = builder30.build();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter24.withLocale(locale33);
        java.lang.String str36 = locale33.getUnicodeLocaleType("fr");
        java.lang.String str37 = locale33.getISO3Language();
        java.lang.String str38 = locale33.getCountry();
        java.lang.String str39 = locale33.getDisplayLanguage();
        java.lang.String str40 = locale33.getScript();
        java.util.Locale.Builder builder41 = builder18.setLocale(locale33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder18.setExtension('4', "java.io.IOException: china");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ita" + "'", str37, "ita");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str39, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test19170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19170");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getName((long) 2000);
        boolean boolean19 = dateTimeZone16.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter14.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology21 = chronology10.withZone(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter0.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale27 = new java.util.Locale("hi!");
        java.lang.String str28 = locale27.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale27, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        java.util.Locale locale34 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale34, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology32.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = chronology32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField41 = chronology32.era();
        org.joda.time.Chronology chronology42 = chronology32.withUTC();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter22.withZone(dateTimeZone43);
        java.lang.Integer int46 = dateTimeFormatter22.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        long long50 = dateTimeZone47.adjustOffset((long) 0, true);
        java.util.TimeZone timeZone51 = dateTimeZone47.toTimeZone();
        int int53 = dateTimeZone47.getOffsetFromLocal(100L);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) 10);
        boolean boolean60 = dateTimeZone47.equals((java.lang.Object) chronology55);
        java.lang.String str62 = dateTimeZone47.getShortName((long) 'a');
        long long66 = dateTimeZone47.convertLocalToUTC((long) 'x', true, 1342L);
        long long68 = dateTimeZone47.previousTransition(201L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter22.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter69.withDefaultYear((-187200001));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter69.withPivotYear((java.lang.Integer) 1);
        java.lang.Appendable appendable74 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.util.Locale locale76 = dateTimeFormatter75.getLocale();
        boolean boolean77 = dateTimeFormatter75.isOffsetParsed();
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter75.withLocale(locale78);
        org.joda.time.MutableDateTime mutableDateTime81 = dateTimeFormatter79.parseMutableDateTime("15:59:00");
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter69.printTo(appendable74, (org.joda.time.ReadableInstant) mutableDateTime81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals(locale34.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 120L + "'", long66 == 120L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 201L + "'", long68 == 201L);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNull(locale76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(mutableDateTime81);
    }

    @Test
    public void test19171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19171");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField15 = chronology8.years();
        org.joda.time.Chronology chronology16 = chronology8.withUTC();
        org.joda.time.DurationField durationField17 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.weekyear();
        org.joda.time.DurationField durationField19 = chronology8.halfdays();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test19172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19172");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        java.util.Locale.Builder builder9 = builder3.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder10 = builder3.clear();
        java.util.Locale.Builder builder12 = builder3.setLanguageTag("zh-CN");
        java.util.Locale.Builder builder13 = builder3.clear();
        java.util.Locale locale14 = builder3.build();
        java.util.Locale locale15 = builder3.build();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale19, (java.lang.Integer) 10, (int) 'a');
        int int24 = dateTimeParserBucket23.getOffset();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket23.getZone();
        long long28 = dateTimeZone25.adjustOffset((-1L), true);
        long long31 = dateTimeZone25.adjustOffset((long) 'a', true);
        boolean boolean33 = dateTimeZone25.isStandardOffset((long) 100);
        boolean boolean34 = dateTimeZone25.isFixed();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str43 = locale36.getDisplayCountry(locale39);
        java.lang.String str44 = dateTimeZone25.getShortName((long) (short) -1, locale36);
        java.lang.String str46 = dateTimeZone25.getNameKey((long) 2000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        java.util.Locale locale50 = new java.util.Locale("hi!");
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str53 = dateTimeZone25.getShortName((-99L), locale50);
        java.lang.String str54 = locale50.getVariant();
        java.lang.String str55 = locale15.getDisplayCountry(locale50);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 97L + "'", long31 == 97L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test19173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19173");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyear();
        org.joda.time.DurationField durationField12 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.year();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear((int) (short) -1);
        org.joda.time.Chronology chronology20 = dateTimeFormatter17.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone21.adjustOffset((long) 0, true);
        java.lang.String str26 = dateTimeZone21.getNameKey((long) (-1));
        boolean boolean27 = dateTimeZone21.isFixed();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str36 = locale29.getDisplayCountry(locale32);
        java.lang.String str37 = dateTimeZone21.getName((long) (short) 100, locale29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter17.withZone(dateTimeZone21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter17.withDefaultYear(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter17.withOffsetParsed();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.util.Locale locale44 = locale42.stripExtensions();
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.lang.String str46 = locale44.getDisplayScript(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter17.withLocale(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((-99L), chronology10, locale44, (java.lang.Integer) 100, 0);
        java.util.Locale locale53 = new java.util.Locale("01/01/70", "zh_CN");
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder54.setExtension('a', "en-US");
        java.util.Locale.Builder builder59 = builder57.setVariant("");
        java.util.Locale.Builder builder60 = builder59.clear();
        java.util.Locale.Builder builder61 = builder59.clearExtensions();
        java.util.Locale.Builder builder62 = builder59.clearExtensions();
        java.util.Locale locale63 = builder59.build();
        java.util.Set<java.lang.Character> charSet64 = locale63.getExtensionKeys();
        java.lang.String str65 = locale53.getDisplayLanguage(locale63);
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.lang.String str67 = locale66.toLanguageTag();
        java.util.Locale locale69 = new java.util.Locale("hi!");
        java.lang.String str70 = locale69.getDisplayCountry();
        java.lang.String str71 = locale69.toLanguageTag();
        java.lang.String str72 = locale66.getDisplayName(locale69);
        java.lang.String str73 = locale63.getDisplayCountry(locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 13, chronology10, locale63);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertEquals(locale53.toString(), "01/01/70_ZH_CN");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "01/01/70" + "'", str65, "01/01/70");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zh-CN" + "'", str67, "zh-CN");
        org.junit.Assert.assertEquals(locale69.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "und" + "'", str71, "und");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Chinese (China)" + "'", str72, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test19174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19174");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfYear();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder16.setExtension('a', "en-US");
        java.util.Locale.Builder builder21 = builder19.setLanguageTag("it");
        java.util.Locale locale22 = builder19.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology9, locale22, (java.lang.Integer) (-41), 40);
        org.joda.time.DateTimeField dateTimeField26 = chronology9.minuteOfHour();
        org.joda.time.DurationField durationField27 = chronology9.days();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test19175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19175");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder9 = builder6.setLocale(locale8);
        java.lang.String str10 = locale8.getISO3Country();
        boolean boolean11 = locale8.hasExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test19176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19176");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("de-DE", (double) 0L);
        java.lang.String str3 = languageRange2.getRange();
        double double4 = languageRange2.getWeight();
        double double5 = languageRange2.getWeight();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "de-de" + "'", str3, "de-de");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test19177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19177");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder6.setExtension('a', "it");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder12 = builder10.clear();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = builder12.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder12.setLanguage("22/02/13");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 22/02/13 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
    }

    @Test
    public void test19178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19178");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField19 = chronology9.months();
        org.joda.time.DurationField durationField20 = chronology9.hours();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test19179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19179");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale7);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale11);
        java.util.Locale.setDefault(locale11);
        java.util.Locale.Builder builder14 = builder10.setLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale21, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        java.util.Locale locale28 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale28, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology26.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        java.util.Locale locale35 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale35);
        java.lang.String str37 = dateTimeZone33.getShortName((long) 'u', locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter16.withLocale(locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withPivotYear((java.lang.Integer) 40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withPivotYear(0);
        java.util.Locale locale43 = dateTimeFormatter40.getLocale();
        java.util.Locale.Builder builder44 = builder10.setLocale(locale43);
        java.util.Locale.Builder builder46 = builder44.setLanguageTag("en-GB");
        java.util.Locale.Builder builder48 = builder44.setLanguage("DEU");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder51 = builder48.setUnicodeLocaleKeyword("DEUTSCHLAND", "java.io.IOException: java.io.IOException: Chinese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: DEUTSCHLAND [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals(locale28.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test19180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19180");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = chronology9.get(readablePeriod20, 134L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19181");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.year();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyear();
        org.joda.time.DurationField durationField19 = chronology15.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology15.getDateTimeMillis(144059900L, (-2), 13, 115260000, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test19182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19182");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean6 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-115200001));
        boolean boolean9 = dateTimeFormatter2.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test19183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19183");
        java.io.IOException iOException2 = new java.io.IOException("java.io.IOException");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("en-US");
        java.lang.Throwable[] throwableArray6 = iOException5.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException5);
        java.lang.Throwable[] throwableArray8 = iOException2.getSuppressed();
        java.io.IOException iOException9 = new java.io.IOException("chinois", (java.lang.Throwable) iOException2);
        java.io.IOException iOException12 = new java.io.IOException("English (United Kingdom)");
        java.io.IOException iOException13 = new java.io.IOException("+52:00", (java.lang.Throwable) iOException12);
        iOException9.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.String str15 = iOException12.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: English (United Kingdom)" + "'", str15, "java.io.IOException: English (United Kingdom)");
    }

    @Test
    public void test19184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19184");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter8.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter20.withPivotYear((int) (byte) 1);
        java.util.Locale locale24 = dateTimeFormatter23.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withPivotYear((-1970));
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter26.getParser();
        int int28 = dateTimeFormatter26.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
    }

    @Test
    public void test19185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19185");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder1.setExtension('a', "en-US");
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("it");
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale18 = new java.util.Locale("hi!");
        java.lang.String str19 = locale18.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale18, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekyearOfCentury();
        org.joda.time.Chronology chronology27 = chronology23.withUTC();
        org.joda.time.DurationField durationField28 = chronology23.minutes();
        java.util.Locale locale32 = new java.util.Locale("UTC", "1/1/70", "it");
        java.lang.String str33 = locale32.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) ' ', chronology23, locale32, (java.lang.Integer) 10, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField37 = chronology23.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField38 = chronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField39 = chronology23.millisOfSecond();
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder41.setExtension('a', "en-US");
        java.util.Locale.Builder builder46 = builder44.setLanguageTag("it");
        java.util.Locale locale47 = builder44.build();
        java.util.Locale.setDefault(category40, locale47);
        java.util.Locale locale49 = java.util.Locale.getDefault(category40);
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder50.setExtension('a', "en-US");
        java.util.Locale.Builder builder54 = builder53.clearExtensions();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology57, locale58, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str62 = locale55.getDisplayCountry(locale58);
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        java.lang.String str64 = locale55.getDisplayLanguage(locale63);
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology66, locale67, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str71 = locale67.toLanguageTag();
        java.lang.String str72 = locale55.getDisplayCountry(locale67);
        java.util.Locale.Builder builder73 = builder53.setLocale(locale67);
        java.util.Locale.setDefault(category40, locale67);
        java.util.Locale locale76 = new java.util.Locale("\u4e2d\u6587\u4e2d\u570b)");
        java.lang.String str77 = locale67.getDisplayName(locale76);
        boolean boolean78 = locale76.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 3660000, chronology23, locale76, (java.lang.Integer) 13);
        java.util.Locale.setDefault(category0, locale76);
        boolean boolean82 = locale76.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals(locale32.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "giapponese" + "'", str64, "giapponese");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals(locale76.toString(), "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Italian" + "'", str77, "Italian");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test19186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19186");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.yearOfEra();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = locale15.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology9, locale15);
        org.joda.time.DateTimeZone dateTimeZone19 = chronology9.getZone();
        org.joda.time.DurationField durationField20 = chronology9.seconds();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = chronology9.get(readablePeriod21, 0L, (-540498000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-CN" + "'", str16, "zh-CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test19187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19187");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField15 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfSecond();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test19188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19188");
        java.io.IOException iOException2 = new java.io.IOException("70/01/01");
        java.io.IOException iOException4 = new java.io.IOException("hi!");
        java.io.IOException iOException5 = new java.io.IOException();
        java.io.IOException iOException6 = new java.io.IOException();
        iOException5.addSuppressed((java.lang.Throwable) iOException6);
        iOException4.addSuppressed((java.lang.Throwable) iOException6);
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException();
        iOException10.addSuppressed((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.lang.Throwable[] throwableArray15 = iOException13.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException17 = new java.io.IOException("+00:00:00.010", (java.lang.Throwable) iOException2);
        java.io.IOException iOException19 = new java.io.IOException("\u5fb7\u570b)");
        iOException2.addSuppressed((java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException19);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test19189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19189");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.weekyearOfCentury();
        long long23 = chronology9.add((-17213098841L), (long) 13, 115260000);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-15714718841L) + "'", long23 == (-15714718841L));
    }

    @Test
    public void test19190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19190");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField14 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField16 = chronology9.centuries();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test19191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19191");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfYear();
        org.joda.time.DurationField durationField16 = chronology9.years();
        org.joda.time.Chronology chronology17 = chronology9.withUTC();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology17.add(readablePeriod18, (long) 40, (int) (short) 0);
        java.lang.String str22 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.hourOfDay();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.lang.String str28 = locale25.getExtension('a');
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder30.setExtension('a', "en-US");
        java.util.Locale.Builder builder35 = builder33.setLanguageTag("it");
        java.util.Locale locale36 = builder35.build();
        java.util.Locale.setDefault(category24, locale36);
        boolean boolean38 = locale36.hasExtensions();
        java.util.Set<java.lang.Character> charSet39 = locale36.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale36);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale44 = new java.util.Locale("hi!");
        java.lang.String str45 = locale44.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale44, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        long long51 = dateTimeParserBucket48.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.lang.String str57 = locale56.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale56, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.year();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        long long67 = chronology61.add(readablePeriod64, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField68 = chronology61.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField69 = chronology61.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField70 = chronology61.weekOfWeekyear();
        dateTimeParserBucket48.saveField(dateTimeField70, (-1));
        org.joda.time.DateTimeZone dateTimeZone73 = dateTimeParserBucket48.getZone();
        long long76 = dateTimeZone73.adjustOffset((long) ' ', false);
        java.util.Locale locale77 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet78 = locale77.getExtensionKeys();
        boolean boolean79 = dateTimeZone73.equals((java.lang.Object) locale77);
        int int81 = dateTimeZone73.getStandardOffset((-121L));
        java.lang.String str83 = dateTimeZone73.getShortName((-2000L));
        dateTimeParserBucket40.setZone(dateTimeZone73);
        java.lang.String str85 = dateTimeZone73.toString();
        long long87 = dateTimeZone73.convertUTCToLocal(1884L);
        java.lang.String str89 = dateTimeZone73.getShortName(115258000L);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 40L + "'", long21 == 40L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 32L + "'", long76 == 32L);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "UTC" + "'", str85, "UTC");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1884L + "'", long87 == 1884L);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+00:00" + "'", str89, "+00:00");
    }

    @Test
    public void test19192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19192");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone15.adjustOffset((long) 0, true);
        java.lang.String str20 = dateTimeZone15.getNameKey((long) (-1));
        boolean boolean21 = dateTimeZone15.isFixed();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str30 = locale23.getDisplayCountry(locale26);
        java.lang.String str31 = dateTimeZone15.getName((long) (short) 100, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology9, locale23, (java.lang.Integer) 10, (int) '4');
        int int35 = dateTimeParserBucket34.getOffset();
        dateTimeParserBucket34.setOffset(0);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket34.getZone();
        dateTimeParserBucket34.setOffset((int) ' ');
        int int41 = dateTimeParserBucket34.getOffset();
        java.lang.Object obj42 = dateTimeParserBucket34.saveState();
        dateTimeParserBucket34.setPivotYear((java.lang.Integer) (-33));
        long long46 = dateTimeParserBucket34.computeMillis(false);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 32 + "'", int41 == 32);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-22L) + "'", long46 == (-22L));
    }

    @Test
    public void test19193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19193");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("und-China");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'und-China' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19194");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology8.centuries();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology8.getZone();
        org.joda.time.DurationField durationField19 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField21 = chronology8.days();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology8.getZone();
        java.lang.String str24 = dateTimeZone22.getShortName((-1004L));
        java.lang.String str26 = dateTimeZone22.getShortName((-466499883L));
        long long29 = dateTimeZone22.adjustOffset((-345719883L), false);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-345719883L) + "'", long29 == (-345719883L));
    }

    @Test
    public void test19195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19195");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) (-1));
        java.lang.String str7 = dateTimeZone0.getNameKey((long) 0);
        boolean boolean9 = dateTimeZone0.isStandardOffset((long) ' ');
        java.lang.String str10 = dateTimeZone0.getID();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        boolean boolean13 = dateTimeZone0.equals((java.lang.Object) locale12);
        java.lang.String str14 = locale12.getScript();
        java.lang.String str15 = locale12.getScript();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getDisplayCountry();
        java.lang.String str23 = locale21.toLanguageTag();
        java.lang.String str24 = locale18.getDisplayName(locale21);
        java.lang.String str25 = locale16.getDisplayCountry(locale21);
        java.lang.String str26 = locale12.getDisplayCountry(locale21);
        java.lang.String str27 = locale12.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-CN" + "'", str19, "zh-CN");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und" + "'", str23, "und");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (China)" + "'", str24, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "China" + "'", str25, "China");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test19196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19196");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology9 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField11 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.halfdayOfDay();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test19197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19197");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        long long10 = dateTimeParserBucket7.computeMillis(true, "hi!");
        long long12 = dateTimeParserBucket7.computeMillis(true);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale16, (java.lang.Integer) 10, (int) 'a');
        int int21 = dateTimeParserBucket20.getOffset();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket20.getZone();
        long long25 = dateTimeZone22.adjustOffset((-1L), true);
        long long28 = dateTimeZone22.adjustOffset((long) 'a', true);
        boolean boolean30 = dateTimeZone22.isStandardOffset((long) 100);
        long long33 = dateTimeZone22.adjustOffset((long) (byte) 10, false);
        dateTimeParserBucket7.setZone(dateTimeZone22);
        int int36 = dateTimeZone22.getOffsetFromLocal(3600000L);
        int int38 = dateTimeZone22.getOffsetFromLocal((-10800000L));
        java.lang.String str40 = dateTimeZone22.getName((-274260000L));
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 97L + "'", long28 == 97L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
    }

    @Test
    public void test19198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19198");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DurationField durationField10 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfWeek();
        org.joda.time.DurationField durationField13 = chronology8.halfdays();
        long long17 = chronology8.add(190800000L, 120L, (-1));
        org.joda.time.DateTimeField dateTimeField18 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField20 = chronology8.months();
        org.joda.time.DurationField durationField21 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology8.weekyear();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 190799880L + "'", long17 == 190799880L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19199");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder1.setExtension('a', "en-US");
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("it");
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale11.getCountry();
        boolean boolean16 = locale11.hasExtensions();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale18 = java.util.Locale.getDefault(category0);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.lang.String str20 = locale19.getISO3Language();
        java.lang.String str21 = locale19.getVariant();
        java.util.Locale locale22 = locale19.stripExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DE" + "'", str15, "DE");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "deu" + "'", str20, "deu");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
    }

    @Test
    public void test19200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19200");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.DateTimeField dateTimeField9 = null;
        dateTimeParserBucket8.saveField(dateTimeField9, 10);
        java.lang.Integer int12 = dateTimeParserBucket8.getOffsetInteger();
        dateTimeParserBucket8.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket8.setOffset((java.lang.Integer) 1);
        dateTimeParserBucket8.setPivotYear((java.lang.Integer) 100);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((-121));
        int int24 = dateTimeZone22.getOffset(10L);
        long long26 = dateTimeZone22.previousTransition(385L);
        org.joda.time.Chronology chronology27 = chronology19.withZone(dateTimeZone22);
        java.util.Locale locale29 = new java.util.Locale("Dec 31, 1969");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((-115259999L), chronology19, locale29);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("it-IT");
        java.lang.String str33 = locale29.getDisplayVariant(locale32);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-121) + "'", int24 == (-121));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 385L + "'", long26 == 385L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals(locale29.toString(), "dec 31, 1969");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test19201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19201");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.joda.time.DurationField durationField19 = chronology15.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology15.getZone();
        long long23 = dateTimeZone20.adjustOffset((-115200001L), true);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-115200001L) + "'", long23 == (-115200001L));
    }

    @Test
    public void test19202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19202");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology9 = dateTimeFormatter0.getChronolgy();
        org.joda.time.LocalDate localDate11 = dateTimeFormatter0.parseLocalDate("69-12-31");
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        int int14 = localDate11.getValue(1);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale19, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.hourOfHalfday();
        org.joda.time.DurationField durationField29 = chronology24.minutes();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("zh-CN");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology24, locale31, (java.lang.Integer) 40, 10);
        org.joda.time.DateTimeField dateTimeField35 = chronology24.yearOfCentury();
        java.lang.String str36 = chronology24.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter37.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getName((long) 2000);
        boolean boolean42 = dateTimeZone39.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter37.withZone(dateTimeZone39);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter37.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology46 = dateTimeFormatter37.getChronolgy();
        org.joda.time.LocalDate localDate48 = dateTimeFormatter37.parseLocalDate("69-12-31");
        java.lang.String str49 = localDate48.toString();
        long long51 = chronology24.set((org.joda.time.ReadablePartial) localDate48, 2040L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean53 = dateTimeFormatter52.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter52.withPivotYear(2000);
        org.joda.time.format.DateTimeParser dateTimeParser56 = dateTimeFormatter55.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter57.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getName((long) 2000);
        boolean boolean62 = dateTimeZone59.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter57.withZone(dateTimeZone59);
        org.joda.time.format.DateTimeParser dateTimeParser64 = dateTimeFormatter57.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter65 = dateTimeFormatter57.getPrinter();
        org.joda.time.Chronology chronology66 = dateTimeFormatter57.getChronolgy();
        org.joda.time.LocalDate localDate68 = dateTimeFormatter57.parseLocalDate("69-12-31");
        java.lang.String str69 = localDate68.toString();
        int int70 = localDate68.size();
        java.lang.String str71 = dateTimeFormatter55.print((org.joda.time.ReadablePartial) localDate68);
        int int72 = localDate48.compareTo((org.joda.time.ReadablePartial) localDate68);
        int int73 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate68);
        java.lang.String str74 = localDate11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType76 = localDate11.getFieldType((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 117");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeParser44);
        org.junit.Assert.assertNotNull(dateTimePrinter45);
        org.junit.Assert.assertNull(chronology46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1969-12-31" + "'", str49, "1969-12-31");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-86397960L) + "'", long51 == (-86397960L));
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeParser56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeParser64);
        org.junit.Assert.assertNotNull(dateTimePrinter65);
        org.junit.Assert.assertNull(chronology66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1969-12-31" + "'", str69, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u4e09" + "'", str71, "\u5e74\u6708\u65e5\u661f\u671f\u4e09");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1969-12-31" + "'", str74, "1969-12-31");
    }

    @Test
    public void test19203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19203");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getName((long) 2000);
        boolean boolean17 = dateTimeZone14.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter12.withZone(dateTimeZone14);
        org.joda.time.Chronology chronology19 = chronology8.withZone(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = chronology19.add(readablePeriod20, (long) (short) -1, 10);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.minuteOfHour();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test19204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19204");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u5951\u7dad\u6587", (double) 3635298703180800010L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=3.6352987031808E18");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19205");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 1);
        long long5 = dateTimeZone1.convertLocalToUTC((-17L), true, (long) 13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3600017L) + "'", long5 == (-3600017L));
    }

    @Test
    public void test19206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19206");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField14 = chronology9.days();
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology9.hours();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test19207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19207");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(4, (-117120001));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -117120001");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19208");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology9 = chronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology9.getZone();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfMinute();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test19209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19209");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        java.util.Locale locale16 = new java.util.Locale("Japanisch", "utc_1/1/70_it", "TWN");
        java.lang.String str17 = locale16.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((-1900L), chronology9, locale16);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        java.util.Locale locale20 = dateTimeParserBucket18.getLocale();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals(locale16.toString(), "japanisch_UTC_1/1/70_IT_TWN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "TWN" + "'", str17, "TWN");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "japanisch_UTC_1/1/70_IT_TWN");
    }

    @Test
    public void test19210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19210");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        long long15 = dateTimeParserBucket13.computeMillis(false);
        java.lang.Integer int16 = dateTimeParserBucket13.getOffsetInteger();
        int int17 = dateTimeParserBucket13.getOffset();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket13.getZone();
        long long20 = dateTimeZone18.nextTransition((long) (-121));
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale25 = new java.util.Locale("hi!");
        java.lang.String str26 = locale25.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale25, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.halfdayOfDay();
        long long38 = chronology30.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField39 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology30.monthOfYear();
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale46, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        java.util.Locale locale53 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale53, (java.lang.Integer) 10);
        java.util.Locale.setDefault(category41, locale53);
        java.util.Locale locale57 = java.util.Locale.getDefault(category41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology30, locale57, (java.lang.Integer) 2000, (int) ' ');
        dateTimeParserBucket60.setPivotYear((java.lang.Integer) 2000);
        long long64 = dateTimeParserBucket60.computeMillis(true);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale69 = new java.util.Locale("hi!");
        java.lang.String str70 = locale69.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale69, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology74 = dateTimeParserBucket73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.days();
        org.joda.time.DurationField durationField76 = chronology74.weekyears();
        java.util.Locale locale78 = new java.util.Locale("");
        java.util.Locale locale80 = new java.util.Locale("hi!");
        java.lang.String str81 = locale80.getDisplayCountry();
        java.lang.String str82 = locale80.getISO3Language();
        java.lang.String str83 = locale80.getISO3Country();
        java.lang.String str84 = locale80.getVariant();
        java.lang.String str85 = locale80.getISO3Country();
        java.lang.String str86 = locale80.getDisplayVariant();
        java.lang.String str87 = locale78.getDisplayScript(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) ' ', chronology74, locale80);
        org.joda.time.DateTimeZone dateTimeZone89 = chronology74.getZone();
        dateTimeParserBucket60.setZone(dateTimeZone89);
        long long92 = dateTimeZone18.getMillisKeepLocal(dateTimeZone89, 581152458846840069L);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-121L) + "'", long20 == (-121L));
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals(locale53.toString(), "eng");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "eng");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertEquals(locale69.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals(locale80.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 581152458846840069L + "'", long92 == 581152458846840069L);
    }

    @Test
    public void test19211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19211");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.millisOfDay();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology10, locale18, (java.lang.Integer) 2000);
        org.joda.time.DateTimeField dateTimeField21 = chronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.minuteOfHour();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale28 = new java.util.Locale("hi!");
        java.lang.String str29 = locale28.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale28, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        java.util.Locale locale35 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale35, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField38 = chronology33.weekyearOfCentury();
        org.joda.time.DurationField durationField39 = chronology33.months();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = locale43.toLanguageTag();
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getDisplayCountry();
        java.lang.String str48 = locale46.toLanguageTag();
        java.lang.String str49 = locale43.getDisplayName(locale46);
        java.lang.String str50 = locale41.getDisplayCountry(locale46);
        java.lang.String str51 = locale40.getDisplayScript(locale41);
        java.util.Locale.Category category52 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale53 = java.util.Locale.getDefault(category52);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.lang.String str56 = locale40.getDisplayName(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 2000, chronology33, locale40, (java.lang.Integer) 0, (int) 'x');
        java.util.Locale locale63 = new java.util.Locale("UTC", "1/1/70", "it");
        java.lang.String str64 = locale63.getCountry();
        java.util.Locale locale66 = new java.util.Locale("eng");
        java.util.Locale locale67 = locale66.stripExtensions();
        java.lang.String str68 = locale66.getDisplayCountry();
        java.lang.String str69 = locale63.getDisplayScript(locale66);
        java.lang.String str70 = locale40.getDisplayName(locale66);
        java.lang.String str71 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology10, locale40, (java.lang.Integer) (-1970), (int) '#');
        org.joda.time.DateTimeField dateTimeField75 = chronology10.halfdayOfDay();
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertEquals(locale35.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh-CN" + "'", str44, "zh-CN");
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "und" + "'", str48, "und");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (China)" + "'", str49, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "China" + "'", str50, "China");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + category52 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category52.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str56, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertEquals(locale63.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1/1/70" + "'", str64, "1/1/70");
        org.junit.Assert.assertEquals(locale66.toString(), "eng");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinese (China)" + "'", str70, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "CHN" + "'", str71, "CHN");
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test19212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19212");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        java.util.Locale locale12 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale12, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology10.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology10.add(readablePeriod19, 1L, 0);
        org.joda.time.DateTimeZone dateTimeZone23 = chronology10.getZone();
        org.joda.time.DateTimeField dateTimeField24 = chronology10.secondOfDay();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("jpn");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(40L, chronology10, locale26, (java.lang.Integer) (-33));
        java.lang.Integer int29 = dateTimeParserBucket28.getOffsetInteger();
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals(locale12.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "jpn");
        org.junit.Assert.assertNull(int29);
    }

    @Test
    public void test19213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19213");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) -1);
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone6.adjustOffset((long) 0, true);
        java.lang.String str11 = dateTimeZone6.getNameKey((long) (-1));
        boolean boolean12 = dateTimeZone6.isFixed();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str21 = locale14.getDisplayCountry(locale17);
        java.lang.String str22 = dateTimeZone6.getName((long) (short) 100, locale14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withDefaultYear(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.util.Locale locale29 = locale27.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withLocale(locale29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter32.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean36 = dateTimeFormatter35.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter35.withPivotYear(2000);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter35.withLocale(locale39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withPivotYear(0);
        java.lang.Integer int43 = dateTimeFormatter40.getPivotYear();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale47 = new java.util.Locale("hi!");
        java.lang.String str48 = locale47.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale47, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology52 = dateTimeParserBucket51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.weekyear();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = chronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        long long63 = chronology52.add(readablePeriod60, 493259999L, (-121));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter40.withChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField65 = chronology52.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter34.withChronology(chronology52);
        boolean boolean67 = dateTimeFormatter34.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate69 = dateTimeFormatter34.parseLocalDate("java.io.ioexception: java.io.ioexception: utc-x-lvariant-it (-02:00,zh,TW)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 493259999L + "'", long63 == 493259999L);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test19214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19214");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) (-1));
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter3.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter3.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test19215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19215");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        boolean boolean2 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear((int) (byte) -1);
        java.lang.Appendable appendable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(appendable9, 187200100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test19216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19216");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.halfdayOfDay();
        long long17 = chronology9.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.monthOfYear();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale25 = new java.util.Locale("hi!");
        java.lang.String str26 = locale25.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale25, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        java.util.Locale locale32 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale32, (java.lang.Integer) 10);
        java.util.Locale.setDefault(category20, locale32);
        java.util.Locale locale36 = java.util.Locale.getDefault(category20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology9, locale36, (java.lang.Integer) 2000, (int) ' ');
        dateTimeParserBucket39.setPivotYear((java.lang.Integer) 2000);
        long long43 = dateTimeParserBucket39.computeMillis(true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter44.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter44.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter47.withChronology(chronology48);
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = dateTimeFormatter49.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser51 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter50, dateTimeParser51);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.lang.String str57 = locale56.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale56, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.weekyear();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter52.withChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField65 = chronology61.centuryOfEra();
        dateTimeParserBucket39.saveField(dateTimeField65, (int) (short) 0);
        dateTimeParserBucket39.setOffset((int) (byte) 100);
        int int70 = dateTimeParserBucket39.getOffset();
        long long71 = dateTimeParserBucket39.computeMillis();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals(locale32.toString(), "eng");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "eng");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimePrinter50);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-59958144000101L) + "'", long71 == (-59958144000101L));
    }

    @Test
    public void test19217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19217");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        java.util.Locale locale12 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale12, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.DurationField durationField16 = chronology10.months();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.lang.String str21 = locale20.toLanguageTag();
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getDisplayCountry();
        java.lang.String str25 = locale23.toLanguageTag();
        java.lang.String str26 = locale20.getDisplayName(locale23);
        java.lang.String str27 = locale18.getDisplayCountry(locale23);
        java.lang.String str28 = locale17.getDisplayScript(locale18);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.getDefault(category29);
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale17.getDisplayName(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 2000, chronology10, locale17, (java.lang.Integer) 0, (int) 'x');
        java.util.Locale locale40 = new java.util.Locale("UTC", "1/1/70", "it");
        java.lang.String str41 = locale40.getCountry();
        java.util.Locale locale43 = new java.util.Locale("eng");
        java.util.Locale locale44 = locale43.stripExtensions();
        java.lang.String str45 = locale43.getDisplayCountry();
        java.lang.String str46 = locale40.getDisplayScript(locale43);
        java.lang.String str47 = locale17.getDisplayName(locale43);
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale17.getDisplayName(locale50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        long long57 = dateTimeZone54.adjustOffset((long) 0, true);
        java.lang.String str59 = dateTimeZone54.getNameKey((long) (-1));
        java.lang.String str61 = dateTimeZone54.getNameKey((long) 0);
        boolean boolean63 = dateTimeZone54.isStandardOffset((long) ' ');
        java.lang.String str64 = dateTimeZone54.getID();
        java.util.Locale locale66 = new java.util.Locale("hi!");
        boolean boolean67 = dateTimeZone54.equals((java.lang.Object) locale66);
        java.lang.String str68 = locale66.getScript();
        java.lang.String str69 = locale66.getScript();
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet71 = locale70.getExtensionKeys();
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.lang.String str73 = locale72.toLanguageTag();
        java.util.Locale locale75 = new java.util.Locale("hi!");
        java.lang.String str76 = locale75.getDisplayCountry();
        java.lang.String str77 = locale75.toLanguageTag();
        java.lang.String str78 = locale72.getDisplayName(locale75);
        java.lang.String str79 = locale70.getDisplayCountry(locale75);
        java.lang.String str80 = locale66.getDisplayCountry(locale75);
        java.util.Locale locale84 = new java.util.Locale("UTC", "1/1/70", "it");
        java.lang.String str85 = locale84.toLanguageTag();
        java.lang.String str86 = locale66.getDisplayScript(locale84);
        java.util.Set<java.lang.String> strSet87 = locale66.getUnicodeLocaleKeys();
        java.lang.String str88 = locale66.getCountry();
        java.lang.String str89 = locale17.getDisplayCountry(locale66);
        java.util.Locale locale92 = new java.util.Locale("", "java.io.IOException: 01.01.70");
        java.lang.String str93 = locale66.getDisplayVariant(locale92);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals(locale12.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-CN" + "'", str21, "zh-CN");
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "und" + "'", str25, "und");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Chinese (China)" + "'", str26, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "China" + "'", str27, "China");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str33, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertEquals(locale40.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1/1/70" + "'", str41, "1/1/70");
        org.junit.Assert.assertEquals(locale43.toString(), "eng");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese (China)" + "'", str47, "Chinese (China)");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category48.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str53, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zh-CN" + "'", str73, "zh-CN");
        org.junit.Assert.assertEquals(locale75.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "und" + "'", str77, "und");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Chinese (China)" + "'", str78, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "China" + "'", str79, "China");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals(locale84.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "utc-x-lvariant-it" + "'", str85, "utc-x-lvariant-it");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "China" + "'", str89, "China");
        org.junit.Assert.assertEquals(locale92.toString(), "_JAVA.IO.IOEXCEPTION: 01.01.70");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test19218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19218");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter8.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withPivotYear((int) (short) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter22.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter22.withDefaultYear((-115200001));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter22.withPivotYear((java.lang.Integer) 117);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale33 = new java.util.Locale("hi!");
        java.lang.String str34 = locale33.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale33, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.weekOfWeekyear();
        org.joda.time.DurationField durationField43 = chronology38.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter22.withChronology(chronology38);
        org.joda.time.DurationField durationField45 = chronology38.eras();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimePrinter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test19219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19219");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.halfdayOfDay();
        long long16 = chronology8.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField17 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.millisOfSecond();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test19220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19220");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u4e2d\u6587\u4e2d\u570b)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.io.ioexception: java.io.ioexception: ?? (??)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19221");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        boolean boolean8 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withChronology(chronology9);
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter5.getParser();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        long long15 = dateTimeZone12.adjustOffset((long) 0, true);
        java.lang.String str16 = dateTimeZone12.toString();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('a', "en-US");
        java.util.Locale.Builder builder23 = builder21.setVariant("");
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale.Builder builder28 = builder24.setExtension('a', "it");
        java.util.Locale locale29 = builder28.build();
        java.lang.String str30 = dateTimeZone12.getShortName((long) (short) 1, locale29);
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.lang.String str32 = locale29.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter5.withLocale(locale29);
        boolean boolean34 = dateTimeFormatter5.isParser();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale39 = new java.util.Locale("hi!");
        java.lang.String str40 = locale39.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale39, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        java.util.Locale locale46 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale46, (java.lang.Integer) 10);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        long long52 = chronology44.add(readablePeriod49, (long) '#', (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField53 = chronology44.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology44.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter5.withChronology(chronology44);
        org.joda.time.DurationField durationField56 = chronology44.weeks();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals(locale46.toString(), "eng");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35L + "'", long52 == 35L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test19222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19222");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.convertLocalToUTC((-1L), true, (long) (byte) 100);
        java.lang.String str6 = dateTimeZone0.getShortName((long) (byte) 1);
        long long10 = dateTimeZone0.convertLocalToUTC(971L, false, (-117119900L));
        long long14 = dateTimeZone0.convertLocalToUTC((-62111231999989L), false, (long) 'a');
        boolean boolean16 = dateTimeZone0.isStandardOffset(32L);
        long long19 = dateTimeZone0.adjustOffset((long) (-118), false);
        int int21 = dateTimeZone0.getStandardOffset(120L);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone0.isLocalDateTimeGap(localDateTime22);
        boolean boolean25 = dateTimeZone0.isStandardOffset(349799999L);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale30 = new java.util.Locale("hi!");
        java.lang.String str31 = locale30.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale30, (java.lang.Integer) 10, (int) 'a');
        java.lang.String str35 = locale30.getLanguage();
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.getDefault(category36);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale38.toLanguageTag();
        java.lang.String str41 = locale30.getDisplayCountry(locale38);
        boolean boolean42 = locale30.hasExtensions();
        java.lang.String str43 = dateTimeZone0.getName((-187199883L), locale30);
        boolean boolean44 = dateTimeZone0.isFixed();
        java.lang.String str46 = dateTimeZone0.getShortName((long) 1969);
        java.lang.String str47 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 971L + "'", long10 == 971L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62111231999989L) + "'", long14 == (-62111231999989L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-118L) + "'", long19 == (-118L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category36.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh-TW" + "'", str40, "zh-TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
    }

    @Test
    public void test19223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19223");
        java.io.IOException iOException2 = new java.io.IOException("en-US");
        java.io.IOException iOException4 = new java.io.IOException("hi!");
        java.io.IOException iOException5 = new java.io.IOException();
        java.io.IOException iOException6 = new java.io.IOException();
        iOException5.addSuppressed((java.lang.Throwable) iOException6);
        iOException4.addSuppressed((java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray9 = iOException6.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException12 = new java.io.IOException("en-US");
        java.io.IOException iOException14 = new java.io.IOException("hi!");
        java.io.IOException iOException15 = new java.io.IOException();
        java.io.IOException iOException16 = new java.io.IOException();
        iOException15.addSuppressed((java.lang.Throwable) iOException16);
        iOException14.addSuppressed((java.lang.Throwable) iOException16);
        java.lang.Throwable[] throwableArray19 = iOException16.getSuppressed();
        iOException12.addSuppressed((java.lang.Throwable) iOException16);
        java.io.IOException iOException22 = new java.io.IOException("hi!");
        java.io.IOException iOException23 = new java.io.IOException();
        java.io.IOException iOException24 = new java.io.IOException();
        iOException23.addSuppressed((java.lang.Throwable) iOException24);
        iOException22.addSuppressed((java.lang.Throwable) iOException24);
        iOException16.addSuppressed((java.lang.Throwable) iOException22);
        java.io.IOException iOException29 = new java.io.IOException("fr");
        iOException22.addSuppressed((java.lang.Throwable) iOException29);
        iOException6.addSuppressed((java.lang.Throwable) iOException22);
        java.io.IOException iOException32 = new java.io.IOException("und-a-it", (java.lang.Throwable) iOException22);
        java.lang.String str33 = iOException32.toString();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.io.IOException: und-a-it" + "'", str33, "java.io.IOException: und-a-it");
    }

    @Test
    public void test19224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19224");
        java.util.Locale locale3 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "\u82f1\u6587", "+00:00:00.117");
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale8, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.DurationField durationField15 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone17.adjustOffset((long) 0, true);
        java.lang.String str22 = dateTimeZone17.getNameKey((long) (-1));
        boolean boolean23 = dateTimeZone17.isFixed();
        int int25 = dateTimeZone17.getOffset((long) (short) 0);
        long long28 = dateTimeZone17.convertLocalToUTC(0L, true);
        long long31 = dateTimeZone17.adjustOffset((long) (short) 1, true);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        long long35 = dateTimeZone32.adjustOffset((long) 0, true);
        java.util.TimeZone timeZone36 = dateTimeZone32.toTimeZone();
        int int38 = dateTimeZone32.getOffsetFromLocal(100L);
        long long40 = dateTimeZone32.nextTransition((long) ' ');
        long long42 = dateTimeZone17.getMillisKeepLocal(dateTimeZone32, (long) 40);
        long long44 = dateTimeZone17.previousTransition((long) 100);
        org.joda.time.Chronology chronology45 = chronology13.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField46 = chronology13.years();
        org.joda.time.DurationField durationField47 = chronology13.seconds();
        org.joda.time.DurationField durationField48 = chronology13.centuries();
        org.joda.time.DateTimeField dateTimeField49 = chronology13.weekyearOfCentury();
        java.util.Locale locale51 = new java.util.Locale("United States");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(581152458846840069L, chronology13, locale51, (java.lang.Integer) (-98));
        java.lang.String str54 = locale51.toLanguageTag();
        java.lang.String str55 = locale3.getDisplayName(locale51);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587\u4e2d\u56fd\u82f1\u6587_+00:00:00.117");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 40L + "'", long42 == 40L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals(locale51.toString(), "united states");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "und" + "'", str54, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd\u82f1\u6587,+00:00:00.117)" + "'", str55, "\u4e2d\u6587\u4e2d\u56fd\u82f1\u6587,+00:00:00.117)");
    }

    @Test
    public void test19225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19225");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("+00:00");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withZone(dateTimeZone3);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter4.getPrinter();
        java.lang.StringBuffer stringBuffer6 = null;
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale11 = new java.util.Locale("hi!");
        java.lang.String str12 = locale11.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale11, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.year();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.era();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.dayOfYear();
        org.joda.time.DurationField durationField23 = chronology16.years();
        org.joda.time.Chronology chronology24 = chronology16.withUTC();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology24.add(readablePeriod25, (long) 40, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology24.hourOfDay();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale37 = new java.util.Locale("hi!");
        java.lang.String str38 = locale37.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale37, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.days();
        long long47 = chronology42.add((long) 1, 100L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = chronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.minuteOfDay();
        org.joda.time.DurationField durationField50 = chronology42.seconds();
        java.util.Locale locale54 = new java.util.Locale("English (United States)", "und", "en-US");
        java.lang.String str55 = locale54.getDisplayName();
        java.lang.String str56 = locale54.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, chronology42, locale54, (java.lang.Integer) 0, (int) '4');
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale63 = new java.util.Locale("hi!");
        java.lang.String str64 = locale63.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology61, locale63, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology68 = dateTimeParserBucket67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.weekyear();
        org.joda.time.DurationField durationField70 = chronology68.years();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        long long74 = dateTimeZone71.adjustOffset((long) 0, true);
        java.lang.String str76 = dateTimeZone71.getNameKey((long) (-1));
        boolean boolean77 = dateTimeZone71.isFixed();
        int int79 = dateTimeZone71.getOffset((long) (short) 0);
        long long82 = dateTimeZone71.convertLocalToUTC(0L, true);
        long long85 = dateTimeZone71.convertLocalToUTC((long) 'u', false);
        long long87 = dateTimeZone71.previousTransition((long) (short) -1);
        java.lang.String str89 = dateTimeZone71.getNameKey((long) (byte) 1);
        org.joda.time.Chronology chronology90 = chronology68.withZone(dateTimeZone71);
        java.lang.String str91 = dateTimeZone71.getID();
        dateTimeParserBucket59.setZone(dateTimeZone71);
        long long94 = dateTimeZone71.nextTransition((long) 31);
        java.util.Locale locale95 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet96 = locale95.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter5.printTo(stringBuffer6, 3396239L, chronology24, (-14), dateTimeZone71, locale95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 40L + "'", long28 == 40L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-99L) + "'", long47 == (-99L));
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertEquals(locale54.toString(), "english (united states)_UND_en-US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "english (united states) (UND,en-US)" + "'", str55, "english (united states) (UND,en-US)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals(locale63.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "UTC" + "'", str76, "UTC");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 117L + "'", long85 == 117L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "UTC" + "'", str89, "UTC");
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "UTC" + "'", str91, "UTC");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 31L + "'", long94 == 31L);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet96);
    }

    @Test
    public void test19226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19226");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology9 = dateTimeFormatter0.getChronolgy();
        org.joda.time.LocalDate localDate11 = dateTimeFormatter0.parseLocalDate("69-12-31");
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        int int14 = localDate11.getValue(1);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale19, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.hourOfHalfday();
        org.joda.time.DurationField durationField29 = chronology24.minutes();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("zh-CN");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology24, locale31, (java.lang.Integer) 40, 10);
        org.joda.time.DateTimeField dateTimeField35 = chronology24.yearOfCentury();
        java.lang.String str36 = chronology24.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter37.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getName((long) 2000);
        boolean boolean42 = dateTimeZone39.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter37.withZone(dateTimeZone39);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter37.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = dateTimeFormatter37.getPrinter();
        org.joda.time.Chronology chronology46 = dateTimeFormatter37.getChronolgy();
        org.joda.time.LocalDate localDate48 = dateTimeFormatter37.parseLocalDate("69-12-31");
        java.lang.String str49 = localDate48.toString();
        long long51 = chronology24.set((org.joda.time.ReadablePartial) localDate48, 2040L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean53 = dateTimeFormatter52.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter52.withPivotYear(2000);
        org.joda.time.format.DateTimeParser dateTimeParser56 = dateTimeFormatter55.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter57.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getName((long) 2000);
        boolean boolean62 = dateTimeZone59.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter57.withZone(dateTimeZone59);
        org.joda.time.format.DateTimeParser dateTimeParser64 = dateTimeFormatter57.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter65 = dateTimeFormatter57.getPrinter();
        org.joda.time.Chronology chronology66 = dateTimeFormatter57.getChronolgy();
        org.joda.time.LocalDate localDate68 = dateTimeFormatter57.parseLocalDate("69-12-31");
        java.lang.String str69 = localDate68.toString();
        int int70 = localDate68.size();
        java.lang.String str71 = dateTimeFormatter55.print((org.joda.time.ReadablePartial) localDate68);
        int int72 = localDate48.compareTo((org.joda.time.ReadablePartial) localDate68);
        int int73 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate68);
        org.joda.time.DateTimeField dateTimeField75 = localDate11.getField((int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField77 = localDate11.getField(0);
        java.lang.String str78 = localDate11.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeParser44);
        org.junit.Assert.assertNotNull(dateTimePrinter45);
        org.junit.Assert.assertNull(chronology46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1969-12-31" + "'", str49, "1969-12-31");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-86397960L) + "'", long51 == (-86397960L));
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeParser56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeParser64);
        org.junit.Assert.assertNotNull(dateTimePrinter65);
        org.junit.Assert.assertNull(chronology66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1969-12-31" + "'", str69, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u4e09" + "'", str71, "\u5e74\u6708\u65e5\u661f\u671f\u4e09");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1969-12-31" + "'", str78, "1969-12-31");
    }

    @Test
    public void test19227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19227");
        java.util.Locale locale3 = new java.util.Locale("7/11/32", "taiwan", "");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "7/11/32_TAIWAN");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test19228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19228");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter5.getZone();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withLocale(locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter5.getZone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter5.withChronology(chronology12);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale18 = new java.util.Locale("hi!");
        java.lang.String str19 = locale18.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale18, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        java.util.Locale locale25 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale25, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology23.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology23.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = chronology23.add(readablePeriod33, (long) 2000, 2000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter13.withChronology(chronology23);
        boolean boolean38 = dateTimeFormatter13.isPrinter();
        java.lang.String str40 = dateTimeFormatter13.print((-346200000L));
        java.util.Locale locale41 = dateTimeFormatter13.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals(locale25.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2000L + "'", long36 == 2000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "69-12-27" + "'", str40, "69-12-27");
        org.junit.Assert.assertNull(locale41);
    }

    @Test
    public void test19229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19229");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DurationField durationField13 = chronology8.halfdays();
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.DurationField durationField15 = chronology8.seconds();
        java.lang.String str16 = chronology8.toString();
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        java.lang.String str20 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.halfdayOfDay();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test19230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19230");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology9.add(readablePeriod18, 1L, 0);
        org.joda.time.DateTimeField dateTimeField22 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField24 = chronology9.years();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test19231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19231");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.lang.String str3 = locale1.getISO3Language();
        java.lang.String str4 = locale1.getISO3Country();
        java.lang.String str5 = locale1.getVariant();
        java.lang.String str6 = locale1.getISO3Country();
        java.lang.String str7 = locale1.getDisplayVariant();
        java.lang.String str9 = locale1.getExtension('a');
        java.util.Set<java.lang.Character> charSet10 = locale1.getExtensionKeys();
        java.lang.String str11 = locale1.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test19232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19232");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeParser dateTimeParser1 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 100);
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.secondOfDay();
        org.joda.time.Chronology chronology23 = chronology17.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withChronology(chronology23);
        java.util.Locale locale25 = dateTimeFormatter24.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime27 = dateTimeFormatter24.parseLocalTime("utc (1/1/70,it)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"utc (1/1/70,it)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeParser1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(locale25);
    }

    @Test
    public void test19233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19233");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("+00:00");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str6 = dateTimeZone4.getName((long) 2000);
        boolean boolean7 = dateTimeZone4.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronolgy();
        org.joda.time.LocalDate localDate13 = dateTimeFormatter2.parseLocalDate("69-12-31");
        java.lang.String str14 = localDate13.toString();
        int int15 = localDate13.size();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale20, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        java.util.Locale locale27 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale27, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekyearOfCentury();
        org.joda.time.DurationField durationField31 = chronology25.months();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.weekyearOfCentury();
        boolean boolean33 = localDate13.equals((java.lang.Object) dateTimeField32);
        java.lang.String str34 = dateTimeFormatter1.print((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = dateTimeFormatter1.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter36.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter36.getParser();
        int int39 = dateTimeParser38.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter41.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter41.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter44.withChronology(chronology45);
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = dateTimeFormatter46.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale53 = new java.util.Locale("hi!");
        java.lang.String str54 = locale53.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale53, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter49.withChronology(chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter61.withZoneUTC();
        java.util.Locale locale63 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale64 = locale63.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter61.withLocale(locale64);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeFormatter65.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter65.withZoneUTC();
        int int68 = dateTimeFormatter67.getDefaultYear();
        java.util.Locale locale70 = new java.util.Locale("english (united states)");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter67.withLocale(locale70);
        org.joda.time.format.DateTimePrinter dateTimePrinter72 = dateTimeFormatter67.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean74 = dateTimeFormatter73.isOffsetParsed();
        java.lang.Integer int75 = dateTimeFormatter73.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser76 = dateTimeFormatter73.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter72, dateTimeParser76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser76);
        java.lang.StringBuffer stringBuffer79 = null;
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        int int86 = dateTimeZone84.getOffset((-726364930898040000L));
        java.util.Locale locale87 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet88 = locale87.getExtensionKeys();
        java.util.Locale locale89 = locale87.stripExtensions();
        java.lang.String str90 = locale89.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter35.printTo(stringBuffer79, 0L, chronology81, 115200000, dateTimeZone84, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimePrinter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1969-12-31" + "'", str14, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals(locale27.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(dateTimePrinter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeParser38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 40 + "'", int39 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimePrinter47);
        org.junit.Assert.assertEquals(locale53.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2000 + "'", int68 == 2000);
        org.junit.Assert.assertEquals(locale70.toString(), "english (united states)");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimePrinter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(dateTimeParser76);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 187200000 + "'", int86 == 187200000);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u4e2d\u56fd" + "'", str90, "\u4e2d\u56fd");
    }

    @Test
    public void test19234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19234");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        java.util.Locale locale13 = new java.util.Locale("");
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale15.getISO3Country();
        java.lang.String str19 = locale15.getVariant();
        java.lang.String str20 = locale15.getISO3Country();
        java.lang.String str21 = locale15.getDisplayVariant();
        java.lang.String str22 = locale13.getDisplayScript(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) ' ', chronology9, locale15);
        long long25 = dateTimeParserBucket23.computeMillis(false);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale30 = new java.util.Locale("hi!");
        java.lang.String str31 = locale30.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale30, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        java.util.Locale locale37 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale37, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.weekyearOfCentury();
        org.joda.time.DurationField durationField41 = chronology35.months();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology35.monthOfYear();
        dateTimeParserBucket23.saveField(dateTimeField44, (-11));
        java.lang.Integer int47 = dateTimeParserBucket23.getOffsetInteger();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertEquals(locale37.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNull(int47);
    }

    @Test
    public void test19235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19235");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("\u6642\u5206\u79d2 +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 0?00?00? +00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19236");
        java.util.Locale locale3 = new java.util.Locale("\u5e74\u6708\u65e5\u661f\u671f\u56db\u4e0a\u5348\u65f6\u5206\u79d2 +00:00", "usa", "11.02.22");
        java.lang.String str4 = locale3.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withChronology(chronology10);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter11.getPrinter();
        boolean boolean13 = dateTimeFormatter11.isOffsetParsed();
        int int14 = dateTimeFormatter11.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter11.getZone();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale19, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DurationField durationField26 = chronology24.weekyears();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter11.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology24.clockhourOfHalfday();
        java.util.Locale locale36 = new java.util.Locale("+10:00", "java.io.IOException: en-US", "+00:00");
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale40.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale40, (java.lang.Integer) 10, (int) 'a');
        int int45 = dateTimeParserBucket44.getOffset();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket44.getZone();
        long long49 = dateTimeZone46.adjustOffset((-1L), true);
        long long52 = dateTimeZone46.adjustOffset((long) 'a', true);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet58 = locale57.getExtensionKeys();
        java.util.Locale locale59 = java.util.Locale.getDefault();
        java.lang.String str60 = locale59.toLanguageTag();
        java.util.Locale locale62 = new java.util.Locale("hi!");
        java.lang.String str63 = locale62.getDisplayCountry();
        java.lang.String str64 = locale62.toLanguageTag();
        java.lang.String str65 = locale59.getDisplayName(locale62);
        java.lang.String str66 = locale57.getDisplayCountry(locale62);
        java.lang.String str67 = locale62.getScript();
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.lang.String str72 = locale71.toLanguageTag();
        java.util.Locale locale74 = new java.util.Locale("hi!");
        java.lang.String str75 = locale74.getDisplayCountry();
        java.lang.String str76 = locale74.toLanguageTag();
        java.lang.String str77 = locale71.getDisplayName(locale74);
        java.lang.String str78 = locale69.getDisplayCountry(locale74);
        java.lang.String str79 = locale68.getDisplayScript(locale69);
        java.util.Locale.Category category80 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale81 = java.util.Locale.getDefault(category80);
        java.util.Locale locale82 = java.util.Locale.TAIWAN;
        java.lang.String str83 = locale81.getDisplayVariant(locale82);
        java.lang.String str84 = locale68.getDisplayName(locale82);
        java.lang.String str85 = locale62.getDisplayScript(locale68);
        java.lang.String str86 = dateTimeZone55.getName((long) 'x', locale68);
        java.lang.String str87 = dateTimeZone46.getName(3600000L, locale68);
        java.lang.String str88 = locale36.getDisplayCountry(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, chronology24, locale68, (java.lang.Integer) (-36), (int) (short) -1);
        java.lang.String str92 = locale3.getDisplayScript(locale68);
        java.lang.String str93 = locale3.getVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "\u5e74\u6708\u65e5\u661f\u671f\u56db\u4e0a\u5348\u65f6\u5206\u79d2 +00:00_USA_11.02.22");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u56db\u4e0a\u5348\u65f6\u5206\u79d2 +00:00 (USA,11.02.22)" + "'", str4, "\u5e74\u6708\u65e5\u661f\u671f\u56db\u4e0a\u5348\u65f6\u5206\u79d2 +00:00 (USA,11.02.22)");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimePrinter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNull(dateTimeZone15);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals(locale36.toString(), "+10:00_JAVA.IO.IOEXCEPTION: EN-US_+00:00");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 97L + "'", long52 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zh-CN" + "'", str60, "zh-CN");
        org.junit.Assert.assertEquals(locale62.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "und" + "'", str64, "und");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Chinese (China)" + "'", str65, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "China" + "'", str66, "China");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zh-CN" + "'", str72, "zh-CN");
        org.junit.Assert.assertEquals(locale74.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "und" + "'", str76, "und");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Chinese (China)" + "'", str77, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "China" + "'", str78, "China");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + category80 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category80.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str84, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00:00.010" + "'", str86, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00" + "'", str87, "+00:00");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "JAVA.IO.IOEXCEPTION: EN-US" + "'", str88, "JAVA.IO.IOEXCEPTION: EN-US");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "11.02.22" + "'", str93, "11.02.22");
    }

    @Test
    public void test19237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19237");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("23:00:00");
        boolean boolean2 = dateTimeFormatter1.isOffsetParsed();
        boolean boolean3 = dateTimeFormatter1.isOffsetParsed();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale8, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale15 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale15, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField18 = chronology13.days();
        org.joda.time.Chronology chronology19 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter1.withChronology(chronology13);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale26 = new java.util.Locale("hi!");
        java.lang.String str27 = locale26.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale26, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        long long33 = dateTimeParserBucket30.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale38 = new java.util.Locale("hi!");
        java.lang.String str39 = locale38.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale38, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.days();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.year();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = chronology43.add(readablePeriod46, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField50 = chronology43.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField51 = chronology43.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField52 = chronology43.weekOfWeekyear();
        dateTimeParserBucket30.saveField(dateTimeField52, (-1));
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket30.getZone();
        long long58 = dateTimeZone55.adjustOffset((long) ' ', false);
        long long60 = dateTimeZone55.nextTransition((-117L));
        long long62 = dateTimeZone55.nextTransition(115258000L);
        org.joda.time.LocalDateTime localDateTime63 = null;
        boolean boolean64 = dateTimeZone55.isLocalDateTimeGap(localDateTime63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter1.withZone(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals(locale15.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 32L + "'", long58 == 32L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-117L) + "'", long60 == (-117L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 115258000L + "'", long62 == 115258000L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
    }

    @Test
    public void test19238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19238");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.halfdayOfDay();
        long long17 = chronology9.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.clockhourOfDay();
        org.joda.time.DurationField durationField19 = chronology9.months();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology9.getZone();
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getDisplayCountry();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale22.getDisplayVariant(locale25);
        java.util.Locale locale27 = locale22.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale22);
        java.lang.Integer int29 = dateTimeParserBucket28.getPivotYear();
        long long31 = dateTimeParserBucket28.computeMillis(false);
        long long34 = dateTimeParserBucket28.computeMillis(false, "\u4e2d\u6587\u4e2d\u56fd\u30c9\u30a4\u30c4)");
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket28.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket28.getZone();
        int int37 = dateTimeParserBucket28.getOffset();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test19239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19239");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        long long13 = chronology8.add((long) 1, 100L, (int) (byte) -1);
        org.joda.time.DurationField durationField14 = chronology8.millis();
        org.joda.time.DurationField durationField15 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.dayOfWeek();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-99L) + "'", long13 == (-99L));
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test19240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19240");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone15.adjustOffset((long) 0, true);
        java.lang.String str20 = dateTimeZone15.getNameKey((long) (-1));
        boolean boolean21 = dateTimeZone15.isFixed();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str30 = locale23.getDisplayCountry(locale26);
        java.lang.String str31 = dateTimeZone15.getName((long) (short) 100, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology9, locale23, (java.lang.Integer) 10, (int) '4');
        org.joda.time.DurationField durationField35 = chronology9.seconds();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology9.getZone();
        java.lang.String str38 = dateTimeZone36.getShortName((-126000001L));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
    }

    @Test
    public void test19241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19241");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter8.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField23 = chronology17.seconds();
        org.joda.time.Chronology chronology24 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.year();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test19242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19242");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        java.lang.String str9 = dateTimeFormatter7.print((long) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter10.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withChronology(chronology16);
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = dateTimeFormatter17.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withChronology(chronology23);
        java.util.Locale locale25 = dateTimeFormatter24.getLocale();
        boolean boolean26 = dateTimeFormatter24.isOffsetParsed();
        boolean boolean27 = dateTimeFormatter24.isOffsetParsed();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter24.withChronology(chronology28);
        org.joda.time.format.DateTimeParser dateTimeParser30 = dateTimeFormatter24.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser30);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale36 = new java.util.Locale("hi!");
        java.lang.String str37 = locale36.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale36, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.dayOfYear();
        org.joda.time.DurationField durationField48 = chronology41.years();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.minuteOfHour();
        org.joda.time.DurationField durationField50 = chronology41.days();
        java.util.Locale locale52 = new java.util.Locale("eng");
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str54 = locale52.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology41, locale52, (java.lang.Integer) (-41), (-1));
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale62 = new java.util.Locale("hi!");
        java.lang.String str63 = locale62.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale62, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology67 = dateTimeParserBucket66.getChronology();
        java.util.Locale locale69 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology67, locale69, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField72 = chronology67.days();
        org.joda.time.DurationField durationField73 = chronology67.halfdays();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.weekyear();
        org.joda.time.DateTimeField dateTimeField75 = chronology67.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField76 = chronology67.secondOfDay();
        dateTimeParserBucket57.saveField(dateTimeField76, (int) (short) -1);
        int int81 = dateTimeParser30.parseInto(dateTimeParserBucket57, "de", (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser30);
        int int83 = dateTimePrinter11.estimatePrintedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "70-1-1" + "'", str9, "70-1-1");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimePrinter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimePrinter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeParser30);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertEquals(locale52.toString(), "eng");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals(locale62.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertEquals(locale69.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-36) + "'", int81 == (-36));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 40 + "'", int83 == 40);
    }

    @Test
    public void test19243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19243");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.halfdayOfDay();
        long long17 = chronology9.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.clockhourOfDay();
        org.joda.time.DurationField durationField19 = chronology9.months();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology9.getZone();
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getDisplayCountry();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale22.getDisplayVariant(locale25);
        java.util.Locale locale27 = locale22.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale22);
        org.joda.time.DurationField durationField29 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology9.clockhourOfHalfday();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test19244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19244");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology8.add(readablePeriod11, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfSecond();
        org.joda.time.DurationField durationField17 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = chronology8.hours();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField21 = chronology8.yearOfEra();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test19245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19245");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology9 = chronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology9.getZone();
        long long12 = dateTimeZone10.previousTransition((-3659883L));
        int int14 = dateTimeZone10.getStandardOffset((-190800035L));
        java.lang.String str16 = dateTimeZone10.getShortName(0L);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3659883L) + "'", long12 == (-3659883L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test19246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19246");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("70-1-9");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '70-1-9' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19247");
        java.io.IOException iOException1 = new java.io.IOException("\u4e2d\u570b (UND-ENGLISH-A-IT,cinese (Taiwan))");
    }

    @Test
    public void test19248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19248");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withChronology(chronology10);
        int int12 = dateTimeFormatter9.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter9.getParser();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale19, (java.lang.Integer) 10, (int) 'a');
        long long26 = dateTimeParserBucket23.computeMillis(true, "hi!");
        org.joda.time.Chronology chronology27 = dateTimeParserBucket23.getChronology();
        int int30 = dateTimeParser15.parseInto(dateTimeParserBucket23, "\u82f1\u6587", 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter32.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter35.withChronology(chronology36);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter39.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter39.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter42.withChronology(chronology43);
        java.util.Locale locale45 = dateTimeFormatter44.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter46 = dateTimeFormatter44.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter47.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser49 = dateTimeFormatter47.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter46, dateTimeParser49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter51.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str55 = dateTimeZone53.getName((long) 2000);
        boolean boolean56 = dateTimeZone53.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter51.withZone(dateTimeZone53);
        org.joda.time.format.DateTimeParser dateTimeParser58 = dateTimeFormatter51.getParser();
        int int59 = dateTimeParser58.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter46, dateTimeParser58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser58);
        org.joda.time.format.DateTimeParser dateTimeParser62 = dateTimeFormatter61.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate65 = dateTimeFormatter63.parseLocalDate("java.io.ioexception");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.io.ioexception\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2000 + "'", int12 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeParser15);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertNotNull(dateTimePrinter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeParser49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeParser58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 40 + "'", int59 == 40);
        org.junit.Assert.assertNotNull(dateTimeParser62);
    }

    @Test
    public void test19249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19249");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ja");
        java.lang.String str2 = locale1.getISO3Language();
        java.lang.String str3 = locale1.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test19250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19250");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getName((long) 2000);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter7.getParser();
        int int15 = dateTimeParser14.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser14);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter16.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withPivotYear((java.lang.Integer) 40);
        java.util.Locale locale20 = dateTimeFormatter16.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withChronology(chronology25);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = dateTimeFormatter26.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter28.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getName((long) 2000);
        boolean boolean33 = dateTimeZone30.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter28.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatter28.getParser();
        int int36 = dateTimeParser35.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withDefaultYear(10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset((long) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter37.withZone(dateTimeZone42);
        java.lang.String str47 = dateTimeZone42.getShortName((-59105865540100L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter16.withZone(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimePrinter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeParser35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 40 + "'", int36 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
    }

    @Test
    public void test19251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19251");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long4 = dateTimeZone1.adjustOffset((long) 0, true);
        java.lang.String str6 = dateTimeZone1.getNameKey((long) (-1));
        boolean boolean7 = dateTimeZone1.isFixed();
        int int9 = dateTimeZone1.getOffset((long) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale13, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        boolean boolean21 = dateTimeZone1.equals((java.lang.Object) chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.monthOfYear();
        org.joda.time.DurationField durationField24 = chronology18.seconds();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder25.setExtension('a', "en-US");
        java.util.Locale.Builder builder30 = builder28.setVariant("");
        java.util.Locale.Builder builder31 = builder30.clear();
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder34 = builder31.setLocale(locale33);
        java.util.Locale.Builder builder35 = builder31.clearExtensions();
        java.util.Locale locale36 = builder35.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((-115254991L), chronology18, locale36);
        org.joda.time.DurationField durationField38 = chronology18.days();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test19252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19252");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DurationField durationField10 = chronology8.halfdays();
        org.joda.time.DurationField durationField11 = chronology8.years();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale16, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        java.util.Locale locale23 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale23, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Chronology chronology27 = chronology21.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = chronology27.getZone();
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale30);
        java.lang.String str32 = dateTimeZone28.getShortName((long) 'u', locale30);
        org.joda.time.Chronology chronology33 = chronology8.withZone(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter34.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getName((long) 2000);
        boolean boolean39 = dateTimeZone36.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter34.withZone(dateTimeZone36);
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatter34.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter34.getPrinter();
        org.joda.time.Chronology chronology43 = dateTimeFormatter34.getChronolgy();
        org.joda.time.LocalDate localDate45 = dateTimeFormatter34.parseLocalDate("69-12-31");
        int[] intArray47 = chronology8.get((org.joda.time.ReadablePartial) localDate45, (-33L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter48.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str52 = dateTimeZone50.getName((long) 2000);
        boolean boolean53 = dateTimeZone50.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter48.withZone(dateTimeZone50);
        org.joda.time.format.DateTimeParser dateTimeParser55 = dateTimeFormatter48.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter56 = dateTimeFormatter48.getPrinter();
        org.joda.time.Chronology chronology57 = dateTimeFormatter48.getChronolgy();
        org.joda.time.LocalDate localDate59 = dateTimeFormatter48.parseLocalDate("69-12-31");
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale64 = new java.util.Locale("hi!");
        java.lang.String str65 = locale64.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(0L, chronology62, locale64, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology69 = dateTimeParserBucket68.getChronology();
        java.util.Locale locale71 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology69, locale71, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField74 = chronology69.days();
        org.joda.time.DurationField durationField75 = chronology69.halfdays();
        long long79 = chronology69.add(0L, (long) (short) 0, (-1));
        org.joda.time.DateTimeField dateTimeField80 = chronology69.hourOfDay();
        boolean boolean81 = localDate59.equals((java.lang.Object) dateTimeField80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = localDate59.getFieldType((int) (byte) 1);
        boolean boolean84 = localDate45.isSupported(dateTimeFieldType83);
        org.joda.time.Chronology chronology85 = localDate45.getChronology();
        org.joda.time.Chronology chronology86 = localDate45.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField88 = localDate45.getField((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 117");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals(locale23.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeParser41);
        org.junit.Assert.assertNotNull(dateTimePrinter42);
        org.junit.Assert.assertNull(chronology43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1969, 12, 31]");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeParser55);
        org.junit.Assert.assertNotNull(dateTimePrinter56);
        org.junit.Assert.assertNull(chronology57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertEquals(locale64.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertEquals(locale71.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(chronology86);
    }

    @Test
    public void test19253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19253");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withZone(dateTimeZone5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter10.getParser();
        boolean boolean12 = dateTimeFormatter10.isOffsetParsed();
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        boolean boolean14 = dateTimeFormatter10.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeParser11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test19254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19254");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale.Builder builder10 = builder5.setLanguageTag("en-us");
        java.util.Locale.Builder builder11 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test19255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19255");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        long long10 = dateTimeParserBucket7.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket7.getZone();
        int int13 = dateTimeZone11.getOffset(0L);
        java.lang.String str15 = dateTimeZone11.getName(100L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone11.getShortName((long) (-41), locale17);
        java.lang.String str20 = dateTimeZone11.getNameKey((-40L));
        java.lang.String str21 = dateTimeZone11.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test19256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19256");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) (-1));
        int int7 = dateTimeZone0.getOffsetFromLocal((long) ' ');
        java.lang.String str9 = dateTimeZone0.getName((-35L));
        long long11 = dateTimeZone0.convertUTCToLocal((-3659990L));
        java.lang.String str12 = dateTimeZone0.toString();
        boolean boolean13 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3659990L) + "'", long11 == (-3659990L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test19257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19257");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter8.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser10);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale15, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.era();
        org.joda.time.DurationField durationField25 = chronology20.halfdays();
        org.joda.time.DurationField durationField26 = chronology20.minutes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = chronology20.add(readablePeriod27, (long) 'x', (-2));
        org.joda.time.DurationField durationField31 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField32 = chronology20.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter11.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withOffsetParsed();
        boolean boolean35 = dateTimeFormatter33.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTimeFormatter33.parseDateTime("9:56:40 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"9:56:40 AM\" is malformed at \":56:40 AM\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeParser10);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 120L + "'", long30 == 120L);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test19258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19258");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) (-1));
        java.lang.String str7 = dateTimeZone0.getNameKey((long) 0);
        boolean boolean9 = dateTimeZone0.isStandardOffset((long) ' ');
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Locale locale13 = locale11.stripExtensions();
        java.lang.String str14 = dateTimeZone0.getShortName(117L, locale11);
        java.util.Set<java.lang.String> strSet15 = locale11.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet16 = locale11.getUnicodeLocaleKeys();
        java.lang.String str17 = locale11.getVariant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test19259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19259");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        java.util.Locale.Builder builder9 = builder7.setVariant("");
        java.util.Locale locale10 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setVariant("Mittwoch, 31. Dezember 1969 23:59 Uhr +00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Mittwoch, 31. Dezember 1969 23:59 Uhr +00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
    }

    @Test
    public void test19260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19260");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.seconds();
        org.joda.time.DurationField durationField12 = chronology9.months();
        java.util.Locale locale14 = new java.util.Locale("");
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = locale16.getISO3Country();
        java.lang.String str20 = locale16.getVariant();
        java.lang.String str21 = locale16.getISO3Country();
        java.lang.String str22 = locale16.getDisplayVariant();
        java.lang.String str23 = locale14.getDisplayScript(locale16);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale28 = new java.util.Locale("hi!");
        java.lang.String str29 = locale28.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale28, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.dayOfYear();
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder40.setExtension('a', "en-US");
        java.util.Locale.Builder builder45 = builder43.setLanguageTag("it");
        java.util.Locale locale46 = builder43.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology33, locale46, (java.lang.Integer) (-41), 40);
        java.lang.String str50 = locale16.getDisplayCountry(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(2001L, chronology9, locale46, (java.lang.Integer) 117, (int) (byte) 1);
        java.util.Locale locale54 = dateTimeParserBucket53.getLocale();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
    }

    @Test
    public void test19261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19261");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getName((long) 2000);
        boolean boolean19 = dateTimeZone16.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter14.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology21 = chronology10.withZone(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter0.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale27 = new java.util.Locale("hi!");
        java.lang.String str28 = locale27.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale27, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        java.util.Locale locale34 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale34, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology32.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = chronology32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField41 = chronology32.era();
        org.joda.time.Chronology chronology42 = chronology32.withUTC();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter22.withZone(dateTimeZone43);
        java.lang.Integer int46 = dateTimeFormatter22.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        long long50 = dateTimeZone47.adjustOffset((long) 0, true);
        java.util.TimeZone timeZone51 = dateTimeZone47.toTimeZone();
        int int53 = dateTimeZone47.getOffsetFromLocal(100L);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) 10);
        boolean boolean60 = dateTimeZone47.equals((java.lang.Object) chronology55);
        java.lang.String str62 = dateTimeZone47.getShortName((long) 'a');
        long long66 = dateTimeZone47.convertLocalToUTC((long) 'x', true, 1342L);
        long long68 = dateTimeZone47.previousTransition(201L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter22.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter69.withPivotYear((java.lang.Integer) (-7200000));
        org.joda.time.format.DateTimeParser dateTimeParser72 = dateTimeFormatter71.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals(locale34.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 120L + "'", long66 == 120L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 201L + "'", long68 == 201L);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeParser72);
    }

    @Test
    public void test19262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19262");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("German");
        java.util.Locale.Builder builder8 = builder4.setLanguageTag("USA");
        java.util.Locale locale9 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder4.setRegion("\u5e74\u6708\u65e5\u661f\u671f\u4e94\u4e0a\u5348\u65f6\u5206\u79d2 +00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 1970?1?2? ??? ??09?00?00? +00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "usa");
    }

    @Test
    public void test19263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19263");
        java.util.Locale locale1 = new java.util.Locale("Japanisch");
        java.lang.String str2 = locale1.getScript();
        org.junit.Assert.assertEquals(locale1.toString(), "japanisch");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test19264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19264");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = chronology8.weeks();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = chronology8.get(readablePeriod19, (-115260149L), (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test19265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19265");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology8.add(readablePeriod15, (long) 'a', (int) 'a');
        org.joda.time.DateTimeField dateTimeField19 = chronology8.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology8.getZone();
        org.joda.time.Chronology chronology21 = chronology8.withUTC();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test19266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19266");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh-CN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("utc");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("it");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.Locale.FilteringMode filteringMode18 = null;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList16, filteringMode18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet22);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strList23);
        java.lang.String str25 = java.util.Locale.lookupTag(languageRangeList5, (java.util.Collection<java.lang.String>) strList24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.Locale.FilteringMode filteringMode35 = null;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList33, filteringMode35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strMap37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strMap39);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder41.setExtension('a', "en-US");
        java.util.Locale.Builder builder46 = builder44.setVariant("");
        java.util.Locale.Builder builder47 = builder46.clear();
        java.util.Locale.Builder builder48 = builder46.clearExtensions();
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale.Builder builder51 = builder48.setVariant("Italian");
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder52.setExtension('a', "en-US");
        java.util.Locale.Builder builder57 = builder55.setLanguageTag("it");
        java.util.Locale.Builder builder58 = builder55.clear();
        java.util.Locale.Builder builder60 = builder55.setRegion("");
        java.util.Locale locale61 = builder60.build();
        java.util.Locale.Builder builder62 = builder51.setLocale(locale61);
        java.lang.String str63 = locale61.getISO3Language();
        java.lang.String str64 = locale61.getLanguage();
        java.lang.String str65 = locale61.getDisplayCountry();
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet67 = locale66.getExtensionKeys();
        java.lang.String str69 = locale66.getExtension('a');
        java.lang.String str70 = locale61.getDisplayCountry(locale66);
        java.util.Set<java.lang.String> strSet71 = locale61.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags(languageRangeList40, (java.util.Collection<java.lang.String>) strSet71);
        java.lang.String str73 = java.util.Locale.lookupTag(languageRangeList27, (java.util.Collection<java.lang.String>) strSet71);
        java.lang.String str74 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet71);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test19267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19267");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.halfdayOfDay();
        long long17 = chronology9.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.clockhourOfDay();
        java.util.Locale locale22 = new java.util.Locale("+00:00:00.035", "", "");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology9, locale22);
        dateTimeParserBucket25.setOffset((java.lang.Integer) (-2));
        long long30 = dateTimeParserBucket25.computeMillis(false, "France");
        long long32 = dateTimeParserBucket25.computeMillis(true);
        java.util.Locale locale33 = dateTimeParserBucket25.getLocale();
        long long34 = dateTimeParserBucket25.computeMillis();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale22.toString(), "+00:00:00.035");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "+00:00:00.035");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
    }

    @Test
    public void test19268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19268");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        java.util.Locale locale13 = new java.util.Locale("");
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale15.getISO3Country();
        java.lang.String str19 = locale15.getVariant();
        java.lang.String str20 = locale15.getISO3Country();
        java.lang.String str21 = locale15.getDisplayVariant();
        java.lang.String str22 = locale13.getDisplayScript(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) ' ', chronology9, locale15);
        java.lang.String str24 = locale15.getISO3Language();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test19269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19269");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField13 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology8.minutes();
        org.joda.time.DurationField durationField16 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology8.getZone();
        long long22 = dateTimeZone18.convertLocalToUTC((-230459883L), false, (-259321970L));
        int int24 = dateTimeZone18.getOffsetFromLocal((-349799992L));
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-230459883L) + "'", long22 == (-230459883L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test19270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19270");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("-00:00:00.121");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = dateTimeFormatter1.getPrinter();
        java.lang.StringBuffer stringBuffer3 = null;
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale8, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.Chronology chronology14 = chronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DurationField durationField17 = chronology14.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekOfWeekyear();
        long long22 = chronology14.add(0L, (-3659990L), (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology14.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withOffsetParsed();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale31, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.days();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter40.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getName((long) 2000);
        boolean boolean45 = dateTimeZone42.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter40.withZone(dateTimeZone42);
        org.joda.time.Chronology chronology47 = chronology36.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter26.withZone(dateTimeZone42);
        boolean boolean49 = dateTimeFormatter48.isOffsetParsed();
        org.joda.time.Chronology chronology50 = dateTimeFormatter48.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeFormatter48.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeFormatter48.getZone();
        java.lang.String str53 = dateTimeZone52.toString();
        long long55 = dateTimeZone52.nextTransition(82L);
        java.util.Locale locale56 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale56);
        java.lang.String str58 = locale56.getDisplayName();
        java.util.Set<java.lang.String> strSet59 = locale56.getUnicodeLocaleKeys();
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology62, locale63, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str67 = locale60.getDisplayCountry(locale63);
        java.util.Locale locale68 = java.util.Locale.ITALIAN;
        java.lang.String str69 = locale60.getDisplayLanguage(locale68);
        java.lang.String str70 = locale60.getCountry();
        java.util.Locale.setDefault(locale60);
        java.lang.String str72 = locale56.getDisplayVariant(locale60);
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder73.setExtension('a', "en-US");
        java.util.Locale.Builder builder78 = builder76.setLanguageTag("it");
        java.util.Locale.Builder builder79 = builder76.clear();
        java.util.Locale locale80 = builder76.build();
        java.lang.String str81 = locale56.getDisplayScript(locale80);
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter2.printTo(stringBuffer3, (-3658030L), chronology14, (-41), dateTimeZone52, locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimePrinter2);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 82L + "'", long55 == 82L);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str58, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "giapponese" + "'", str69, "giapponese");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test19271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19271");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.year();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyear();
        org.joda.time.DurationField durationField19 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField23 = chronology15.seconds();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test19272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19272");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 10);
        boolean boolean5 = dateTimeZone1.isStandardOffset((long) (-101));
        java.lang.String str6 = dateTimeZone1.toString();
        java.lang.String str7 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        long long26 = dateTimeZone23.adjustOffset((long) 0, true);
        java.lang.String str28 = dateTimeZone23.getNameKey((long) (-1));
        boolean boolean29 = dateTimeZone23.isFixed();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str38 = locale31.getDisplayCountry(locale34);
        java.lang.String str39 = dateTimeZone23.getName((long) (short) 100, locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology17, locale31, (java.lang.Integer) 10, (int) '4');
        java.lang.Integer int43 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter44.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter44.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter47.withChronology(chronology48);
        java.util.Locale locale50 = dateTimeFormatter49.getLocale();
        boolean boolean51 = dateTimeFormatter49.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeFormatter49.getZone();
        java.util.Locale locale53 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter49.withLocale(locale53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        long long58 = dateTimeZone55.adjustOffset((long) 0, true);
        java.util.TimeZone timeZone59 = dateTimeZone55.toTimeZone();
        boolean boolean60 = dateTimeZone55.isFixed();
        boolean boolean61 = dateTimeZone55.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter54.withZone(dateTimeZone55);
        long long64 = dateTimeZone55.convertUTCToLocal(0L);
        dateTimeParserBucket42.setZone(dateTimeZone55);
        java.util.Locale locale66 = dateTimeParserBucket42.getLocale();
        dateTimeParserBucket42.setOffset((java.lang.Integer) (-33));
        java.util.Locale locale69 = dateTimeParserBucket42.getLocale();
        boolean boolean70 = dateTimeZone1.equals((java.lang.Object) locale69);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-00:00:00.001" + "'", str6, "-00:00:00.001");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-00:00:00.001" + "'", str7, "-00:00:00.001");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test19273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19273");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.util.Locale.setDefault(locale2);
        java.util.Locale.setDefault(locale2);
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test19274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19274");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDate();
        int int1 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone2 = dateTimeFormatter0.getZone();
        java.lang.String str4 = dateTimeFormatter0.print((-464399883L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withPivotYear((-349800001));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969/12/26" + "'", str4, "1969/12/26");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test19275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19275");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology9.add(readablePeriod18, 1L, 0);
        org.joda.time.DateTimeZone dateTimeZone22 = chronology9.getZone();
        org.joda.time.Chronology chronology23 = chronology9.withUTC();
        java.lang.String str24 = chronology9.toString();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
    }

    @Test
    public void test19276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19276");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.joda.time.DurationField durationField19 = chronology15.centuries();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology15.getZone();
        org.joda.time.DurationField durationField21 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = chronology15.get(readablePeriod25, (long) (-36000001), (-144059900L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test19277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19277");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withDefaultYear((int) 'u');
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test19278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19278");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("it");
        java.lang.String str5 = locale3.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale3);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.centuryOfEra();
        org.joda.time.DurationField durationField9 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology7.hours();
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test19279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19279");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField14 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.minuteOfHour();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale21, (java.lang.Integer) 10, (int) 'a');
        int int26 = dateTimeParserBucket25.getOffset();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket25.getZone();
        long long30 = dateTimeZone27.adjustOffset((-1L), true);
        long long33 = dateTimeZone27.adjustOffset((long) 'a', true);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.lang.String str41 = locale40.toLanguageTag();
        java.util.Locale locale43 = new java.util.Locale("hi!");
        java.lang.String str44 = locale43.getDisplayCountry();
        java.lang.String str45 = locale43.toLanguageTag();
        java.lang.String str46 = locale40.getDisplayName(locale43);
        java.lang.String str47 = locale38.getDisplayCountry(locale43);
        java.lang.String str48 = locale43.getScript();
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.lang.String str53 = locale52.toLanguageTag();
        java.util.Locale locale55 = new java.util.Locale("hi!");
        java.lang.String str56 = locale55.getDisplayCountry();
        java.lang.String str57 = locale55.toLanguageTag();
        java.lang.String str58 = locale52.getDisplayName(locale55);
        java.lang.String str59 = locale50.getDisplayCountry(locale55);
        java.lang.String str60 = locale49.getDisplayScript(locale50);
        java.util.Locale.Category category61 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale62 = java.util.Locale.getDefault(category61);
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.lang.String str65 = locale49.getDisplayName(locale63);
        java.lang.String str66 = locale43.getDisplayScript(locale49);
        java.lang.String str67 = dateTimeZone36.getName((long) 'x', locale49);
        java.lang.String str68 = dateTimeZone27.getName(3600000L, locale49);
        java.lang.String str69 = locale16.getDisplayScript(locale49);
        boolean boolean70 = locale49.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((-5042100069L), chronology9, locale49);
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale75 = new java.util.Locale("hi!");
        java.lang.String str76 = locale75.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(0L, chronology73, locale75, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology80 = dateTimeParserBucket79.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.days();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.year();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.millisOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology80.era();
        org.joda.time.DateTimeField dateTimeField85 = chronology80.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField86 = chronology80.dayOfYear();
        org.joda.time.DurationField durationField87 = chronology80.minutes();
        org.joda.time.DateTimeField dateTimeField88 = chronology80.yearOfCentury();
        org.joda.time.DurationField durationField89 = chronology80.seconds();
        org.joda.time.DateTimeField dateTimeField90 = chronology80.millisOfDay();
        boolean boolean91 = dateTimeParserBucket71.restoreState((java.lang.Object) dateTimeField90);
        java.lang.Object obj92 = dateTimeParserBucket71.saveState();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 97L + "'", long33 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ja" + "'", str41, "ja");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "und" + "'", str45, "und");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Japanese" + "'", str46, "Japanese");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ja" + "'", str53, "ja");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "und" + "'", str57, "und");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Japanese" + "'", str58, "Japanese");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category61.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u65e5\u6587" + "'", str65, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.010" + "'", str67, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals(locale75.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(obj92);
    }

    @Test
    public void test19280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19280");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField15 = chronology8.years();
        java.lang.String str16 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology8.weekyearOfCentury();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test19281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19281");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        long long22 = dateTimeZone18.convertLocalToUTC((-1L), true, (long) (byte) 100);
        java.lang.String str24 = dateTimeZone18.getShortName((long) (byte) 1);
        boolean boolean26 = dateTimeZone18.isStandardOffset(0L);
        org.joda.time.Chronology chronology27 = chronology9.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone28 = chronology27.getZone();
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.lang.String str34 = locale31.getExtension('a');
        java.util.Locale.setDefault(category30, locale31);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder36.setExtension('a', "en-US");
        java.util.Locale.Builder builder41 = builder39.setLanguageTag("it");
        java.util.Locale locale42 = builder41.build();
        java.util.Locale.setDefault(category30, locale42);
        java.lang.String str44 = dateTimeZone28.getShortName((-33L), locale42);
        long long48 = dateTimeZone28.convertLocalToUTC(3660040L, false, (-3876890L));
        int int50 = dateTimeZone28.getOffsetFromLocal(1884L);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3660040L + "'", long48 == 3660040L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test19282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19282");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        long long16 = chronology8.add((-62111231999999L), 1L, 10);
        org.joda.time.DurationField durationField17 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField20 = chronology8.weekyears();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62111231999989L) + "'", long16 == (-62111231999989L));
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test19283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19283");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getName((long) 2000);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter7.getParser();
        int int15 = dateTimeParser14.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser14);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale20, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfDay();
        org.joda.time.Chronology chronology29 = chronology25.withUTC();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        long long33 = dateTimeZone30.adjustOffset((long) 0, true);
        java.lang.String str35 = dateTimeZone30.getNameKey((long) (-1));
        boolean boolean36 = dateTimeZone30.isFixed();
        int int38 = dateTimeZone30.getOffset((long) (short) 0);
        long long41 = dateTimeZone30.convertLocalToUTC(0L, true);
        long long44 = dateTimeZone30.convertLocalToUTC((long) 'u', false);
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = dateTimeZone30.getOffset(readableInstant45);
        org.joda.time.Chronology chronology47 = chronology25.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter16.withChronology(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean51 = dateTimeZone49.isStandardOffset((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter16.withZone(dateTimeZone49);
        boolean boolean53 = dateTimeFormatter16.isOffsetParsed();
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet56 = locale55.getExtensionKeys();
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.lang.String str58 = locale57.toLanguageTag();
        java.util.Locale locale60 = new java.util.Locale("hi!");
        java.lang.String str61 = locale60.getDisplayCountry();
        java.lang.String str62 = locale60.toLanguageTag();
        java.lang.String str63 = locale57.getDisplayName(locale60);
        java.lang.String str64 = locale55.getDisplayCountry(locale60);
        java.lang.String str65 = locale54.getDisplayScript(locale55);
        java.util.Locale.Category category66 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale67 = java.util.Locale.getDefault(category66);
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.lang.String str70 = locale54.getDisplayName(locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter16.withLocale(locale54);
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale75 = new java.util.Locale("hi!");
        java.lang.String str76 = locale75.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(0L, chronology73, locale75, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology80 = dateTimeParserBucket79.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.days();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.year();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.millisOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology80.millisOfDay();
        org.joda.time.DateTimeField dateTimeField85 = chronology80.secondOfDay();
        org.joda.time.DateTimeField dateTimeField86 = chronology80.halfdayOfDay();
        org.joda.time.DurationField durationField87 = chronology80.centuries();
        org.joda.time.DurationField durationField88 = chronology80.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter16.withChronology(chronology80);
        org.joda.time.DateTimeField dateTimeField90 = chronology80.dayOfYear();
        org.joda.time.DurationField durationField91 = chronology80.weekyears();
        org.joda.time.DurationField durationField92 = chronology80.hours();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 117L + "'", long44 == 117L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ja" + "'", str58, "ja");
        org.junit.Assert.assertEquals(locale60.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "und" + "'", str62, "und");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japanese" + "'", str63, "Japanese");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + category66 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category66.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u65e5\u6587" + "'", str70, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals(locale75.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(durationField92);
    }

    @Test
    public void test19284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19284");
        java.util.Locale locale3 = new java.util.Locale("\u5951\u7dad\u6587", "\u65e5\u6587", "+32:00");
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale8, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.secondOfMinute();
        java.util.Locale locale21 = new java.util.Locale("United States", "hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(10L, chronology13, locale21, (java.lang.Integer) 0);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale28 = new java.util.Locale("hi!");
        java.lang.String str29 = locale28.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale28, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyearOfCentury();
        org.joda.time.Chronology chronology37 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.yearOfEra();
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.lang.String str40 = locale39.toLanguageTag();
        java.lang.String str41 = locale39.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 1, chronology33, locale39);
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale44 = java.util.Locale.getDefault(category43);
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale45.toLanguageTag();
        java.lang.String str48 = locale39.getDisplayVariant(locale45);
        java.lang.String str49 = locale21.getDisplayCountry(locale45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        long long53 = dateTimeZone50.adjustOffset((long) 0, true);
        java.lang.String str55 = dateTimeZone50.getNameKey((long) (-1));
        boolean boolean56 = dateTimeZone50.isFixed();
        int int58 = dateTimeZone50.getOffset((long) (short) 0);
        long long61 = dateTimeZone50.convertLocalToUTC(0L, true);
        long long64 = dateTimeZone50.convertLocalToUTC((long) 'u', false);
        java.util.Locale locale67 = new java.util.Locale("hi!");
        java.lang.String str68 = locale67.getDisplayCountry();
        java.lang.String str69 = locale67.getISO3Language();
        java.lang.String str70 = dateTimeZone50.getName(5044L, locale67);
        java.util.Set<java.lang.String> strSet71 = locale67.getUnicodeLocaleAttributes();
        java.util.Locale locale72 = locale67.stripExtensions();
        java.lang.String str73 = locale45.getDisplayVariant(locale72);
        java.lang.String str74 = locale3.getDisplayName(locale45);
        java.util.Locale locale76 = new java.util.Locale("jpn");
        java.lang.String str77 = locale45.getDisplayCountry(locale76);
        java.lang.String str78 = locale76.toString();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u5951\u7dad\u6587\u65e5\u6587_+32:00");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale21.toString(), "united states_HI!");
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ja" + "'", str40, "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "jpn" + "'", str41, "jpn");
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category43.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zh-TW" + "'", str47, "zh-TW");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "HI!" + "'", str49, "HI!");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 117L + "'", long64 == 117L);
        org.junit.Assert.assertEquals(locale67.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u5951\u7dad\u6587\u65e5\u6587,+32:00)" + "'", str74, "\u5951\u7dad\u6587\u65e5\u6587,+32:00)");
        org.junit.Assert.assertEquals(locale76.toString(), "jpn");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Taiwan" + "'", str77, "Taiwan");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "jpn" + "'", str78, "jpn");
    }

    @Test
    public void test19285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19285");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        long long15 = dateTimeParserBucket13.computeMillis(false);
        java.lang.Integer int16 = dateTimeParserBucket13.getOffsetInteger();
        int int17 = dateTimeParserBucket13.getOffset();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket13.getZone();
        long long21 = dateTimeZone18.convertLocalToUTC((-71939960L), true);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-71939960L) + "'", long21 == (-71939960L));
    }

    @Test
    public void test19286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19286");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weeks();
        org.joda.time.DurationField durationField10 = chronology8.hours();
        org.joda.time.Chronology chronology11 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        java.lang.Class<?> wildcardClass13 = chronology8.getClass();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test19287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19287");
        java.util.Locale locale3 = new java.util.Locale("eng", "\u82f1\u6587\u7f8e\u570b)", "giapponese");
        java.lang.String str4 = locale3.getCountry();
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.lang.String str6 = locale3.getCountry();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u6587\u7f8e\u570b)_giapponese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u82f1\u6587\u7f8e\u570b)" + "'", str4, "\u82f1\u6587\u7f8e\u570b)");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u82f1\u6587\u7f8e\u570b)" + "'", str6, "\u82f1\u6587\u7f8e\u570b)");
    }

    @Test
    public void test19288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19288");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        java.util.Locale locale12 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale12, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = chronology10.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology10.era();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = chronology10.add(readablePeriod20, (long) 2000, (int) (byte) 100);
        org.joda.time.DurationField durationField24 = chronology10.days();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale29 = new java.util.Locale("hi!");
        java.lang.String str30 = locale29.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale29, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        long long39 = chronology34.add((long) 1, 100L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = chronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField42 = chronology34.seconds();
        java.util.Locale locale46 = new java.util.Locale("English (United States)", "und", "en-US");
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = locale46.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, chronology34, locale46, (java.lang.Integer) 0, (int) '4');
        java.lang.String str52 = locale46.getScript();
        java.util.Locale.setDefault(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(35L, chronology10, locale46, (java.lang.Integer) (-3600000), (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField57 = chronology10.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology10.getZone();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals(locale12.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2000L + "'", long23 == 2000L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-99L) + "'", long39 == (-99L));
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertEquals(locale46.toString(), "english (united states)_UND_en-US");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "english (united states) (UND,en-US)" + "'", str47, "english (united states) (UND,en-US)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test19289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19289");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField15 = chronology8.years();
        org.joda.time.Chronology chronology16 = chronology8.withUTC();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology16.add(readablePeriod17, (long) 40, (int) (short) 0);
        java.lang.String str21 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.secondOfMinute();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 40L + "'", long20 == 40L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19290");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        int int8 = dateTimeParserBucket7.getOffset();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket7.getZone();
        long long12 = dateTimeZone9.adjustOffset((-1L), true);
        long long15 = dateTimeZone9.adjustOffset((long) 'a', true);
        boolean boolean17 = dateTimeZone9.isStandardOffset((long) 100);
        long long20 = dateTimeZone9.convertLocalToUTC((long) 0, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        java.lang.String str23 = dateTimeZone9.getName(100L);
        long long25 = dateTimeZone9.previousTransition(187200000L);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 187200000L + "'", long25 == 187200000L);
    }

    @Test
    public void test19291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19291");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Locale locale4 = locale2.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((-57659883L), chronology1, locale4, (java.lang.Integer) (-148200000));
        dateTimeParserBucket6.setPivotYear((java.lang.Integer) 2);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jpn" + "'", str3, "jpn");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
    }

    @Test
    public void test19292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19292");
        java.util.Locale locale3 = new java.util.Locale("java.io.IOException: en-us (ZH-CN)", "\u5951\u7dad\u6587", "TWN");
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale8, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale15 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale15, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.year();
        org.joda.time.DurationField durationField19 = chronology13.months();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology13.months();
        org.joda.time.DurationField durationField23 = chronology13.years();
        boolean boolean24 = locale3.equals((java.lang.Object) durationField23);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u5951\u7dad\u6587_TWN");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals(locale15.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test19293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19293");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        java.util.Locale.Builder builder9 = builder3.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder12 = builder10.setLanguage("de");
        java.util.Locale locale13 = builder12.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder12.setUnicodeLocaleKeyword("eng", "Japanese (Japan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: eng [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
    }

    @Test
    public void test19294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19294");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.setRegion("");
        java.util.Locale.Builder builder9 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguage("German (Germany)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: German (Germany) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test19295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19295");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.millisOfDay();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology9, locale17, (java.lang.Integer) 2000);
        boolean boolean20 = locale17.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withOffsetParsed();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale27 = new java.util.Locale("hi!");
        java.lang.String str28 = locale27.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale27, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        java.util.Locale locale34 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale34, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology32.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        java.util.Locale locale41 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale41);
        java.lang.String str43 = dateTimeZone39.getShortName((long) 'u', locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter22.withLocale(locale41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter44.withPivotYear((java.lang.Integer) 40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter46.withPivotYear(0);
        java.util.Locale locale49 = dateTimeFormatter46.getLocale();
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale54 = new java.util.Locale("hi!");
        java.lang.String str55 = locale54.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale54, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        java.util.Locale locale61 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology59, locale61, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology59.withZone(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone66 = chronology65.getZone();
        java.util.Locale locale68 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale68);
        java.lang.String str70 = dateTimeZone66.getShortName((long) 'u', locale68);
        java.util.Locale locale73 = new java.util.Locale("\u65e5\u672c\u8a9e", "English");
        java.lang.String str74 = locale68.getDisplayVariant(locale73);
        boolean boolean75 = locale68.hasExtensions();
        java.lang.String str76 = locale49.getDisplayName(locale68);
        java.util.Locale locale77 = locale68.stripExtensions();
        java.util.Set<java.lang.String> strSet78 = locale68.getUnicodeLocaleKeys();
        java.lang.String str79 = locale68.getDisplayScript();
        java.util.Set<java.lang.Character> charSet80 = locale68.getExtensionKeys();
        java.lang.String str81 = locale17.getDisplayCountry(locale68);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals(locale34.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals(locale61.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertEquals(locale73.toString(), "\u65e5\u672c\u8a9e_ENGLISH");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str76, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(charSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test19296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19296");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        long long10 = dateTimeParserBucket7.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket7.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        long long15 = dateTimeZone12.adjustOffset((long) 0, true);
        java.lang.String str17 = dateTimeZone12.getNameKey((long) (-1));
        boolean boolean18 = dateTimeZone12.isFixed();
        int int20 = dateTimeZone12.getOffset((long) (short) 0);
        long long23 = dateTimeZone12.convertLocalToUTC(0L, true);
        long long26 = dateTimeZone12.adjustOffset((long) (short) 1, true);
        long long29 = dateTimeZone12.adjustOffset(1L, true);
        dateTimeParserBucket7.setZone(dateTimeZone12);
        java.lang.Object obj31 = dateTimeParserBucket7.saveState();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test19297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19297");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.centuryOfEra();
        java.lang.String str15 = chronology9.toString();
        java.util.Locale locale18 = new java.util.Locale("Chinese", "\u82f1\u6587");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((-121L), chronology9, locale18);
        org.joda.time.DurationField durationField20 = chronology9.months();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "\u82f1\u6587");
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test19298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19298");
        java.io.IOException iOException2 = new java.io.IOException("hi!");
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = iOException2.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("zho", (java.lang.Throwable) iOException2);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.lang.Throwable[] throwableArray7 = iOException6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test19299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19299");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.yearOfEra();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((-99L), chronology9, locale15, (java.lang.Integer) 1);
        org.joda.time.DurationField durationField18 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology9.dayOfWeek();
        org.joda.time.DurationField durationField22 = chronology9.days();
        org.joda.time.Chronology chronology23 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology9.minuteOfHour();
        org.joda.time.DurationField durationField25 = chronology9.months();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test19300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19300");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder6.setExtension('a', "it");
        java.util.Locale locale11 = builder6.build();
        java.util.Locale.Builder builder13 = builder6.setLanguageTag("en-us");
        java.util.Locale.Builder builder15 = builder6.setLanguageTag("FR");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setScript("\u82f1\u6587\u7f8e\u570b)_JAVA.IO.IOEXCEPTION: UTC");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?? (??)_JAVA.IO.IOEXCEPTION: UTC [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test19301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19301");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField14 = chronology9.days();
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.weekyear();
        java.lang.String str17 = chronology9.toString();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale21, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        long long28 = dateTimeParserBucket25.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale33 = new java.util.Locale("hi!");
        java.lang.String str34 = locale33.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale33, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.year();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = chronology38.add(readablePeriod41, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField45 = chronology38.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField46 = chronology38.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = chronology38.weekOfWeekyear();
        dateTimeParserBucket25.saveField(dateTimeField47, (-1));
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology51 = chronology9.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.minuteOfHour();
        org.joda.time.DurationField durationField53 = chronology51.days();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test19302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19302");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField14 = chronology9.days();
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.weekyear();
        java.lang.String str17 = chronology9.toString();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale21, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        long long28 = dateTimeParserBucket25.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale33 = new java.util.Locale("hi!");
        java.lang.String str34 = locale33.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale33, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.year();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = chronology38.add(readablePeriod41, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField45 = chronology38.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField46 = chronology38.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = chronology38.weekOfWeekyear();
        dateTimeParserBucket25.saveField(dateTimeField47, (-1));
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology51 = chronology9.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField52 = chronology51.hours();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.era();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.dayOfYear();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test19303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19303");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter9.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser11);
        int int13 = dateTimePrinter6.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean15 = dateTimeFormatter14.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter14.withPivotYear(2000);
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter17.getParser();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale22, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, 10);
        int int32 = dateTimeParser18.parseInto(dateTimeParserBucket26, "", (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter34.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter34.withPivotYear((java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeFormatter37.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = dateTimeFormatter37.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeFormatter37.getZone();
        org.joda.time.Chronology chronology41 = dateTimeFormatter37.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter37.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser43 = dateTimeFormatter37.getParser();
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale49 = new java.util.Locale("hi!");
        java.lang.String str50 = locale49.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale49, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology54 = dateTimeParserBucket53.getChronology();
        java.util.Locale locale56 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale56, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.halfdayOfDay();
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.lang.String str62 = locale60.getDisplayCountry(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale61, (java.lang.Integer) (-41), (-11));
        org.joda.time.Chronology chronology66 = dateTimeParserBucket65.getChronology();
        int int69 = dateTimeParser43.parseInto(dateTimeParserBucket65, "\u4e0a\u5348\u65f6\u5206\u79d2", (-148200000));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser43);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeParser11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeParser18);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-53) + "'", int32 == (-53));
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimePrinter39);
        org.junit.Assert.assertNull(dateTimeZone40);
        org.junit.Assert.assertNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeParser43);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals(locale56.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-148200000) + "'", int69 == (-148200000));
    }

    @Test
    public void test19304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19304");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.yearOfEra();
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((-99L), chronology9, locale15, (java.lang.Integer) 1);
        org.joda.time.DurationField durationField18 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField21 = chronology9.minutes();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test19305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19305");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology9 = dateTimeFormatter0.getChronolgy();
        org.joda.time.LocalDate localDate11 = dateTimeFormatter0.parseLocalDate("69-12-31");
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale16, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        java.util.Locale locale23 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale23, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField26 = chronology21.days();
        org.joda.time.DurationField durationField27 = chronology21.halfdays();
        long long31 = chronology21.add(0L, (long) (short) 0, (-1));
        org.joda.time.DateTimeField dateTimeField32 = chronology21.hourOfDay();
        boolean boolean33 = localDate11.equals((java.lang.Object) dateTimeField32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = localDate11.getFieldType((int) (byte) 1);
        java.lang.Object obj36 = null;
        boolean boolean37 = localDate11.equals(obj36);
        int int39 = localDate11.getValue((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = localDate11.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals(locale23.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1969 + "'", int39 == 1969);
    }

    @Test
    public void test19306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19306");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        long long10 = dateTimeParserBucket7.computeMillis(true, "hi!");
        dateTimeParserBucket7.setOffset((java.lang.Integer) (-1));
        long long14 = dateTimeParserBucket7.computeMillis(true);
        long long16 = dateTimeParserBucket7.computeMillis(false);
        java.lang.Object obj17 = dateTimeParserBucket7.saveState();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket7.getChronology();
        dateTimeParserBucket7.setOffset((int) '4');
        java.util.Locale locale21 = dateTimeParserBucket7.getLocale();
        dateTimeParserBucket7.setOffset((java.lang.Integer) (-36000001));
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
    }

    @Test
    public void test19307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19307");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DurationField durationField11 = chronology9.years();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.centuryOfEra();
        org.joda.time.DurationField durationField15 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.secondOfDay();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getDisplayCountry();
        java.lang.String str22 = locale20.toLanguageTag();
        java.lang.String str23 = locale17.getDisplayName(locale20);
        java.util.Set<java.lang.String> strSet24 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale17.getDisplayVariant();
        java.util.Locale.setDefault(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((-374399948L), chronology9, locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter28.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter31.withChronology(chronology32);
        java.util.Locale locale34 = dateTimeFormatter33.getLocale();
        boolean boolean35 = dateTimeFormatter33.isOffsetParsed();
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder36.setExtension('a', "en-US");
        java.util.Locale.Builder builder41 = builder39.setLanguageTag("it");
        java.util.Locale locale42 = builder39.build();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter33.withLocale(locale42);
        java.lang.String str45 = locale42.getUnicodeLocaleType("fr");
        java.lang.String str46 = locale42.getISO3Language();
        java.lang.String str47 = locale42.getCountry();
        java.lang.String str48 = locale42.getDisplayScript();
        java.lang.String str49 = locale17.getDisplayVariant(locale42);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-CN" + "'", str18, "zh-CN");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (China)" + "'", str23, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ita" + "'", str46, "ita");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test19308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19308");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DurationField durationField12 = chronology10.weekyears();
        java.util.Locale locale14 = new java.util.Locale("");
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = locale16.getISO3Country();
        java.lang.String str20 = locale16.getVariant();
        java.lang.String str21 = locale16.getISO3Country();
        java.lang.String str22 = locale16.getDisplayVariant();
        java.lang.String str23 = locale14.getDisplayScript(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) ' ', chronology10, locale16);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        long long28 = dateTimeZone25.adjustOffset((long) 0, true);
        java.lang.String str30 = dateTimeZone25.getNameKey((long) (-1));
        boolean boolean31 = dateTimeZone25.isFixed();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str40 = locale33.getDisplayCountry(locale36);
        java.lang.String str41 = dateTimeZone25.getName((long) (short) 100, locale33);
        java.lang.String str42 = locale33.getDisplayVariant();
        java.lang.String str43 = locale33.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((-37L), chronology10, locale33, (java.lang.Integer) 8, 115260000);
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale51 = new java.util.Locale("hi!");
        java.lang.String str52 = locale51.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale51, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        java.util.Locale locale58 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale58, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology56.withZone(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = chronology62.getZone();
        java.util.Locale locale65 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale65);
        java.lang.String str67 = dateTimeZone63.getShortName((long) 'u', locale65);
        java.util.Locale locale70 = new java.util.Locale("\u65e5\u672c\u8a9e", "English");
        java.lang.String str71 = locale65.getDisplayVariant(locale70);
        java.lang.String str72 = locale65.getLanguage();
        boolean boolean73 = dateTimeParserBucket46.restoreState((java.lang.Object) locale65);
        java.util.Locale locale74 = dateTimeParserBucket46.getLocale();
        long long77 = dateTimeParserBucket46.computeMillis(true, "");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ja" + "'", str43, "ja");
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertEquals(locale58.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertEquals(locale70.toString(), "\u65e5\u672c\u8a9e_ENGLISH");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zh" + "'", str72, "zh");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-37L) + "'", long77 == (-37L));
    }

    @Test
    public void test19309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19309");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale7);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale11);
        java.util.Locale.setDefault(locale11);
        java.util.Locale.Builder builder14 = builder10.setLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale21, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        java.util.Locale locale28 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale28, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = chronology26.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        java.util.Locale locale35 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale35);
        java.lang.String str37 = dateTimeZone33.getShortName((long) 'u', locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter16.withLocale(locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withPivotYear((java.lang.Integer) 40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withPivotYear(0);
        java.util.Locale locale43 = dateTimeFormatter40.getLocale();
        java.util.Locale.Builder builder44 = builder10.setLocale(locale43);
        java.util.Locale.Builder builder46 = builder44.setLanguageTag("en-GB");
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale51 = new java.util.Locale("hi!");
        java.lang.String str52 = locale51.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale51, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.days();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.year();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.hourOfHalfday();
        org.joda.time.DurationField durationField61 = chronology56.minutes();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("zh-CN");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology56, locale63, (java.lang.Integer) 40, 10);
        java.lang.String str67 = locale63.getISO3Language();
        java.lang.String str68 = locale63.getScript();
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale63.getDisplayScript(locale69);
        java.util.Locale.setDefault(locale63);
        java.util.Locale.Builder builder72 = builder46.setLocale(locale63);
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder76 = builder73.setExtension('a', "en-US");
        java.util.Locale.Builder builder78 = builder76.setLanguageTag("it");
        java.util.Locale.Builder builder79 = builder76.clear();
        java.util.Locale locale80 = java.util.Locale.CHINESE;
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.lang.String str82 = locale80.getDisplayScript(locale81);
        java.util.Locale.Builder builder83 = builder76.setLocale(locale80);
        java.util.Locale locale84 = builder76.build();
        java.util.Locale locale85 = locale84.stripExtensions();
        java.util.Locale.Builder builder86 = builder46.setLocale(locale85);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals(locale28.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zho" + "'", str67, "zho");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh");
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test19310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19310");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = chronology9.halfdays();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology9.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter0.withZone(dateTimeZone15);
        java.lang.String str17 = dateTimeZone15.toString();
        long long19 = dateTimeZone15.nextTransition((-115260060L));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-115260060L) + "'", long19 == (-115260060L));
    }

    @Test
    public void test19311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19311");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.secondOfMinute();
        java.util.Locale locale18 = new java.util.Locale("United States", "hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(10L, chronology10, locale18, (java.lang.Integer) 0);
        int int21 = dateTimeParserBucket20.getOffset();
        java.util.Locale locale22 = dateTimeParserBucket20.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = org.joda.time.format.DateTimeFormat.patternForStyle("und-a-en-us", locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: und-a-en-us");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals(locale18.toString(), "united states_HI!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "united states_HI!");
    }

    @Test
    public void test19312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19312");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        long long15 = chronology9.add((-2000L), (long) (-36), (int) ' ');
        org.joda.time.DurationField durationField16 = chronology9.hours();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("it");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((-190800000L), chronology9, locale18);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        long long25 = chronology20.add(0L, (-4139615L), (-2001));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-3152L) + "'", long15 == (-3152L));
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 8283369615L + "'", long25 == 8283369615L);
    }

    @Test
    public void test19313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19313");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.clockhourOfHalfday();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test19314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19314");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jpn" + "'", str1, "jpn");
    }

    @Test
    public void test19315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19315");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = locale2.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale2.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CN" + "'", str4, "CN");
    }

    @Test
    public void test19316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19316");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        int int8 = dateTimeParserBucket7.getOffset();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket7.getZone();
        long long12 = dateTimeZone9.adjustOffset((-1L), true);
        long long15 = dateTimeZone9.adjustOffset((long) 'a', true);
        boolean boolean17 = dateTimeZone9.isStandardOffset((long) 100);
        boolean boolean18 = dateTimeZone9.isFixed();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str27 = locale20.getDisplayCountry(locale23);
        java.lang.String str28 = dateTimeZone9.getShortName((long) (short) -1, locale20);
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone9.getOffset(readableInstant29);
        long long32 = dateTimeZone9.nextTransition((long) (byte) 0);
        long long35 = dateTimeZone9.convertLocalToUTC((long) '4', true);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale39 = new java.util.Locale("hi!");
        java.lang.String str40 = locale39.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale39, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.Chronology chronology45 = chronology44.withUTC();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology45.getZone();
        org.joda.time.DurationField durationField47 = chronology45.minutes();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekyear();
        boolean boolean49 = dateTimeZone9.equals((java.lang.Object) chronology45);
        org.joda.time.DateTimeField dateTimeField50 = chronology45.hourOfHalfday();
        org.joda.time.DurationField durationField51 = chronology45.hours();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.millisOfDay();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 52L + "'", long35 == 52L);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test19317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19317");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.setExtension('x', "ja-JP");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguage("15:00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 15:00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test19318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19318");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.joda.time.DurationField durationField19 = chronology15.centuries();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.centuryOfEra();
        org.joda.time.DurationField durationField22 = chronology15.months();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test19319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19319");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter0.withDefaultYear((int) (byte) 10);
        java.util.Locale locale11 = new java.util.Locale("jpn");
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str19 = locale12.getDisplayCountry(locale15);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale12.getDisplayLanguage(locale20);
        java.util.Locale.setDefault(locale12);
        java.lang.String str23 = locale11.getDisplayVariant(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter0.withLocale(locale12);
        boolean boolean25 = dateTimeFormatter24.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals(locale11.toString(), "jpn");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "giapponese" + "'", str21, "giapponese");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test19320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19320");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.Locale.FilteringMode filteringMode11 = null;
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList9, filteringMode11);
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.parse("it", strMap21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList22, strMap23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.Locale.FilteringMode filteringMode33 = null;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList31, filteringMode33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.Locale.FilteringMode filteringMode45 = null;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList43, filteringMode45);
        java.lang.String str47 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap48 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap50);
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.lang.String str56 = locale55.toLanguageTag();
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale55 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale locale62 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter(languageRangeList17, (java.util.Collection<java.util.Locale>) localeList64);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ja" + "'", str56, "ja");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(localeList65);
    }

    @Test
    public void test19321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19321");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        long long10 = dateTimeParserBucket7.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale15, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.year();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology20.add(readablePeriod23, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.weekOfWeekyear();
        dateTimeParserBucket7.saveField(dateTimeField29, (-1));
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale36 = new java.util.Locale("hi!");
        java.lang.String str37 = locale36.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale36, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, 10);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket40.getChronology();
        boolean boolean46 = dateTimeParserBucket7.restoreState((java.lang.Object) dateTimeParserBucket40);
        java.lang.Integer int47 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter48.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str52 = dateTimeZone50.getName((long) 2000);
        boolean boolean53 = dateTimeZone50.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter48.withZone(dateTimeZone50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter54.withPivotYear((int) (short) 0);
        java.util.Locale locale57 = dateTimeFormatter56.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter56.withOffsetParsed();
        boolean boolean59 = dateTimeParserBucket40.restoreState((java.lang.Object) dateTimeFormatter58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime61 = dateTimeFormatter58.parseLocalDateTime("marted\354 30 dicembre 1969");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"martedi? 30 dicembre 1969\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNull(locale57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test19322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19322");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.lang.String str4 = locale3.toLanguageTag();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        java.lang.String str7 = locale6.getDisplayCountry();
        java.lang.String str8 = locale6.toLanguageTag();
        java.lang.String str9 = locale3.getDisplayName(locale6);
        java.lang.String str10 = locale1.getDisplayCountry(locale6);
        java.lang.String str11 = locale0.getDisplayScript(locale1);
        java.lang.String str12 = locale0.getDisplayScript();
        java.util.Locale locale16 = new java.util.Locale("+10:00", "java.io.IOException: en-US", "+00:00");
        java.util.Locale locale20 = new java.util.Locale("Chinese (China)", "CAN", "italiano");
        java.lang.String str21 = locale16.getDisplayScript(locale20);
        java.lang.String str22 = locale0.getDisplayLanguage(locale20);
        boolean boolean23 = locale0.hasExtensions();
        java.util.Locale locale24 = locale0.stripExtensions();
        java.lang.String str25 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ja" + "'", str4, "ja");
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "und" + "'", str8, "und");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japanese" + "'", str9, "Japanese");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale16.toString(), "+10:00_JAVA.IO.IOEXCEPTION: EN-US_+00:00");
        org.junit.Assert.assertEquals(locale20.toString(), "chinese (china)_CAN_italiano");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Japanese" + "'", str22, "Japanese");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ja" + "'", str25, "ja");
    }

    @Test
    public void test19323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19323");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.joda.time.DurationField durationField19 = chronology15.centuries();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.monthOfYear();
        org.joda.time.DurationField durationField22 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray26 = chronology20.get(readablePeriod24, (-351298000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test19324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19324");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("05/01/70", (double) (-4L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-4.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19325");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("70-1-1");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
    }

    @Test
    public void test19326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19326");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.year();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyear();
        org.joda.time.DurationField durationField19 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology15.hours();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test19327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19327");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("+00:00:00.035");
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.lang.String str5 = locale3.toLanguageTag();
        java.lang.String str6 = locale3.getISO3Country();
        boolean boolean7 = locale3.hasExtensions();
        java.lang.String str8 = locale1.getDisplayScript(locale3);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder9.setExtension('a', "en-US");
        java.util.Locale.Builder builder14 = builder12.setVariant("");
        java.util.Locale.Builder builder16 = builder12.setScript("");
        java.util.Locale.Builder builder18 = builder12.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder19 = builder12.clear();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str27 = locale20.getDisplayCountry(locale23);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale20.getDisplayLanguage(locale28);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str36 = locale32.toLanguageTag();
        java.lang.String str37 = locale20.getDisplayCountry(locale32);
        java.util.Locale.Builder builder38 = builder12.setLocale(locale32);
        java.lang.String str39 = locale32.toLanguageTag();
        java.lang.String str40 = locale32.getVariant();
        java.util.Locale locale42 = new java.util.Locale("UTC");
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale47 = new java.util.Locale("hi!");
        java.lang.String str48 = locale47.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale47, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology52 = dateTimeParserBucket51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.days();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.year();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter56.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str60 = dateTimeZone58.getName((long) 2000);
        boolean boolean61 = dateTimeZone58.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter56.withZone(dateTimeZone58);
        org.joda.time.Chronology chronology63 = chronology52.withZone(dateTimeZone58);
        java.util.Locale locale64 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        java.util.Locale locale66 = locale64.stripExtensions();
        java.lang.String str67 = locale64.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (-101), chronology63, locale64, (java.lang.Integer) 100, (-1));
        java.lang.String str71 = locale42.getDisplayScript(locale64);
        java.lang.String str72 = locale64.getDisplayCountry();
        java.lang.String str73 = locale32.getDisplayCountry(locale64);
        java.lang.String str74 = locale1.getDisplayCountry(locale32);
        java.lang.String str75 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "giapponese" + "'", str29, "giapponese");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals(locale42.toString(), "utc");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str67, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test19328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19328");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("zh-CN");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology9, locale16, (java.lang.Integer) 40, 10);
        java.lang.Object obj20 = dateTimeParserBucket19.saveState();
        int int21 = dateTimeParserBucket19.getOffset();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test19329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19329");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfDay();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        long long16 = dateTimeZone13.adjustOffset((long) 0, true);
        java.lang.String str18 = dateTimeZone13.getNameKey((long) (-1));
        boolean boolean19 = dateTimeZone13.isFixed();
        int int21 = dateTimeZone13.getOffset((long) (short) 0);
        long long24 = dateTimeZone13.convertLocalToUTC(0L, true);
        long long27 = dateTimeZone13.convertLocalToUTC((long) 'u', false);
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone13.getOffset(readableInstant28);
        org.joda.time.Chronology chronology30 = chronology8.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField31 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology8.weekyear();
        java.lang.String str33 = chronology8.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 117L + "'", long27 == 117L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
    }

    @Test
    public void test19330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19330");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter0.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter0.withDefaultYear((-351300001));
        // The following exception was thrown during execution in test generation
        try {
            long long27 = dateTimeFormatter0.parseMillis("fr-FR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"fr-FR\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
    }

    @Test
    public void test19331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19331");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder4.clear();
        java.util.Locale locale8 = builder4.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
    }

    @Test
    public void test19332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19332");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.year();
        org.joda.time.DurationField durationField15 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.centuryOfEra();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19333");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withZone(dateTimeZone5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter6.getPrinter();
        java.util.Locale locale9 = dateTimeFormatter6.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter6.withDefaultYear((int) (byte) -1);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale16, (java.lang.Integer) 10, (int) 'a');
        long long23 = dateTimeParserBucket20.computeMillis(true, "hi!");
        long long25 = dateTimeParserBucket20.computeMillis(true);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale29 = new java.util.Locale("hi!");
        java.lang.String str30 = locale29.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale29, (java.lang.Integer) 10, (int) 'a');
        int int34 = dateTimeParserBucket33.getOffset();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket33.getZone();
        long long38 = dateTimeZone35.adjustOffset((-1L), true);
        long long41 = dateTimeZone35.adjustOffset((long) 'a', true);
        boolean boolean43 = dateTimeZone35.isStandardOffset((long) 100);
        long long46 = dateTimeZone35.adjustOffset((long) (byte) 10, false);
        dateTimeParserBucket20.setZone(dateTimeZone35);
        int int49 = dateTimeZone35.getOffsetFromLocal(3600000L);
        int int51 = dateTimeZone35.getOffsetFromLocal((-10800000L));
        java.util.TimeZone timeZone52 = dateTimeZone35.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter6.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter6.withZoneUTC();
        int int55 = dateTimeFormatter6.getDefaultYear();
        boolean boolean56 = dateTimeFormatter6.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 97L + "'", long41 == 97L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2000 + "'", int55 == 2000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test19334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19334");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) 2000);
        long long4 = dateTimeZone0.nextTransition((long) 'a');
        long long8 = dateTimeZone0.convertLocalToUTC(115260076L, false, (-151L));
        long long11 = dateTimeZone0.adjustOffset((-331257051L), false);
        long long13 = dateTimeZone0.nextTransition((-5699883L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 97L + "'", long4 == 97L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 115260076L + "'", long8 == 115260076L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-331257051L) + "'", long11 == (-331257051L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-5699883L) + "'", long13 == (-5699883L));
    }

    @Test
    public void test19335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19335");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.lang.String str12 = locale11.toLanguageTag();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        java.lang.String str15 = locale14.getDisplayCountry();
        java.lang.String str16 = locale14.toLanguageTag();
        java.lang.String str17 = locale11.getDisplayName(locale14);
        java.lang.String str18 = locale9.getDisplayCountry(locale14);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale21 = locale19.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = locale21.getDisplayScript(locale22);
        java.lang.String str25 = locale9.getDisplayLanguage(locale21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter8.withLocale(locale21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withChronology(chronology31);
        int int33 = dateTimeFormatter30.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter30.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeParser dateTimeParser36 = dateTimeFormatter30.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatter30.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter30.withDefaultYear((-41));
        org.joda.time.Chronology chronology40 = dateTimeFormatter30.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter44.withOffsetParsed();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale50 = new java.util.Locale("hi!");
        java.lang.String str51 = locale50.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology48, locale50, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        java.util.Locale locale57 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale57, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Chronology chronology61 = chronology55.withZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = chronology61.getZone();
        java.util.Locale locale64 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale64);
        java.lang.String str66 = dateTimeZone62.getShortName((long) 'u', locale64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter45.withLocale(locale64);
        java.lang.String str68 = dateTimeZone42.getShortName((long) 40, locale64);
        long long71 = dateTimeZone42.convertLocalToUTC((-1970L), true);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter30.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter8.withZone(dateTimeZone42);
        org.joda.time.format.DateTimePrinter dateTimePrinter74 = dateTimeFormatter8.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ja" + "'", str12, "ja");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str25, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2000 + "'", int33 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeParser36);
        org.junit.Assert.assertNotNull(dateTimeParser37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertEquals(locale57.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1970L) + "'", long71 == (-1970L));
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimePrinter74);
    }

    @Test
    public void test19336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19336");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("00-1-1");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test19337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19337");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2000);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withDefaultYear((-2));
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter3.getPrinter();
        boolean boolean10 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean13 = dateTimeFormatter12.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withPivotYear(2000);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter12.withLocale(locale16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter17.withPivotYear((int) (short) 1);
        java.lang.Integer int22 = dateTimeFormatter17.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter17.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter17.getPrinter();
        boolean boolean25 = dateTimeFormatter17.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter17.withZoneUTC();
        java.util.Locale locale27 = dateTimeFormatter17.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 1969);
        org.joda.time.format.DateTimeParser dateTimeParser30 = dateTimeFormatter29.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser30);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimePrinter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimePrinter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeParser30);
    }

    @Test
    public void test19338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19338");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) 2000);
        long long4 = dateTimeZone0.nextTransition((long) 'a');
        java.lang.String str6 = dateTimeZone0.getNameKey((long) 2000);
        java.lang.String str8 = dateTimeZone0.getNameKey((long) (short) 0);
        long long10 = dateTimeZone0.nextTransition((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale14 = new java.util.Locale("eng");
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale14.getDisplayScript();
        java.lang.String str17 = dateTimeZone0.getShortName(32L, locale14);
        java.util.Locale locale20 = new java.util.Locale("\u65e5\u6587");
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale25 = new java.util.Locale("hi!");
        java.lang.String str26 = locale25.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale25, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.halfdayOfDay();
        long long38 = chronology30.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField39 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology30.monthOfYear();
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale46, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        java.util.Locale locale53 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale53, (java.lang.Integer) 10);
        java.util.Locale.setDefault(category41, locale53);
        java.util.Locale locale57 = java.util.Locale.getDefault(category41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology30, locale57, (java.lang.Integer) 2000, (int) ' ');
        java.lang.String str61 = locale20.getDisplayCountry(locale57);
        java.lang.String str62 = locale20.getDisplayVariant();
        java.lang.String str63 = dateTimeZone0.getShortName((-117119900L), locale20);
        boolean boolean64 = locale20.hasExtensions();
        java.lang.String str65 = locale20.getCountry();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 97L + "'", long4 == 97L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals(locale14.toString(), "eng");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals(locale20.toString(), "\u65e5\u6587");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals(locale53.toString(), "eng");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test19339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19339");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        long long3 = dateTimeZone1.previousTransition((long) 40);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale8, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.lang.Integer int14 = dateTimeParserBucket12.getOffsetInteger();
        dateTimeParserBucket12.setOffset((java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket12.getZone();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getDisplayCountry();
        java.lang.String str22 = dateTimeZone17.getShortName((-346198000L), locale20);
        java.lang.String str23 = dateTimeZone1.getName(0L, locale20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 40L + "'", long3 == 40L);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
    }

    @Test
    public void test19340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19340");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguage("DE");
        java.util.Locale.Builder builder11 = builder6.setExtension('a', "Chinese");
        java.util.Locale.Builder builder12 = builder6.clear();
        java.util.Locale.Builder builder13 = builder6.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setVariant("zh_CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: zh_CN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test19341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19341");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) (-1));
        boolean boolean6 = dateTimeZone0.isFixed();
        int int8 = dateTimeZone0.getOffset((long) (short) 0);
        long long11 = dateTimeZone0.convertLocalToUTC(0L, true);
        long long14 = dateTimeZone0.adjustOffset((long) (short) 1, true);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone15.adjustOffset((long) 0, true);
        java.util.TimeZone timeZone19 = dateTimeZone15.toTimeZone();
        int int21 = dateTimeZone15.getOffsetFromLocal(100L);
        long long23 = dateTimeZone15.nextTransition((long) ' ');
        long long25 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (long) 40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str28 = dateTimeZone0.getNameKey((-117119900L));
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str37 = locale30.getDisplayCountry(locale33);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale30.getDisplayLanguage(locale38);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str46 = locale42.toLanguageTag();
        java.lang.String str47 = locale30.getDisplayCountry(locale42);
        java.lang.String str48 = dateTimeZone0.getName(0L, locale42);
        java.lang.String str49 = locale42.getISO3Country();
        java.util.Set<java.lang.Character> charSet50 = locale42.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 40L + "'", long25 == 40L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "giapponese" + "'", str39, "giapponese");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "it" + "'", str46, "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(charSet50);
    }

    @Test
    public void test19342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19342");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        java.util.Locale locale12 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale12, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.DurationField durationField16 = chronology10.months();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.secondOfDay();
        java.util.Locale locale20 = new java.util.Locale("22-2-11");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(187199900L, chronology10, locale20);
        org.joda.time.DateTimeField dateTimeField22 = chronology10.hourOfDay();
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals(locale12.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(locale20.toString(), "22-2-11");
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19343");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("+00:00:00.010");
        int int2 = dateTimeFormatter1.getDefaultYear();
        boolean boolean3 = dateTimeFormatter1.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withPivotYear((java.lang.Integer) (-13));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter1.withDefaultYear((-36));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear((int) '4');
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2000 + "'", int2 == 2000);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test19344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19344");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long4 = dateTimeZone1.adjustOffset((long) 0, true);
        java.lang.String str6 = dateTimeZone1.getNameKey((long) (-1));
        java.lang.String str8 = dateTimeZone1.getNameKey((long) 0);
        boolean boolean10 = dateTimeZone1.isStandardOffset((long) ' ');
        long long13 = dateTimeZone1.convertLocalToUTC((long) 2000, true);
        java.util.Locale locale16 = new java.util.Locale("it");
        java.lang.String str17 = dateTimeZone1.getShortName(35L, locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = org.joda.time.format.DateTimeFormat.patternForStyle("java.io.IOException: java.io.IOException: utc-x-lvariant-it", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: java.io.IOException: java.io.IOException: utc-x-lvariant-it");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2000L + "'", long13 == 2000L);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test19345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19345");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology9 = dateTimeFormatter0.getChronolgy();
        org.joda.time.LocalDate localDate11 = dateTimeFormatter0.parseLocalDate("69-12-31");
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setExtension('a', "en-US");
        java.util.Locale.Builder builder17 = builder15.setVariant("");
        java.util.Locale.Builder builder18 = builder17.clear();
        java.util.Locale.Builder builder19 = builder17.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder22 = builder19.setVariant("Italian");
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder23.setExtension('a', "en-US");
        java.util.Locale.Builder builder28 = builder26.setLanguageTag("it");
        java.util.Locale.Builder builder29 = builder26.clear();
        java.util.Locale.Builder builder31 = builder26.setRegion("");
        java.util.Locale locale32 = builder31.build();
        java.util.Locale.Builder builder33 = builder22.setLocale(locale32);
        java.lang.String str34 = locale32.getISO3Language();
        java.lang.String str35 = locale32.getLanguage();
        java.lang.String str36 = locale32.getDisplayCountry();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.lang.String str40 = locale37.getExtension('a');
        java.lang.String str41 = locale32.getDisplayCountry(locale37);
        java.util.Set<java.lang.Character> charSet42 = locale37.getExtensionKeys();
        boolean boolean43 = localDate11.equals((java.lang.Object) charSet42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean45 = dateTimeFormatter44.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter44.withPivotYear(2000);
        org.joda.time.format.DateTimeParser dateTimeParser48 = dateTimeFormatter47.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter49.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str53 = dateTimeZone51.getName((long) 2000);
        boolean boolean54 = dateTimeZone51.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter49.withZone(dateTimeZone51);
        org.joda.time.format.DateTimeParser dateTimeParser56 = dateTimeFormatter49.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter57 = dateTimeFormatter49.getPrinter();
        org.joda.time.Chronology chronology58 = dateTimeFormatter49.getChronolgy();
        org.joda.time.LocalDate localDate60 = dateTimeFormatter49.parseLocalDate("69-12-31");
        java.lang.String str61 = localDate60.toString();
        int int62 = localDate60.size();
        java.lang.String str63 = dateTimeFormatter47.print((org.joda.time.ReadablePartial) localDate60);
        int int64 = localDate60.size();
        int int65 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale69 = new java.util.Locale("hi!");
        java.lang.String str70 = locale69.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale69, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology74 = dateTimeParserBucket73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.weekyear();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.monthOfYear();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField79 = chronology74.weekyearOfCentury();
        org.joda.time.DurationField durationField80 = chronology74.centuries();
        org.joda.time.DateTimeField dateTimeField81 = chronology74.millisOfDay();
        org.joda.time.DateTimeField dateTimeField82 = chronology74.monthOfYear();
        boolean boolean83 = localDate11.equals((java.lang.Object) chronology74);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeParser48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeParser56);
        org.junit.Assert.assertNotNull(dateTimePrinter57);
        org.junit.Assert.assertNull(chronology58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1969-12-31" + "'", str61, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u4e09" + "'", str63, "\u5e74\u6708\u65e5\u661f\u671f\u4e09");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals(locale69.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test19346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19346");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale0);
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.lang.String str4 = locale3.toLanguageTag();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale3.getDisplayVariant();
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleKeys();
        java.lang.String str8 = locale0.getDisplayVariant(locale3);
        java.util.Set<java.lang.String> strSet9 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-CN" + "'", str4, "zh-CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test19347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19347");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.Chronology chronology14 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.weekOfWeekyear();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19348");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfWeek();
        org.joda.time.DurationField durationField15 = chronology9.days();
        org.joda.time.DurationField durationField16 = chronology9.years();
        org.joda.time.DurationField durationField17 = chronology9.years();
        java.util.Locale locale20 = new java.util.Locale("United States", "hi!");
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getDisplayCountry();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale22.getDisplayVariant(locale25);
        java.util.Locale locale27 = locale22.stripExtensions();
        java.lang.String str28 = locale20.getDisplayName(locale27);
        java.util.Locale.setDefault(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((-349199987L), chronology9, locale27, (java.lang.Integer) 117120000);
        long long32 = dateTimeParserBucket31.computeMillis();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals(locale20.toString(), "united states_HI!");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "united states (HI!)" + "'", str28, "united states (HI!)");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-349199987L) + "'", long32 == (-349199987L));
    }

    @Test
    public void test19349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19349");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', (int) (byte) 1);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale8 = new java.util.Locale("hi!");
        java.lang.String str9 = locale8.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale8, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.DurationField durationField18 = chronology13.minutes();
        java.util.Locale locale22 = new java.util.Locale("UTC", "1/1/70", "it");
        java.lang.String str23 = locale22.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) ' ', chronology13, locale22, (java.lang.Integer) 10, (int) (short) 100);
        java.lang.String str27 = locale22.getDisplayScript();
        java.lang.String str28 = dateTimeZone2.getShortName((-346200000L), locale22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        long long32 = dateTimeZone2.adjustOffset(115260076L, true);
        long long35 = dateTimeZone2.convertLocalToUTC((-144060000L), true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals(locale22.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it" + "'", str23, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+32:01" + "'", str28, "+32:01");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 115260076L + "'", long32 == 115260076L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-259320000L) + "'", long35 == (-259320000L));
    }

    @Test
    public void test19350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19350");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        java.lang.Integer int14 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyear();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test19351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19351");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimeParser dateTimeParser1 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 100);
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = locale12.toLanguageTag();
        java.lang.String str15 = locale9.getDisplayName(locale12);
        java.lang.String str16 = locale7.getDisplayCountry(locale12);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.lang.String str19 = locale12.getDisplayVariant(locale17);
        java.util.Set<java.lang.String> strSet20 = locale17.getUnicodeLocaleKeys();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale25 = new java.util.Locale("hi!");
        java.lang.String str26 = locale25.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale25, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.secondOfMinute();
        java.util.Locale locale38 = new java.util.Locale("United States", "hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(10L, chronology30, locale38, (java.lang.Integer) 0);
        java.lang.String str42 = locale38.getExtension('a');
        java.util.Locale locale43 = locale38.stripExtensions();
        java.util.Locale locale45 = new java.util.Locale("1970/01/01");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str47 = locale45.getDisplayScript();
        java.lang.String str48 = locale43.getDisplayCountry(locale45);
        java.lang.String str49 = locale17.getDisplayName(locale43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter2.withLocale(locale43);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeFormatter50.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeParser1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals(locale38.toString(), "united states_HI!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "united states_HI!");
        org.junit.Assert.assertEquals(locale45.toString(), "1970/01/01");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "HI!" + "'", str48, "HI!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
    }

    @Test
    public void test19352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19352");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.getScript();
        java.lang.String str4 = locale1.toLanguageTag();
        java.lang.String str5 = locale1.getLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test19353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19353");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.yearOfEra();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19354");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DurationField durationField13 = chronology8.halfdays();
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology8.getZone();
        org.joda.time.DurationField durationField16 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.year();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test19355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19355");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getDisplayLanguage();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale7, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getName((long) 2000);
        boolean boolean21 = dateTimeZone18.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter16.withZone(dateTimeZone18);
        org.joda.time.Chronology chronology23 = chronology12.withZone(dateTimeZone18);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.util.Locale locale26 = locale24.stripExtensions();
        java.lang.String str27 = locale24.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (-101), chronology23, locale24, (java.lang.Integer) 100, (-1));
        java.lang.String str31 = locale0.getDisplayLanguage(locale24);
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English" + "'", str2, "English");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+32:01" + "'", str20, "+32:01");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
    }

    @Test
    public void test19356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19356");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.joda.time.DurationField durationField19 = chronology15.centuries();
        org.joda.time.Chronology chronology20 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.yearOfEra();
        org.joda.time.DurationField durationField24 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField25 = chronology15.era();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test19357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19357");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDefaultYear((-11));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withPivotYear((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test19358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19358");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("70/01/01");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale1.getISO3Country();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test19359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19359");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ita");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.Locale.FilteringMode filteringMode12 = null;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList10, filteringMode12);
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale26 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.Locale.FilteringMode filteringMode43 = null;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList41, filteringMode43);
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.Locale.FilteringMode filteringMode56 = null;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strList54, filteringMode56);
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, strMap59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, strMap61);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.lang.String str67 = locale66.toLanguageTag();
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale66 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList71);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList71);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap74 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList75 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strMap74);
        java.util.Collection<java.util.Locale> localeCollection76 = null;
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter(languageRangeList75, localeCollection76, filteringMode77);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList29, filteringMode77);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en" + "'", str27, "en");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "en" + "'", str67, "en");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(languageRangeList75);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode77.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(localeList79);
    }

    @Test
    public void test19360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19360");
        java.util.Locale locale1 = new java.util.Locale("+40:01");
        java.lang.String str2 = locale1.getDisplayScript();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology5, locale6, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str10 = locale3.getDisplayCountry(locale6);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) 10);
        java.util.Set<java.lang.Character> charSet17 = locale13.getExtensionKeys();
        java.lang.String str18 = locale3.getDisplayName(locale13);
        java.lang.String str19 = locale13.getDisplayCountry();
        java.util.Set<java.lang.String> strSet20 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = locale13.stripExtensions();
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale1.getDisplayScript(locale21);
        org.junit.Assert.assertEquals(locale1.toString(), "+40:01");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "giapponese" + "'", str18, "giapponese");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test19361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19361");
        java.util.Locale locale2 = new java.util.Locale("+00:00:00.120", "java.io.IOException: 70-1-1");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getUnicodeLocaleType("+00:00:00.035 (ENGLISH (UNITED STATES) (UND,EN-US))");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: +00:00:00.035 (ENGLISH (UNITED STATES) (UND,EN-US))");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "+00:00:00.120_JAVA.IO.IOEXCEPTION: 70-1-1");
    }

    @Test
    public void test19362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19362");
        java.io.IOException iOException2 = new java.io.IOException("en-US");
        java.io.IOException iOException4 = new java.io.IOException("hi!");
        java.io.IOException iOException5 = new java.io.IOException();
        java.io.IOException iOException6 = new java.io.IOException();
        iOException5.addSuppressed((java.lang.Throwable) iOException6);
        iOException4.addSuppressed((java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray9 = iOException6.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException12 = new java.io.IOException("en-US");
        java.io.IOException iOException14 = new java.io.IOException("hi!");
        java.io.IOException iOException15 = new java.io.IOException();
        java.io.IOException iOException16 = new java.io.IOException();
        iOException15.addSuppressed((java.lang.Throwable) iOException16);
        iOException14.addSuppressed((java.lang.Throwable) iOException16);
        java.lang.Throwable[] throwableArray19 = iOException16.getSuppressed();
        iOException12.addSuppressed((java.lang.Throwable) iOException16);
        java.io.IOException iOException22 = new java.io.IOException("hi!");
        java.io.IOException iOException23 = new java.io.IOException();
        java.io.IOException iOException24 = new java.io.IOException();
        iOException23.addSuppressed((java.lang.Throwable) iOException24);
        iOException22.addSuppressed((java.lang.Throwable) iOException24);
        iOException16.addSuppressed((java.lang.Throwable) iOException22);
        java.io.IOException iOException29 = new java.io.IOException("fr");
        iOException22.addSuppressed((java.lang.Throwable) iOException29);
        iOException6.addSuppressed((java.lang.Throwable) iOException22);
        java.io.IOException iOException34 = new java.io.IOException("fr");
        java.io.IOException iOException35 = new java.io.IOException("01.01.70", (java.lang.Throwable) iOException34);
        iOException6.addSuppressed((java.lang.Throwable) iOException35);
        java.lang.Throwable[] throwableArray37 = iOException6.getSuppressed();
        java.lang.Throwable[] throwableArray38 = iOException6.getSuppressed();
        java.io.IOException iOException39 = new java.io.IOException("java.io.IOException: java.io.IOException: java.io.IOException: cinese (cina)", (java.lang.Throwable) iOException6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test19363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19363");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) (-1));
        int int7 = dateTimeZone0.getOffsetFromLocal((long) ' ');
        boolean boolean8 = dateTimeZone0.isFixed();
        long long11 = dateTimeZone0.convertLocalToUTC(0L, true);
        java.util.Locale locale15 = new java.util.Locale("chinois (Chine)", "eng");
        java.lang.String str16 = dateTimeZone0.getShortName(5009L, locale15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 115260000 + "'", int7 == 115260000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-115260000L) + "'", long11 == (-115260000L));
        org.junit.Assert.assertEquals(locale15.toString(), "chinois (chine)_ENG");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+32:01" + "'", str16, "+32:01");
    }

    @Test
    public void test19364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19364");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Chronology chronology15 = chronology9.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = chronology9.getDateTimeMillis(117120000, (-98), 115260000, (-101), (int) (byte) 1, (-3600001), 36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -101 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19365");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology8.getZone();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test19366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19366");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        java.util.Locale locale18 = new java.util.Locale("English (United States)", "und", "en-US");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology9, locale18, (java.lang.Integer) (-1));
        org.joda.time.DurationField durationField21 = chronology9.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology9.weekOfWeekyear();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals(locale18.toString(), "english (united states)_UND_en-US");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test19367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19367");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.weekyearOfCentury();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale25 = new java.util.Locale("hi!");
        java.lang.String str26 = locale25.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale25, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        java.util.Locale locale32 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale32, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = chronology30.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField39 = chronology30.era();
        org.joda.time.Chronology chronology40 = chronology30.withUTC();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        java.lang.String str44 = dateTimeZone41.getNameKey((long) 2000);
        java.util.TimeZone timeZone45 = dateTimeZone41.toTimeZone();
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale47);
        java.lang.String str49 = locale47.getDisplayName();
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleKeys();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology53, locale54, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str58 = locale51.getDisplayCountry(locale54);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.lang.String str60 = locale51.getDisplayLanguage(locale59);
        java.lang.String str61 = locale51.getCountry();
        java.util.Locale.setDefault(locale51);
        java.lang.String str63 = locale47.getDisplayVariant(locale51);
        java.lang.String str64 = locale47.getISO3Language();
        java.lang.String str65 = dateTimeZone41.getShortName((-111539883L), locale47);
        org.joda.time.LocalDateTime localDateTime66 = null;
        boolean boolean67 = dateTimeZone41.isLocalDateTimeGap(localDateTime66);
        org.joda.time.Chronology chronology68 = chronology9.withZone(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        long long72 = dateTimeZone69.adjustOffset((long) 0, true);
        java.lang.String str74 = dateTimeZone69.getNameKey((long) (-1));
        boolean boolean75 = dateTimeZone69.isFixed();
        int int77 = dateTimeZone69.getOffset((long) (short) 0);
        long long80 = dateTimeZone69.convertLocalToUTC(0L, true);
        long long83 = dateTimeZone69.adjustOffset((long) (short) 1, true);
        java.lang.String str85 = dateTimeZone69.getShortName(0L);
        java.lang.String str86 = dateTimeZone69.toString();
        long long88 = dateTimeZone41.getMillisKeepLocal(dateTimeZone69, (-86399948L));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals(locale32.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str49, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "giapponese" + "'", str60, "giapponese");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "zho" + "'", str64, "zho");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+32:01" + "'", str65, "+32:01");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 115260000 + "'", int77 == 115260000);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-115260000L) + "'", long80 == (-115260000L));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+32:01" + "'", str85, "+32:01");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+32:01" + "'", str86, "+32:01");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-86399948L) + "'", long88 == (-86399948L));
    }

    @Test
    public void test19368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19368");
        java.io.IOException iOException1 = new java.io.IOException("tedesco");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
    }

    @Test
    public void test19369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19369");
        java.io.IOException iOException2 = new java.io.IOException("en-US");
        java.io.IOException iOException4 = new java.io.IOException("hi!");
        java.io.IOException iOException5 = new java.io.IOException();
        java.io.IOException iOException6 = new java.io.IOException();
        iOException5.addSuppressed((java.lang.Throwable) iOException6);
        iOException4.addSuppressed((java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray9 = iOException6.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException12 = new java.io.IOException("hi!");
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException();
        iOException13.addSuppressed((java.lang.Throwable) iOException14);
        iOException12.addSuppressed((java.lang.Throwable) iOException14);
        iOException6.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.Throwable[] throwableArray18 = iOException12.getSuppressed();
        java.io.IOException iOException19 = new java.io.IOException("java.io.IOException: +32:32", (java.lang.Throwable) iOException12);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test19370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19370");
        java.util.Locale locale3 = new java.util.Locale("english (united states)_UND_en-US", "java.io.IOException: 11:00:00 PM", "\u4e0a\u5348\u65f6\u5206\u79d2");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u4e0a\u5348\u65f6\u5206\u79d2");
    }

    @Test
    public void test19371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19371");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DurationField durationField13 = chronology8.halfdays();
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology8.getZone();
        int int17 = dateTimeZone15.getOffsetFromLocal(5967818812670017L);
        java.util.TimeZone timeZone18 = dateTimeZone15.toTimeZone();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test19372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19372");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        java.lang.Integer int9 = dateTimeParserBucket7.getOffsetInteger();
        int int10 = dateTimeParserBucket7.getOffset();
        long long12 = dateTimeParserBucket7.computeMillis(true);
        dateTimeParserBucket7.setOffset((-4));
        long long15 = dateTimeParserBucket7.computeMillis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withChronology(chronology20);
        java.util.Locale locale22 = dateTimeFormatter21.getLocale();
        boolean boolean23 = dateTimeFormatter21.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeFormatter21.getZone();
        java.util.Locale locale25 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter21.withLocale(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeFormatter21.getZone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter21.withChronology(chronology28);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = dateTimeFormatter29.getPrinter();
        boolean boolean31 = dateTimeParserBucket7.restoreState((java.lang.Object) dateTimeFormatter29);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-115260000L) + "'", long12 == (-115260000L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4L + "'", long15 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(locale22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimePrinter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test19373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19373");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.halfdayOfDay();
        long long17 = chronology9.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.weekyearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale24 = new java.util.Locale("hi!");
        java.lang.String str25 = locale24.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale24, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.days();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.year();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.halfdayOfDay();
        long long37 = chronology29.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField38 = chronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology29.monthOfYear();
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale45 = new java.util.Locale("hi!");
        java.lang.String str46 = locale45.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale45, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        java.util.Locale locale52 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale52, (java.lang.Integer) 10);
        java.util.Locale.setDefault(category40, locale52);
        java.util.Locale locale56 = java.util.Locale.getDefault(category40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology29, locale56, (java.lang.Integer) 2000, (int) ' ');
        dateTimeParserBucket59.setPivotYear((java.lang.Integer) 2000);
        java.util.Locale locale62 = dateTimeParserBucket59.getLocale();
        java.util.Locale locale63 = locale62.stripExtensions();
        java.util.Set<java.lang.Character> charSet64 = locale63.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((-943881132924000000L), chronology9, locale63, (java.lang.Integer) (-41));
        java.lang.Integer int67 = dateTimeParserBucket66.getOffsetInteger();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals(locale52.toString(), "eng");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "eng");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "eng");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "eng");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertNull(int67);
    }

    @Test
    public void test19374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19374");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clearExtensions();
        java.util.Locale.Builder builder9 = builder3.setLanguage("UTC");
        java.util.Locale.Builder builder11 = builder3.setRegion("fr");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder11.clearExtensions();
        java.util.Locale locale15 = builder11.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "utc_FR");
    }

    @Test
    public void test19375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19375");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.Locale.FilteringMode filteringMode10 = null;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList8, filteringMode10);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.util.Collection<java.lang.String> strCollection13 = null;
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale18 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = locale27.toLanguageTag();
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale27 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, strMap34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.parse("it", strMap37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList38, strMap39);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.Locale.FilteringMode filteringMode49 = null;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strList47, filteringMode49);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.Locale.FilteringMode filteringMode61 = null;
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strList59, filteringMode61);
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, strMap64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, strMap66);
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.lang.String str72 = locale71.toLanguageTag();
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale71 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList74);
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale78 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList77);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter(languageRangeList38, (java.util.Collection<java.util.Locale>) localeList77, filteringMode79);
        java.util.Locale locale81 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList77);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList77);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ja" + "'", str19, "ja");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ja" + "'", str28, "ja");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ja" + "'", str72, "ja");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNull(locale78);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode79.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertNotNull(localeList82);
    }

    @Test
    public void test19376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19376");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u4e0a\u5348\u65f6\u5206\u79d2 +00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??12?00?05?+00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19377");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u82f1\u6587\u7f8e\u570b)");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test19378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19378");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder3.addUnicodeLocaleAttribute("Japanese");
        java.util.Locale.Builder builder14 = builder12.setLanguage("it");
        java.util.Locale.Builder builder16 = builder12.setLanguage("zho");
        java.util.Locale.Builder builder17 = builder12.clearExtensions();
        java.util.Locale locale18 = builder12.build();
        java.util.Locale.Builder builder19 = builder12.clear();
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale.Builder builder22 = builder19.setVariant("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zho");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test19379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19379");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getName((long) 2000);
        boolean boolean17 = dateTimeZone14.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter12.withZone(dateTimeZone14);
        org.joda.time.Chronology chronology19 = chronology8.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology19.add(readablePeriod22, (long) (-53), (int) '#');
        org.joda.time.DateTimeField dateTimeField26 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.weekOfWeekyear();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+32:01" + "'", str16, "+32:01");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-53L) + "'", long25 == (-53L));
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test19380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19380");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder9 = builder6.setLocale(locale8);
        java.util.Locale.Builder builder10 = builder6.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("utc");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.removeUnicodeLocaleAttribute("venerd\354 2 gennaio 1970 9.32.58 +00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: venerdi? 2 gennaio 1970 9.32.58 +00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test19381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19381");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Japanese");
        java.util.Locale.Builder builder9 = builder6.clearExtensions();
        java.util.Locale locale13 = new java.util.Locale("UTC", "1/1/70", "it");
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.lang.String str17 = locale16.toLanguageTag();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        java.lang.String str20 = locale19.getDisplayCountry();
        java.lang.String str21 = locale19.toLanguageTag();
        java.lang.String str22 = locale16.getDisplayName(locale19);
        java.lang.String str23 = locale14.getDisplayCountry(locale19);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.lang.String str26 = locale19.getDisplayVariant(locale24);
        java.lang.String str27 = locale13.getDisplayVariant(locale24);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("+00:00:00.035");
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = locale24.getDisplayScript(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale29.getCountry();
        java.util.Locale.Builder builder34 = builder6.setLocale(locale29);
        java.util.Locale.Builder builder35 = builder34.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale13.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ja" + "'", str17, "ja");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Japanese" + "'", str22, "Japanese");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it" + "'", str27, "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test19382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19382");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology8.weekyears();
        org.joda.time.DurationField durationField15 = chronology8.seconds();
        java.lang.String str16 = chronology8.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology8.getDateTimeMillis(360000000, (int) 'a', 0, 3660000, 144060000, 1969, (-3));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3660000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
    }

    @Test
    public void test19383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19383");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.halfdayOfDay();
        long long17 = chronology9.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.clockhourOfDay();
        org.joda.time.DurationField durationField19 = chronology9.months();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology9.getZone();
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getDisplayCountry();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale22.getDisplayVariant(locale25);
        java.util.Locale locale27 = locale22.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale22);
        org.joda.time.DurationField durationField29 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField31 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField33 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology9.monthOfYear();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test19384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19384");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test19385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19385");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("english (united states) (und,en-us)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test19386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19386");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter13.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getName((long) 2000);
        boolean boolean18 = dateTimeZone15.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter13.withZone(dateTimeZone15);
        org.joda.time.Chronology chronology20 = chronology9.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getName((long) 2000);
        long long25 = dateTimeZone21.nextTransition((long) 'a');
        java.lang.String str27 = dateTimeZone21.getNameKey((long) 2000);
        java.lang.String str29 = dateTimeZone21.getNameKey((long) (short) 0);
        long long31 = dateTimeZone21.nextTransition((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.util.Locale locale35 = new java.util.Locale("eng");
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale35.getDisplayScript();
        java.lang.String str38 = dateTimeZone21.getShortName(32L, locale35);
        boolean boolean39 = locale35.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(1L, chronology20, locale35, (java.lang.Integer) (-36), (int) (byte) -1);
        java.lang.String str43 = locale35.getVariant();
        java.util.Locale locale44 = locale35.stripExtensions();
        java.lang.String str45 = locale35.getDisplayScript();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+32:01" + "'", str17, "+32:01");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+32:01" + "'", str23, "+32:01");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 97L + "'", long25 == 97L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals(locale35.toString(), "eng");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+32:01" + "'", str38, "+32:01");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test19387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19387");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter8.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withPivotYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear((-2));
        org.joda.time.Chronology chronology29 = dateTimeFormatter28.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test19388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19388");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        boolean boolean2 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZoneUTC();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.getDefault(category5);
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str15 = locale8.getDisplayCountry(locale11);
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale8.getDisplayLanguage(locale16);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str24 = locale20.toLanguageTag();
        java.lang.String str25 = locale8.getDisplayCountry(locale20);
        java.util.Locale.setDefault(category5, locale8);
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.lang.String str30 = locale27.getExtension('u');
        java.util.Set<java.lang.Character> charSet31 = locale27.getExtensionKeys();
        java.lang.String str32 = locale27.toLanguageTag();
        java.util.Locale.setDefault(category5, locale27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter4.withLocale(locale27);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale38 = new java.util.Locale("hi!");
        java.lang.String str39 = locale38.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale38, (java.lang.Integer) 10, (int) 'a');
        int int43 = dateTimeParserBucket42.getOffset();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket42.getZone();
        long long47 = dateTimeZone44.adjustOffset((-1L), true);
        long long50 = dateTimeZone44.adjustOffset((long) 'a', true);
        boolean boolean52 = dateTimeZone44.isStandardOffset((long) 100);
        boolean boolean53 = dateTimeZone44.isFixed();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology57, locale58, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str62 = locale55.getDisplayCountry(locale58);
        java.lang.String str63 = dateTimeZone44.getShortName((long) (short) -1, locale55);
        java.lang.String str65 = dateTimeZone44.getNameKey(100L);
        java.lang.String str66 = dateTimeZone44.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter4.withZone(dateTimeZone44);
        int int68 = dateTimeFormatter67.getDefaultYear();
        java.util.Locale locale72 = new java.util.Locale("UTC", "1/1/70", "it");
        java.util.Locale locale73 = locale72.stripExtensions();
        java.lang.String str74 = locale72.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter67.withLocale(locale72);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeFormatter75.getZone();
        org.joda.time.Chronology chronology77 = dateTimeFormatter75.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "giapponese" + "'", str17, "giapponese");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it" + "'", str24, "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ja-JP" + "'", str32, "ja-JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 97L + "'", long50 == 97L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+32:01" + "'", str63, "+32:01");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+32:01" + "'", str66, "+32:01");
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2000 + "'", int68 == 2000);
        org.junit.Assert.assertEquals(locale72.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "utc_1/1/70_it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1/1/70" + "'", str74, "1/1/70");
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNull(chronology77);
    }

    @Test
    public void test19389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19389");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test19390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19390");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology9.add(readablePeriod13, (long) 'u', (int) (short) -1);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        java.lang.String str19 = locale18.getDisplayCountry();
        java.lang.String str20 = locale18.toLanguageTag();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale18.getDisplayVariant(locale21);
        java.util.Locale locale23 = locale18.stripExtensions();
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        java.util.Locale locale25 = locale23.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((-3659999L), chronology9, locale23, (java.lang.Integer) 0, (-4));
        org.joda.time.DurationField durationField29 = chronology9.millis();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 117L + "'", long16 == 117L);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test19391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19391");
        java.io.IOException iOException2 = new java.io.IOException("en-US");
        java.io.IOException iOException4 = new java.io.IOException("hi!");
        java.io.IOException iOException5 = new java.io.IOException();
        java.io.IOException iOException6 = new java.io.IOException();
        iOException5.addSuppressed((java.lang.Throwable) iOException6);
        iOException4.addSuppressed((java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray9 = iOException6.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException12 = new java.io.IOException("hi!");
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException();
        iOException13.addSuppressed((java.lang.Throwable) iOException14);
        iOException12.addSuppressed((java.lang.Throwable) iOException14);
        iOException6.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.Throwable[] throwableArray18 = iOException6.getSuppressed();
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException20 = new java.io.IOException("\u5fb7\u6587", (java.lang.Throwable) iOException6);
        java.lang.String str21 = iOException6.toString();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.io.IOException" + "'", str21, "java.io.IOException");
    }

    @Test
    public void test19392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19392");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DurationField durationField10 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField15 = chronology8.eras();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test19393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19393");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder3.addUnicodeLocaleAttribute("Japanese");
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.lang.String str17 = locale14.getExtension('a');
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder19.setExtension('a', "en-US");
        java.util.Locale.Builder builder24 = builder22.setLanguageTag("it");
        java.util.Locale locale25 = builder24.build();
        java.util.Locale.setDefault(category13, locale25);
        boolean boolean27 = locale25.hasExtensions();
        java.util.Locale.Builder builder28 = builder3.setLocale(locale25);
        java.util.Locale locale29 = builder28.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder28.addUnicodeLocaleAttribute("\u5e74\u6708\u65e5\u6642\u5206\u79d2 +00:00_GIAPPONESE");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1970?1?1? 0?00?00? +00:00_GIAPPONESE [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
    }

    @Test
    public void test19394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19394");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("englisch", (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19395");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter3.withZoneUTC();
        java.lang.Appendable appendable12 = null;
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(appendable12, readablePartial13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeParser10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test19396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19396");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.monthOfYear();
        java.lang.String str16 = chronology8.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology8.getZone();
        long long21 = chronology8.add((-349800102L), 3782113458L, (int) (short) -1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-4131913560L) + "'", long21 == (-4131913560L));
    }

    @Test
    public void test19397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19397");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter8.withChronology(chronology17);
        int int21 = dateTimeFormatter20.getDefaultYear();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter20.withPivotYear(0);
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter20.withLocale(locale28);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
    }

    @Test
    public void test19398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19398");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        long long14 = chronology9.add((long) 1, 100L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.minuteOfDay();
        org.joda.time.Chronology chronology17 = chronology9.withUTC();
        java.util.Locale locale19 = new java.util.Locale("70/01/01");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology17, locale19, (java.lang.Integer) (-115200001));
        int int22 = dateTimeParserBucket21.getOffset();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-99L) + "'", long14 == (-99L));
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale19.toString(), "70/01/01");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test19399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19399");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        int int8 = dateTimeFormatter5.getDefaultYear();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.util.Locale locale11 = locale9.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter5.withLocale(locale9);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale16, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter5.withChronology(chronology21);
        boolean boolean29 = dateTimeFormatter28.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test19400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19400");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone15.adjustOffset((long) 0, true);
        java.lang.String str20 = dateTimeZone15.getNameKey((long) (-1));
        boolean boolean21 = dateTimeZone15.isFixed();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str30 = locale23.getDisplayCountry(locale26);
        java.lang.String str31 = dateTimeZone15.getName((long) (short) 100, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology9, locale23, (java.lang.Integer) 10, (int) '4');
        java.lang.String str35 = chronology9.toString();
        org.joda.time.DurationField durationField36 = chronology9.halfdays();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology9.getZone();
        java.lang.String str39 = dateTimeZone37.getNameKey(1L);
        int int41 = dateTimeZone37.getOffsetFromLocal((long) (short) 100);
        long long44 = dateTimeZone37.convertLocalToUTC(0L, true);
        java.lang.String str45 = dateTimeZone37.toString();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:02" + "'", str31, "+00:00:02");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
    }

    @Test
    public void test19401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19401");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology8.add(readablePeriod15, (-35L), 0);
        org.joda.time.DurationField durationField19 = chronology8.millis();
        java.lang.String str20 = chronology8.toString();
        org.joda.time.DurationField durationField21 = chronology8.weeks();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-35L) + "'", long18 == (-35L));
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test19402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19402");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField13 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.era();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test19403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19403");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withChronology(chronology5);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        boolean boolean8 = dateTimeFormatter6.isOffsetParsed();
        int int9 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter6.getZone();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale14 = new java.util.Locale("hi!");
        java.lang.String str15 = locale14.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale14, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology19.yearOfEra();
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder30.setExtension('a', "en-US");
        java.util.Locale.Builder builder35 = builder33.setVariant("");
        java.util.Locale.Builder builder36 = builder35.clear();
        java.util.Locale.Builder builder37 = builder36.clearExtensions();
        java.util.Locale.Builder builder40 = builder36.setExtension('a', "it");
        java.util.Locale.Builder builder42 = builder40.setVariant("English");
        java.util.Locale.Builder builder43 = builder40.clear();
        java.util.Locale locale44 = builder43.build();
        java.lang.String str45 = locale44.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (-98), chronology19, locale44, (java.lang.Integer) (-9));
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale51 = new java.util.Locale("hi!");
        java.lang.String str52 = locale51.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale51, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.weekyear();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.monthOfYear();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.secondOfDay();
        org.joda.time.DateTimeField dateTimeField61 = chronology56.dayOfWeek();
        org.joda.time.DurationField durationField62 = chronology56.days();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        long long66 = chronology56.add(readablePeriod63, (-36L), 40);
        org.joda.time.DurationField durationField67 = chronology56.halfdays();
        org.joda.time.DateTimeField dateTimeField68 = chronology56.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = chronology56.dayOfWeek();
        dateTimeParserBucket47.saveField(dateTimeField69, (int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2000 + "'", int9 == 2000);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-36L) + "'", long66 == (-36L));
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test19404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19404");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.util.Locale.Builder builder10 = builder3.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder3.addUnicodeLocaleAttribute("Japanese");
        java.util.Locale.Builder builder14 = builder12.setLanguage("it");
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder15.setScript("");
        java.util.Locale locale18 = builder17.build();
        java.lang.String str19 = locale18.getCountry();
        java.util.Locale locale21 = new java.util.Locale("31/12/69");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.lang.String str23 = locale18.getDisplayCountry(locale21);
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Set<java.lang.String> strSet25 = locale21.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale21.toString(), "31/12/69");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "31/12/69" + "'", str24, "31/12/69");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test19405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19405");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField15 = chronology8.years();
        org.joda.time.Chronology chronology16 = chronology8.withUTC();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology16.add(readablePeriod17, (long) 40, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.halfdayOfDay();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 40L + "'", long20 == 40L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test19406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19406");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale6 = new java.util.Locale("hi!");
        java.lang.String str7 = locale6.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale6, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology11 = dateTimeParserBucket10.getChronology();
        java.util.Locale locale13 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale13, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = chronology11.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale20);
        java.lang.String str22 = dateTimeZone18.getShortName((long) 'u', locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter1.withLocale(locale20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withPivotYear((java.lang.Integer) 40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear(0);
        java.util.Locale locale28 = dateTimeFormatter25.getLocale();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeFormatter25.getZone();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = locale34.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale34, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        java.util.Locale locale41 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale41, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField44 = chronology39.days();
        org.joda.time.DurationField durationField45 = chronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.weekyear();
        java.lang.String str47 = chronology39.toString();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale51 = new java.util.Locale("hi!");
        java.lang.String str52 = locale51.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale51, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        long long58 = dateTimeParserBucket55.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale63 = new java.util.Locale("hi!");
        java.lang.String str64 = locale63.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology61, locale63, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology68 = dateTimeParserBucket67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.days();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.year();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        long long74 = chronology68.add(readablePeriod71, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField75 = chronology68.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField76 = chronology68.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField77 = chronology68.weekOfWeekyear();
        dateTimeParserBucket55.saveField(dateTimeField77, (-1));
        org.joda.time.DateTimeZone dateTimeZone80 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology81 = chronology39.withZone(dateTimeZone80);
        boolean boolean82 = dateTimeZone80.isFixed();
        boolean boolean83 = dateTimeZone80.isFixed();
        int int85 = dateTimeZone80.getOffset((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter25.withZone(dateTimeZone80);
        org.joda.time.format.DateTimeParser dateTimeParser87 = dateTimeFormatter86.getParser();
        int int88 = dateTimeParser87.estimateParsedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals(locale13.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:02" + "'", str22, "+00:00:02");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNull(dateTimeZone29);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals(locale41.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(chronology56);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-2000L) + "'", long58 == (-2000L));
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2000 + "'", int85 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(dateTimeParser87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 40 + "'", int88 == 40);
    }

    @Test
    public void test19407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19407");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        long long10 = dateTimeParserBucket7.computeMillis(false);
        long long12 = dateTimeParserBucket7.computeMillis(true);
        java.util.Locale locale13 = dateTimeParserBucket7.getLocale();
        long long14 = dateTimeParserBucket7.computeMillis();
        dateTimeParserBucket7.setPivotYear((java.lang.Integer) (-2));
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale20, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.year();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology25.add(readablePeriod28, (long) (-1), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField32 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.weekOfWeekyear();
        boolean boolean35 = dateTimeParserBucket7.restoreState((java.lang.Object) chronology25);
        org.joda.time.DateTimeField dateTimeField36 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology25.getZone();
        java.lang.Object obj38 = null;
        boolean boolean39 = dateTimeZone37.equals(obj38);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-2000L) + "'", long10 == (-2000L));
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-2000L) + "'", long12 == (-2000L));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-2000L) + "'", long14 == (-2000L));
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test19408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19408");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.centuryOfEra();
        java.lang.String str11 = chronology9.toString();
        org.joda.time.DurationField durationField12 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        long long17 = dateTimeZone14.adjustOffset((long) 0, true);
        java.lang.String str19 = dateTimeZone14.getNameKey((long) (-1));
        boolean boolean20 = dateTimeZone14.isFixed();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str29 = locale22.getDisplayCountry(locale25);
        java.lang.String str30 = dateTimeZone14.getName((long) (short) 100, locale22);
        java.lang.String str31 = locale22.getDisplayName();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder32.setExtension('a', "en-US");
        java.util.Locale.Builder builder37 = builder35.setLanguageTag("it");
        java.util.Locale.Builder builder38 = builder35.clear();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = locale39.getDisplayScript(locale40);
        java.util.Locale.Builder builder42 = builder35.setLocale(locale39);
        java.util.Locale.Builder builder44 = builder35.addUnicodeLocaleAttribute("Japanese");
        java.util.Locale.Category category45 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.lang.String str49 = locale46.getExtension('a');
        java.util.Locale.setDefault(category45, locale46);
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder54 = builder51.setExtension('a', "en-US");
        java.util.Locale.Builder builder56 = builder54.setLanguageTag("it");
        java.util.Locale locale57 = builder56.build();
        java.util.Locale.setDefault(category45, locale57);
        boolean boolean59 = locale57.hasExtensions();
        java.util.Locale.Builder builder60 = builder35.setLocale(locale57);
        java.util.Locale locale61 = builder60.build();
        java.lang.String str62 = locale22.getDisplayVariant(locale61);
        java.lang.String str63 = locale61.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 13, chronology9, locale61, (java.lang.Integer) (-98), (int) 'u');
        org.joda.time.DateTimeField dateTimeField67 = chronology9.dayOfWeek();
        org.joda.time.DurationField durationField68 = chronology9.days();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:02" + "'", str30, "+00:00:02");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japanese" + "'", str31, "Japanese");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.FORMAT + "'", category45.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test19409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19409");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        boolean boolean2 = dateTimeFormatter0.isPrinter();
        boolean boolean3 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 2000);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter5.getZone();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.lang.String str8 = locale7.toLanguageTag();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        java.lang.String str11 = locale10.getDisplayCountry();
        java.lang.String str12 = locale10.toLanguageTag();
        java.lang.String str13 = locale7.getDisplayName(locale10);
        java.util.Set<java.lang.String> strSet14 = locale7.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet15 = locale7.getExtensionKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter5.withLocale(locale7);
        java.util.Locale locale17 = dateTimeFormatter16.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh-CN" + "'", str8, "zh-CN");
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und" + "'", str12, "und");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese (China)" + "'", str13, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
    }

    @Test
    public void test19410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19410");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("12/27/69", (double) 36002040L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=3.600204E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19411");
        java.util.Locale locale3 = new java.util.Locale("0:10:00", "+01:00", "Twi (en-us)");
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "0:10:00_+01:00_Twi (en-us)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0:10:00 (+01:00,Twi (en-us))" + "'", str4, "0:10:00 (+01:00,Twi (en-us))");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0:10:00_+01:00_Twi (en-us)" + "'", str5, "0:10:00_+01:00_Twi (en-us)");
    }

    @Test
    public void test19412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19412");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        int int8 = dateTimeParserBucket7.getOffset();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket7.getZone();
        long long12 = dateTimeZone9.adjustOffset((-1L), true);
        long long15 = dateTimeZone9.adjustOffset((long) 'a', true);
        boolean boolean17 = dateTimeZone9.isStandardOffset((long) 100);
        boolean boolean18 = dateTimeZone9.isFixed();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str27 = locale20.getDisplayCountry(locale23);
        java.lang.String str28 = dateTimeZone9.getShortName((long) (short) -1, locale20);
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone9.getOffset(readableInstant29);
        long long34 = dateTimeZone9.convertLocalToUTC(144060385L, true, (long) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter35.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter35.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withChronology(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter38.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser42 = dateTimeFormatter38.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser43 = dateTimeFormatter38.getParser();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale48 = new java.util.Locale("hi!");
        java.lang.String str49 = locale48.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale48, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology53 = dateTimeParserBucket52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.days();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.year();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter57.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getName((long) 2000);
        boolean boolean62 = dateTimeZone59.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter57.withZone(dateTimeZone59);
        org.joda.time.Chronology chronology64 = chronology53.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.clockhourOfDay();
        java.util.Locale locale68 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (-4), chronology64, locale68, (java.lang.Integer) (-11));
        int int74 = dateTimeParser43.parseInto(dateTimeParserBucket71, "java.io.IOException: Chinese", (int) ' ');
        java.lang.Integer int75 = dateTimeParserBucket71.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeParserBucket71.getZone();
        long long78 = dateTimeZone9.getMillisKeepLocal(dateTimeZone76, (-115259990L));
        int int80 = dateTimeZone76.getOffset(71939882L);
        long long82 = dateTimeZone76.previousTransition((-351298000L));
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:02" + "'", str28, "+00:00:02");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2000 + "'", int30 == 2000);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 144058385L + "'", long34 == 144058385L);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeParser42);
        org.junit.Assert.assertNotNull(dateTimeParser43);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:02" + "'", str61, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-33) + "'", int74 == (-33));
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-115259990L) + "'", long78 == (-115259990L));
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2000 + "'", int80 == 2000);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-351298000L) + "'", long82 == (-351298000L));
    }

    @Test
    public void test19413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19413");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder9 = builder6.setExtension('a', "de-de");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder14 = builder11.setRegion("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test19414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19414");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyear();
        org.joda.time.DurationField durationField12 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.year();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology10, locale16, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField19 = chronology10.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) (short) 0);
        int int24 = dateTimeZone20.getOffset(32L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withOffsetParsed();
        java.lang.String str29 = dateTimeFormatter27.print((long) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withZoneUTC();
        java.util.Locale locale31 = java.util.Locale.KOREA;
        boolean boolean32 = locale31.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter30.withLocale(locale31);
        java.lang.String str34 = dateTimeZone20.getName((long) (byte) 100, locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((-35999900L), chronology10, locale31, (java.lang.Integer) 126000000, 3);
        java.lang.String str38 = locale31.getISO3Language();
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2000 + "'", int24 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "01/01/70" + "'", str29, "01/01/70");
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:02" + "'", str34, "+00:00:02");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
    }

    @Test
    public void test19415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19415");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.clearExtensions();
        java.util.Locale.Builder builder9 = builder5.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test19416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19416");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology9 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getName((long) 2000);
        org.joda.time.Chronology chronology14 = chronology8.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:02" + "'", str13, "+00:00:02");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test19417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19417");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withZone(dateTimeZone5);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter6.getPrinter();
        java.util.Locale locale9 = dateTimeFormatter6.getLocale();
        java.util.Locale locale10 = dateTimeFormatter6.getLocale();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale14 = new java.util.Locale("hi!");
        java.lang.String str15 = locale14.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale14, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.halfdayOfDay();
        org.joda.time.DurationField durationField26 = chronology19.centuries();
        org.joda.time.DurationField durationField27 = chronology19.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter6.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withDefaultYear(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime32 = dateTimeFormatter30.parseLocalTime("\u65e5\u672c\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNull(locale10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test19418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19418");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        java.util.Locale locale11 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale11, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.year();
        org.joda.time.DurationField durationField15 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology9.days();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test19419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19419");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale7, (java.lang.Integer) 10, (int) 'a');
        int int12 = dateTimeParserBucket11.getOffset();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket11.getZone();
        long long16 = dateTimeZone13.adjustOffset((-1L), true);
        long long19 = dateTimeZone13.adjustOffset((long) 'a', true);
        boolean boolean21 = dateTimeZone13.isStandardOffset((long) 100);
        boolean boolean22 = dateTimeZone13.isFixed();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str31 = locale24.getDisplayCountry(locale27);
        java.lang.String str32 = dateTimeZone13.getShortName((long) (short) -1, locale24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter0.withLocale(locale24);
        boolean boolean34 = dateTimeFormatter0.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = dateTimeFormatter0.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 97L + "'", long19 == 97L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:02" + "'", str32, "+00:00:02");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter35);
    }

    @Test
    public void test19420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19420");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfDay();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        long long16 = dateTimeZone13.adjustOffset((long) 0, true);
        java.lang.String str18 = dateTimeZone13.getNameKey((long) (-1));
        boolean boolean19 = dateTimeZone13.isFixed();
        int int21 = dateTimeZone13.getOffset((long) (short) 0);
        long long24 = dateTimeZone13.convertLocalToUTC(0L, true);
        long long27 = dateTimeZone13.convertLocalToUTC((long) 'u', false);
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone13.getOffset(readableInstant28);
        org.joda.time.Chronology chronology30 = chronology8.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField31 = chronology8.weekyear();
        org.joda.time.DurationField durationField32 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology8.dayOfWeek();
        org.joda.time.DurationField durationField34 = chronology8.months();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-2000L) + "'", long24 == (-2000L));
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1883L) + "'", long27 == (-1883L));
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2000 + "'", int29 == 2000);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test19421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19421");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        long long14 = chronology9.add((long) 1, 100L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField17 = chronology9.seconds();
        java.util.Locale locale21 = new java.util.Locale("English (United States)", "und", "en-US");
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale21.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 10, chronology9, locale21, (java.lang.Integer) 0, (int) '4');
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology27.weeks();
        org.joda.time.DurationField durationField30 = chronology27.months();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology27.getZone();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.yearOfCentury();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-99L) + "'", long14 == (-99L));
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals(locale21.toString(), "english (united states)_UND_en-US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "english (united states) (UND,en-US)" + "'", str22, "english (united states) (UND,en-US)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test19422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19422");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale6 = new java.util.Locale("eng");
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.Builder builder9 = builder4.setLocale(locale6);
        java.util.Locale locale10 = builder4.build();
        java.util.Locale.Builder builder11 = builder4.clearExtensions();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale locale14 = builder11.build();
        java.lang.String str16 = locale14.getExtension('a');
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "eng");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "eng");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test19423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19423");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale9 = java.util.Locale.getDefault(category5);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder11.setExtension('a', "en-US");
        java.util.Locale.Builder builder16 = builder14.setLanguageTag("it");
        java.util.Locale locale17 = builder14.build();
        java.util.Locale.setDefault(category10, locale17);
        java.util.Locale locale19 = java.util.Locale.getDefault(category10);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder20.setExtension('a', "en-US");
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str32 = locale25.getDisplayCountry(locale28);
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = locale25.getDisplayLanguage(locale33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str41 = locale37.toLanguageTag();
        java.lang.String str42 = locale25.getDisplayCountry(locale37);
        java.util.Locale.Builder builder43 = builder23.setLocale(locale37);
        java.util.Locale.setDefault(category10, locale37);
        java.util.Locale locale45 = java.util.Locale.getDefault(category10);
        java.util.Locale locale47 = new java.util.Locale("hi!");
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale.setDefault(category10, locale48);
        java.lang.String str50 = locale9.getDisplayCountry(locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter4.withLocale(locale9);
        boolean boolean52 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter4.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "giapponese" + "'", str34, "giapponese");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "it" + "'", str41, "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "France" + "'", str50, "France");
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test19424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19424");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.monthOfYear();
        org.joda.time.DurationField durationField13 = chronology8.seconds();
        org.joda.time.DurationField durationField14 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        org.joda.time.DurationField durationField16 = chronology8.seconds();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test19425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19425");
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale7, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.halfdayOfDay();
        long long20 = chronology12.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField21 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField22 = chronology12.months();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology12.getZone();
        java.util.Locale locale25 = new java.util.Locale("hi!");
        java.lang.String str26 = locale25.getDisplayCountry();
        java.lang.String str27 = locale25.toLanguageTag();
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale25.getDisplayVariant(locale28);
        java.util.Locale locale30 = locale25.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale25);
        java.util.Locale locale33 = new java.util.Locale("eng");
        java.util.Locale locale34 = locale33.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((-25L), chronology12, locale34);
        org.joda.time.DurationField durationField36 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str40 = dateTimeZone38.getShortName(1L);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.lang.String str45 = locale44.toLanguageTag();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        java.lang.String str48 = locale47.getDisplayCountry();
        java.lang.String str49 = locale47.toLanguageTag();
        java.lang.String str50 = locale44.getDisplayName(locale47);
        java.lang.String str51 = locale42.getDisplayCountry(locale47);
        java.lang.String str52 = locale41.getDisplayScript(locale42);
        java.lang.String str53 = locale41.getDisplayScript();
        java.lang.String str54 = locale41.getLanguage();
        boolean boolean55 = dateTimeZone38.equals((java.lang.Object) locale41);
        java.lang.String str56 = locale41.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale41);
        dateTimeParserBucket57.setOffset((java.lang.Integer) (-1970));
        org.joda.time.Chronology chronology60 = dateTimeParserBucket57.getChronology();
        java.util.Locale locale64 = new java.util.Locale("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", "\u5fb7\u56fd", "");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(351298996L, chronology60, locale64, (java.lang.Integer) (-13));
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "und" + "'", str27, "und");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals(locale33.toString(), "eng");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.120" + "'", str40, "+00:00:00.120");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "it" + "'", str45, "it");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "und" + "'", str49, "und");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Italian" + "'", str50, "Italian");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "it" + "'", str54, "it");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(chronology60);
// flaky:         org.junit.Assert.assertEquals(locale64.toString(), "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a\u5fb7\u56fd");
    }

    @Test
    public void test19426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19426");
        java.util.Locale locale3 = new java.util.Locale("java.io.IOException: java.io.IOException: cinese (cina)", "\u5e74\u6708\u65e5", "1 janvier 1970");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u5e74\u6708\u65e5_1 janvier 1970");
    }

    @Test
    public void test19427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19427");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean5 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear(2000);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale13, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        java.util.Locale locale20 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale20, (java.lang.Integer) 10);
        long long24 = dateTimeParserBucket22.computeMillis(false);
        int int27 = dateTimeParser8.parseInto(dateTimeParserBucket22, "DE", (int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser8);
        int int29 = dateTimePrinter3.estimatePrintedLength();
        java.io.Writer writer30 = null;
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale35 = new java.util.Locale("hi!");
        java.lang.String str36 = locale35.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale35, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.days();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.year();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.era();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.dayOfYear();
        org.joda.time.DurationField durationField47 = chronology40.years();
        org.joda.time.Chronology chronology48 = chronology40.withUTC();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        long long52 = chronology48.add(readablePeriod49, (long) 40, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.yearOfEra();
        org.joda.time.DurationField durationField55 = chronology48.years();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale62 = new java.util.Locale("hi!");
        java.lang.String str63 = locale62.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale62, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology67 = dateTimeParserBucket66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.weekyear();
        org.joda.time.DurationField durationField69 = chronology67.years();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.monthOfYear();
        org.joda.time.DateTimeField dateTimeField71 = chronology67.year();
        java.util.Locale.Category category72 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale73 = java.util.Locale.getDefault(category72);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) (short) 100, chronology67, locale73, (java.lang.Integer) 0);
        java.util.Locale locale77 = new java.util.Locale("it");
        java.lang.String str78 = locale73.getDisplayName(locale77);
        java.util.Set<java.lang.Character> charSet79 = locale77.getExtensionKeys();
        java.lang.String str80 = locale77.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter3.printTo(writer30, (-3660052L), chronology48, 12, dateTimeZone57, locale77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals(locale20.toString(), "eng");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 40 + "'", int29 == 40);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 40L + "'", long52 == 40L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + category72 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category72.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals(locale77.toString(), "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "italiano" + "'", str78, "italiano");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ita" + "'", str80, "ita");
    }

    @Test
    public void test19428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19428");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        java.util.Locale locale12 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale12, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekyearOfCentury();
        org.joda.time.DurationField durationField16 = chronology10.months();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.lang.String str21 = locale20.toLanguageTag();
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getDisplayCountry();
        java.lang.String str25 = locale23.toLanguageTag();
        java.lang.String str26 = locale20.getDisplayName(locale23);
        java.lang.String str27 = locale18.getDisplayCountry(locale23);
        java.lang.String str28 = locale17.getDisplayScript(locale18);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.getDefault(category29);
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale17.getDisplayName(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 2000, chronology10, locale17, (java.lang.Integer) 0, (int) 'x');
        org.joda.time.DateTimeField dateTimeField37 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology10.dayOfYear();
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals(locale12.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "und" + "'", str25, "und");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italian" + "'", str26, "Italian");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str33, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test19429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19429");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        boolean boolean2 = dateTimeFormatter0.isPrinter();
        boolean boolean3 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 2000);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter5.getZone();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.lang.String str8 = locale7.toLanguageTag();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        java.lang.String str11 = locale10.getDisplayCountry();
        java.lang.String str12 = locale10.toLanguageTag();
        java.lang.String str13 = locale7.getDisplayName(locale10);
        java.util.Set<java.lang.String> strSet14 = locale7.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet15 = locale7.getExtensionKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter5.withLocale(locale7);
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter5.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "it" + "'", str8, "it");
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und" + "'", str12, "und");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italian" + "'", str13, "Italian");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeParser17);
    }

    @Test
    public void test19430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19430");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.Locale.FilteringMode filteringMode10 = null;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList8, filteringMode10);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.Locale.FilteringMode filteringMode27 = null;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList25, filteringMode27);
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList25);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList16, (java.util.Collection<java.lang.String>) strList25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = locale37.toLanguageTag();
        java.util.Locale locale40 = new java.util.Locale("hi!");
        java.lang.String str41 = locale40.getDisplayCountry();
        java.lang.String str42 = locale40.toLanguageTag();
        java.lang.String str43 = locale37.getDisplayName(locale40);
        java.lang.String str44 = locale35.getDisplayCountry(locale40);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.lang.String str47 = locale40.getDisplayVariant(locale45);
        java.util.Set<java.lang.String> strSet48 = locale45.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags(languageRangeList34, (java.util.Collection<java.lang.String>) strSet48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList34, strMap50);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList34, strMap52);
        java.util.Collection<java.util.Locale> localeCollection54 = null;
        java.util.Locale.FilteringMode filteringMode55 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter(languageRangeList53, localeCollection54, filteringMode55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList53, strMap57);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Italian" + "'", str43, "Italian");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertTrue("'" + filteringMode55 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode55.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList56);
        org.junit.Assert.assertNotNull(languageRangeList58);
    }

    @Test
    public void test19431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19431");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        java.util.Locale.Builder builder9 = builder3.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder10 = builder3.clear();
        java.util.Locale.Builder builder12 = builder3.setLanguageTag("zh-CN");
        java.util.Locale.Builder builder13 = builder3.clear();
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("utc-x-lvariant-it");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.setVariant("\u4e0b\u5348\u65f6\u5206\u79d2 +00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ??06?22?59? +00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test19432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19432");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.halfdayOfDay();
        long long17 = chronology9.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.clockhourOfDay();
        org.joda.time.DurationField durationField19 = chronology9.months();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology9.getZone();
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getDisplayCountry();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale22.getDisplayVariant(locale25);
        java.util.Locale locale27 = locale22.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale22);
        org.joda.time.DurationField durationField29 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField31 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField34 = chronology9.centuries();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test19433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19433");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de-de");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de-de" + "'", str2, "de-de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "de-de" + "'", str3, "de-de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "de-de" + "'", str4, "de-de");
    }

    @Test
    public void test19434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19434");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("it");
        java.lang.String str5 = locale3.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale3);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long11 = dateTimeZone8.adjustOffset((long) 0, true);
        java.lang.String str12 = dateTimeZone8.toString();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder14.setExtension('a', "en-US");
        java.util.Locale.Builder builder19 = builder17.setVariant("");
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder24 = builder20.setExtension('a', "it");
        java.util.Locale locale25 = builder24.build();
        java.lang.String str26 = dateTimeZone8.getShortName((long) (short) 1, locale25);
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        boolean boolean28 = dateTimeParserBucket6.restoreState((java.lang.Object) locale25);
        java.lang.String str29 = locale25.getDisplayScript();
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:02" + "'", str12, "+00:00:02");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:02" + "'", str26, "+00:00:02");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test19435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19435");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter3.getParser();
        java.util.Locale locale9 = new java.util.Locale("it");
        java.util.Locale.setDefault(locale9);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("+00:00:00.035");
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = locale9.getDisplayScript(locale12);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale18 = new java.util.Locale("hi!");
        java.lang.String str19 = locale18.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale18, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        org.joda.time.DurationField durationField28 = chronology23.halfdays();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology23.getZone();
        boolean boolean31 = dateTimeZone29.isStandardOffset((-117L));
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        java.util.Locale locale36 = locale33.stripExtensions();
        java.lang.String str37 = locale33.getCountry();
        boolean boolean38 = locale33.hasExtensions();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str46 = locale39.getDisplayCountry(locale42);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale39.getDisplayLanguage(locale47);
        java.util.Locale.setDefault(locale39);
        java.lang.String str50 = locale33.getDisplayCountry(locale39);
        java.lang.String str51 = locale39.getDisplayCountry();
        java.lang.String str52 = dateTimeZone29.getShortName((-115260149L), locale39);
        java.lang.String str53 = locale12.getDisplayLanguage(locale39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter3.withLocale(locale39);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale58 = new java.util.Locale("hi!");
        java.lang.String str59 = locale58.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology56, locale58, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology63 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.days();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.year();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.millisOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.millisOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.secondOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology63.halfdayOfDay();
        org.joda.time.DurationField durationField70 = chronology63.centuries();
        org.joda.time.DurationField durationField71 = chronology63.hours();
        org.joda.time.DateTimeField dateTimeField72 = chronology63.weekyear();
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        long long76 = chronology63.add(readablePeriod73, 0L, 117);
        org.joda.time.DateTimeField dateTimeField77 = chronology63.yearOfEra();
        org.joda.time.DurationField durationField78 = chronology63.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter54.withChronology(chronology63);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DE" + "'", str37, "DE");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "giapponese" + "'", str48, "giapponese");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u30c9\u30a4\u30c4" + "'", str50, "\u30c9\u30a4\u30c4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
    }

    @Test
    public void test19436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19436");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getName((long) 2000);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter7.getParser();
        int int15 = dateTimeParser14.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withChronology(chronology21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter22.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter24.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter24.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withChronology(chronology28);
        java.util.Locale locale30 = dateTimeFormatter29.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = dateTimeFormatter29.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser34 = dateTimeFormatter32.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter36.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getName((long) 2000);
        boolean boolean41 = dateTimeZone38.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter36.withZone(dateTimeZone38);
        org.joda.time.format.DateTimeParser dateTimeParser43 = dateTimeFormatter36.getParser();
        int int44 = dateTimeParser43.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser43);
        org.joda.time.format.DateTimeParser dateTimeParser47 = dateTimeFormatter46.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser47);
        int int49 = dateTimeParser47.estimateParsedLength();
        int int50 = dateTimeParser47.estimateParsedLength();
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale55 = new java.util.Locale("hi!");
        java.lang.String str56 = locale55.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology53, locale55, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology60 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.days();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.year();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.era();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.clockhourOfHalfday();
        org.joda.time.Chronology chronology66 = chronology60.withUTC();
        org.joda.time.DurationField durationField67 = chronology60.centuries();
        org.joda.time.DateTimeField dateTimeField68 = chronology60.yearOfEra();
        java.util.Locale locale69 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.Character> charSet72 = locale71.getExtensionKeys();
        java.lang.String str73 = locale69.getDisplayScript(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((-59105980800100L), chronology60, locale69);
        int int77 = dateTimeParser47.parseInto(dateTimeParserBucket74, "und-a-it", 117120000);
        org.joda.time.Chronology chronology80 = null;
        java.util.Locale locale82 = new java.util.Locale("hi!");
        java.lang.String str83 = locale82.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket(0L, chronology80, locale82, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology87 = dateTimeParserBucket86.getChronology();
        java.util.Locale locale89 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology87, locale89, (java.lang.Integer) 10);
        org.joda.time.DurationField durationField92 = chronology87.millis();
        org.joda.time.DurationField durationField93 = chronology87.centuries();
        org.joda.time.Chronology chronology94 = chronology87.withUTC();
        org.joda.time.DateTimeField dateTimeField95 = chronology87.millisOfDay();
        dateTimeParserBucket74.saveField(dateTimeField95, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone98 = dateTimeParserBucket74.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:02" + "'", str11, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimePrinter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(dateTimePrinter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeParser34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:02" + "'", str40, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeParser43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 40 + "'", int44 == 40);
        org.junit.Assert.assertNotNull(dateTimeParser47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-117120001) + "'", int77 == (-117120001));
        org.junit.Assert.assertEquals(locale82.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertEquals(locale89.toString(), "eng");
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeZone98);
    }

    @Test
    public void test19437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19437");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronology();
        boolean boolean12 = dateTimeFormatter10.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter10.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:02" + "'", str4, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter13);
    }

    @Test
    public void test19438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19438");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField15 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.era();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19439");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter3.getParser();
        int int12 = dateTimeFormatter3.getDefaultYear();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale16 = locale15.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withOffsetParsed();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale23, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        java.util.Locale locale30 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale30, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology28.withZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale37);
        java.lang.String str39 = dateTimeZone35.getShortName((long) 'u', locale37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter18.withLocale(locale37);
        java.util.Set<java.lang.String> strSet41 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str42 = locale16.getDisplayLanguage(locale37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter3.withLocale(locale16);
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = dateTimeFormatter43.getPrinter();
        org.joda.time.ReadableInstant readableInstant45 = null;
        java.lang.String str46 = dateTimeFormatter43.print(readableInstant45);
        boolean boolean47 = dateTimeFormatter43.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeParser10);
        org.junit.Assert.assertNotNull(dateTimeParser11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2000 + "'", int12 == 2000);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertEquals(locale30.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:02" + "'", str39, "+00:00:02");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimePrinter44);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2/11/22" + "'", str46, "2/11/22");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test19440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19440");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        long long6 = dateTimeZone3.adjustOffset((long) 0, true);
        java.util.TimeZone timeZone7 = dateTimeZone3.toTimeZone();
        boolean boolean8 = dateTimeZone3.isFixed();
        int int10 = dateTimeZone3.getOffset(2000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withZone(dateTimeZone3);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter11.getPrinter();
        org.joda.time.Chronology chronology13 = dateTimeFormatter11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter11.withPivotYear((-3));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter11.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = dateTimeFormatter16.parseMutableDateTime("zh-cn");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"zh-cn\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimePrinter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test19441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19441");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology4, locale5, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str9 = locale2.getDisplayCountry(locale5);
        java.util.Locale.setDefault(category0, locale2);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "en-US");
        java.util.Locale.Builder builder20 = builder18.setLanguageTag("it");
        java.util.Locale locale21 = builder18.build();
        java.util.Locale.setDefault(category14, locale21);
        java.util.Locale locale23 = java.util.Locale.getDefault(category14);
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = dateTimeZone11.getName((long) 0, locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale27 = java.util.Locale.getDefault(category0);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:02" + "'", str25, "+00:00:02");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
    }

    @Test
    public void test19442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19442");
        java.util.Locale locale3 = new java.util.Locale("eng", "\u82f1\u6587\u7f8e\u570b)", "giapponese");
        java.lang.String str4 = locale3.getScript();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.util.Locale locale7 = locale5.stripExtensions();
        java.lang.String str8 = locale5.getDisplayLanguage();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale3.getDisplayCountry(locale9);
        java.util.Locale locale11 = locale3.stripExtensions();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale16, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.DurationField durationField23 = chronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.weekyearOfCentury();
        org.joda.time.Chronology chronology27 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.dayOfYear();
        org.joda.time.DurationField durationField29 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.dayOfWeek();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = locale31.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((-86397960L), chronology21, locale31, (java.lang.Integer) (-36000001));
        java.lang.String str36 = locale3.getDisplayLanguage(locale31);
        java.lang.String str37 = locale3.getDisplayCountry();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u6587\u7f8e\u570b)_giapponese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e2d\u6587" + "'", str8, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u82f1\u6587\u7f8e\u570b)" + "'", str10, "\u82f1\u6587\u7f8e\u570b)");
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "\u82f1\u6587\u7f8e\u570b)_giapponese");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "IT" + "'", str33, "IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Inglese" + "'", str36, "Inglese");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u82f1\u6587\u7f8e\u570b)" + "'", str37, "\u82f1\u6587\u7f8e\u570b)");
    }

    @Test
    public void test19443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19443");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DurationField durationField10 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.year();
        org.joda.time.DurationField durationField13 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.millisOfDay();
        org.joda.time.DurationField durationField18 = chronology8.days();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology8.getZone();
        org.joda.time.DurationField durationField20 = chronology8.millis();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test19444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19444");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder2.setExtension('a', "en-US");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder9 = builder5.setScript("");
        java.util.Locale.Builder builder11 = builder5.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder12 = builder5.clear();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder15 = builder12.setLanguage("italiano");
        java.util.Locale.Builder builder17 = builder12.setLanguageTag("fr-FR");
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.Locale locale20 = locale18.stripExtensions();
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        java.util.Locale.setDefault(locale20);
        java.util.Locale.setDefault(locale20);
        java.util.Locale.Builder builder25 = builder17.setLocale(locale20);
        java.lang.String str26 = locale20.getCountry();
        java.lang.String str27 = locale1.getDisplayScript(locale20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CN" + "'", str26, "CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test19445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19445");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+10:00");
        boolean boolean2 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test19446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19446");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getName((long) 2000);
        boolean boolean19 = dateTimeZone16.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter14.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology21 = chronology10.withZone(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter0.withZone(dateTimeZone16);
        java.util.Locale locale23 = dateTimeFormatter22.getLocale();
        org.joda.time.Chronology chronology24 = dateTimeFormatter22.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:02" + "'", str18, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertNull(chronology24);
    }

    @Test
    public void test19447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19447");
        java.io.IOException iOException1 = new java.io.IOException("\u610f\u5927\u5229\u6587");
    }

    @Test
    public void test19448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19448");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.Chronology chronology14 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.halfdayOfDay();
        org.joda.time.Chronology chronology18 = chronology8.withUTC();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test19449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19449");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(4);
        java.lang.Class<?> wildcardClass2 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test19450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19450");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfWeek();
        org.joda.time.DurationField durationField14 = chronology8.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology8.add(readablePeriod15, (-36L), 40);
        org.joda.time.DurationField durationField19 = chronology8.halfdays();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale23, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.DurationField durationField30 = chronology28.halfdays();
        org.joda.time.DurationField durationField31 = chronology28.years();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale36 = new java.util.Locale("hi!");
        java.lang.String str37 = locale36.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale36, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        java.util.Locale locale43 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale43, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology41.withZone(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = chronology47.getZone();
        java.util.Locale locale50 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale50);
        java.lang.String str52 = dateTimeZone48.getShortName((long) 'u', locale50);
        org.joda.time.Chronology chronology53 = chronology28.withZone(dateTimeZone48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter54.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str58 = dateTimeZone56.getName((long) 2000);
        boolean boolean59 = dateTimeZone56.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter54.withZone(dateTimeZone56);
        org.joda.time.format.DateTimeParser dateTimeParser61 = dateTimeFormatter54.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = dateTimeFormatter54.getPrinter();
        org.joda.time.Chronology chronology63 = dateTimeFormatter54.getChronolgy();
        org.joda.time.LocalDate localDate65 = dateTimeFormatter54.parseLocalDate("69-12-31");
        int[] intArray67 = chronology28.get((org.joda.time.ReadablePartial) localDate65, (-33L));
        int[] intArray69 = chronology8.get((org.joda.time.ReadablePartial) localDate65, (-100L));
        org.joda.time.DateTimeField dateTimeField71 = localDate65.getField(2);
        int int72 = localDate65.size();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-36L) + "'", long18 == (-36L));
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals(locale43.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:02" + "'", str52, "+00:00:02");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:02" + "'", str58, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTimeParser61);
        org.junit.Assert.assertNotNull(dateTimePrinter62);
        org.junit.Assert.assertNull(chronology63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1969, 12, 31]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1969, 12, 31]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
    }

    @Test
    public void test19451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19451");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DurationField durationField19 = chronology17.days();
        long long25 = chronology17.getDateTimeMillis((long) (-121), (int) (short) 1, (int) (byte) 10, 0, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.seconds();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter8.withChronology(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = dateTimeFormatter8.parseLocalDateTime("\u4e0a\u5348\u65f6\u5206\u79d2");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"??10?00?01?\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:02" + "'", str4, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-82200000L) + "'", long25 == (-82200000L));
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test19452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19452");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale5.getDisplayLanguage(locale13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str21 = locale17.toLanguageTag();
        java.lang.String str22 = locale5.getDisplayCountry(locale17);
        java.util.Locale.Builder builder23 = builder3.setLocale(locale17);
        java.util.Locale.Builder builder24 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder3.removeUnicodeLocaleAttribute("0:10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0:10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "giapponese" + "'", str14, "giapponese");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test19453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19453");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getName((long) 2000);
        boolean boolean17 = dateTimeZone14.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter12.withZone(dateTimeZone14);
        org.joda.time.Chronology chronology19 = chronology8.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.year();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:02" + "'", str16, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test19454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19454");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology9 = chronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.year();
        org.joda.time.DurationField durationField13 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.weekOfWeekyear();
        org.joda.time.Chronology chronology15 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyear();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test19455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19455");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) (-1));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        long long7 = dateTimeZone4.adjustOffset((long) 0, true);
        java.lang.String str9 = dateTimeZone4.getNameKey((long) (-1));
        java.lang.String str11 = dateTimeZone4.getNameKey((long) 0);
        boolean boolean13 = dateTimeZone4.isStandardOffset((long) ' ');
        long long16 = dateTimeZone4.convertLocalToUTC((long) 2000, true);
        java.util.TimeZone timeZone17 = dateTimeZone4.toTimeZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withDefaultYear((int) ' ');
        int int22 = dateTimeFormatter21.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
    }

    @Test
    public void test19456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19456");
        java.io.IOException iOException3 = new java.io.IOException("\u4e2d\u6587");
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException6 = new java.io.IOException("\u6cd5\u6587\u52a0\u62ff\u5927)", (java.lang.Throwable) iOException3);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException8 = new java.io.IOException("\uc911\uad6d", (java.lang.Throwable) iOException3);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test19457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19457");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter5.getZone();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withLocale(locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter5.getZone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter5.withChronology(chronology12);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter13.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withChronology(chronology19);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter20.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withChronology(chronology26);
        java.util.Locale locale28 = dateTimeFormatter27.getLocale();
        boolean boolean29 = dateTimeFormatter27.isOffsetParsed();
        boolean boolean30 = dateTimeFormatter27.isOffsetParsed();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter27.withChronology(chronology31);
        org.joda.time.format.DateTimeParser dateTimeParser33 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale38 = new java.util.Locale("it");
        java.lang.String str40 = locale38.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale38);
        dateTimeParserBucket41.setOffset((java.lang.Integer) 2000);
        java.lang.Object obj44 = null;
        boolean boolean45 = dateTimeParserBucket41.restoreState(obj44);
        int int48 = dateTimeParser33.parseInto(dateTimeParserBucket41, "\u4e2d\u6587\u4e2d\u570b)", (-41));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser33);
        int int50 = dateTimePrinter14.estimatePrintedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeParser33);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-41) + "'", int48 == (-41));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
    }

    @Test
    public void test19458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19458");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder10 = builder6.setExtension('a', "it");
        java.util.Locale locale11 = builder6.build();
        java.util.Locale locale12 = builder6.build();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale17 = new java.util.Locale("hi!");
        java.lang.String str18 = locale17.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale17, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.Chronology chronology23 = chronology22.withUTC();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        java.lang.String str30 = locale29.getDisplayCountry();
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str32 = locale26.getDisplayName(locale29);
        java.lang.String str33 = locale24.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet34 = locale29.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 1, chronology22, locale29, (java.lang.Integer) (-53), (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone38 = chronology22.getZone();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = locale43.toLanguageTag();
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getDisplayCountry();
        java.lang.String str48 = locale46.toLanguageTag();
        java.lang.String str49 = locale43.getDisplayName(locale46);
        java.lang.String str50 = locale41.getDisplayCountry(locale46);
        java.lang.String str51 = locale40.getDisplayLanguage(locale41);
        java.lang.String str52 = dateTimeZone38.getShortName((long) (short) -1, locale41);
        java.lang.String str53 = locale41.toLanguageTag();
        java.util.Locale.Builder builder54 = builder6.setLocale(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder56 = builder6.removeUnicodeLocaleAttribute("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ??? (???????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh-CN" + "'", str27, "zh-CN");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "und" + "'", str31, "und");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "China" + "'", str33, "China");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh-CN" + "'", str44, "zh-CN");
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "und" + "'", str48, "und");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (China)" + "'", str49, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "China" + "'", str50, "China");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh-CN" + "'", str53, "zh-CN");
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test19459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19459");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter3.getParser();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getName((long) 2000);
        long long16 = dateTimeZone12.nextTransition((long) 'a');
        java.lang.String str18 = dateTimeZone12.getNameKey((long) 2000);
        java.lang.String str20 = dateTimeZone12.getNameKey((long) (short) 0);
        long long22 = dateTimeZone12.nextTransition((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withZone(dateTimeZone12);
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale25.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter3.withLocale(locale25);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale35 = new java.util.Locale("hi!");
        java.lang.String str36 = locale35.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale35, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        java.util.Locale locale42 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale42, (java.lang.Integer) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology40.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology40.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = chronology40.era();
        org.joda.time.Chronology chronology50 = chronology40.withUTC();
        org.joda.time.DurationField durationField51 = chronology50.years();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.lang.String str57 = locale56.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale56, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.year();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.secondOfDay();
        java.util.Locale locale70 = new java.util.Locale("English (United States)", "und", "en-US");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology61, locale70, (java.lang.Integer) (-1));
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((-33L), chronology50, locale70, (java.lang.Integer) 349800000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter29.withLocale(locale70);
        java.util.Locale.setDefault(locale70);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeParser10);
        org.junit.Assert.assertNotNull(dateTimeParser11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:02" + "'", str14, "+00:00:02");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 97L + "'", long16 == 97L);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u6cd5\u6587" + "'", str28, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals(locale42.toString(), "eng");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals(locale70.toString(), "english (united states)_UND_en-US");
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
    }

    @Test
    public void test19460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19460");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        java.util.Locale.Builder builder9 = builder3.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder10 = builder3.clear();
        java.util.Locale.Builder builder12 = builder3.setLanguageTag("zh-CN");
        java.util.Locale.Builder builder13 = builder3.clear();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder15 = builder14.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test19461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19461");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("english (united states) (und,en-us)_JAPANESE");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=english(unitedstates)(und");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19462");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u5e74\u6708\u65e5\u661f\u671f\u4e94\u4e0a\u5348\u65f6\u5206\u79d2 +32:01", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.io.ioexception:1970?1?2??????08?01?00?+32:01");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19463");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.setRegion("");
        java.util.Locale.Builder builder9 = builder3.clearExtensions();
        java.util.Locale.Builder builder11 = builder3.setRegion("");
        java.util.Locale.Builder builder13 = builder3.setLanguage("FR");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test19464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19464");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2000);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withPivotYear((int) (short) 1);
        java.lang.Integer int10 = dateTimeFormatter5.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter5.withPivotYear((java.lang.Integer) (-98));
        int int13 = dateTimeFormatter5.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter5.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = dateTimeFormatter5.parseLocalDate("1970/1/1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970/1/1\" is malformed at \"/1/1\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
    }

    @Test
    public void test19465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19465");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) 2000);
        boolean boolean3 = dateTimeZone0.isFixed();
        boolean boolean5 = dateTimeZone0.isStandardOffset((long) (-1));
        long long8 = dateTimeZone0.adjustOffset((-33L), false);
        long long11 = dateTimeZone0.convertLocalToUTC((long) 1, false);
        java.lang.String str13 = dateTimeZone0.getNameKey((-144060000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:02" + "'", str2, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-33L) + "'", long8 == (-33L));
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1999L) + "'", long11 == (-1999L));
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test19466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19466");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.year();
        org.joda.time.DurationField durationField18 = chronology9.centuries();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale19.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((-302460000L), chronology9, locale19, (java.lang.Integer) 126000000);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japanese" + "'", str20, "Japanese");
    }

    @Test
    public void test19467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19467");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter0.getPrinter();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter0.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology17.add(readablePeriod24, 28800032L, 0);
        org.joda.time.DateTimeField dateTimeField28 = chronology17.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:02" + "'", str4, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 28800032L + "'", long27 == 28800032L);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test19468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19468");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2000);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear((java.lang.Integer) (-41));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        java.util.Locale locale18 = new java.util.Locale("it");
        java.lang.String str20 = locale18.getExtension('a');
        java.lang.String str21 = locale12.getDisplayName(locale18);
        java.lang.String str22 = locale18.toLanguageTag();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter7.withLocale(locale18);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test19469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19469");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter5.getPrinter();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        int int8 = dateTimeFormatter5.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter5.getZone();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.lang.String str14 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale13, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter5.withChronology(chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime25 = dateTimeFormatter23.parseLocalTime("twi");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"twi\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test19470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19470");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.io.IOException");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test19471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19471");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2000);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear((java.lang.Integer) (-41));
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter7.getParser();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale12, (java.lang.Integer) 10, (int) 'a');
        int int17 = dateTimeParserBucket16.getOffset();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket16.getZone();
        java.lang.Integer int19 = dateTimeParserBucket16.getOffsetInteger();
        int int22 = dateTimeParser8.parseInto(dateTimeParserBucket16, "zh-cn", (-41));
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket16.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter24.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getName((long) 2000);
        boolean boolean29 = dateTimeZone26.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter24.withZone(dateTimeZone26);
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatter24.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatter24.getPrinter();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale36 = new java.util.Locale("hi!");
        java.lang.String str37 = locale36.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale36, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.monthOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter24.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.year();
        org.joda.time.DurationField durationField50 = chronology41.centuries();
        boolean boolean51 = dateTimeParserBucket16.restoreState((java.lang.Object) chronology41);
        org.joda.time.DateTimeField dateTimeField52 = chronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology41.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-41) + "'", int22 == (-41));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:02" + "'", str28, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeParser31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test19472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19472");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withChronology(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter3.getPrinter();
        java.util.Locale locale11 = new java.util.Locale("22-2-12", "1 gennaio 1970", "\u53f0\u7063");
        java.util.Locale locale12 = locale11.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = dateTimeFormatter3.parseLocalDateTime("zh_TW");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"zh_TW\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "\u53f0\u7063");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "\u53f0\u7063");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test19473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19473");
        java.io.IOException iOException1 = new java.io.IOException("\uc911\uad6d\uc5b4\uc911\uad6d)");
    }

    @Test
    public void test19474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19474");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.clockhourOfHalfday();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale19 = java.util.Locale.getDefault(category15);
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder21.setExtension('a', "en-US");
        java.util.Locale.Builder builder26 = builder24.setLanguageTag("it");
        java.util.Locale locale27 = builder24.build();
        java.util.Locale.setDefault(category20, locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault(category20);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder30.setExtension('a', "en-US");
        java.util.Locale.Builder builder34 = builder33.clearExtensions();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str42 = locale35.getDisplayCountry(locale38);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale35.getDisplayLanguage(locale43);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str51 = locale47.toLanguageTag();
        java.lang.String str52 = locale35.getDisplayCountry(locale47);
        java.util.Locale.Builder builder53 = builder33.setLocale(locale47);
        java.util.Locale.setDefault(category20, locale47);
        java.util.Locale locale55 = java.util.Locale.getDefault(category20);
        java.util.Locale locale57 = new java.util.Locale("hi!");
        java.util.Locale locale58 = locale57.stripExtensions();
        java.util.Locale.setDefault(category20, locale58);
        java.lang.String str60 = locale19.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(2040L, chronology9, locale58, (java.lang.Integer) (-53), 40);
        java.lang.String str64 = locale58.getDisplayName();
        java.lang.String str65 = locale58.getCountry();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "giapponese" + "'", str44, "giapponese");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "France" + "'", str60, "France");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test19475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19475");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        boolean boolean1 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear(2000);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withDefaultYear((-2));
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter8.getZone();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale14 = new java.util.Locale("hi!");
        java.lang.String str15 = locale14.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale14, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        long long29 = dateTimeZone26.adjustOffset((long) 0, true);
        java.lang.String str31 = dateTimeZone26.getNameKey((long) (-1));
        java.lang.String str33 = dateTimeZone26.getNameKey((long) 0);
        boolean boolean35 = dateTimeZone26.isStandardOffset((long) ' ');
        java.lang.String str36 = dateTimeZone26.getID();
        java.util.Locale locale38 = new java.util.Locale("hi!");
        boolean boolean39 = dateTimeZone26.equals((java.lang.Object) locale38);
        java.lang.String str40 = locale38.getScript();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long44 = dateTimeZone41.adjustOffset((long) 0, true);
        java.lang.String str45 = dateTimeZone41.toString();
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder47.setExtension('a', "en-US");
        java.util.Locale.Builder builder52 = builder50.setVariant("");
        java.util.Locale.Builder builder53 = builder52.clear();
        java.util.Locale.Builder builder54 = builder53.clearExtensions();
        java.util.Locale.Builder builder57 = builder53.setExtension('a', "it");
        java.util.Locale locale58 = builder57.build();
        java.lang.String str59 = dateTimeZone41.getShortName((long) (short) 1, locale58);
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder64 = builder61.setExtension('a', "en-US");
        java.util.Locale.Builder builder65 = builder64.clearExtensions();
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology68, locale69, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str73 = locale66.getDisplayCountry(locale69);
        java.util.Locale locale74 = java.util.Locale.ITALIAN;
        java.lang.String str75 = locale66.getDisplayLanguage(locale74);
        org.joda.time.Chronology chronology77 = null;
        java.util.Locale locale78 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology77, locale78, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str82 = locale78.toLanguageTag();
        java.lang.String str83 = locale66.getDisplayCountry(locale78);
        java.util.Locale.Builder builder84 = builder64.setLocale(locale78);
        java.lang.String str85 = locale58.getDisplayVariant(locale78);
        java.lang.String str86 = locale58.getISO3Language();
        java.lang.String str87 = locale38.getDisplayName(locale58);
        java.lang.String str88 = locale38.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket(52L, chronology19, locale38);
        java.util.Locale locale91 = new java.util.Locale("ISOChronology[+32:01]");
        java.lang.String str92 = locale38.getDisplayName(locale91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter8.withLocale(locale91);
        int int94 = dateTimeFormatter8.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:02" + "'", str36, "+00:00:02");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:02" + "'", str45, "+00:00:02");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:02" + "'", str59, "+00:00:02");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "giapponese" + "'", str75, "giapponese");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "it" + "'", str82, "it");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals(locale91.toString(), "isochronology[+32:01]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
        org.junit.Assert.assertNotNull(dateTimeFormatter93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-2) + "'", int94 == (-2));
    }

    @Test
    public void test19476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19476");
        java.util.Locale locale2 = new java.util.Locale("italien", "inglese");
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((int) (short) -1);
        org.joda.time.Chronology chronology8 = dateTimeFormatter5.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone9.adjustOffset((long) 0, true);
        java.lang.String str14 = dateTimeZone9.getNameKey((long) (-1));
        boolean boolean15 = dateTimeZone9.isFixed();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str24 = locale17.getDisplayCountry(locale20);
        java.lang.String str25 = dateTimeZone9.getName((long) (short) 100, locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter5.withZone(dateTimeZone9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter5.withDefaultYear(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter5.withOffsetParsed();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.util.Locale locale32 = locale30.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.lang.String str34 = locale32.getDisplayScript(locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter5.withLocale(locale32);
        java.util.Locale locale36 = locale32.stripExtensions();
        java.util.Locale locale37 = locale32.stripExtensions();
        java.lang.String str38 = locale2.getDisplayName(locale37);
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "italien_INGLESE");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:02" + "'", str25, "+00:00:02");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "italien (INGLESE)" + "'", str38, "italien (INGLESE)");
        org.junit.Assert.assertNotNull(strSet39);
    }

    @Test
    public void test19477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19477");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.seconds();
        org.joda.time.DurationField durationField12 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        org.joda.time.DurationField durationField14 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.year();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder17.setExtension('a', "en-US");
        java.util.Locale.Builder builder22 = builder20.setLanguageTag("it");
        java.util.Locale.Builder builder23 = builder20.clear();
        java.util.Locale.Builder builder25 = builder20.setRegion("");
        java.util.Locale locale26 = builder25.build();
        java.util.Locale locale28 = new java.util.Locale("it");
        java.lang.String str30 = locale28.getExtension('a');
        java.util.Set<java.lang.String> strSet31 = locale28.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder32 = builder25.setLocale(locale28);
        java.util.Locale.Builder builder33 = builder25.clear();
        java.util.Locale.Builder builder34 = builder25.clear();
        java.util.Locale.Builder builder36 = builder25.addUnicodeLocaleAttribute("French");
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale41 = new java.util.Locale("hi!");
        java.lang.String str42 = locale41.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale41, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.year();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.hourOfHalfday();
        org.joda.time.DurationField durationField51 = chronology46.minutes();
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("zh-CN");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology46, locale53, (java.lang.Integer) 40, 10);
        java.util.Locale.setDefault(locale53);
        java.lang.String str58 = locale53.getDisplayScript();
        java.util.Locale.Builder builder59 = builder25.setLocale(locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((-3600000L), chronology9, locale53, (java.lang.Integer) 126000000);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test19478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19478");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        long long13 = chronology8.add((long) 1, 100L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfMinute();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-99L) + "'", long13 == (-99L));
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test19479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19479");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) (-1));
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((java.lang.Integer) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = dateTimeFormatter3.parseLocalDate("\u5e74\u6708\u65e5\u661f\u671f\u56db");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"15337?11?21? ???\" is too short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test19480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19480");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forStyle("12/27/69");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 12/27/69");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19481");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology8.add(readablePeriod15, (long) 'a', (int) 'a');
        org.joda.time.DurationField durationField19 = chronology8.centuries();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.Chronology chronology22 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField25 = chronology8.seconds();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test19482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19482");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder6.setScript("");
        java.util.Locale.Builder builder10 = builder6.addUnicodeLocaleAttribute("jpn");
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale locale12 = builder10.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
    }

    @Test
    public void test19483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19483");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.Chronology chronology9 = chronology8.withUTC();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        long long14 = dateTimeZone12.convertUTCToLocal((-115259990L));
        boolean boolean16 = dateTimeZone12.isStandardOffset(183540010L);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115259990L) + "'", long14 == (-115259990L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test19484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19484");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DurationField durationField10 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology8.halfdays();
        org.joda.time.DurationField durationField13 = chronology8.days();
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.DurationField durationField15 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.hourOfDay();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test19485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19485");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        int int8 = dateTimeParserBucket7.getOffset();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket7.getZone();
        long long12 = dateTimeZone9.adjustOffset((-1L), true);
        long long15 = dateTimeZone9.adjustOffset((long) 'a', true);
        boolean boolean17 = dateTimeZone9.isStandardOffset((long) 100);
        java.lang.String str19 = dateTimeZone9.getShortName(97L);
        long long21 = dateTimeZone9.nextTransition((long) 100);
        boolean boolean23 = dateTimeZone9.isStandardOffset((long) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.forPattern("\u5e74\u6708\u65e5\u661f\u671f\u4e09");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withChronology(chronology26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale31, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.DurationField durationField38 = chronology36.halfdays();
        org.joda.time.DurationField durationField39 = chronology36.years();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter25.withChronology(chronology36);
        boolean boolean44 = dateTimeZone9.equals((java.lang.Object) chronology36);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:02" + "'", str19, "+00:00:02");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test19486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19486");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("eng");
        java.util.Locale.LanguageRange languageRange8 = new java.util.Locale.LanguageRange("eng");
        double double9 = languageRange8.getWeight();
        java.lang.String str10 = languageRange8.getRange();
        java.util.Locale.LanguageRange languageRange12 = new java.util.Locale.LanguageRange("eng");
        double double13 = languageRange12.getWeight();
        java.util.Locale.LanguageRange languageRange15 = new java.util.Locale.LanguageRange("eng");
        double double16 = languageRange15.getWeight();
        java.lang.String str17 = languageRange15.getRange();
        java.util.Locale.LanguageRange languageRange19 = new java.util.Locale.LanguageRange("eng");
        double double20 = languageRange19.getWeight();
        double double21 = languageRange19.getWeight();
        java.lang.String str22 = languageRange19.getRange();
        java.util.Locale.LanguageRange languageRange24 = new java.util.Locale.LanguageRange("eng");
        double double25 = languageRange24.getWeight();
        java.lang.String str26 = languageRange24.getRange();
        java.lang.String str27 = languageRange24.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange6, languageRange8, languageRange12, languageRange15, languageRange19, languageRange24 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = locale37.toLanguageTag();
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale37 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.lang.String str47 = locale46.toLanguageTag();
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale46 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList51);
        java.util.Locale locale53 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strMap54);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.util.Locale.FilteringMode filteringMode64 = null;
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList62, filteringMode64);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.Locale.FilteringMode filteringMode76 = null;
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.lang.String>) strList74, filteringMode76);
        java.lang.String str78 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strList74);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap79 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList80 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, strMap79);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, strMap81);
        java.util.Locale.LanguageRange[] languageRangeArray83 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList84 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList84, languageRangeArray83);
        java.util.Locale locale86 = java.util.Locale.getDefault();
        java.lang.String str87 = locale86.toLanguageTag();
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale86 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList84, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Locale locale93 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList92);
        java.util.Locale locale94 = java.util.Locale.lookup(languageRangeList55, (java.util.Collection<java.util.Locale>) localeList92);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "eng" + "'", str22, "eng");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-CN" + "'", str38, "zh-CN");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zh-CN" + "'", str47, "zh-CN");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localeList51);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(languageRangeList80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertNotNull(languageRangeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "zh-CN" + "'", str87, "zh-CN");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNull(locale93);
        org.junit.Assert.assertNull(locale94);
    }

    @Test
    public void test19487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19487");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("it");
        java.lang.String str5 = locale3.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale3);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean9 = dateTimeZone7.equals((java.lang.Object) dateTimeZone8);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setExtension('a', "en-US");
        java.util.Locale.Builder builder17 = builder15.setLanguageTag("it");
        java.util.Locale locale18 = builder15.build();
        java.util.Locale.setDefault(category11, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category11);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder21.setExtension('a', "en-US");
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str33 = locale26.getDisplayCountry(locale29);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale26.getDisplayLanguage(locale34);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str42 = locale38.toLanguageTag();
        java.lang.String str43 = locale26.getDisplayCountry(locale38);
        java.util.Locale.Builder builder44 = builder24.setLocale(locale38);
        java.util.Locale.setDefault(category11, locale38);
        java.util.Locale locale46 = java.util.Locale.getDefault(category11);
        java.lang.String str47 = dateTimeZone8.getShortName(97L, locale46);
        java.lang.String str48 = locale46.getDisplayLanguage();
        java.util.Locale locale50 = new java.util.Locale("\u65e5\u6587");
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale55 = new java.util.Locale("hi!");
        java.lang.String str56 = locale55.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology53, locale55, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology60 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.days();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.year();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.halfdayOfDay();
        long long68 = chronology60.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField69 = chronology60.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField70 = chronology60.monthOfYear();
        java.util.Locale.Category category71 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale76 = new java.util.Locale("hi!");
        java.lang.String str77 = locale76.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale76, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology81 = dateTimeParserBucket80.getChronology();
        java.util.Locale locale83 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology81, locale83, (java.lang.Integer) 10);
        java.util.Locale.setDefault(category71, locale83);
        java.util.Locale locale87 = java.util.Locale.getDefault(category71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology60, locale87, (java.lang.Integer) 2000, (int) ' ');
        java.lang.String str91 = locale50.getDisplayCountry(locale87);
        java.lang.String str93 = locale50.getExtension('u');
        java.lang.String str94 = locale46.getDisplayLanguage(locale50);
        java.util.Locale locale95 = locale50.stripExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "giapponese" + "'", str35, "giapponese");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:02" + "'", str47, "+00:00:02");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str48, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals(locale50.toString(), "\u65e5\u6587");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + category71 + "' != '" + java.util.Locale.Category.FORMAT + "'", category71.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale76.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertEquals(locale83.toString(), "eng");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Italian" + "'", str94, "Italian");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "\u65e5\u6587");
    }

    @Test
    public void test19488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19488");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale3, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology8 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfWeek();
        org.joda.time.DurationField durationField14 = chronology8.months();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getName((long) 2000);
        boolean boolean20 = dateTimeZone17.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withZone(dateTimeZone17);
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter15.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter15.getPrinter();
        org.joda.time.Chronology chronology24 = dateTimeFormatter15.getChronolgy();
        org.joda.time.LocalDate localDate26 = dateTimeFormatter15.parseLocalDate("69-12-31");
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        long long29 = chronology8.set((org.joda.time.ReadablePartial) localDate26, 2040L);
        int int30 = localDate26.size();
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfDay();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:02" + "'", str19, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeParser22);
        org.junit.Assert.assertNotNull(dateTimePrinter23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-86397960L) + "'", long29 == (-86397960L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test19489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19489");
        java.util.Locale locale3 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "\u82f1\u6587", "+00:00:00.117");
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Set<java.lang.Character> charSet6 = locale3.getExtensionKeys();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587\u4e2d\u56fd\u82f1\u6587_+00:00:00.117");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.117" + "'", str5, "+00:00:00.117");
        org.junit.Assert.assertNotNull(charSet6);
    }

    @Test
    public void test19490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19490");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DurationField durationField11 = chronology9.years();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.year();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((int) (short) -1);
        org.joda.time.Chronology chronology19 = dateTimeFormatter16.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone20.adjustOffset((long) 0, true);
        java.lang.String str25 = dateTimeZone20.getNameKey((long) (-1));
        boolean boolean26 = dateTimeZone20.isFixed();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str35 = locale28.getDisplayCountry(locale31);
        java.lang.String str36 = dateTimeZone20.getName((long) (short) 100, locale28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter16.withZone(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter16.withDefaultYear(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter16.withOffsetParsed();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.util.Locale locale43 = locale41.stripExtensions();
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.lang.String str45 = locale43.getDisplayScript(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter16.withLocale(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((-99L), chronology9, locale43, (java.lang.Integer) 100, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter50.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter50.withPivotYear((java.lang.Integer) 10);
        boolean boolean54 = dateTimeParserBucket49.restoreState((java.lang.Object) 10);
        long long56 = dateTimeParserBucket49.computeMillis(false);
        java.util.Locale locale57 = dateTimeParserBucket49.getLocale();
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:02" + "'", str36, "+00:00:02");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-99L) + "'", long56 == (-99L));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
    }

    @Test
    public void test19491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19491");
        java.util.Locale locale3 = new java.util.Locale("ENGLISH (UNITED STATES) (UND,EN-US)", "\u4e2d\u56fd\u8a9e", "usa");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u56fd\u8a9e_usa");
    }

    @Test
    public void test19492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19492");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder5 = builder3.setVariant("");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        java.util.Locale.Builder builder9 = builder3.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder12 = builder10.setLanguage("de");
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder12.setLanguage("cina (UNITED STATES)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: cina (UNITED STATES) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test19493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19493");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "en-US");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale6 = new java.util.Locale("eng");
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Locale.Builder builder9 = builder4.setLocale(locale6);
        java.util.Locale locale10 = builder4.build();
        java.util.Locale.Builder builder11 = builder4.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("Twi");
        java.util.Locale.Builder builder17 = builder13.setLanguage("Germany");
        java.util.Locale.Builder builder19 = builder17.setLanguage("CA");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "eng");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "eng");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "eng");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test19494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19494");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        java.util.Locale locale12 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale12, (java.lang.Integer) 10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.year();
        org.joda.time.DurationField durationField17 = chronology10.millis();
        org.joda.time.DurationField durationField18 = chronology10.years();
        java.util.Locale locale21 = new java.util.Locale("+00:00:00.035", "english (united states) (UND,en-US)");
        java.lang.String str22 = locale21.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(2001L, chronology10, locale21, (java.lang.Integer) (-3600000), (-121));
        org.joda.time.DurationField durationField26 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        long long30 = dateTimeZone27.adjustOffset((long) 0, true);
        java.lang.String str32 = dateTimeZone27.getNameKey((long) (-1));
        java.lang.String str34 = dateTimeZone27.getNameKey((long) 0);
        boolean boolean36 = dateTimeZone27.isStandardOffset((long) ' ');
        long long39 = dateTimeZone27.convertLocalToUTC((long) 2000, true);
        int int41 = dateTimeZone27.getOffset((-82200000L));
        int int43 = dateTimeZone27.getOffsetFromLocal((-52L));
        long long46 = dateTimeZone27.adjustOffset((-117L), false);
        org.joda.time.Chronology chronology47 = chronology10.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField48 = chronology10.monthOfYear();
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals(locale12.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals(locale21.toString(), "+00:00:00.035_ENGLISH (UNITED STATES) (UND,EN-US)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2000 + "'", int41 == 2000);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2000 + "'", int43 == 2000);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-117L) + "'", long46 == (-117L));
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test19495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19495");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.hourOfHalfday();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale21, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        org.joda.time.Chronology chronology30 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology30.add(readablePeriod32, (long) 40, (-41));
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology30.add(readablePeriod36, (long) (-53), 0);
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = locale40.getDisplayName();
        java.lang.String str43 = locale40.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((-115261970L), chronology30, locale40, (java.lang.Integer) (-4), 3660000);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((-5042100069L), chronology9, locale40);
        long long50 = dateTimeParserBucket47.computeMillis(true, "\u5951\u7ef4\u6587");
        long long52 = dateTimeParserBucket47.computeMillis(true);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 40L + "'", long35 == 40L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-53L) + "'", long39 == (-53L));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str42, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-5042100069L) + "'", long50 == (-5042100069L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-5042100069L) + "'", long52 == (-5042100069L));
    }

    @Test
    public void test19496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19496");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) 0, true);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) (-1));
        java.lang.String str7 = dateTimeZone0.getNameKey((long) 0);
        boolean boolean9 = dateTimeZone0.isStandardOffset((long) ' ');
        java.lang.String str10 = dateTimeZone0.getID();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        boolean boolean13 = dateTimeZone0.equals((java.lang.Object) locale12);
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale12.getDisplayLanguage(locale16);
        java.lang.String str19 = locale12.getExtension('x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str24 = dateTimeZone22.getName((long) 2000);
        boolean boolean25 = dateTimeZone22.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter20.withZone(dateTimeZone22);
        long long29 = dateTimeZone22.convertLocalToUTC(1L, true);
        java.lang.String str31 = dateTimeZone22.getName((long) (-1));
        long long33 = dateTimeZone22.convertUTCToLocal(0L);
        int int35 = dateTimeZone22.getOffset((long) 8);
        long long38 = dateTimeZone22.convertLocalToUTC((-144059883L), false);
        boolean boolean39 = locale12.equals((java.lang.Object) long38);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:02" + "'", str10, "+00:00:02");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:02" + "'", str24, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1999L) + "'", long29 == (-1999L));
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:02" + "'", str31, "+00:00:02");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2000L + "'", long33 == 2000L);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2000 + "'", int35 == 2000);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-144061883L) + "'", long38 == (-144061883L));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test19497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19497");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        java.lang.String str5 = locale4.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale4, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology9 = dateTimeParserBucket8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.halfdayOfDay();
        long long17 = chronology9.add((long) (short) 1, (long) 10, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology9.clockhourOfDay();
        org.joda.time.DurationField durationField19 = chronology9.months();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology9.getZone();
        java.util.Locale locale22 = new java.util.Locale("hi!");
        java.lang.String str23 = locale22.getDisplayCountry();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale22.getDisplayVariant(locale25);
        java.util.Locale locale27 = locale22.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale22);
        java.lang.Integer int29 = dateTimeParserBucket28.getPivotYear();
        long long31 = dateTimeParserBucket28.computeMillis(false);
        long long34 = dateTimeParserBucket28.computeMillis(false, "\u4e2d\u6587\u4e2d\u56fd\u30c9\u30a4\u30c4)");
        dateTimeParserBucket28.setOffset((-33));
        dateTimeParserBucket28.setPivotYear((java.lang.Integer) (-115260001));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test19498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19498");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = new java.util.Locale("hi!");
        java.lang.String str6 = locale5.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale5, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.hourOfHalfday();
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology10.weekyear();
        org.joda.time.DurationField durationField21 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology10.clockhourOfHalfday();
        boolean boolean23 = dateTimeZone1.equals((java.lang.Object) chronology10);
        org.joda.time.DurationField durationField24 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = chronology10.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test19499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19499");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        boolean boolean2 = dateTimeFormatter0.isOffsetParsed();
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withLocale(locale3);
        java.util.Locale locale5 = dateTimeFormatter0.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale11 = new java.util.Locale("hi!");
        java.lang.String str12 = locale11.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale11, (java.lang.Integer) 10, (int) 'a');
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyear();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.year();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withPivotYear((int) (short) -1);
        org.joda.time.Chronology chronology26 = dateTimeFormatter23.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        long long30 = dateTimeZone27.adjustOffset((long) 0, true);
        java.lang.String str32 = dateTimeZone27.getNameKey((long) (-1));
        boolean boolean33 = dateTimeZone27.isFixed();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) 10);
        java.lang.String str42 = locale35.getDisplayCountry(locale38);
        java.lang.String str43 = dateTimeZone27.getName((long) (short) 100, locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter23.withZone(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter23.withDefaultYear(100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter23.withOffsetParsed();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        java.util.Locale locale50 = locale48.stripExtensions();
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.lang.String str52 = locale50.getDisplayScript(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter23.withLocale(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((-99L), chronology16, locale50, (java.lang.Integer) 100, 0);
        org.joda.time.DateTimeField dateTimeField57 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology16.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter0.withChronology(chronology16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter0.withOffsetParsed();
        java.lang.String str62 = dateTimeFormatter0.print((-277744341L));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:02" + "'", str43, "+00:00:02");
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "18:50:57" + "'", str62, "18:50:57");
    }

    @Test
    public void test19500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19500");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2000);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTimeFormatter8.parseDateTime("java.io.IOException: cinese (cina)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.io.IOException: cinese (cina)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:02" + "'", str4, "+00:00:02");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1001");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int7 = mutableDateTime5.get(dateTimeFieldType6);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology8.minuteOfDay();
        org.joda.time.DurationField durationField13 = copticChronology8.months();
        org.joda.time.DurationFieldType durationFieldType14 = durationField13.getType();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField16 = copticChronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology15.weekyearOfCentury();
        java.lang.String str19 = copticChronology15.toString();
        org.joda.time.DurationField durationField20 = copticChronology15.weeks();
        boolean boolean21 = durationFieldType14.isSupported((org.joda.time.Chronology) copticChronology15);
        org.joda.time.DurationField durationField22 = copticChronology15.hours();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = copticChronology15.add(readablePeriod23, 1645514200754L, 6);
        org.joda.time.DateTime dateTime27 = mutableDateTime5.toDateTime((org.joda.time.Chronology) copticChronology15);
        boolean boolean28 = dateTime27.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1002");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay5 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime dateTime7 = dateTime2.minusDays(5);
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime.Property property9 = dateTime2.weekOfWeekyear();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(142);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1003");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        int int7 = dateTime6.getCenturyOfEra();
        org.joda.time.DateTime.Property property8 = dateTime6.era();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        java.lang.Integer int14 = dateTimeFormatter13.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withDefaultYear((-1));
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter16.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withDefaultYear(1);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter16.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter16.withDefaultYear(224);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField25 = copticChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology24.weekyear();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 26209877, (org.joda.time.Chronology) copticChronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter16.withChronology((org.joda.time.Chronology) copticChronology24);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology24.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime9.toDateTime((org.joda.time.Chronology) copticChronology24);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology33.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology33.era();
        java.lang.String str39 = copticChronology33.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = copticChronology33.getZone();
        long long43 = dateTimeZone40.adjustOffset((long) (-27425236), true);
        org.joda.time.DateTime dateTime44 = dateTime9.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime9.withZoneRetainFields(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime46", (dateTime32.compareTo(dateTime46) == 0) == dateTime32.equals(dateTime46));
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1004");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        int int6 = localDate5.getWeekyear();
        int int7 = localDate5.getEra();
        org.joda.time.LocalDate localDate9 = localDate5.withMonthOfYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.roundCeilingCopy();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(485);
        org.joda.time.LocalDate localDate16 = property12.roundHalfFloorCopy();
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.Instant instant20 = instant17.withDurationAdded((long) '#', 17);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField22 = copticChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology21.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = copticChronology21.getZone();
        int int26 = dateTimeZone24.getOffset((long) 865);
        org.joda.time.MutableDateTime mutableDateTime27 = instant17.toMutableDateTime(dateTimeZone24);
        long long29 = dateTimeZone24.convertUTCToLocal(63675504000675L);
        org.joda.time.DateTime dateTime30 = localDate16.toDateTimeAtMidnight(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime27", (instant17.compareTo(mutableDateTime27) == 0) == instant17.equals(mutableDateTime27));
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1005");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = instant3.toDateTime(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra(100);
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property11 = dateTime5.monthOfYear();
        org.joda.time.DateTime.Property property12 = dateTime5.millisOfDay();
        org.joda.time.DateTime dateTime13 = property12.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime13", (instant3.compareTo(dateTime13) == 0) == instant3.equals(dateTime13));
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1006");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localTime11.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfMonth(10);
        org.joda.time.DateTime dateTime18 = dateTime14.minusHours((int) (short) 100);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean20 = dateTime18.isEqualNow();
        boolean boolean21 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 11);
        boolean boolean26 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property27 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime29 = property27.setCopy("8");
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.plus(readablePeriod30);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localTime33.toDateTimeToday(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfMonth(10);
        org.joda.time.DateTime dateTime40 = dateTime36.minusHours((int) (short) 100);
        int int41 = dateTime40.getCenturyOfEra();
        boolean boolean42 = dateTime40.isEqualNow();
        java.util.GregorianCalendar gregorianCalendar43 = dateTime40.toGregorianCalendar();
        int int44 = dateTime40.getEra();
        org.joda.time.DateTime.Property property45 = dateTime40.dayOfMonth();
        org.joda.time.DateTime dateTime47 = dateTime40.plusMinutes(14);
        org.joda.time.Instant instant48 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = instant48.toDateTime(dateTimeZone49);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfEra();
        org.joda.time.DateTime.Property property52 = dateTime50.millisOfDay();
        org.joda.time.DateTime dateTime54 = dateTime50.plusYears((int) (short) 100);
        boolean boolean55 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Instant instant56 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = instant56.toDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.withSecondOfMinute(2);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.minus(readablePeriod61);
        boolean boolean63 = dateTime50.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime50.minus(readableDuration64);
        int int66 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime67 = dateTime50.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant48 and dateTime58", (instant48.compareTo(dateTime58) == 0) == instant48.equals(dateTime58));
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1007");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField7 = copticChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology6.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra(1);
        int int30 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        int int31 = localDateTime27.getMillisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withEra(1);
        int int36 = localDateTime35.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = localDateTime35.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.withField(dateTimeFieldType38, 7);
        int[] intArray42 = chronology20.get((org.joda.time.ReadablePartial) localDateTime40, (long) (byte) 10);
        int int43 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime10, intArray42);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = dateTimeField9.getAsShortText(510, locale45);
        java.util.Locale.Category category47 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.toLanguageTag();
        java.util.Locale.setDefault(category47, locale48);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale51);
        java.lang.String str53 = locale51.getDisplayName();
        boolean boolean54 = locale51.hasExtensions();
        java.lang.String str55 = locale51.getCountry();
        java.lang.String str56 = locale51.getDisplayVariant();
        java.util.Locale.setDefault(category47, locale51);
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category47, locale58);
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.lang.String str61 = locale60.toLanguageTag();
        java.lang.String str62 = locale58.getDisplayVariant(locale60);
        java.lang.String str63 = locale45.getDisplayName(locale60);
        int int64 = property4.getMaximumShortTextLength(locale60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1008");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(117);
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(327);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays(519);
        int int14 = dateTime11.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1009");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        long long3 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant6 = instant1.withMillis((long) 168);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        boolean boolean8 = instant6.isAfterNow();
        java.lang.String str9 = instant6.toString();
        org.joda.time.MutableDateTime mutableDateTime10 = instant6.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant6.withDurationAdded(readableDuration11, 186);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1010");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property6 = dateTime4.era();
        org.joda.time.DateTime.Property property7 = dateTime4.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        java.lang.String str9 = dateTimeFieldType8.getName();
        int int10 = dateTime4.get(dateTimeFieldType8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1011");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime7.getMonthOfYear();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        int int10 = localDateTime7.getDayOfYear();
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = instant11.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime13.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar17 = dateTime13.toGregorianCalendar();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra(1);
        int int22 = localDateTime21.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = localDateTime21.getFieldType(0);
        boolean boolean25 = dateTime13.isSupported(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra(1);
        int int30 = localDateTime29.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localDateTime29.getFieldType(0);
        boolean boolean33 = dateTime13.isSupported(dateTimeFieldType32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime7.property(dateTimeFieldType32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withEra(1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withEra(1);
        int int44 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology49.getZone();
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = dateTimeZone50.getName(100L, locale52);
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleKeys();
        java.lang.String str55 = locale52.getCountry();
        java.lang.String str56 = dateTimeField3.getAsShortText((org.joda.time.ReadablePartial) localDateTime7, 582, locale52);
        int int57 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property58 = localDateTime7.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime13", (instant11.compareTo(dateTime13) == 0) == instant11.equals(dateTime13));
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1012");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.plusYears((int) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        int int17 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int26 = dateTimeZone23.getOffset((long) 12);
        boolean boolean28 = dateTimeZone23.isStandardOffset((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours(161);
        org.joda.time.DateTime dateTime34 = dateTime30.minus((long) 11);
        org.joda.time.DateTime dateTime36 = dateTime30.plusYears(24);
        int int37 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 168, dateTimeZone23);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone40 = copticChronology39.getZone();
        org.joda.time.DateTime dateTime41 = dateTime7.toDateTime(dateTimeZone40);
        int int42 = dateTime41.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1013");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getStandardOffset((long) 849);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(2, 7, 16, 4, (int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours(23);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        long long13 = dateTimeZone11.convertUTCToLocal((long) 21);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, 1645514182768L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfDay();
        org.joda.time.DateTime.Property property19 = dateTime17.weekyear();
        org.joda.time.DateTime.Property property20 = dateTime17.secondOfDay();
        org.joda.time.DateTime dateTime21 = property20.getDateTime();
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = instant23.toDateTime(dateTimeZone24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime25.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime25.toGregorianCalendar();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withEra(1);
        int int34 = localDateTime33.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime33.getFieldType(0);
        boolean boolean37 = dateTime25.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withEra(1);
        int int42 = localDateTime41.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime41.getFieldType(0);
        boolean boolean45 = dateTime25.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime48 = dateTime25.withField(dateTimeFieldType46, 72);
        int int49 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withEra(1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        boolean boolean56 = localDateTime53.isAfter((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withEra(1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withEra(1);
        int int65 = localDateTime58.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.Chronology chronology66 = localDateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.plusMinutes((int) 'u');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime55.withFields((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property73 = localDateTime55.dayOfMonth();
        org.joda.time.DateTime dateTime74 = dateTime48.withFields((org.joda.time.ReadablePartial) localDateTime55);
        boolean boolean76 = dateTime74.isBefore((long) 187);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime25", (instant23.compareTo(dateTime25) == 0) == instant23.equals(dateTime25));
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1014");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(0);
        boolean boolean14 = dateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime16 = dateTime2.withMillis((long) (short) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        org.joda.time.DateTime dateTime19 = dateTime16.minusYears(970);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1015");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 692);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str13 = dateTimeFieldType12.getName();
        int int14 = instant8.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = instant8.toDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant8.plus(readableDuration16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.plus(readableDuration18);
        org.joda.time.Instant instant20 = instant17.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime15", (instant20.compareTo(dateTime15) == 0) == instant20.equals(dateTime15));
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1016");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(0);
        boolean boolean14 = dateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime18.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDateTime18.getFieldType(0);
        boolean boolean22 = dateTime2.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = dateTime2.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekyear(5);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears(608);
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1017");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = dateTime1.toString("10", locale3);
        org.joda.time.DateTime dateTime8 = dateTime1.withDayOfYear(345);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readablePeriod9);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField12 = copticChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology11.hourOfHalfday();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology11);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology11.clockhourOfHalfday();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology11);
        org.joda.time.DateTimeZone dateTimeZone17 = copticChronology11.getZone();
        org.joda.time.DurationField durationField18 = copticChronology11.weekyears();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime8.toMutableDateTime((org.joda.time.Chronology) copticChronology11);
        org.joda.time.DateTime.Property property20 = dateTime8.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime19", (dateTime8.compareTo(mutableDateTime19) == 0) == dateTime8.equals(mutableDateTime19));
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1018");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        long long3 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant6 = instant1.withMillis((long) 168);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 620);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Instant instant12 = instant10.minus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1019");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter5.getZone();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withChronology(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withZone(dateTimeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withZoneUTC();
        java.util.Locale locale14 = dateTimeFormatter13.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField16 = copticChronology15.eras();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.yearOfEra();
        java.lang.String str18 = copticChronology15.toString();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology15.secondOfDay();
        org.joda.time.Chronology chronology20 = copticChronology15.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter13.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter13.withZoneUTC();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.halfdayOfDay();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromMillisOfDay((long) 777, (org.joda.time.Chronology) copticChronology24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 10);
        int[] intArray30 = copticChronology24.get((org.joda.time.ReadablePartial) localTime28, (long) (byte) 100);
        org.joda.time.DurationField durationField31 = copticChronology24.halfdays();
        long long35 = copticChronology24.add((long) 258, 1645514445391L, 640);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter22.withChronology((org.joda.time.Chronology) copticChronology24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField31", Math.signum(durationField16.compareTo(durationField31)) == -Math.signum(durationField31.compareTo(durationField16)));
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1020");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        long long21 = dateTimeZone18.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology22 = copticChronology1.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone18);
        java.lang.String str25 = dateTimeZone18.getName((long) 72);
        int int27 = dateTimeZone18.getOffsetFromLocal((long) 6);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 165, dateTimeZone18);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField30 = copticChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology29.hourOfHalfday();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology29);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        boolean boolean36 = localDate32.isSupported(dateTimeFieldType34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate38 = localDate32.minus(readablePeriod37);
        org.joda.time.DateTime dateTime39 = dateTime28.withFields((org.joda.time.ReadablePartial) localDate38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField2 and durationField30", Math.signum(durationField2.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField2)));
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1021");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(161);
        org.joda.time.DateTime dateTime5 = dateTime1.minus((long) 11);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 'u', (org.joda.time.Chronology) copticChronology7);
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime1.getZone();
        java.lang.String str11 = dateTime1.toString();
        int int12 = dateTime1.getDayOfWeek();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        boolean boolean28 = dateTimeZone27.isFixed();
        long long32 = dateTimeZone27.convertLocalToUTC((long) 987, true, (long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours(161);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfCentury(70);
        int int39 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime36);
        java.lang.String str40 = dateTimeZone27.getID();
        org.joda.time.DateTime dateTime41 = dateTime1.toDateTime(dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime34", (dateTime9.compareTo(dateTime34) == 0) == dateTime9.equals(dateTime34));
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1022");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localTime11.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfMonth(10);
        org.joda.time.DateTime dateTime18 = dateTime14.minusHours((int) (short) 100);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean20 = dateTime18.isEqualNow();
        boolean boolean21 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = dateTime8.minusDays(32769);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        org.joda.time.Instant instant26 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = instant26.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime.Property property30 = dateTime28.millisOfDay();
        boolean boolean32 = dateTime28.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths(117);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime28.getZone();
        org.joda.time.DateTime dateTime36 = dateTime23.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusHours(575);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField40 = copticChronology39.eras();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((org.joda.time.Chronology) copticChronology39);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.plus(readableDuration42);
        boolean boolean44 = dateTime36.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalDate localDate45 = dateTime36.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime41", (instant26.compareTo(dateTime41) == 0) == instant26.equals(dateTime41));
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1023");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.era();
        java.lang.String str6 = copticChronology0.toString();
        org.joda.time.DurationField durationField7 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.yearOfEra();
        org.joda.time.DurationField durationField9 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField16 = copticChronology15.eras();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra(1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.Chronology chronology27 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        long long35 = dateTimeZone32.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology36 = copticChronology15.withZone(dateTimeZone32);
        int int38 = dateTimeZone32.getOffsetFromLocal(100L);
        org.joda.time.DateTime dateTime39 = dateTime14.withZone(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(432000L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readableDuration41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readableDuration43);
        int int45 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localDateTime42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField16", Math.signum(durationField7.compareTo(durationField16)) == -Math.signum(durationField16.compareTo(durationField7)));
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1024");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField5, and durationField1", !(durationField1.compareTo(durationField5) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField5.compareTo(durationField1))));
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1025");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField6 = copticChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.hourOfHalfday();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology5);
        int int9 = localDate8.getMonthOfYear();
        org.joda.time.LocalDate.Property property10 = localDate8.weekyear();
        org.joda.time.LocalDate localDate12 = property10.addWrapFieldToCopy(26319178);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        java.util.Locale locale16 = dateTimeFormatter15.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial19 = null;
        int int20 = dateTimeField18.getMaximumValue(readablePartial19);
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.toLanguageTag();
        int int23 = dateTimeField18.getMaximumTextLength(locale21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter15.withLocale(locale21);
        java.util.Locale locale25 = dateTimeFormatter15.getLocale();
        boolean boolean26 = dateTimeFormatter15.isOffsetParsed();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField28 = copticChronology27.eras();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology27.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withEra(1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withEra(1);
        int int38 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.Chronology chronology39 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology43.getZone();
        long long47 = dateTimeZone44.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology48 = copticChronology27.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone44);
        java.lang.String str51 = dateTimeZone44.getName((long) 72);
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone44);
        java.lang.String str53 = copticChronology52.toString();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology52.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter15.withChronology((org.joda.time.Chronology) copticChronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter55.withDefaultYear(327);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter55.withPivotYear((java.lang.Integer) 26184082);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withPivotYear(236);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter61.withDefaultYear(950);
        java.util.Locale locale67 = new java.util.Locale("29", "2022-06-17T20:00:00.010Z", "86399");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter63.withLocale(locale67);
        java.lang.String str69 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDate12, locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField28", Math.signum(durationField6.compareTo(durationField28)) == -Math.signum(durationField28.compareTo(durationField6)));
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1026");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.Instant instant4 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = instant4.toDateTime(dateTimeZone5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime6.withCenturyOfEra(100);
        boolean boolean10 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime11 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime6.plusMinutes(513);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds(1);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology16.era();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology16.yearOfCentury();
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime((org.joda.time.Chronology) copticChronology16);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 52711, (org.joda.time.Chronology) copticChronology16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime21", (dateTime15.compareTo(dateTime21) == 0) == dateTime15.equals(dateTime21));
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1027");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField4 = copticChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology3.millisOfSecond();
        org.joda.time.DurationField durationField8 = copticChronology3.eras();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) copticChronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField8", Math.signum(durationField4.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField4)));
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1028");
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField3 = copticChronology2.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.yearOfEra();
        java.lang.String str5 = copticChronology2.toString();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 11, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField9 = copticChronology2.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField3, durationField9, and durationField3", !(durationField3.compareTo(durationField9) == 0) || (Math.signum(durationField3.compareTo(durationField3)) == Math.signum(durationField9.compareTo(durationField3))));
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1029");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfDay();
        org.joda.time.DateTime dateTime5 = property3.addToCopy(9);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withPeriodAdded(readablePeriod6, 346);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1030");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1645514363104L);
        org.joda.time.Instant instant2 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = instant2.toDateTime(dateTimeZone3);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField7 = copticChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology6.hourOfHalfday();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology6);
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) 10);
        int int12 = localDate11.getWeekyear();
        org.joda.time.LocalDate localDate14 = localDate11.withYear(3);
        org.joda.time.DateTime dateTime15 = dateTime4.withFields((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property17 = dateTime16.centuryOfEra();
        org.joda.time.DateTime dateTime18 = property17.roundHalfCeilingCopy();
        java.util.Locale locale19 = null;
        int int20 = property17.getMaximumShortTextLength(locale19);
        org.joda.time.DateTime dateTime21 = property17.withMinimumValue();
        org.joda.time.DateTime dateTime22 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        java.lang.String str23 = localDate1.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime4", (instant2.compareTo(dateTime4) == 0) == instant2.equals(dateTime4));
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1031");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = instant3.toDateTime(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra(100);
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property11 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime13 = dateTime5.plusYears(0);
        org.joda.time.DateTime.Property property14 = dateTime5.secondOfDay();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("384");
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localTime18.toDateTimeToday(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfMonth(10);
        int int24 = dateTime23.getCenturyOfEra();
        org.joda.time.DateTime.Property property25 = dateTime23.era();
        org.joda.time.DateTime dateTime26 = property25.roundHalfEvenCopy();
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.toLanguageTag();
        java.util.Locale.setDefault(category27, locale28);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale31);
        java.lang.String str33 = locale31.getDisplayName();
        boolean boolean34 = locale31.hasExtensions();
        java.lang.String str35 = locale31.getCountry();
        java.lang.String str36 = locale31.getDisplayVariant();
        java.util.Locale.setDefault(category27, locale31);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category27, locale38);
        java.lang.String str40 = property25.getAsText(locale38);
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleKeys();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone16, locale38);
        java.lang.String str43 = property14.getAsShortText(locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime5", (instant3.compareTo(dateTime5) == 0) == instant3.equals(dateTime5));
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1032");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11");
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(23);
        int int5 = property2.getMinimumValue();
        org.joda.time.DateTime dateTime6 = property2.roundCeilingCopy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        int int16 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology21.getZone();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        int int25 = dateTimeZone22.getOffset((long) 12);
        boolean boolean27 = dateTimeZone22.isStandardOffset((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(161);
        org.joda.time.DateTime dateTime33 = dateTime29.minus((long) 11);
        org.joda.time.DateTime dateTime35 = dateTime29.plusYears(24);
        int int36 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone22);
        long long40 = dateTimeZone22.adjustOffset((long) 233, false);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(46621738L, dateTimeZone22);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone22);
        boolean boolean43 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime37", (dateTime29.compareTo(dateTime37) == 0) == dateTime29.equals(dateTime37));
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1033");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 692);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str13 = dateTimeFieldType12.getName();
        int int14 = instant8.get(dateTimeFieldType12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant8.minus(readableDuration15);
        org.joda.time.MutableDateTime mutableDateTime17 = instant8.toMutableDateTimeISO();
        org.joda.time.Instant instant20 = instant8.withDurationAdded(10598109393743L, 987);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.joda.time.MutableDateTime mutableDateTime24 = instant22.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime17", (instant3.compareTo(mutableDateTime17) == 0) == instant3.equals(mutableDateTime17));
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1034");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfDay();
        org.joda.time.DateTime dateTime5 = property3.addToCopy(9);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withWeekyear(692);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withPeriodAdded(readablePeriod15, 2922728);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths(52);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("ja");
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 869);
        boolean boolean26 = dateTimeZone23.isFixed();
        org.joda.time.DateTime dateTime27 = localDateTime19.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = dateTime7.withZoneRetainFields(dateTimeZone23);
        long long30 = dateTimeZone23.nextTransition(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1035");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh-CN");
        java.lang.String str2 = languageRange1.getRange();
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant3.plus(readableDuration5);
        org.joda.time.Instant instant8 = instant3.withMillis(63675504000675L);
        boolean boolean9 = languageRange1.equals((java.lang.Object) 63675504000675L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1036");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(117);
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(327);
        org.joda.time.DateTime dateTime13 = dateTime11.plus((long) 135);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(490);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1037");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime.Property property14 = dateTime2.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.DateTime dateTime17 = property14.setCopy(52772818);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1038");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime.Property property14 = dateTime2.weekyear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.minus(readablePeriod15);
        org.joda.time.DateTime.Property property17 = dateTime2.minuteOfHour();
        int int18 = property17.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1039");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2, chronology14);
        org.joda.time.DateTime dateTime18 = dateTime2.plusYears(608);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 450);
        org.joda.time.Instant instant23 = instant20.withDurationAdded((long) 886, 188);
        boolean boolean24 = dateTime18.isAfter((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTime();
        org.joda.time.DateTime dateTime30 = dateTime26.withMinuteOfHour((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears(366);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear(182);
        org.joda.time.DateTime dateTime36 = dateTime34.plusMonths(883);
        int int37 = instant23.compareTo((org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime36.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1040");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology5.minuteOfDay();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField11 = copticChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.hourOfHalfday();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology10);
        int int14 = localDate13.getMonthOfYear();
        org.joda.time.LocalDate.Property property15 = localDate13.weekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        java.util.Locale locale20 = dateTimeFormatter19.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial23 = null;
        int int24 = dateTimeField22.getMaximumValue(readablePartial23);
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.toLanguageTag();
        int int27 = dateTimeField22.getMaximumTextLength(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter19.withLocale(locale25);
        java.lang.String str29 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate13, 11, locale25);
        java.util.Calendar calendar30 = dateTime2.toCalendar(locale25);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale31);
        java.lang.String str33 = locale31.getDisplayName();
        boolean boolean34 = locale31.hasExtensions();
        java.lang.String str35 = locale31.getCountry();
        java.lang.String str36 = locale31.getDisplayVariant();
        java.util.Calendar calendar37 = dateTime2.toCalendar(locale31);
        java.util.Set<java.lang.String> strSet38 = locale31.getUnicodeLocaleKeys();
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial41 = null;
        int int42 = dateTimeField40.getMaximumValue(readablePartial41);
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.toLanguageTag();
        int int45 = dateTimeField40.getMaximumTextLength(locale43);
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str50 = nameProvider46.getShortName(locale47, "", "");
        java.lang.String str51 = locale43.getDisplayName(locale47);
        java.lang.String str52 = locale47.getISO3Country();
        boolean boolean53 = strSet38.equals((java.lang.Object) locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1041");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        long long14 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime2.minusSeconds(22);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.eras();
        org.joda.time.DateTime dateTime19 = dateTime2.toDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear(60);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1042");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        java.lang.String str5 = property4.getAsShortText();
        org.joda.time.DateTime dateTime6 = property4.getDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusDays((int) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 149);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1043");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        int int9 = localDateTime5.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra(1);
        int int14 = localDateTime13.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = localDateTime13.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.withField(dateTimeFieldType16, 7);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime5.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.property(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType21.getRangeDurationType();
        java.lang.Object obj25 = null;
        org.joda.time.Instant instant26 = new org.joda.time.Instant(obj25);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime28 = instant26.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int32 = instant26.get(dateTimeFieldType29);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology33.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology33.minuteOfDay();
        org.joda.time.DurationField durationField38 = copticChronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType29.getField((org.joda.time.Chronology) copticChronology33);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 227, (org.joda.time.Chronology) copticChronology33);
        org.joda.time.DurationField durationField41 = copticChronology33.halfdays();
        boolean boolean42 = dateTimeFieldType21.isSupported((org.joda.time.Chronology) copticChronology33);
        org.joda.time.DateTimeZone dateTimeZone43 = copticChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology33.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime27", (instant26.compareTo(mutableDateTime27) == 0) == instant26.equals(mutableDateTime27));
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1044");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology12.minuteOfDay();
        boolean boolean17 = durationFieldType11.isSupported((org.joda.time.Chronology) copticChronology12);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology12.monthOfYear();
        org.joda.time.DurationField durationField20 = copticChronology12.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField20, and durationField10", !(durationField10.compareTo(durationField20) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField20.compareTo(durationField10))));
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1645514265582L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear(138);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis(749);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        int int15 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int16 = localDateTime8.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withDurationAdded(readableDuration17, 388);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField21 = copticChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology20.hourOfDay();
        boolean boolean23 = localDateTime8.equals((java.lang.Object) copticChronology20);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology20.halfdayOfDay();
        org.joda.time.DateTime dateTime26 = dateTime6.toDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.DurationField durationField27 = copticChronology20.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime26", (dateTime6.compareTo(dateTime26) == 0) == dateTime6.equals(dateTime26));
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1046");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        int int9 = dateTime8.getCenturyOfEra();
        boolean boolean10 = dateTime8.isEqualNow();
        org.joda.time.DateTime dateTime12 = dateTime8.withMillisOfDay((int) (short) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusSeconds(7);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMinutes((int) (short) 0);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology17.halfdayOfDay();
        org.joda.time.DurationField durationField22 = copticChronology17.years();
        int int23 = copticChronology17.getMinimumDaysInFirstWeek();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology17.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime24", (dateTime12.compareTo(dateTime24) == 0) == dateTime12.equals(dateTime24));
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1047");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        long long14 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime2.minusSeconds(22);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.eras();
        org.joda.time.DateTime dateTime19 = dateTime2.toDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DurationField durationField20 = copticChronology17.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime19", (instant0.compareTo(dateTime19) == 0) == instant0.equals(dateTime19));
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1048");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = copticChronology0.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField7, and durationField1", !(durationField1.compareTo(durationField7) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField7.compareTo(durationField1))));
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1049");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        long long3 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant6 = instant1.withMillis((long) 168);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 620);
        org.joda.time.Instant instant11 = instant9.minus((long) (-292275054));
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant9.plus(readableDuration12);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.halfdayOfDay();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) 777, (org.joda.time.Chronology) copticChronology15);
        org.joda.time.DurationField durationField18 = copticChronology15.eras();
        org.joda.time.MutableDateTime mutableDateTime19 = instant13.toMutableDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime19", (instant6.compareTo(mutableDateTime19) == 0) == instant6.equals(mutableDateTime19));
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1050");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.yearOfEra();
        java.lang.String str4 = copticChronology1.toString();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.secondOfMinute();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(26448558L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField8 = copticChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology7.hourOfHalfday();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) 10);
        int int13 = localDate12.getWeekyear();
        java.util.Date date14 = localDate12.toDate();
        org.joda.time.LocalDate.Property property15 = localDate12.monthOfYear();
        org.joda.time.LocalDate localDate16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(0);
        org.joda.time.LocalDate.Property property19 = localDate18.yearOfCentury();
        long long21 = copticChronology1.set((org.joda.time.ReadablePartial) localDate18, (long) 539);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField2 and durationField8", Math.signum(durationField2.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField2)));
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1051");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfHalfday();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = copticChronology0.weeks();
        org.joda.time.DurationField durationField9 = copticChronology0.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField1, and durationField8", !(durationField9.compareTo(durationField1) == 0) || (Math.signum(durationField9.compareTo(durationField8)) == Math.signum(durationField1.compareTo(durationField8))));
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1052");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField4 = copticChronology0.seconds();
        org.joda.time.DurationField durationField5 = copticChronology0.halfdays();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded((long) (short) 0, 17);
        boolean boolean11 = dateTime6.isAfter((long) 886);
        org.joda.time.DateTime dateTime13 = dateTime6.plusSeconds(994);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis(560);
        long long16 = dateTime15.getMillis();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        boolean boolean23 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = instant24.toDateTime(dateTimeZone25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime.Property property28 = dateTime26.millisOfDay();
        boolean boolean30 = dateTime26.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime32 = dateTime26.plusMonths(117);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundFloorCopy();
        org.joda.time.DateTime dateTime35 = property33.withMaximumValue();
        org.joda.time.DateTime dateTime37 = property33.addToCopy(26184082L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.Instant instant40 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = instant40.toDateTime(dateTimeZone41);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfEra();
        org.joda.time.DateTime dateTime45 = dateTime42.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar46 = dateTime42.toGregorianCalendar();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withEra(1);
        int int51 = localDateTime50.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = localDateTime50.getFieldType(0);
        boolean boolean54 = dateTime42.isSupported(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withEra(1);
        int int59 = localDateTime58.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = localDateTime58.getFieldType(0);
        boolean boolean62 = dateTime42.isSupported(dateTimeFieldType61);
        org.joda.time.DateTime dateTime64 = dateTime42.plusMillis((int) (byte) 0);
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField66 = copticChronology65.halfdays();
        org.joda.time.DateTimeField dateTimeField67 = copticChronology65.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology65.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology65.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField70 = copticChronology65.halfdayOfDay();
        org.joda.time.DurationField durationField71 = copticChronology65.days();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology72);
        int int74 = localDateTime73.getWeekyear();
        int int75 = localDateTime73.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.era();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime73.withWeekOfWeekyear(22);
        int[] intArray80 = copticChronology65.get((org.joda.time.ReadablePartial) localDateTime73, (-9936000000L));
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(chronology81);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((java.lang.Object) chronology81);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property86 = localDateTime85.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property88 = localDateTime85.property(dateTimeFieldType87);
        boolean boolean89 = localDateTime73.isSupported(dateTimeFieldType87);
        boolean boolean90 = dateTime42.isSupported(dateTimeFieldType87);
        boolean boolean91 = dateTime37.isSupported(dateTimeFieldType87);
        int int92 = localDateTime22.get(dateTimeFieldType87);
        int int93 = dateTime15.get(dateTimeFieldType87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant24", (dateTime6.compareTo(instant24) == 0) == dateTime6.equals(instant24));
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1053");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateTime dateTime2 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property3 = localDate0.dayOfWeek();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = localDate0.toString("437", locale5);
        org.joda.time.LocalDate.Property property7 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField10 = copticChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.hourOfHalfday();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology9);
        int int13 = localDate12.getMonthOfYear();
        org.joda.time.LocalDate localDate15 = localDate12.minusMonths(106);
        org.joda.time.LocalDate localDate16 = localDate8.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate15.plusYears(0);
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(26459118);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDate16 and localDate15", (localDate16.compareTo(localDate15) == 0) == localDate16.equals(localDate15));
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1054");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime6.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.era();
        java.lang.String str15 = copticChronology9.toString();
        org.joda.time.DurationField durationField16 = copticChronology9.hours();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.DateTime.Property property18 = dateTime17.year();
        int int19 = property18.getMaximumValueOverall();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1055");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(161);
        org.joda.time.DateTime dateTime5 = dateTime1.minus((long) 11);
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 'u', (org.joda.time.Chronology) copticChronology7);
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTime((org.joda.time.Chronology) copticChronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        int int12 = dateTimeZone10.getStandardOffset(10598109646003L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime9", (dateTime1.compareTo(dateTime9) == 0) == dateTime1.equals(dateTime9));
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1056");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1645514265582L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear(138);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis(749);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        int int15 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int16 = localDateTime8.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withDurationAdded(readableDuration17, 388);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField21 = copticChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology20.hourOfDay();
        boolean boolean23 = localDateTime8.equals((java.lang.Object) copticChronology20);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology20.halfdayOfDay();
        org.joda.time.DateTime dateTime26 = dateTime6.toDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = copticChronology20.add(readablePeriod27, 9930988800000L, 907);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime26", (dateTime6.compareTo(dateTime26) == 0) == dateTime6.equals(dateTime26));
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1057");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology21 = copticChronology0.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone17);
        java.lang.String str24 = dateTimeZone17.getName((long) 72);
        int int26 = dateTimeZone17.getOffsetFromLocal((long) 6);
        int int28 = dateTimeZone17.getOffsetFromLocal((long) 938);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField30 = copticChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology29.centuryOfEra();
        org.joda.time.DurationField durationField35 = copticChronology29.minutes();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology29.minuteOfHour();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology29);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfSecond(929);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime38.getZone();
        int int42 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField30", Math.signum(durationField1.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField1)));
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1058");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(0);
        boolean boolean14 = dateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime18.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDateTime18.getFieldType(0);
        boolean boolean22 = dateTime2.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = dateTime2.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekyear(5);
        org.joda.time.DateTime dateTime27 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime29 = dateTime26.plusYears(580);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology30.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = copticChronology30.add(readablePeriod33, (long) 4, 2);
        org.joda.time.DateTime dateTime37 = dateTime26.withChronology((org.joda.time.Chronology) copticChronology30);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology30.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and dateTime37", (dateTime26.compareTo(dateTime37) == 0) == dateTime26.equals(dateTime37));
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1059");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.halfdayOfDay();
        long long7 = dateTimeField4.getDifferenceAsLong((long) 0, (long) (short) 0);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale9);
        java.lang.String str11 = locale9.getDisplayName();
        boolean boolean12 = locale9.hasExtensions();
        java.util.Locale.setDefault(locale9);
        java.lang.String str14 = dateTimeField4.getAsShortText(113, locale9);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology16.secondOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withEra(1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withEra(1);
        int int31 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.Chronology chronology32 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        boolean boolean36 = dateTimeField34.isLeap((long) 2022);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withEra(1);
        int int41 = localDateTime40.getMonthOfYear();
        org.joda.time.Chronology chronology42 = localDateTime40.getChronology();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime40, locale43);
        int int45 = dateTimeField22.getMaximumShortTextLength(locale43);
        java.lang.String str46 = locale43.getDisplayLanguage();
        java.lang.String str47 = dateTimeField4.getAsShortText(2, locale43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField33", Math.signum(durationField1.compareTo(durationField33)) == -Math.signum(durationField33.compareTo(durationField1)));
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1060");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = dateTime1.toString("10", locale3);
        org.joda.time.DateTime dateTime8 = dateTime1.withDayOfYear(345);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.plus(readablePeriod9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readablePeriod11);
        org.joda.time.DateTime dateTime13 = dateTime12.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localTime15.toDateTimeToday(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfMonth(10);
        org.joda.time.DateTime dateTime22 = dateTime18.minusHours((int) (short) 100);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime dateTime24 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime13.plus(readableDuration25);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField29 = copticChronology28.eras();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology28.weekyearOfCentury();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromMillisOfDay((long) 388, (org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now((org.joda.time.Chronology) copticChronology28);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime26.toMutableDateTime((org.joda.time.Chronology) copticChronology28);
        org.joda.time.TimeOfDay timeOfDay35 = dateTime26.toTimeOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and mutableDateTime34", (dateTime26.compareTo(mutableDateTime34) == 0) == dateTime26.equals(mutableDateTime34));
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1061");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        int int6 = dateTime2.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime2.minus(readablePeriod7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        long long12 = instant10.getMillis();
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTimeISO();
        int int14 = dateTime2.compareTo((org.joda.time.ReadableInstant) instant10);
        org.joda.time.DateTime dateTime16 = dateTime2.withYearOfEra(97);
        org.joda.time.DateTime dateTime18 = dateTime2.plusYears(7200);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(500);
        org.joda.time.DateTime dateTime21 = dateTime2.toDateTime(dateTimeZone20);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField24 = copticChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology23.weekyearOfCentury();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 869, (org.joda.time.Chronology) copticChronology23);
        org.joda.time.DateTime dateTime28 = localDate27.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.parse("11");
        org.joda.time.DateTime dateTime32 = dateTime30.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime32.withWeekyear(0);
        int int36 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime21.withMillisOfDay(26320);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology39.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology39.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField43.getType();
        org.joda.time.DateTime dateTime46 = dateTime21.withField(dateTimeFieldType44, 10);
        org.joda.time.DateTime.Property property47 = dateTime46.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime21", (instant0.compareTo(dateTime21) == 0) == instant0.equals(dateTime21));
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1062");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = copticChronology0.add(readablePeriod7, (long) 965, 692);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.secondOfDay();
        org.joda.time.DurationField durationField12 = copticChronology0.years();
        org.joda.time.Chronology chronology13 = copticChronology0.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField12", (durationField6.compareTo(durationField12) == 0) == durationField6.equals(durationField12));
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1063");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfHalfday();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        long long10 = copticChronology0.add((long) 177, (long) 13, 292);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.joda.time.DurationField durationField12 = copticChronology0.eras();
        org.joda.time.DurationField durationField13 = copticChronology0.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField12", Math.signum(durationField1.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField1)));
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1064");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11");
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        java.lang.String str4 = dateTime1.toString("\u65e5\u6587");
        org.joda.time.DateMidnight dateMidnight5 = dateTime1.toDateMidnight();
        org.joda.time.DateTime dateTime7 = dateTime1.minusYears(6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(readableDuration8, (int) (short) 100);
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = instant11.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withSecondOfMinute(2);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property17 = dateTime15.era();
        org.joda.time.DateMidnight dateMidnight18 = dateTime15.toDateMidnight();
        int int19 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property20 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DurationField durationField22 = property20.getDurationField();
        long long25 = durationField22.getMillis(975L, (long) 418);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.halfdayOfDay();
        org.joda.time.DurationField durationField28 = copticChronology26.minutes();
        java.lang.String str29 = durationField28.toString();
        int int32 = durationField28.getValue(169L, (long) 3);
        int int34 = durationField28.getValue(510L);
        long long35 = durationField28.getUnitMillis();
        long long38 = durationField28.add((long) 236, 0);
        int int39 = durationField22.compareTo(durationField28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime13", (instant11.compareTo(dateTime13) == 0) == instant11.equals(dateTime13));
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1065");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = instant3.toDateTime(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra(100);
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime12 = dateTime5.plusMinutes(513);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localTime14.toDateTimeToday(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfMonth(10);
        int int20 = dateTime19.getCenturyOfEra();
        org.joda.time.DateTime.Property property21 = dateTime19.era();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.minus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        boolean boolean26 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime23);
        int int27 = dateTime23.getMillisOfDay();
        boolean boolean29 = dateTime23.isBefore(1645514286443L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime5", (instant3.compareTo(dateTime5) == 0) == instant3.equals(dateTime5));
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1066");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        long long3 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant6 = instant1.withMillis((long) 168);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 620);
        org.joda.time.Instant instant11 = instant9.minus((long) (-292275054));
        org.joda.time.DateTime dateTime12 = instant11.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.DateTime.Property property14 = dateTime12.secondOfDay();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField16 = copticChronology15.eras();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra(1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.Chronology chronology27 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        long long35 = dateTimeZone32.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology36 = copticChronology15.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone32);
        java.lang.String str39 = dateTimeZone32.getName((long) 72);
        long long41 = dateTimeZone32.nextTransition((long) 10);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        java.lang.String str44 = localDateTime42.toString("1737-09-15");
        org.joda.time.Instant instant45 = new org.joda.time.Instant((java.lang.Object) str44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant45.plus(readableDuration46);
        long long48 = instant47.getMillis();
        org.joda.time.DateTime dateTime49 = instant47.toDateTimeISO();
        org.joda.time.DateTime dateTime50 = instant47.toDateTime();
        boolean boolean51 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = dateTime12.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1067");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(15);
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withYear(138);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusHours(213);
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = instant20.toDateTime(dateTimeZone21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime22.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime22.toGregorianCalendar();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withEra(1);
        int int31 = localDateTime30.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDateTime30.getFieldType(0);
        boolean boolean34 = dateTime22.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withEra(1);
        int int39 = localDateTime38.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime38.getFieldType(0);
        boolean boolean42 = dateTime22.isSupported(dateTimeFieldType41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime45 = dateTime22.withField(dateTimeFieldType43, 72);
        org.joda.time.DateTime dateTime47 = dateTime45.withYear((-9935959));
        org.joda.time.DateTime dateTime49 = dateTime47.plusWeeks(70);
        org.joda.time.Instant instant50 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = instant50.toDateTime(dateTimeZone51);
        org.joda.time.DateTime.Property property53 = dateTime52.yearOfEra();
        org.joda.time.DateTime dateTime55 = dateTime52.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar56 = dateTime52.toGregorianCalendar();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withEra(1);
        int int61 = localDateTime60.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = localDateTime60.getFieldType(0);
        boolean boolean64 = dateTime52.isSupported(dateTimeFieldType63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withEra(1);
        int int69 = localDateTime68.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = localDateTime68.getFieldType(0);
        boolean boolean72 = dateTime52.isSupported(dateTimeFieldType71);
        int int73 = dateTime47.get(dateTimeFieldType71);
        org.joda.time.Chronology chronology74 = null;
        boolean boolean75 = dateTimeFieldType71.isSupported(chronology74);
        int int76 = localDateTime17.get(dateTimeFieldType71);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusDays(380);
        int int80 = localDateTime79.getMillisOfDay();
        boolean boolean81 = localDateTime17.equals((java.lang.Object) localDateTime79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime22", (instant20.compareTo(dateTime22) == 0) == instant20.equals(dateTime22));
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1068");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology5.minuteOfDay();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField11 = copticChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.hourOfHalfday();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology10);
        int int14 = localDate13.getMonthOfYear();
        org.joda.time.LocalDate.Property property15 = localDate13.weekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        java.util.Locale locale20 = dateTimeFormatter19.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial23 = null;
        int int24 = dateTimeField22.getMaximumValue(readablePartial23);
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.toLanguageTag();
        int int27 = dateTimeField22.getMaximumTextLength(locale25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter19.withLocale(locale25);
        java.lang.String str29 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate13, 11, locale25);
        java.util.Calendar calendar30 = dateTime2.toCalendar(locale25);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale31);
        java.lang.String str33 = locale31.getDisplayName();
        boolean boolean34 = locale31.hasExtensions();
        java.lang.String str35 = locale31.getCountry();
        java.lang.String str36 = locale31.getDisplayVariant();
        java.util.Calendar calendar37 = dateTime2.toCalendar(locale31);
        long long38 = calendar37.getTimeInMillis();
        boolean boolean39 = calendar37.isWeekDateSupported();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1069");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.halfdayOfDay();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) 777, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField4 = copticChronology1.eras();
        java.lang.String str5 = copticChronology1.toString();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.yearOfEra();
        org.joda.time.DurationField durationField7 = copticChronology1.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField4, durationField7, and durationField4", !(durationField4.compareTo(durationField7) == 0) || (Math.signum(durationField4.compareTo(durationField4)) == Math.signum(durationField7.compareTo(durationField4))));
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1070");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.millisOfSecond();
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = instant5.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfDay();
        java.lang.String str10 = property9.getAsShortText();
        org.joda.time.DateTime dateTime11 = property9.getDateTime();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = instant12.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = dateTime14.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime14.toGregorianCalendar();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withEra(1);
        int int23 = localDateTime22.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDateTime22.getFieldType(0);
        boolean boolean26 = dateTime14.isSupported(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withEra(1);
        int int31 = localDateTime30.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDateTime30.getFieldType(0);
        boolean boolean34 = dateTime14.isSupported(dateTimeFieldType33);
        java.lang.String str35 = dateTimeFieldType33.getName();
        org.joda.time.DateTime dateTime37 = dateTime11.withField(dateTimeFieldType33, 10);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMonths(399);
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField43 = copticChronology42.eras();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology42.yearOfEra();
        java.lang.String str45 = copticChronology42.toString();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology42);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 11, (org.joda.time.Chronology) copticChronology42);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField49 = copticChronology48.eras();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology48.weekOfWeekyear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withEra(1);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withEra(1);
        int int59 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.Chronology chronology60 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = chronology64.getZone();
        long long68 = dateTimeZone65.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology69 = copticChronology48.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone65);
        java.lang.String str72 = dateTimeZone65.getName((long) 72);
        org.joda.time.Chronology chronology73 = copticChronology42.withZone(dateTimeZone65);
        java.lang.String str75 = dateTimeZone65.getNameKey(233L);
        org.joda.time.DateTime dateTime76 = dateTime37.withZone(dateTimeZone65);
        org.joda.time.Chronology chronology77 = copticChronology0.withZone(dateTimeZone65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField43", Math.signum(durationField1.compareTo(durationField43)) == -Math.signum(durationField43.compareTo(durationField1)));
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1071");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(0);
        boolean boolean14 = dateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime18.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDateTime18.getFieldType(0);
        boolean boolean22 = dateTime2.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = dateTime2.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMillis(24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readableDuration27);
        int int29 = dateTime26.getYearOfEra();
        org.joda.time.DateTime.Property property30 = dateTime26.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1072");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial3 = null;
        int int4 = dateTimeField2.getMaximumValue(readablePartial3);
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.toLanguageTag();
        int int7 = dateTimeField2.getMaximumTextLength(locale5);
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str12 = nameProvider8.getShortName(locale9, "", "");
        java.lang.String str13 = locale5.getDisplayName(locale9);
        java.lang.String str14 = locale9.toLanguageTag();
        java.lang.String str17 = nameProvider0.getName(locale9, "hi!", "26277550");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField20 = copticChronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology19.centuryOfEra();
        org.joda.time.DurationField durationField25 = copticChronology19.minutes();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology19.clockhourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField31 = copticChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology30.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology30.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology30.clockhourOfHalfday();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) chronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str47 = nameProvider43.getShortName(locale44, "", "");
        java.lang.String str48 = property41.getAsShortText(locale44);
        java.lang.String str49 = locale44.getScript();
        java.lang.String str50 = locale44.getISO3Language();
        java.lang.String str51 = dateTimeField34.getAsText(744, locale44);
        java.lang.String str52 = dateTimeField28.getAsShortText(170, locale44);
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale44.getDisplayScript(locale53);
        java.lang.String str57 = nameProvider0.getShortName(locale44, "21", "437");
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField59 = copticChronology58.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial60 = null;
        int int61 = dateTimeField59.getMaximumValue(readablePartial60);
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.lang.String str63 = locale62.toLanguageTag();
        int int64 = dateTimeField59.getMaximumTextLength(locale62);
        org.joda.time.tz.NameProvider nameProvider65 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str69 = nameProvider65.getShortName(locale66, "", "");
        java.lang.String str70 = locale62.getDisplayName(locale66);
        java.lang.String str71 = locale62.getDisplayName();
        java.lang.String str74 = nameProvider0.getName(locale62, "15 Sep 1737 12:19:00 GMT", "Japanese");
        org.joda.time.chrono.CopticChronology copticChronology75 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField76 = copticChronology75.eras();
        org.joda.time.DateTimeField dateTimeField77 = copticChronology75.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology75.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField79 = copticChronology75.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField80 = copticChronology75.dayOfWeek();
        java.util.Locale locale84 = new java.util.Locale("hi!", "2022-02-22T07:15:57.092", "10");
        java.lang.String str85 = locale84.getDisplayName();
        int int86 = dateTimeField80.getMaximumTextLength(locale84);
        java.lang.String str89 = nameProvider0.getName(locale84, "Sun Sep 15 00:00:00 GMT+00:00 1737", "1701-09-15");
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField20 and durationField76", Math.signum(durationField20.compareTo(durationField76)) == -Math.signum(durationField76.compareTo(durationField20)));
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1073");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay5 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime.Property property6 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime8 = dateTime2.plusMillis((int) ' ');
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = instant9.toDateTime(dateTimeZone10);
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField14 = copticChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology13.hourOfHalfday();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology13);
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) 10);
        int int19 = localDate18.getWeekyear();
        org.joda.time.LocalDate localDate21 = localDate18.withYear(3);
        org.joda.time.DateTime dateTime22 = dateTime11.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone24);
        long long27 = dateTimeZone24.nextTransition((long) 26257167);
        org.joda.time.DateTime dateTime28 = dateTime8.withZone(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1074");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField5 = copticChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology4.hourOfHalfday();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) 10);
        int int10 = localDate9.getWeekyear();
        org.joda.time.LocalDate localDate12 = localDate9.withYear(3);
        org.joda.time.DateTime dateTime13 = dateTime2.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        org.joda.time.DateTime dateTime16 = property15.roundHalfCeilingCopy();
        java.util.Locale locale17 = null;
        int int18 = property15.getMaximumShortTextLength(locale17);
        org.joda.time.DurationField durationField19 = property15.getRangeDurationField();
        int int20 = property15.getMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1075");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.halfdayOfDay();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) 777, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 10);
        int[] intArray7 = copticChronology1.get((org.joda.time.ReadablePartial) localTime5, (long) (byte) 100);
        org.joda.time.DurationField durationField8 = copticChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.hourOfHalfday();
        org.joda.time.DurationField durationField10 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.millisOfDay();
        org.joda.time.DurationField durationField13 = copticChronology1.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField8, and durationField10", !(durationField13.compareTo(durationField8) == 0) || (Math.signum(durationField13.compareTo(durationField10)) == Math.signum(durationField8.compareTo(durationField10))));
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1076");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology12.minuteOfDay();
        boolean boolean17 = durationFieldType11.isSupported((org.joda.time.Chronology) copticChronology12);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology12.hourOfDay();
        java.lang.String str19 = copticChronology12.toString();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology12.halfdayOfDay();
        org.joda.time.Instant instant21 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = instant21.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withSecondOfMinute(2);
        org.joda.time.DateTime.Property property26 = dateTime23.weekOfWeekyear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.withChronology(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        org.joda.time.Chronology chronology30 = copticChronology12.withZone(dateTimeZone29);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField33 = copticChronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology32.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withEra(1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withEra(1);
        int int45 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withEra(1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withEra(1);
        int int56 = localDateTime49.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        int int57 = localDateTime53.getMillisOfSecond();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withEra(1);
        int int62 = localDateTime61.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = localDateTime61.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime53.withField(dateTimeFieldType64, 7);
        int[] intArray68 = chronology46.get((org.joda.time.ReadablePartial) localDateTime66, (long) (byte) 10);
        int int69 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localDateTime36, intArray68);
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.lang.String str72 = dateTimeField35.getAsShortText(510, locale71);
        java.util.Locale.Category category73 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale74 = java.util.Locale.JAPANESE;
        java.lang.String str75 = locale74.toLanguageTag();
        java.util.Locale.setDefault(category73, locale74);
        java.util.Locale locale77 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale77);
        java.lang.String str79 = locale77.getDisplayName();
        boolean boolean80 = locale77.hasExtensions();
        java.lang.String str81 = locale77.getCountry();
        java.lang.String str82 = locale77.getDisplayVariant();
        java.util.Locale.setDefault(category73, locale77);
        java.util.Locale locale84 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category73, locale84);
        java.util.Locale locale86 = java.util.Locale.JAPANESE;
        java.lang.String str87 = locale86.toLanguageTag();
        java.lang.String str88 = locale84.getDisplayVariant(locale86);
        java.lang.String str89 = locale71.getDisplayName(locale86);
        java.lang.String str90 = dateTimeZone29.getShortName(1645514289667L, locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField33", Math.signum(durationField10.compareTo(durationField33)) == -Math.signum(durationField33.compareTo(durationField10)));
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1077");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField4 = copticChronology0.days();
        org.joda.time.DurationField durationField5 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField5", Math.signum(durationField4.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField4)));
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1078");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        int int4 = localDate3.getMonthOfYear();
        org.joda.time.LocalDate.Property property5 = localDate3.weekyear();
        org.joda.time.LocalDate localDate6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate7 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate9 = localDate7.withCenturyOfEra(550);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField11 = copticChronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology31 = copticChronology10.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(575);
        long long36 = dateTimeZone27.getMillisKeepLocal(dateTimeZone34, (long) (-9935959));
        long long38 = dateTimeZone27.nextTransition(826640204214959948L);
        boolean boolean40 = dateTimeZone27.isStandardOffset(14200704000000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.DateTime dateTime42 = localDate9.toDateTimeAtCurrentTime(dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField11", Math.signum(durationField1.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField1)));
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1079");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.minus(0L);
        org.joda.time.DateTime dateTime7 = dateTime2.plusHours(692);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = copticChronology8.seconds();
        org.joda.time.DurationField durationField13 = copticChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology8.halfdayOfDay();
        org.joda.time.DateTime dateTime15 = dateTime2.withChronology((org.joda.time.Chronology) copticChronology8);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime2.plus(readablePeriod16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime15", (instant0.compareTo(dateTime15) == 0) == instant0.equals(dateTime15));
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1080");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology21 = copticChronology0.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone17);
        java.lang.String str24 = dateTimeZone17.getName((long) 72);
        long long26 = dateTimeZone17.nextTransition((long) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        java.lang.String str29 = localDateTime27.toString("1737-09-15");
        org.joda.time.Instant instant30 = new org.joda.time.Instant((java.lang.Object) str29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.plus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((long) 28, (-292275054));
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant32.minus(readableDuration36);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DateTime dateTime39 = instant37.toDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfHour();
        org.joda.time.DurationField durationField41 = property40.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField41, and durationField1", !(durationField1.compareTo(durationField41) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField41.compareTo(durationField1))));
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1081");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.halfdayOfDay();
        long long7 = dateTimeField4.getDifferenceAsLong((long) 0, (long) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        int int16 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMonths(1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.dayOfYear();
        org.joda.time.tz.NameProvider nameProvider23 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str27 = nameProvider23.getShortName(locale24, "", "");
        java.lang.String str28 = locale24.getDisplayScript();
        java.lang.String str29 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime18, (-38088), locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withEra(1);
        int int35 = localDateTime34.getMonthOfYear();
        org.joda.time.Chronology chronology36 = localDateTime34.getChronology();
        boolean boolean37 = dateTimeFieldType30.isSupported(chronology36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology38.weekyearOfCentury();
        boolean boolean42 = dateTimeFieldType30.isSupported((org.joda.time.Chronology) copticChronology38);
        boolean boolean43 = localDateTime18.equals((java.lang.Object) copticChronology38);
        org.joda.time.DurationField durationField44 = copticChronology38.eras();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology38.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField44", Math.signum(durationField1.compareTo(durationField44)) == -Math.signum(durationField44.compareTo(durationField1)));
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1082");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) chronology0);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withPeriodAdded(readablePeriod3, (-1));
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readablePeriod6);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = instant9.toDateTime(dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.millisOfDay();
        boolean boolean15 = dateTime11.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime17 = dateTime11.plusMonths(117);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime11.getZone();
        org.joda.time.DateTime.Property property19 = dateTime11.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField21 = copticChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology20.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology20.halfdayOfDay();
        org.joda.time.DurationField durationField26 = copticChronology20.days();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        int int29 = localDateTime28.getWeekyear();
        int int30 = localDateTime28.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.era();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withWeekOfWeekyear(22);
        int[] intArray35 = copticChronology20.get((org.joda.time.ReadablePartial) localDateTime28, (-9936000000L));
        org.joda.time.DurationField durationField36 = copticChronology20.weeks();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology20.millisOfDay();
        org.joda.time.DateTime dateTime38 = dateTime11.withChronology((org.joda.time.Chronology) copticChronology20);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((java.lang.Object) dateTime8, (org.joda.time.Chronology) copticChronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime38", (instant9.compareTo(dateTime38) == 0) == instant9.equals(dateTime38));
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1083");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.year();
        org.joda.time.DurationField durationField6 = copticChronology0.hours();
        org.joda.time.Chronology chronology7 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField8 = copticChronology0.days();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfHalfday();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial19 = null;
        int int20 = dateTimeField18.getMaximumValue(readablePartial19);
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.toLanguageTag();
        int int23 = dateTimeField18.getMaximumTextLength(locale21);
        org.joda.time.tz.NameProvider nameProvider24 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str28 = nameProvider24.getShortName(locale25, "", "");
        java.lang.String str29 = locale21.getDisplayName(locale25);
        java.lang.String str30 = locale16.getDisplayCountry(locale25);
        java.lang.String str31 = locale15.getDisplayCountry(locale16);
        java.lang.String str32 = dateTimeField10.getAsText((long) 503344, locale15);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withEra(1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withEra(1);
        int int42 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.Chronology chronology43 = localDateTime39.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.eras();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        long long49 = dateTimeField45.set((long) 10, "8", locale48);
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str51 = dateTimeField10.getAsText(233, locale48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField44", Math.signum(durationField1.compareTo(durationField44)) == -Math.signum(durationField44.compareTo(durationField1)));
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1084");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withEra(1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        int int9 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.Chronology chronology10 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        int int18 = dateTimeZone15.getOffset((long) 12);
        boolean boolean20 = dateTimeZone15.isStandardOffset((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(161);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((long) 11);
        org.joda.time.DateTime dateTime28 = dateTime22.plusYears(24);
        int int29 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 168, dateTimeZone15);
        org.joda.time.Instant instant31 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = instant31.toDateTime(dateTimeZone32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime.Property property35 = dateTime33.millisOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) chronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.property(dateTimeFieldType42);
        boolean boolean44 = dateTime33.isSupported(dateTimeFieldType42);
        org.joda.time.LocalDateTime.Property property45 = localDateTime30.property(dateTimeFieldType42);
        java.lang.Object obj46 = null;
        boolean boolean47 = property45.equals(obj46);
        org.joda.time.LocalDateTime localDateTime48 = property45.withMaximumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant31", (dateTime22.compareTo(instant31) == 0) == dateTime22.equals(instant31));
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1085");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        org.joda.time.LocalDate.Property property6 = localDate5.era();
        int int7 = localDate5.getYearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate5.era();
        org.joda.time.LocalDate localDate10 = localDate5.withYear(363);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 158);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfSecond(865);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = instant15.toDateTime(dateTimeZone16);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = instant18.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withSecondOfMinute(2);
        int int23 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean24 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField29 = copticChronology28.eras();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withEra(1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withEra(1);
        int int39 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.Chronology chronology40 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology44.getZone();
        long long48 = dateTimeZone45.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology49 = copticChronology28.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone45);
        java.lang.String str52 = dateTimeZone45.getNameKey((long) 2);
        int int54 = dateTimeZone45.getOffset((long) 596);
        int int56 = dateTimeZone45.getOffset((long) 2);
        org.joda.time.DateTime dateTime57 = localDateTime26.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime58 = dateTime17.withZone(dateTimeZone45);
        org.joda.time.Interval interval59 = localDate5.toInterval(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField29", Math.signum(durationField1.compareTo(durationField29)) == -Math.signum(durationField29.compareTo(durationField1)));
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1086");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.DateTime.Property property5 = dateTime2.weekOfWeekyear();
        java.util.Date date11 = new java.util.Date(7, (int) (short) 100, (-1), (int) (byte) -1, 16);
        date11.setSeconds(20);
        int int14 = date11.getDay();
        date11.setYear((int) (byte) -1);
        java.util.Date date22 = new java.util.Date(7, (int) (short) 100, (-1), (int) (byte) -1, 16);
        date22.setSeconds(20);
        int int25 = date22.getDay();
        date22.setYear((int) (byte) -1);
        int int28 = date22.getMonth();
        boolean boolean29 = date11.before(date22);
        int int30 = date11.getDay();
        boolean boolean31 = property5.equals((java.lang.Object) int30);
        org.joda.time.DateTime dateTime32 = property5.roundCeilingCopy();
        org.joda.time.DateTime.Property property33 = dateTime32.year();
        java.util.Date date34 = dateTime32.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1087");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        int int6 = localDate5.getWeekyear();
        int int7 = localDate5.getEra();
        java.util.Date date8 = localDate5.toDate();
        java.lang.String str9 = localDate5.toString();
        java.util.Locale locale13 = new java.util.Locale("java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-22T07:17:01.652");
        java.lang.String str14 = locale13.getDisplayCountry();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale18.getDisplayScript(locale19);
        java.lang.String str21 = dateTime16.toString("10", locale18);
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleKeys();
        java.lang.String str23 = locale13.getDisplayVariant(locale18);
        java.lang.String str24 = localDate5.toString("1738-06-15", locale18);
        org.joda.time.LocalDate.Property property25 = localDate5.yearOfCentury();
        org.joda.time.LocalDate localDate27 = localDate5.withCenturyOfEra(519);
        org.joda.time.LocalDate localDate29 = localDate27.minusWeeks(2122);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        java.lang.Integer int33 = dateTimeFormatter32.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter32.withDefaultYear((-1));
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeFormatter35.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter35.withDefaultYear(453);
        org.joda.time.Instant instant39 = org.joda.time.Instant.now();
        org.joda.time.Instant instant42 = instant39.withDurationAdded((long) '#', 17);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField44 = copticChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology43.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = copticChronology43.getZone();
        int int48 = dateTimeZone46.getOffset((long) 865);
        org.joda.time.MutableDateTime mutableDateTime49 = instant39.toMutableDateTime(dateTimeZone46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter38.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = localDate29.toDateTimeAtCurrentTime(dateTimeZone46);
        long long54 = dateTimeZone46.adjustOffset((long) 358, false);
        int int56 = dateTimeZone46.getOffsetFromLocal(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime49", (instant39.compareTo(mutableDateTime49) == 0) == instant39.equals(mutableDateTime49));
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1088");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11");
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) chronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusHours((int) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.plus(readablePeriod16);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = instant18.toDateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.DateTime dateTime23 = dateTime20.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime20.toGregorianCalendar();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withEra(1);
        int int29 = localDateTime28.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDateTime28.getFieldType(0);
        boolean boolean32 = dateTime20.isSupported(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withEra(1);
        int int37 = localDateTime36.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = localDateTime36.getFieldType(0);
        boolean boolean40 = dateTime20.isSupported(dateTimeFieldType39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime43 = dateTime20.withField(dateTimeFieldType41, 72);
        org.joda.time.DateTime dateTime45 = dateTime43.withYear((-9935959));
        org.joda.time.DateTime dateTime48 = dateTime45.withDurationAdded((long) 292272708, 2);
        org.joda.time.DateTime dateTime49 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        int int50 = property2.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTime dateTime52 = property2.addToCopy((-103980000L));
        org.joda.time.DateTime.Property property53 = dateTime52.weekOfWeekyear();
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 'u', (org.joda.time.Chronology) copticChronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusHours(608);
        org.joda.time.Instant instant59 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = instant59.toDateTime(dateTimeZone60);
        org.joda.time.Instant instant62 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = instant62.toDateTime(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withSecondOfMinute(2);
        int int67 = dateTime61.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime68 = localDateTime58.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalDateTime.Property property69 = localDateTime58.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime58.minusMillis(64);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime58.withPeriodAdded(readablePeriod72, 978);
        org.joda.time.DateTime dateTime75 = dateTime52.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.DateTime dateTime77 = dateTime52.minusWeeks(779);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime20", (instant18.compareTo(dateTime20) == 0) == instant18.equals(dateTime20));
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1089");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        int int6 = localDate5.getWeekyear();
        int int7 = localDate5.getEra();
        org.joda.time.LocalDate localDate9 = localDate5.minusMonths(53);
        org.joda.time.LocalDate localDate11 = localDate5.minusMonths(29);
        int int12 = localDate11.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate11.plus(readablePeriod13);
        org.joda.time.LocalDate localDate16 = localDate11.minusWeeks(764);
        org.joda.time.DateTime dateTime17 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.Instant instant21 = instant18.withDurationAdded((long) 562, 414);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra(1);
        int int30 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.DurationFieldType durationFieldType33 = durationField32.getType();
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology34.minuteOfDay();
        boolean boolean39 = durationFieldType33.isSupported((org.joda.time.Chronology) copticChronology34);
        org.joda.time.DateTimeField dateTimeField40 = copticChronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology34.weekyear();
        org.joda.time.DurationField durationField42 = copticChronology34.eras();
        org.joda.time.DateTime dateTime43 = instant18.toDateTime((org.joda.time.Chronology) copticChronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField32", Math.signum(durationField1.compareTo(durationField32)) == -Math.signum(durationField32.compareTo(durationField1)));
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1090");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        long long15 = dateTimeField11.set((long) 10, "8", locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        boolean boolean22 = localDateTime19.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean24 = localDateTime19.isSupported(dateTimeFieldType23);
        int int25 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime19);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("5");
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone27);
        calendar28.setLenient(false);
        int int31 = calendar28.getWeeksInWeekYear();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.fromCalendarFields(calendar28);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField36 = copticChronology35.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology35.centuryOfEra();
        org.joda.time.DurationField durationField41 = copticChronology35.minutes();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology35.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology35.clockhourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField47 = copticChronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology46.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology46.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology46.clockhourOfHalfday();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) chronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        org.joda.time.tz.NameProvider nameProvider59 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str63 = nameProvider59.getShortName(locale60, "", "");
        java.lang.String str64 = property57.getAsShortText(locale60);
        java.lang.String str65 = locale60.getScript();
        java.lang.String str66 = locale60.getISO3Language();
        java.lang.String str67 = dateTimeField50.getAsText(744, locale60);
        java.lang.String str68 = dateTimeField44.getAsShortText(170, locale60);
        java.util.Locale locale69 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str70 = locale60.getDisplayScript(locale69);
        java.lang.String str71 = locale34.getDisplayScript(locale60);
        java.lang.String str72 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDate32, 363, locale34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField36", Math.signum(durationField10.compareTo(durationField36)) == -Math.signum(durationField36.compareTo(durationField10)));
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1091");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant0.plus(readableDuration2);
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = copticChronology4.seconds();
        org.joda.time.DurationField durationField9 = copticChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology4.clockhourOfDay();
        org.joda.time.DurationField durationField11 = copticChronology4.weeks();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = localTime13.plusSeconds(0);
        int[] intArray17 = copticChronology4.get((org.joda.time.ReadablePartial) localTime15, 604800981L);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology4.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = instant0.toMutableDateTime((org.joda.time.Chronology) copticChronology4);
        int int21 = mutableDateTime20.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1092");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        long long14 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime2.minusSeconds(22);
        int int17 = dateTime16.getMillisOfSecond();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) chronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = property24.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = property24.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readablePeriod27);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.years();
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology32.weekyearOfCentury();
        org.joda.time.DurationField durationField36 = copticChronology32.seconds();
        org.joda.time.DurationField durationField37 = copticChronology32.halfdays();
        boolean boolean38 = durationFieldType31.isSupported((org.joda.time.Chronology) copticChronology32);
        boolean boolean39 = localDateTime29.isSupported(durationFieldType31);
        boolean boolean40 = localDateTime28.isSupported(durationFieldType31);
        java.lang.String str41 = durationFieldType31.toString();
        org.joda.time.DateTime dateTime43 = dateTime16.withFieldAdded(durationFieldType31, 865);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1093");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = dateTime4.isAfter(readableInstant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime4.plus(readablePeriod11);
        long long13 = dateTime4.getMillis();
        int int14 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime4.minusWeeks(648);
        java.util.GregorianCalendar gregorianCalendar17 = dateTime4.toGregorianCalendar();
        org.joda.time.Instant instant18 = dateTime4.toInstant();
        org.joda.time.DateMidnight dateMidnight19 = dateTime4.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(161);
        org.joda.time.DateTime dateTime28 = dateTime23.withTime(15, 36, 15, 414);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.Instant instant32 = instant29.withDurationAdded((long) '#', 17);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.plus(readableDuration33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant34.withDurationAdded(readableDuration35, 692);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant40 = instant37.withDurationAdded(readableDuration38, 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str42 = dateTimeFieldType41.getName();
        int int43 = instant37.get(dateTimeFieldType41);
        boolean boolean44 = dateTime23.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime46 = dateTime23.minusYears((-1897));
        int int47 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology48.dayOfYear();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology48.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology48.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology48.era();
        org.joda.time.DurationField durationField56 = copticChronology48.millis();
        org.joda.time.DurationField durationField57 = copticChronology48.hours();
        org.joda.time.DurationField durationField58 = copticChronology48.halfdays();
        org.joda.time.DateTime dateTime59 = dateTime23.withChronology((org.joda.time.Chronology) copticChronology48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant18", (dateTime4.compareTo(instant18) == 0) == dateTime4.equals(instant18));
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        long long17 = dateTimeZone14.convertLocalToUTC((long) '#', false);
        long long19 = dateTimeZone14.nextTransition((long) 510);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        int int28 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusMinutes((int) 'u');
        java.util.Date date35 = localDateTime30.toDate();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.withMillisOfSecond(2);
        boolean boolean38 = dateTimeZone14.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 158);
        org.joda.time.DateTime dateTime42 = dateTime40.withMillisOfSecond(865);
        org.joda.time.Instant instant43 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = instant43.toDateTime(dateTimeZone44);
        org.joda.time.Instant instant46 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = instant46.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withSecondOfMinute(2);
        int int51 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean52 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean54 = dateTime45.isSupported(dateTimeFieldType53);
        org.joda.time.DateTime dateTime55 = localDateTime37.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime57 = dateTime55.minusHours(505);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField59 = copticChronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology58.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone61 = copticChronology58.getZone();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        long long64 = dateTimeZone61.getMillisKeepLocal(dateTimeZone62, 169L);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime67 = dateTime57.withZoneRetainFields(dateTimeZone61);
        int int68 = dateTime67.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime45", (instant43.compareTo(dateTime45) == 0) == instant43.equals(dateTime45));
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1095");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime.Property property14 = dateTime2.weekyear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.minus(readablePeriod15);
        org.joda.time.DateTime.Property property17 = dateTime2.minuteOfHour();
        org.joda.time.DateTime.Property property18 = dateTime2.secondOfMinute();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1096");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField7 = copticChronology3.seconds();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology3);
        org.joda.time.DateTime dateTime9 = dateTime1.withChronology((org.joda.time.Chronology) copticChronology3);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfDay(513);
        org.joda.time.DateTime dateTime13 = dateTime9.minusYears(1719);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.Instant instant17 = instant14.withDurationAdded((long) '#', 17);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.plus(readableDuration18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant19.withDurationAdded(readableDuration20, 692);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant25 = instant22.withDurationAdded(readableDuration23, 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str27 = dateTimeFieldType26.getName();
        int int28 = instant22.get(dateTimeFieldType26);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType26.getField((org.joda.time.Chronology) copticChronology29);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology29.weekOfWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime13.withChronology((org.joda.time.Chronology) copticChronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime9", (dateTime1.compareTo(dateTime9) == 0) == dateTime1.equals(dateTime9));
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1097");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime.Property property14 = dateTime2.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        int int25 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        boolean boolean30 = strSet16.equals((java.lang.Object) localDateTime29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.secondOfMinute();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale32);
        java.lang.String str34 = locale32.getDisplayName();
        boolean boolean35 = locale32.hasExtensions();
        java.lang.String str36 = locale32.getCountry();
        java.lang.String str37 = locale32.getCountry();
        int int38 = property31.getMaximumTextLength(locale32);
        int int39 = dateTimeField15.getMaximumTextLength(locale32);
        java.lang.String str40 = locale32.getLanguage();
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial43 = null;
        int int44 = dateTimeField42.getMaximumValue(readablePartial43);
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.toLanguageTag();
        int int47 = dateTimeField42.getMaximumTextLength(locale45);
        org.joda.time.tz.NameProvider nameProvider48 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str52 = nameProvider48.getShortName(locale49, "", "");
        java.lang.String str53 = locale45.getDisplayName(locale49);
        java.lang.String str54 = locale49.getISO3Country();
        java.lang.String str55 = locale32.getDisplayCountry(locale49);
        java.lang.Object obj56 = locale32.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1098");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        int int6 = dateTime2.getCenturyOfEra();
        org.joda.time.DateTime.Property property7 = dateTime2.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        int int17 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int18 = localDateTime14.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withMillisOfDay(100);
        int int21 = localDateTime20.getDayOfMonth();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withEra(1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withEra(1);
        int int33 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        int int42 = dateTimeZone39.getOffset((long) 12);
        boolean boolean44 = dateTimeZone39.isStandardOffset((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours(161);
        org.joda.time.DateTime dateTime50 = dateTime46.minus((long) 11);
        org.joda.time.DateTime dateTime52 = dateTime46.plusYears(24);
        int int53 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 168, dateTimeZone39);
        org.joda.time.Instant instant55 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = instant55.toDateTime(dateTimeZone56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTime.Property property59 = dateTime57.millisOfDay();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) chronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.property(dateTimeFieldType66);
        boolean boolean68 = dateTime57.isSupported(dateTimeFieldType66);
        org.joda.time.LocalDateTime.Property property69 = localDateTime54.property(dateTimeFieldType66);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        org.joda.time.LocalDateTime localDateTime72 = property69.setCopy("53", locale71);
        java.lang.String str75 = nameProvider22.getShortName(locale71, "2022-02-22T07:16:56.708", "2022-02-22T07:17:21.584");
        java.util.Locale locale77 = java.util.Locale.forLanguageTag("clockhourOfDay");
        java.lang.String str78 = locale77.getISO3Country();
        java.lang.String str81 = nameProvider22.getShortName(locale77, "", "28 Sep 1917 23:16:00 GMT");
        java.lang.String str82 = locale77.getLanguage();
        java.lang.String str83 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime20, locale77);
        java.lang.String str84 = locale77.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1099");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = dateTime1.toMutableDateTime();
        org.joda.time.DateTime dateTime5 = dateTime1.withMinuteOfHour((int) (short) 10);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale10.getDisplayScript(locale11);
        java.lang.String str13 = dateTime8.toString("10", locale10);
        org.joda.time.DateTime dateTime15 = dateTime8.withDayOfYear(345);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readablePeriod18);
        org.joda.time.DateTime dateTime20 = dateTime19.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        int int23 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime20);
        int int24 = dateTime5.getWeekyear();
        org.joda.time.DateTime.Property property25 = dateTime5.millisOfSecond();
        org.joda.time.Instant instant26 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = instant26.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime31 = dateTime28.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime28.toGregorianCalendar();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withEra(1);
        int int37 = localDateTime36.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = localDateTime36.getFieldType(0);
        boolean boolean40 = dateTime28.isSupported(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withEra(1);
        int int45 = localDateTime44.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDateTime44.getFieldType(0);
        boolean boolean48 = dateTime28.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime dateTime50 = dateTime28.plusMillis((int) (byte) 0);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField52 = copticChronology51.halfdays();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology51.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology51.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology51.halfdayOfDay();
        org.joda.time.DurationField durationField57 = copticChronology51.days();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        int int60 = localDateTime59.getWeekyear();
        int int61 = localDateTime59.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.era();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.withWeekOfWeekyear(22);
        int[] intArray66 = copticChronology51.get((org.joda.time.ReadablePartial) localDateTime59, (-9936000000L));
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology67);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((java.lang.Object) chronology67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.property(dateTimeFieldType73);
        boolean boolean75 = localDateTime59.isSupported(dateTimeFieldType73);
        boolean boolean76 = dateTime28.isSupported(dateTimeFieldType73);
        org.joda.time.DateTime dateTime78 = dateTime28.withCenturyOfEra(20);
        long long79 = dateTime78.getMillis();
        org.joda.time.DateTime dateTime82 = dateTime78.withDurationAdded(38836800000L, 26320871);
        boolean boolean83 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime28", (instant26.compareTo(dateTime28) == 0) == instant26.equals(dateTime28));
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1100");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.minus(readableDuration5);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime6.minusHours(505);
        org.joda.time.DateTime dateTime11 = dateTime6.minusSeconds(222);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfSecond(212);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(585);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1101");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        long long17 = dateTimeZone14.convertLocalToUTC((long) '#', false);
        int int19 = dateTimeZone14.getOffsetFromLocal((long) 2);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 158);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfSecond(865);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withEra(1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withEra(1);
        int int33 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        long long42 = dateTimeZone39.convertLocalToUTC((long) '#', false);
        org.joda.time.DateTime dateTime43 = dateTime22.toDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = dateTime20.withZoneRetainFields(dateTimeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime43", (dateTime22.compareTo(dateTime43) == 0) == dateTime22.equals(dateTime43));
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1102");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = instant0.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        int int16 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology21.getZone();
        long long25 = dateTimeZone22.convertLocalToUTC((long) '#', false);
        long long27 = dateTimeZone22.nextTransition((long) 510);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withEra(1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withEra(1);
        int int36 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology37 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plusMinutes((int) 'u');
        java.util.Date date43 = localDateTime38.toDate();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.withMillisOfSecond(2);
        boolean boolean46 = dateTimeZone22.isLocalDateTimeGap(localDateTime45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-1), dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusHours(26157846);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withCenturyOfEra((int) '#');
        boolean boolean54 = dateTimeZone22.isLocalDateTimeGap(localDateTime51);
        java.util.TimeZone timeZone55 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime56 = localDateTime7.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone22);
        int int59 = localDateTime58.getYear();
        long long61 = chronology3.set((org.joda.time.ReadablePartial) localDateTime58, 2451153439010L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1103");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) chronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusHours((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.plus(readablePeriod13);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = instant15.toDateTime(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime17.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime17.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime25.getFieldType(0);
        boolean boolean29 = dateTime17.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withEra(1);
        int int34 = localDateTime33.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime33.getFieldType(0);
        boolean boolean37 = dateTime17.isSupported(dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime40 = dateTime17.withField(dateTimeFieldType38, 72);
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((-9935959));
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded((long) 292272708, 2);
        org.joda.time.DateTime dateTime46 = localDateTime14.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property47 = dateTime42.yearOfCentury();
        org.joda.time.DateTime dateTime49 = dateTime42.plusHours(915);
        int int50 = dateTime42.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime17", (instant15.compareTo(dateTime17) == 0) == instant15.equals(dateTime17));
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1104");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.yearOfEra();
        java.lang.String str4 = copticChronology1.toString();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekyearOfCentury();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(388L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((java.lang.Object) chronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusHours((int) (byte) 1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.withYearOfCentury((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime11.plus(readableDuration22);
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField25 = copticChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology24.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology24.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology24.halfdayOfDay();
        org.joda.time.Chronology chronology29 = copticChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology24.hourOfHalfday();
        int int33 = dateTimeField30.getDifference((long) ' ', (long) 1);
        long long36 = dateTimeField30.getDifferenceAsLong((long) 177, (long) 345);
        boolean boolean37 = localDateTime23.equals((java.lang.Object) dateTimeField30);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withEra(1);
        int int42 = localDateTime41.getMonthOfYear();
        org.joda.time.Chronology chronology43 = localDateTime41.getChronology();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withEra(1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withEra(1);
        int int53 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.Chronology chronology54 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withEra(1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withEra(1);
        int int64 = localDateTime57.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        int int65 = localDateTime61.getMillisOfSecond();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withEra(1);
        int int70 = localDateTime69.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = localDateTime69.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime61.withField(dateTimeFieldType72, 7);
        int[] intArray76 = chronology54.get((org.joda.time.ReadablePartial) localDateTime74, (long) (byte) 10);
        org.joda.time.Chronology chronology77 = chronology54.withUTC();
        org.joda.time.DurationField durationField78 = durationFieldType44.getField(chronology54);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime41.withFieldAdded(durationFieldType44, 0);
        boolean boolean81 = localDateTime23.isSupported(durationFieldType44);
        boolean boolean82 = copticChronology1.equals((java.lang.Object) localDateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField2 and durationField25", Math.signum(durationField2.compareTo(durationField25)) == -Math.signum(durationField25.compareTo(durationField2)));
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1105");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("ja");
        timeZone1.setID("ja");
        timeZone1.setID("eras");
        timeZone1.setRawOffset(15);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = instant9.toDateTime(dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime11.toYearMonthDay();
        org.joda.time.DateTime dateTime16 = dateTime11.minusDays(5);
        boolean boolean17 = calendar8.after((java.lang.Object) dateTime16);
        int int19 = calendar8.getGreatestMinimum(11);
        int int20 = calendar8.getWeeksInWeekYear();
        java.lang.String str21 = calendar8.getCalendarType();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("ja");
        java.time.ZoneId zoneId24 = timeZone23.toZoneId();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone(zoneId24);
        int int27 = timeZone25.getOffset((long) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        calendar8.setTimeZone(timeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1106");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.hourOfHalfday();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.clockhourOfHalfday();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.weekyearOfCentury();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(0L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDate localDate11 = localDate9.plusWeeks((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int13 = localDate9.get(dateTimeFieldType12);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField15 = copticChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology14.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = copticChronology14.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology14.weekyear();
        org.joda.time.DurationField durationField19 = copticChronology14.days();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType12.getField((org.joda.time.Chronology) copticChronology14);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstance();
        int int24 = copticChronology23.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology23.secondOfDay();
        org.joda.time.DurationField durationField26 = copticChronology23.eras();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology23);
        java.lang.String str28 = copticChronology23.toString();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology23.millisOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withEra(1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withEra(1);
        int int38 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.Chronology chronology39 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plusMinutes((int) 'u');
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.withDurationAdded(readableDuration45, (-1));
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfMonth();
        int[] intArray50 = copticChronology23.get((org.joda.time.ReadablePartial) localDateTime47, 0L);
        org.joda.time.DateTimeField dateTimeField51 = copticChronology23.era();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 254, (org.joda.time.Chronology) copticChronology23);
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType12.getField((org.joda.time.Chronology) copticChronology23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField2 and durationField26", Math.signum(durationField2.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField2)));
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1107");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        int int7 = dateTime6.getCenturyOfEra();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField9 = copticChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology8.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime6.toMutableDateTime((org.joda.time.Chronology) copticChronology8);
        org.joda.time.DateTime dateTime15 = dateTime6.minusMonths(1737);
        org.joda.time.DateTime.Property property16 = dateTime6.minuteOfDay();
        org.joda.time.DateTime dateTime18 = property16.addToCopy(10506008718000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime13", (dateTime6.compareTo(mutableDateTime13) == 0) == dateTime6.equals(mutableDateTime13));
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1108");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(161);
        org.joda.time.DateTime dateTime8 = dateTime3.withTime(15, 36, 15, 414);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(161);
        org.joda.time.DateTime dateTime14 = dateTime10.minus((long) 11);
        org.joda.time.DateTime dateTime16 = dateTime10.plusYears(24);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withPeriodAdded(readablePeriod17, 29);
        org.joda.time.DateTime dateTime20 = dateTime16.withEarlierOffsetAtOverlap();
        boolean boolean21 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField23 = copticChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology22.weekyearOfCentury();
        org.joda.time.DurationField durationField27 = copticChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology22.dayOfMonth();
        org.joda.time.DurationField durationField29 = copticChronology22.years();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology22);
        org.joda.time.DurationField durationField31 = copticChronology22.millis();
        org.joda.time.DateTimeZone dateTimeZone32 = copticChronology22.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey(9072000000L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime8, dateTimeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime30", (dateTime1.compareTo(dateTime30) == 0) == dateTime1.equals(dateTime30));
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1109");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        long long14 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime2.minusSeconds(22);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.eras();
        org.joda.time.DateTime dateTime19 = dateTime2.toDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear(524);
        org.joda.time.Instant instant22 = org.joda.time.Instant.now();
        long long23 = instant22.getMillis();
        long long24 = instant22.getMillis();
        boolean boolean25 = dateTime21.isBefore((org.joda.time.ReadableInstant) instant22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime19", (instant0.compareTo(dateTime19) == 0) == instant0.equals(dateTime19));
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1110");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.millisOfSecond();
        org.joda.time.DurationField durationField5 = copticChronology0.eras();
        org.joda.time.DurationField durationField6 = copticChronology0.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField5", Math.signum(durationField1.compareTo(durationField5)) == -Math.signum(durationField5.compareTo(durationField1)));
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1111");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.halfdayOfDay();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) 777, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField4 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology1.getZone();
        org.joda.time.DurationField durationField7 = copticChronology1.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField4, durationField7, and durationField4", !(durationField4.compareTo(durationField7) == 0) || (Math.signum(durationField4.compareTo(durationField4)) == Math.signum(durationField7.compareTo(durationField4))));
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1112");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField4 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.yearOfCentury();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance();
        int int9 = calendar8.getWeeksInWeekYear();
        int int11 = calendar8.getActualMinimum(0);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (short) 100);
        int int15 = localDateTime12.size();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plus(readablePeriod16);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField19 = copticChronology18.eras();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.weekOfWeekyear();
        int int22 = dateTimeField20.getMinimumValue((long) 23);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = dateTimeField20.getAsText(26329781, locale24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) chronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusHours((int) (byte) 1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withEra(1);
        int int39 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusMinutes(32769);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundCeilingCopy();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((java.lang.Object) chronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.yearOfEra();
        int int52 = localDateTime48.getMillisOfSecond();
        int[] intArray53 = localDateTime48.getValues();
        int int54 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray53);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime17, intArray53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField19", Math.signum(durationField4.compareTo(durationField19)) == -Math.signum(durationField19.compareTo(durationField4)));
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1113");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfMinute();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField9 = copticChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology8.hourOfHalfday();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology8);
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) 10);
        int int14 = localDate13.getWeekyear();
        org.joda.time.LocalDate localDate16 = localDate13.withYear(3);
        org.joda.time.LocalDate.Property property17 = localDate13.year();
        org.joda.time.LocalDate.Property property18 = localDate13.centuryOfEra();
        int int19 = property18.getMaximumValue();
        org.joda.time.LocalDate localDate20 = property18.withMinimumValue();
        int int21 = localDate20.getYearOfCentury();
        org.joda.time.LocalDate.Property property22 = localDate20.dayOfMonth();
        org.joda.time.LocalDate localDate23 = property22.roundHalfFloorCopy();
        int int24 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField26 = copticChronology25.eras();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology25.yearOfEra();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology25);
        org.joda.time.LocalDate.Property property29 = localDate28.year();
        org.joda.time.LocalDate localDate31 = property29.addToCopy(419);
        org.joda.time.LocalDate localDate33 = property29.addWrapFieldToCopy(32769);
        org.joda.time.LocalDate localDate35 = localDate33.minusWeeks(255);
        int int36 = localDate35.getWeekOfWeekyear();
        int int37 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField26", Math.signum(durationField9.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField9)));
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1114");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = copticChronology0.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.monthOfYear();
        org.joda.time.DurationField durationField6 = copticChronology0.years();
        org.joda.time.DurationField durationField7 = copticChronology0.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField3 and durationField6", (durationField3.compareTo(durationField6) == 0) == durationField3.equals(durationField6));
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1115");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField3 = copticChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.hourOfHalfday();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) 10);
        int int8 = localDate7.getWeekyear();
        int int9 = localDate7.getEra();
        java.util.Date date10 = localDate7.toDate();
        java.lang.String str11 = localDate7.toString();
        java.util.Locale locale15 = new java.util.Locale("java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-22T07:17:01.652");
        java.lang.String str16 = locale15.getDisplayCountry();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        java.lang.String str23 = dateTime18.toString("10", locale20);
        java.util.Set<java.lang.String> strSet24 = locale20.getUnicodeLocaleKeys();
        java.lang.String str25 = locale15.getDisplayVariant(locale20);
        java.lang.String str26 = localDate7.toString("1738-06-15", locale20);
        org.joda.time.Instant instant27 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = instant27.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withSecondOfMinute(2);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.minus(readableDuration32);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime33.secondOfMinute();
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = null;
        org.joda.time.format.DateTimeParser dateTimeParser37 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter36, dateTimeParser37);
        java.util.Locale locale39 = dateTimeFormatter38.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial42 = null;
        int int43 = dateTimeField41.getMaximumValue(readablePartial42);
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.toLanguageTag();
        int int46 = dateTimeField41.getMaximumTextLength(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter38.withLocale(locale44);
        java.lang.String str48 = locale44.getISO3Language();
        java.util.Set<java.lang.String> strSet49 = locale44.getUnicodeLocaleAttributes();
        int int50 = property35.getMaximumShortTextLength(locale44);
        java.lang.String str51 = locale20.getDisplayVariant(locale44);
        java.util.Calendar calendar52 = dateTime1.toCalendar(locale44);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("ja");
        timeZone54.setID("ja");
        timeZone54.setID("eras");
        timeZone54.setRawOffset((int) (byte) 1);
        java.util.TimeZone timeZone62 = java.util.TimeZone.getTimeZone("ja");
        timeZone62.setID("UTC");
        boolean boolean65 = timeZone54.hasSameRules(timeZone62);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getTimeZone("ja");
        timeZone67.setID("UTC");
        java.lang.String str70 = timeZone67.getID();
        boolean boolean71 = timeZone54.hasSameRules(timeZone67);
        int int73 = timeZone54.getOffset((long) 825);
        calendar52.setTimeZone(timeZone54);
        int int75 = timeZone54.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1116");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekyearOfCentury();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 869, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.halfdayOfDay();
        org.joda.time.Chronology chronology7 = copticChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.dayOfMonth();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime12.getMonthOfYear();
        org.joda.time.Chronology chronology14 = localDateTime12.getChronology();
        int int15 = localDateTime12.getWeekOfWeekyear();
        int int16 = localDateTime12.getDayOfWeek();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        int int25 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology30.getZone();
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = dateTimeZone31.getName(100L, locale33);
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder36.clearExtensions();
        java.util.Locale.Builder builder39 = builder37.setLanguageTag("eng");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) chronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.yearOfEra();
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withEra(1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withEra(1);
        int int56 = localDateTime49.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.Chronology chronology57 = localDateTime53.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.eras();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.secondOfMinute();
        java.util.Locale locale62 = java.util.Locale.CANADA_FRENCH;
        long long63 = dateTimeField59.set((long) 10, "8", locale62);
        int int64 = property46.getMaximumShortTextLength(locale62);
        java.util.Locale.Builder builder65 = builder37.setLocale(locale62);
        java.lang.String str66 = locale33.getDisplayCountry(locale62);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale62);
        java.lang.String str68 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime12, locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField2 and durationField58", Math.signum(durationField2.compareTo(durationField58)) == -Math.signum(durationField58.compareTo(durationField2)));
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1117");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField5 = copticChronology4.eras();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology4.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) copticChronology4);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField10 = copticChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.halfdayOfDay();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime17 = localTime15.withMinuteOfHour(2);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfDay();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        org.joda.time.LocalTime localTime21 = property18.setCopy("0", locale20);
        int[] intArray23 = copticChronology9.get((org.joda.time.ReadablePartial) localTime21, 26184082L);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localTime25.toDateTimeToday(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfMonth(10);
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay32 = dateTime30.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean34 = dateTime30.isSupported(dateTimeFieldType33);
        org.joda.time.LocalTime.Property property35 = localTime21.property(dateTimeFieldType33);
        org.joda.time.LocalTime.Property property36 = localTime21.millisOfSecond();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology39 = localTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localTime38.toDateTimeToday(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfMonth(10);
        int int44 = dateTime43.getCenturyOfEra();
        org.joda.time.DateTime.Property property45 = dateTime43.era();
        org.joda.time.LocalTime localTime46 = dateTime43.toLocalTime();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalTime localTime49 = localTime46.withPeriodAdded(readablePeriod47, 286);
        org.joda.time.LocalTime localTime50 = localTime21.withFields((org.joda.time.ReadablePartial) localTime49);
        org.joda.time.LocalTime.Property property51 = localTime21.minuteOfHour();
        int[] intArray53 = copticChronology4.get((org.joda.time.ReadablePartial) localTime21, 1797924085000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField10", Math.signum(durationField5.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField5)));
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1118");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant3 = instant0.withDurationAdded(readableDuration1, 26428824);
        org.joda.time.DateTime dateTime4 = instant0.toDateTime();
        org.joda.time.Instant instant6 = instant0.plus(26269102L);
        org.joda.time.Instant instant9 = instant0.withDurationAdded((long) 729, (-72247));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1119");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.LocalTime localTime4 = localTime1.plusSeconds(1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime1.minus(readablePeriod5);
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime7.getZone();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localTime10.toDateTimeToday(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth(10);
        org.joda.time.DateTime dateTime17 = dateTime13.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.DateTime.Property property20 = dateTime18.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.plus(readablePeriod21);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localTime24.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfMonth(10);
        org.joda.time.DateTime dateTime31 = dateTime27.minusHours((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = dateTime27.isAfter(readableInstant32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime27.plus(readablePeriod34);
        long long36 = dateTime27.getMillis();
        int int37 = dateTime27.getDayOfYear();
        org.joda.time.DateTime dateTime39 = dateTime27.minusWeeks(648);
        java.util.GregorianCalendar gregorianCalendar40 = dateTime27.toGregorianCalendar();
        org.joda.time.Instant instant41 = dateTime27.toInstant();
        org.joda.time.DateMidnight dateMidnight42 = dateTime27.toDateMidnight();
        boolean boolean43 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateMidnight42);
        boolean boolean44 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((java.lang.Object) dateTime7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant41", (dateTime13.compareTo(instant41) == 0) == dateTime13.equals(instant41));
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1120");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTimeISO();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra(1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra(1);
        int int14 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.yearOfEra();
        int int23 = dateTime2.get(dateTimeField22);
        org.joda.time.DateTime dateTime25 = dateTime2.minusYears(420);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology26.minuteOfDay();
        org.joda.time.DurationField durationField31 = copticChronology26.halfdays();
        org.joda.time.DurationField durationField32 = copticChronology26.hours();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology26.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime2.toMutableDateTime((org.joda.time.Chronology) copticChronology26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime5", (instant0.compareTo(mutableDateTime5) == 0) == instant0.equals(mutableDateTime5));
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1121");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localTime11.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfMonth(10);
        org.joda.time.DateTime dateTime18 = dateTime14.minusHours((int) (short) 100);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean20 = dateTime18.isEqualNow();
        boolean boolean21 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = dateTime8.minusDays(32769);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        org.joda.time.Instant instant26 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = instant26.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime.Property property30 = dateTime28.millisOfDay();
        boolean boolean32 = dateTime28.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths(117);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime28.getZone();
        org.joda.time.DateTime dateTime36 = dateTime23.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime28", (instant26.compareTo(dateTime28) == 0) == instant26.equals(dateTime28));
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1122");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(15);
        org.joda.time.Chronology chronology13 = localDateTime10.getChronology();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minus(readablePeriod14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        int int24 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        int int25 = localDateTime21.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra(1);
        int int30 = localDateTime29.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localDateTime29.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime21.withField(dateTimeFieldType32, 7);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.plus(readablePeriod35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.property(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getRangeDurationType();
        java.lang.Object obj41 = null;
        org.joda.time.Instant instant42 = new org.joda.time.Instant(obj41);
        org.joda.time.MutableDateTime mutableDateTime43 = instant42.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime44 = instant42.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        int int48 = instant42.get(dateTimeFieldType45);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology49.dayOfYear();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology49.minuteOfDay();
        org.joda.time.DurationField durationField54 = copticChronology49.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType45.getField((org.joda.time.Chronology) copticChronology49);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 227, (org.joda.time.Chronology) copticChronology49);
        org.joda.time.DurationField durationField57 = copticChronology49.halfdays();
        boolean boolean58 = dateTimeFieldType37.isSupported((org.joda.time.Chronology) copticChronology49);
        int int59 = localDateTime15.get(dateTimeFieldType37);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime15.plusYears(26333);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and mutableDateTime43", (instant42.compareTo(mutableDateTime43) == 0) == instant42.equals(mutableDateTime43));
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1123");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        int int6 = dateTime2.getCenturyOfEra();
        org.joda.time.Chronology chronology7 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology7.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1124");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        long long3 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant6 = instant1.withMillis((long) 168);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        boolean boolean8 = instant6.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1125");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(0);
        boolean boolean14 = dateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime18.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDateTime18.getFieldType(0);
        boolean boolean22 = dateTime2.isSupported(dateTimeFieldType21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime25 = dateTime2.withField(dateTimeFieldType23, 72);
        org.joda.time.DateTime dateTime27 = dateTime25.withYear((-9935959));
        org.joda.time.DateTime dateTime29 = dateTime27.minusMonths(439);
        org.joda.time.DateTime dateTime31 = dateTime27.plusWeeks(163);
        long long32 = dateTime27.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1126");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMinuteOfHour((int) '#');
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withFields(readablePartial13);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = instant15.toDateTime(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime17.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime17.toGregorianCalendar();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime25.getFieldType(0);
        boolean boolean29 = dateTime17.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withEra(1);
        int int34 = localDateTime33.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime33.getFieldType(0);
        boolean boolean37 = dateTime17.isSupported(dateTimeFieldType36);
        org.joda.time.DateTime dateTime39 = dateTime17.plusMillis((int) (byte) 0);
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField41 = copticChronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology40.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology40.halfdayOfDay();
        org.joda.time.DurationField durationField46 = copticChronology40.days();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        int int49 = localDateTime48.getWeekyear();
        int int50 = localDateTime48.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.era();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.withWeekOfWeekyear(22);
        int[] intArray55 = copticChronology40.get((org.joda.time.ReadablePartial) localDateTime48, (-9936000000L));
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) chronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.property(dateTimeFieldType62);
        boolean boolean64 = localDateTime48.isSupported(dateTimeFieldType62);
        boolean boolean65 = dateTime17.isSupported(dateTimeFieldType62);
        int int66 = localDateTime12.indexOf(dateTimeFieldType62);
        java.lang.String str67 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime12.minusHours(37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime17", (instant15.compareTo(dateTime17) == 0) == instant15.equals(dateTime17));
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1127");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getWeekyear();
        int int3 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.era();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withWeekOfWeekyear(22);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusYears(72000010);
        int int9 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withYearOfEra(472);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = instant12.toDateTime(dateTimeZone13);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.joda.time.Instant instant16 = dateTime14.toInstant();
        int int17 = dateTime14.getMinuteOfHour();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withEra(1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withEra(1);
        int int27 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.Chronology chronology28 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int36 = dateTimeZone33.getOffset((long) 12);
        boolean boolean38 = dateTimeZone33.isStandardOffset((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusHours(161);
        org.joda.time.DateTime dateTime44 = dateTime40.minus((long) 11);
        org.joda.time.DateTime dateTime46 = dateTime40.plusYears(24);
        int int47 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 168, dateTimeZone33);
        org.joda.time.Instant instant49 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = instant49.toDateTime(dateTimeZone50);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfEra();
        org.joda.time.DateTime.Property property53 = dateTime51.millisOfDay();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) chronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.property(dateTimeFieldType60);
        boolean boolean62 = dateTime51.isSupported(dateTimeFieldType60);
        org.joda.time.LocalDateTime.Property property63 = localDateTime48.property(dateTimeFieldType60);
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        org.joda.time.LocalDateTime localDateTime66 = property63.setCopy("53", locale65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology67);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((java.lang.Object) chronology67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.plusHours((int) (byte) 1);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(chronology75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withEra(1);
        int int79 = localDateTime71.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.minusMinutes(32769);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = localDateTime81.toDateTime(readableInstant82);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime81.plusYears(2);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(chronology86);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.withEra(1);
        int int90 = localDateTime89.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = localDateTime89.getFieldType(0);
        int int93 = localDateTime81.get(dateTimeFieldType92);
        boolean boolean94 = localDateTime66.isSupported(dateTimeFieldType92);
        org.joda.time.DateTime dateTime96 = dateTime14.withField(dateTimeFieldType92, 772);
        boolean boolean97 = localDateTime11.isSupported(dateTimeFieldType92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1128");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        int int4 = dateTime2.getMinuteOfHour();
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = instant5.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = dateTime7.toLocalDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        int int17 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology18.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        boolean boolean23 = dateTime7.equals((java.lang.Object) chronology21);
        org.joda.time.DateTime dateTime25 = dateTime7.withMonthOfYear(4);
        boolean boolean26 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property27 = dateTime7.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1129");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        int int6 = dateTime2.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime2.minus(readablePeriod7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        long long12 = instant10.getMillis();
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTimeISO();
        int int14 = dateTime2.compareTo((org.joda.time.ReadableInstant) instant10);
        org.joda.time.DateTime dateTime16 = dateTime2.withYearOfEra(97);
        org.joda.time.DateTime dateTime18 = dateTime2.plusYears(7200);
        int int19 = dateTime2.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1130");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 'u', (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusHours(608);
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = instant5.toDateTime(dateTimeZone6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = instant8.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(2);
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minusMillis(64);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime7", (instant5.compareTo(dateTime7) == 0) == instant5.equals(dateTime7));
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1131");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11");
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime4 = property2.addWrapFieldToCopy(23);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra(1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra(1);
        int int14 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        int int25 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology30.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC((long) '#', false);
        int int36 = dateTimeZone31.getOffset(100L);
        org.joda.time.Chronology chronology37 = chronology15.withZone(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime4.toMutableDateTime(dateTimeZone31);
        java.util.TimeZone timeZone39 = dateTimeZone31.toTimeZone();
        boolean boolean40 = timeZone39.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime38", (dateTime4.compareTo(mutableDateTime38) == 0) == dateTime4.equals(mutableDateTime38));
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1132");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 158);
        org.joda.time.DateTime dateTime3 = dateTime1.withMillisOfSecond(865);
        org.joda.time.Instant instant4 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = instant4.toDateTime(dateTimeZone5);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = instant7.toDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute(2);
        int int12 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        boolean boolean13 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.eras();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology17.weekOfWeekyear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        int int28 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        long long37 = dateTimeZone34.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology38 = copticChronology17.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone34);
        java.lang.String str41 = dateTimeZone34.getNameKey((long) 2);
        int int43 = dateTimeZone34.getOffset((long) 596);
        int int45 = dateTimeZone34.getOffset((long) 2);
        org.joda.time.DateTime dateTime46 = localDateTime15.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime47 = dateTime6.withZone(dateTimeZone34);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withEra(1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withEra(1);
        int int57 = localDateTime50.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.Chronology chronology58 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = chronology62.getZone();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        int int66 = dateTimeZone63.getOffset((long) 12);
        boolean boolean68 = dateTimeZone63.isStandardOffset((long) (short) 0);
        java.lang.String str70 = dateTimeZone63.getNameKey((long) 'a');
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 473, dateTimeZone63);
        boolean boolean73 = dateTimeZone34.isLocalDateTimeGap(localDateTime72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime6", (instant4.compareTo(dateTime6) == 0) == instant4.equals(dateTime6));
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1133");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.Chronology chronology4 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfHour();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("ja");
        boolean boolean8 = timeZone7.observesDaylightTime();
        java.lang.String str9 = timeZone7.getID();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField11 = copticChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.hourOfHalfday();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) 10);
        int int16 = localDate15.getWeekyear();
        org.joda.time.LocalDate localDate18 = localDate15.withYear(3);
        org.joda.time.LocalDate localDate20 = localDate18.withCenturyOfEra(510);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfCentury(3);
        org.joda.time.LocalDate.Property property23 = localDate22.centuryOfEra();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale24);
        java.lang.String str26 = locale24.getDisplayName();
        boolean boolean27 = locale24.hasExtensions();
        boolean boolean28 = localDate22.equals((java.lang.Object) locale24);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone7, locale24);
        int int30 = dateTimeField5.getMaximumShortTextLength(locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField11", Math.signum(durationField1.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField1)));
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1134");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        int int6 = localDate5.getWeekyear();
        int int7 = localDate5.getEra();
        org.joda.time.LocalDate localDate9 = localDate5.minusMonths(53);
        int int10 = localDate9.getDayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology11.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = copticChronology11.add(readablePeriod14, (long) 4, 2);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology11.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology11.monthOfYear();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField23 = copticChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology22.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = copticChronology22.getZone();
        int int27 = dateTimeZone25.getOffset((long) 865);
        org.joda.time.Chronology chronology28 = copticChronology11.withZone(dateTimeZone25);
        boolean boolean30 = dateTimeZone25.isStandardOffset((-313617168031326628L));
        long long32 = dateTimeZone25.previousTransition(1738L);
        org.joda.time.DateTime dateTime33 = localDate9.toDateTimeAtCurrentTime(dateTimeZone25);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder35.clearExtensions();
        java.util.Locale.Builder builder38 = builder35.setScript("");
        java.util.Locale locale39 = builder38.build();
        java.util.Locale locale40 = builder38.build();
        org.joda.time.tz.NameProvider nameProvider41 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField43 = copticChronology42.eras();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology42.weekOfWeekyear();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((java.lang.Object) chronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = property51.getField();
        org.joda.time.tz.NameProvider nameProvider53 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.lang.String str57 = nameProvider53.getShortName(locale54, "", "");
        java.lang.String str58 = property51.getAsShortText(locale54);
        java.lang.String str59 = dateTimeField44.getAsText(1L, locale54);
        java.lang.String str62 = nameProvider41.getShortName(locale54, "eras", "English (Canada)");
        java.util.Locale.Builder builder63 = builder38.setLocale(locale54);
        java.util.Set<java.lang.Character> charSet64 = locale54.getExtensionKeys();
        java.lang.String str65 = dateTimeZone25.getShortName(0L, locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField43", Math.signum(durationField1.compareTo(durationField43)) == -Math.signum(durationField43.compareTo(durationField1)));
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1135");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        int int6 = dateTime2.getCenturyOfEra();
        org.joda.time.Chronology chronology7 = dateTime2.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology8.minuteOfDay();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localTime14.toDateTimeToday(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfMonth(10);
        org.joda.time.DateTime dateTime21 = dateTime17.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        org.joda.time.Chronology chronology24 = copticChronology8.withZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = dateTime2.withZone(dateTimeZone23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra(1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withEra(1);
        int int34 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        int int35 = localDateTime31.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withEra(1);
        int int40 = localDateTime39.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDateTime39.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime31.withField(dateTimeFieldType42, 7);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime31.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime31.plus(readablePeriod47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime48.property(dateTimeFieldType49);
        java.lang.String str53 = dateTimeFieldType49.getName();
        org.joda.time.DateTime.Property property54 = dateTime2.property(dateTimeFieldType49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1136");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime5.getWeekOfWeekyear();
        java.util.Date date8 = dateTime5.toDate();
        org.joda.time.DateTime.Property property9 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime10 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime12 = dateTime5.plusYears(221);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = instant18.toDateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.DateTime dateTime23 = dateTime20.withCenturyOfEra(100);
        boolean boolean24 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readableDuration27);
        boolean boolean29 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime5", (instant0.compareTo(dateTime5) == 0) == instant0.equals(dateTime5));
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1137");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime.Property property7 = dateTime2.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime2.withDurationAdded(readableDuration8, 857);
        int int11 = dateTime2.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1138");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 158);
        org.joda.time.DateTime dateTime3 = dateTime1.withMillisOfSecond(865);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        long long21 = dateTimeZone18.convertLocalToUTC((long) '#', false);
        org.joda.time.DateTime dateTime22 = dateTime1.toDateTime(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes(917);
        org.joda.time.LocalDateTime localDateTime27 = dateTime26.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1139");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.TimeOfDay timeOfDay5 = dateTime4.toTimeOfDay();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localTime7.toDateTimeToday(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfMonth(10);
        org.joda.time.DateTime dateTime14 = dateTime10.minusHours((int) (short) 100);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        int int16 = dateTime14.getYearOfCentury();
        org.joda.time.DateTime dateTime17 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.plusMinutes(175);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("ja");
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 869);
        org.joda.time.DateTime dateTime26 = dateTime14.withZoneRetainFields(dateTimeZone23);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology28.weekyearOfCentury();
        org.joda.time.DurationField durationField32 = copticChronology28.seconds();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 32, (org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalTime localTime35 = localTime33.plusHours(59);
        org.joda.time.LocalTime localTime37 = localTime35.plusMillis(47);
        org.joda.time.LocalTime.Property property38 = localTime35.millisOfDay();
        org.joda.time.LocalTime localTime39 = property38.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str41 = dateTimeFieldType40.getName();
        org.joda.time.LocalTime.Property property42 = localTime39.property(dateTimeFieldType40);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime46 = localTime44.withMinuteOfHour(2);
        int int47 = localTime44.size();
        org.joda.time.LocalTime.Property property48 = localTime44.millisOfDay();
        org.joda.time.LocalTime localTime50 = property48.addWrapFieldToCopy(20);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalTime localTime52 = localTime50.minus(readablePeriod51);
        org.joda.time.Chronology chronology53 = localTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.clockhourOfHalfday();
        org.joda.time.DurationField durationField56 = chronology53.minutes();
        boolean boolean57 = dateTimeFieldType40.isSupported(chronology53);
        int int58 = dateTime26.get(dateTimeFieldType40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1140");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = instant3.toDateTime(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra(100);
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField11 = copticChronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology31 = copticChronology10.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        java.lang.String str34 = dateTimeZone27.getNameKey((long) 2);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withEra(1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withEra(1);
        int int43 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.Chronology chronology44 = localDateTime40.getChronology();
        java.lang.String str45 = localDateTime40.toString();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.minusMinutes(1);
        boolean boolean48 = dateTimeZone27.isLocalDateTimeGap(localDateTime40);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime5.toMutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime51 = dateTime5.withYear((int) '#');
        org.joda.time.DateTime dateTime52 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        int int55 = localDateTime54.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.dayOfMonth();
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.weekOfWeekyear();
        int int58 = localDateTime54.getCenturyOfEra();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withEra(1);
        int int63 = localDateTime62.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = localDateTime62.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime54.withField(dateTimeFieldType65, 2922728);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType65.getDurationType();
        int int69 = dateTime52.get(dateTimeFieldType65);
        org.joda.time.Instant instant70 = dateTime52.toInstant();
        org.joda.time.DateTime dateTime72 = dateTime52.minusSeconds(915);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime52", (instant3.compareTo(dateTime52) == 0) == instant3.equals(dateTime52));
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1141");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 692);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str13 = dateTimeFieldType12.getName();
        int int14 = instant8.get(dateTimeFieldType12);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant8.minus(readableDuration15);
        org.joda.time.MutableDateTime mutableDateTime17 = instant8.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime18 = instant8.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = dateTime18.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfDay();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime23 = property20.setCopy("31");
        int int24 = dateTime23.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.minus(readableDuration25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime17", (instant3.compareTo(mutableDateTime17) == 0) == instant3.equals(mutableDateTime17));
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1142");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(117);
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = localTime13.withMinuteOfHour(2);
        int int16 = localTime13.size();
        org.joda.time.LocalTime.Property property17 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalTime localTime19 = property17.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime20 = property17.getLocalTime();
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.DateTimeField dateTimeField22 = property17.getField();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale23);
        java.lang.String str25 = locale23.getDisplayName();
        boolean boolean26 = locale23.hasExtensions();
        java.lang.String str27 = locale23.getCountry();
        java.lang.String str28 = locale23.getCountry();
        int int29 = property17.getMaximumShortTextLength(locale23);
        org.joda.time.LocalTime localTime30 = property17.roundCeilingCopy();
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localTime33.toDateTimeToday(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfMonth(10);
        org.joda.time.DateTime dateTime40 = dateTime36.minusHours((int) (short) 100);
        int int41 = dateTime40.getCenturyOfEra();
        boolean boolean42 = dateTime40.isEqualNow();
        org.joda.time.DateTime dateTime44 = dateTime40.withMonthOfYear(6);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTime();
        org.joda.time.Instant instant46 = dateTime45.toInstant();
        org.joda.time.DateTimeZone dateTimeZone47 = instant46.getZone();
        org.joda.time.DateTime dateTime48 = localTime30.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = dateTime11.toDateTime(dateTimeZone47);
        java.lang.String str51 = dateTimeZone47.getShortName(1645516800000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1143");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime.Property property14 = dateTime2.weekyear();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime2.minus(readablePeriod15);
        long long17 = dateTime16.getMillis();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale19);
        java.lang.String str21 = locale19.getDisplayName();
        boolean boolean22 = locale19.hasExtensions();
        java.lang.String str23 = locale19.getCountry();
        java.lang.String str24 = locale19.getCountry();
        java.lang.String str25 = locale18.getDisplayCountry(locale19);
        java.util.Calendar calendar26 = dateTime16.toCalendar(locale18);
        int int27 = calendar26.getWeeksInWeekYear();
        java.util.TimeZone timeZone28 = calendar26.getTimeZone();
        timeZone28.setID("2022-02-22T07:23:29.307");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1144");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = locale17.getScript();
        java.lang.String str19 = dateTimeZone14.getShortName((long) 'u', locale17);
        long long23 = dateTimeZone14.convertLocalToUTC((long) 762, true, (-2940001L));
        long long25 = dateTimeZone14.nextTransition((long) 292);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime.Property property27 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withYear(394);
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.Instant instant33 = instant30.withDurationAdded((long) '#', 17);
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField35 = copticChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology34.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = copticChronology34.getZone();
        int int39 = dateTimeZone37.getOffset((long) 865);
        org.joda.time.MutableDateTime mutableDateTime40 = instant30.toMutableDateTime(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime26.toMutableDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime41.getZone();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and mutableDateTime40", (dateTime26.compareTo(mutableDateTime40) == 0) == dateTime26.equals(mutableDateTime40));
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1145");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.millisOfSecond();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter14.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter14.withDefaultYear(16);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField19 = copticChronology18.eras();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withEra(1);
        int int29 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.Chronology chronology30 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        long long38 = dateTimeZone35.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology39 = copticChronology18.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone35);
        java.lang.String str42 = dateTimeZone35.getName(10598109367999L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter17.withZone(dateTimeZone35);
        org.joda.time.Chronology chronology44 = copticChronology5.withZone(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime2.toMutableDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime49 = localTime47.withMinuteOfHour(2);
        int int50 = localTime47.size();
        org.joda.time.LocalTime.Property property51 = localTime47.millisOfDay();
        org.joda.time.LocalTime localTime52 = property51.roundCeilingCopy();
        org.joda.time.LocalTime localTime53 = property51.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime54 = property51.getLocalTime();
        org.joda.time.LocalTime localTime55 = property51.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime57 = localTime55.minusHours(57);
        org.joda.time.LocalTime localTime59 = localTime57.minusHours(26250648);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField61 = copticChronology60.halfdays();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology60.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology60.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone65 = copticChronology60.getZone();
        long long67 = dateTimeZone65.nextTransition((long) 21);
        org.joda.time.DateTime dateTime68 = localTime57.toDateTimeToday(dateTimeZone65);
        boolean boolean69 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime45", (instant0.compareTo(mutableDateTime45) == 0) == instant0.equals(mutableDateTime45));
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withEra(1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        int int9 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.Chronology chronology10 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        int int18 = dateTimeZone15.getOffset((long) 12);
        boolean boolean20 = dateTimeZone15.isStandardOffset((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(161);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((long) 11);
        org.joda.time.DateTime dateTime28 = dateTime22.plusYears(24);
        int int29 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone15);
        long long33 = dateTimeZone15.adjustOffset((long) 233, false);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(46621738L, dateTimeZone15);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime36 = dateTime35.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime30", (dateTime22.compareTo(dateTime30) == 0) == dateTime22.equals(dateTime30));
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1147");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra(1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        boolean boolean12 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusMinutes((int) 'u');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property29 = localDateTime11.secondOfMinute();
        org.joda.time.DateTime dateTime30 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withEra(1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withEra(1);
        int int42 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.Chronology chronology43 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology47.getZone();
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = dateTimeZone48.getName(100L, locale50);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone48);
        long long53 = property33.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime56 = dateTime52.minusYears(483);
        int int57 = dateTime56.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1148");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology21 = copticChronology0.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone17);
        java.lang.String str24 = dateTimeZone17.getName((long) 72);
        long long26 = dateTimeZone17.nextTransition((long) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        java.lang.String str29 = localDateTime27.toString("1737-09-15");
        org.joda.time.Instant instant30 = new org.joda.time.Instant((java.lang.Object) str29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.plus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((long) 596, 692);
        org.joda.time.Instant instant36 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = instant36.toDateTime(dateTimeZone37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.DateTime.Property property40 = dateTime38.millisOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.plusYears((int) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withEra(1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withEra(1);
        int int53 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.Chronology chronology54 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = chronology58.getZone();
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        int int62 = dateTimeZone59.getOffset((long) 12);
        boolean boolean64 = dateTimeZone59.isStandardOffset((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours(161);
        org.joda.time.DateTime dateTime70 = dateTime66.minus((long) 11);
        org.joda.time.DateTime dateTime72 = dateTime66.plusYears(24);
        int int73 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 168, dateTimeZone59);
        org.joda.time.chrono.CopticChronology copticChronology75 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone76 = copticChronology75.getZone();
        org.joda.time.DateTime dateTime77 = dateTime43.toDateTime(dateTimeZone76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.DateTime dateTime79 = dateTime77.plus(readablePeriod78);
        boolean boolean80 = instant35.isEqual((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime.Property property81 = dateTime79.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime38", (dateTime22.compareTo(dateTime38) == 0) == dateTime22.equals(dateTime38));
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1149");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField5 = copticChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology4.hourOfHalfday();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) 10);
        int int10 = localDate9.getWeekyear();
        org.joda.time.LocalDate localDate12 = localDate9.withYear(3);
        org.joda.time.DateTime dateTime13 = dateTime2.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = property19.roundHalfEvenCopy();
        boolean boolean22 = dateTimeZone15.isLocalDateTimeGap(localDateTime21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1150");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2, chronology14);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("ja");
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 869);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str25 = dateTimeZone20.getName((long) 2, locale24);
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.toLanguageTag();
        java.util.Locale.setDefault(category27, locale28);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale31);
        java.lang.String str33 = locale31.getDisplayName();
        boolean boolean34 = locale31.hasExtensions();
        java.lang.String str35 = locale31.getCountry();
        java.lang.String str36 = locale31.getDisplayVariant();
        java.util.Locale.setDefault(category27, locale31);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale41.getDisplayScript(locale42);
        java.lang.String str44 = dateTime39.toString("10", locale41);
        java.util.Locale.setDefault(category27, locale41);
        java.lang.String str46 = dateTimeZone20.getName((long) 380, locale41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime16, dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1151");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        int int7 = dateTime2.getDayOfWeek();
        org.joda.time.Instant instant8 = dateTime2.toInstant();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField10 = copticChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.weekyearOfCentury();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((org.joda.time.Chronology) copticChronology9);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfSecond(64);
        int int17 = dateTime14.getHourOfDay();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded(readableDuration18, (int) (byte) 10);
        boolean boolean21 = instant8.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime20", (instant0.compareTo(dateTime20) == 0) == instant0.equals(dateTime20));
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1152");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localTime11.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfMonth(10);
        int int17 = dateTime16.getCenturyOfEra();
        org.joda.time.DateTime.Property property18 = dateTime16.era();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localTime22.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfMonth(10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay29 = dateTime27.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean31 = dateTime27.isSupported(dateTimeFieldType30);
        boolean boolean32 = localTime19.isSupported(dateTimeFieldType30);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("ja");
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        boolean boolean39 = dateTimeZone37.isStandardOffset((long) 869);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 26157846, dateTimeZone37);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology43 = localTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localTime42.toDateTimeToday(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfMonth(10);
        int int48 = dateTime47.getCenturyOfEra();
        org.joda.time.DateTime.Property property49 = dateTime47.era();
        org.joda.time.LocalTime localTime50 = dateTime47.toLocalTime();
        org.joda.time.LocalTime.Property property51 = localTime50.millisOfSecond();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology54 = localTime53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = localTime53.toDateTimeToday(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withDayOfMonth(10);
        org.joda.time.DateTime dateTime59 = dateTime58.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay60 = dateTime58.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean62 = dateTime58.isSupported(dateTimeFieldType61);
        boolean boolean63 = localTime50.isSupported(dateTimeFieldType61);
        int int64 = localTime40.get(dateTimeFieldType61);
        org.joda.time.LocalTime localTime66 = localTime19.withField(dateTimeFieldType61, 233);
        int int67 = dateTime8.get(dateTimeFieldType61);
        org.joda.time.DateTime dateTime70 = dateTime8.withDurationAdded(10598109484790L, 363);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField73 = copticChronology71.dayOfYear();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology71.weekyear();
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.now((org.joda.time.Chronology) copticChronology71);
        org.joda.time.DateTime dateTime76 = dateTime70.toDateTime((org.joda.time.Chronology) copticChronology71);
        org.joda.time.DurationField durationField77 = copticChronology71.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime70 and dateTime76", (dateTime70.compareTo(dateTime76) == 0) == dateTime70.equals(dateTime76));
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1153");
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField3 = copticChronology2.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.yearOfEra();
        java.lang.String str5 = copticChronology2.toString();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 11, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField9 = copticChronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology8.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology24.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology29 = copticChronology8.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone25);
        java.lang.String str32 = dateTimeZone25.getName((long) 72);
        org.joda.time.Chronology chronology33 = copticChronology2.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology37 = copticChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField3, durationField39, and durationField3", !(durationField3.compareTo(durationField39) == 0) || (Math.signum(durationField3.compareTo(durationField3)) == Math.signum(durationField39.compareTo(durationField3))));
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1154");
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField3 = copticChronology2.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.yearOfEra();
        java.lang.String str5 = copticChronology2.toString();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 11, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology2.year();
        org.joda.time.DurationField durationField9 = copticChronology2.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField3, durationField9, and durationField3", !(durationField3.compareTo(durationField9) == 0) || (Math.signum(durationField3.compareTo(durationField3)) == Math.signum(durationField9.compareTo(durationField3))));
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1155");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(117);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime2.getZone();
        org.joda.time.DateTime.Property property10 = dateTime2.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology11.minuteOfDay();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField17 = copticChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology16.hourOfHalfday();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology16);
        int int20 = localDate19.getMonthOfYear();
        org.joda.time.LocalDate.Property property21 = localDate19.weekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        java.util.Locale locale26 = dateTimeFormatter25.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial29 = null;
        int int30 = dateTimeField28.getMaximumValue(readablePartial29);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.toLanguageTag();
        int int33 = dateTimeField28.getMaximumTextLength(locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter25.withLocale(locale31);
        java.lang.String str35 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDate19, 11, locale31);
        org.joda.time.LocalDate.Property property36 = localDate19.era();
        org.joda.time.LocalDate localDate38 = localDate19.plusMonths(26188813);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(26257954);
        org.joda.time.DateTime dateTime41 = localDate38.toDateTimeAtMidnight(dateTimeZone40);
        long long44 = dateTimeZone40.convertLocalToUTC((long) (short) -1, true);
        org.joda.time.DateTime dateTime45 = dateTime2.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime47 = dateTime2.plusWeeks(833);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime45", (instant0.compareTo(dateTime45) == 0) == instant0.equals(dateTime45));
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1156");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.Locale locale3 = dateTimeFormatter2.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField5.getMaximumValue(readablePartial6);
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.toLanguageTag();
        int int10 = dateTimeField5.getMaximumTextLength(locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withLocale(locale8);
        java.util.Locale locale12 = dateTimeFormatter2.getLocale();
        boolean boolean13 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField15 = copticChronology14.eras();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        int int25 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology30.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology35 = copticChronology14.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone31);
        java.lang.String str38 = dateTimeZone31.getName((long) 72);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31);
        java.lang.String str40 = copticChronology39.toString();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology39.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) copticChronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter42.withDefaultYear(327);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter42.withPivotYear((java.lang.Integer) 26184082);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter46.withPivotYear(236);
        org.joda.time.Chronology chronology49 = dateTimeFormatter46.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter46.withPivotYear(520);
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeFormatter54.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter54.withDefaultYear(16);
        java.util.Locale locale58 = dateTimeFormatter54.getLocale();
        org.joda.time.Chronology chronology59 = dateTimeFormatter54.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser60 = dateTimeFormatter54.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter54.withOffsetParsed();
        org.joda.time.chrono.CopticChronology copticChronology62 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField63 = copticChronology62.halfdays();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField66 = copticChronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = copticChronology62.centuryOfEra();
        org.joda.time.DurationField durationField68 = copticChronology62.minutes();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology62.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField70 = copticChronology62.halfdayOfDay();
        org.joda.time.DurationField durationField71 = copticChronology62.seconds();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter54.withChronology((org.joda.time.Chronology) copticChronology62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter46.withChronology((org.joda.time.Chronology) copticChronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField15 and durationField63", Math.signum(durationField15.compareTo(durationField63)) == -Math.signum(durationField63.compareTo(durationField15)));
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1157");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime6.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.era();
        java.lang.String str15 = copticChronology9.toString();
        org.joda.time.DurationField durationField16 = copticChronology9.hours();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime((org.joda.time.Chronology) copticChronology9);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        boolean boolean19 = calendar18.isWeekDateSupported();
        calendar18.clear(1);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromCalendarFields(calendar18);
        boolean boolean23 = calendar18.isWeekDateSupported();
        java.util.TimeZone timeZone24 = calendar18.getTimeZone();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromCalendarFields(calendar18);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.halfdayOfDay();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay((long) 777, (org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalTime.Property property32 = localTime29.property(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getDurationType();
        int int34 = localTime25.get(dateTimeFieldType31);
        org.joda.time.DateTime.Property property35 = dateTime17.property(dateTimeFieldType31);
        org.joda.time.DateTime dateTime38 = dateTime17.withDurationAdded((long) 271, 742);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1158");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = copticChronology0.weekyears();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology0);
        java.util.Date date5 = new java.util.Date();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime.Property property7 = localTime6.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        int[] intArray10 = copticChronology0.get((org.joda.time.ReadablePartial) localTime8, (long) 177);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = copticChronology0.add(readablePeriod11, (long) 674, 2000);
        org.joda.time.DateTimeZone dateTimeZone15 = copticChronology0.getZone();
        org.joda.time.DurationField durationField16 = copticChronology0.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField1, and durationField3", !(durationField16.compareTo(durationField1) == 0) || (Math.signum(durationField16.compareTo(durationField3)) == Math.signum(durationField1.compareTo(durationField3))));
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1159");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withEra(1);
        int int5 = localDateTime4.getMonthOfYear();
        org.joda.time.Chronology chronology6 = localDateTime4.getChronology();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology6);
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField10 = dateTimeField9.getRangeDurationField();
        java.lang.String str11 = dateTimeField9.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField8 and durationField10", (durationField8.compareTo(durationField10) == 0) == durationField8.equals(durationField10));
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1160");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        int int6 = localDate5.getWeekyear();
        org.joda.time.LocalDate localDate8 = localDate5.withYear(3);
        org.joda.time.LocalDate.Property property9 = localDate5.year();
        org.joda.time.LocalDate localDate10 = property9.roundCeilingCopy();
        org.joda.time.LocalDate localDate11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate12 = property9.roundCeilingCopy();
        org.joda.time.LocalDate localDate13 = property9.roundHalfEvenCopy();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField15 = copticChronology14.eras();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        int int25 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology30.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology35 = copticChronology14.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone31);
        java.lang.String str38 = dateTimeZone31.getNameKey((long) 2);
        boolean boolean40 = dateTimeZone31.isStandardOffset(328406400000L);
        java.lang.String str41 = dateTimeZone31.toString();
        long long44 = dateTimeZone31.convertLocalToUTC((long) 186, true);
        boolean boolean45 = dateTimeZone31.isFixed();
        org.joda.time.DateMidnight dateMidnight46 = localDate13.toDateMidnight(dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField15", Math.signum(durationField1.compareTo(durationField15)) == -Math.signum(durationField15.compareTo(durationField1)));
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1161");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfHalfday();
        int int5 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.centuryOfEra();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.halfdayOfDay();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((long) 777, (org.joda.time.Chronology) copticChronology10);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime17 = property13.setCopy(575);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalTime localTime19 = localTime17.minus(readablePeriod18);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField21 = copticChronology20.eras();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology20.weekOfWeekyear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withEra(1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withEra(1);
        int int31 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.Chronology chronology32 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology36.getZone();
        long long40 = dateTimeZone37.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology41 = copticChronology20.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone37);
        java.lang.String str44 = dateTimeZone37.getNameKey((long) 2);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        int int47 = dateTimeZone45.getStandardOffset((long) 849);
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone45);
        int int50 = dateTimeZone45.getOffset((long) 394);
        long long52 = dateTimeZone37.getMillisKeepLocal(dateTimeZone45, 0L);
        long long54 = dateTimeZone45.convertUTCToLocal(1645514512870L);
        org.joda.time.DateTime dateTime55 = localDate8.toDateTime(localTime19, dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField21", Math.signum(durationField1.compareTo(durationField21)) == -Math.signum(durationField21.compareTo(durationField1)));
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1162");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = copticChronology0.weekyears();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology0);
        int int5 = dateTime4.getEra();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readableDuration6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.clockhourOfHalfday();
        org.joda.time.DurationField durationField13 = copticChronology9.days();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology9.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology9.monthOfYear();
        org.joda.time.DurationField durationField17 = copticChronology9.halfdays();
        org.joda.time.Chronology chronology18 = copticChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology9.weekOfWeekyear();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField21 = copticChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology20.hourOfHalfday();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology20);
        int int24 = localDate23.getMonthOfYear();
        boolean boolean26 = localDate23.equals((java.lang.Object) 6);
        int int27 = localDate23.getDayOfMonth();
        org.joda.time.LocalDate.Property property28 = localDate23.dayOfMonth();
        int[] intArray30 = copticChronology9.get((org.joda.time.ReadablePartial) localDate23, (long) 362);
        org.joda.time.DurationField durationField31 = copticChronology9.years();
        org.joda.time.DateTime dateTime32 = dateTime7.withChronology((org.joda.time.Chronology) copticChronology9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField3 and durationField31", (durationField3.compareTo(durationField31) == 0) == durationField3.equals(durationField31));
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1163");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = copticChronology1.seconds();
        org.joda.time.DurationField durationField6 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.dayOfWeek();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay(1666077404590L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField12 = copticChronology1.halfdays();
        org.joda.time.DurationField durationField13 = copticChronology1.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField5, and durationField6", !(durationField13.compareTo(durationField5) == 0) || (Math.signum(durationField13.compareTo(durationField6)) == Math.signum(durationField5.compareTo(durationField6))));
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1164");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField8, and durationField1", !(durationField1.compareTo(durationField8) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField8.compareTo(durationField1))));
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1165");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(42);
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 'u', (org.joda.time.Chronology) copticChronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusHours(608);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = instant8.toDateTime(dateTimeZone9);
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = instant11.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withSecondOfMinute(2);
        int int16 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField20 = copticChronology19.eras();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology19.weekOfWeekyear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra(1);
        int int30 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        long long39 = dateTimeZone36.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology40 = copticChronology19.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone36);
        java.lang.String str43 = dateTimeZone36.getName((long) 72);
        long long45 = dateTimeZone36.nextTransition((long) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone36);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str50 = locale49.getScript();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = dateTimeZone36.getName((long) 3, locale49);
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str54 = property18.getAsShortText(locale49);
        java.lang.String str55 = locale49.getScript();
        java.lang.String str56 = dateTimeZone1.getShortName((-1806581999000L), locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime10", (instant8.compareTo(dateTime10) == 0) == instant8.equals(dateTime10));
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1166");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localTime11.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfMonth(10);
        org.joda.time.DateTime dateTime18 = dateTime14.minusHours((int) (short) 100);
        int int19 = dateTime18.getCenturyOfEra();
        boolean boolean20 = dateTime18.isEqualNow();
        boolean boolean21 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = dateTime8.minusDays(32769);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        org.joda.time.Instant instant26 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = instant26.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.DateTime.Property property30 = dateTime28.millisOfDay();
        boolean boolean32 = dateTime28.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime34 = dateTime28.plusMonths(117);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime28.getZone();
        org.joda.time.DateTime dateTime36 = dateTime23.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusHours(575);
        org.joda.time.DateTime dateTime40 = dateTime36.minusMonths(7);
        org.joda.time.LocalDateTime localDateTime41 = dateTime40.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime28", (instant26.compareTo(dateTime28) == 0) == instant26.equals(dateTime28));
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1167");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 158);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfSecond(865);
        long long9 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.LocalDateTime localDateTime11 = property3.setCopy(602);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        int int20 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMinutes((int) 'u');
        java.util.Date date27 = localDateTime22.toDate();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.withMillisOfSecond(2);
        int int30 = localDateTime29.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusYears(753);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plusWeeks(749);
        org.joda.time.Instant instant35 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = instant35.toDateTime(dateTimeZone36);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime40 = dateTime37.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar41 = dateTime37.toGregorianCalendar();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withEra(1);
        int int46 = localDateTime45.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDateTime45.getFieldType(0);
        boolean boolean49 = dateTime37.isSupported(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withEra(1);
        int int54 = localDateTime53.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = localDateTime53.getFieldType(0);
        boolean boolean57 = dateTime37.isSupported(dateTimeFieldType56);
        org.joda.time.DateTime dateTime59 = dateTime37.plusMillis((int) (byte) 0);
        org.joda.time.chrono.CopticChronology copticChronology60 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField61 = copticChronology60.halfdays();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology60.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology60.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology60.halfdayOfDay();
        org.joda.time.DurationField durationField66 = copticChronology60.days();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology67);
        int int69 = localDateTime68.getWeekyear();
        int int70 = localDateTime68.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.era();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.withWeekOfWeekyear(22);
        int[] intArray75 = copticChronology60.get((org.joda.time.ReadablePartial) localDateTime68, (-9936000000L));
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology76);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((java.lang.Object) chronology76);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property83 = localDateTime80.property(dateTimeFieldType82);
        boolean boolean84 = localDateTime68.isSupported(dateTimeFieldType82);
        boolean boolean85 = dateTime37.isSupported(dateTimeFieldType82);
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType82.getRangeDurationType();
        java.lang.String str87 = durationFieldType86.toString();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime29.withFieldAdded(durationFieldType86, 987);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime11.withFieldAdded(durationFieldType86, 237104);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime37", (instant35.compareTo(dateTime37) == 0) == instant35.equals(dateTime37));
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1168");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 692);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant11 = instant8.withDurationAdded(readableDuration9, 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str13 = dateTimeFieldType12.getName();
        int int14 = instant8.get(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime15 = instant8.toMutableDateTime();
        org.joda.time.Instant instant16 = instant8.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime15", (instant16.compareTo(mutableDateTime15) == 0) == instant16.equals(mutableDateTime15));
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1169");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime12.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime12.getFieldType(0);
        boolean boolean16 = localDateTime5.isSupported(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.plusMillis(13);
        org.joda.time.LocalDateTime.Property property19 = localDateTime5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime5.minusMonths(255);
        int int22 = localDateTime5.size();
        org.joda.time.LocalDateTime.Property property23 = localDateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfDay();
        org.joda.time.DateTime.Property property27 = dateTime25.weekyear();
        org.joda.time.DateTime dateTime28 = property27.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime29 = property27.withMinimumValue();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(241);
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.Instant instant35 = instant32.withDurationAdded((long) 917, 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withEra(1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withEra(1);
        int int44 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withEra(1);
        int int49 = localDateTime48.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime48.getFieldType(0);
        boolean boolean52 = localDateTime41.isSupported(dateTimeFieldType51);
        int int53 = localDateTime41.getMillisOfSecond();
        int int54 = localDateTime41.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean56 = localDateTime41.isSupported(dateTimeFieldType55);
        int int57 = instant35.get(dateTimeFieldType55);
        int int58 = localDateTime5.indexOf(dateTimeFieldType55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime5.plusHours(4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant32", (dateTime31.compareTo(instant32) == 0) == dateTime31.equals(instant32));
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1170");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime8 = dateTime2.plusYears(497);
        org.joda.time.DateTime.Property property9 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime11 = property9.addToCopy((long) 70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1171");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(117);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime2.getZone();
        int int10 = dateTime2.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime2.withDurationAdded((long) 26157, 866);
        org.joda.time.DateTime dateTime15 = dateTime2.withMillis((long) 26184082);
        org.joda.time.DateTime dateTime16 = dateTime2.withEarlierOffsetAtOverlap();
        java.util.GregorianCalendar gregorianCalendar17 = dateTime16.toGregorianCalendar();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField19 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.hourOfHalfday();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology18);
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) 10);
        int int24 = localDate23.getWeekyear();
        int int25 = localDate23.getEra();
        org.joda.time.LocalDate localDate27 = localDate23.minusMonths(53);
        int int28 = localDate27.getDayOfYear();
        org.joda.time.LocalDate localDate30 = localDate27.minusDays(692);
        int int31 = localDate27.getWeekyear();
        org.joda.time.LocalDate localDate33 = localDate27.plusWeeks(23);
        org.joda.time.LocalDate.Property property34 = localDate33.weekyear();
        org.joda.time.LocalDate.Property property35 = localDate33.year();
        org.joda.time.LocalDate.Property property36 = localDate33.dayOfWeek();
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime();
        int int38 = dateTime37.getWeekOfWeekyear();
        java.util.Date date39 = dateTime37.toDate();
        gregorianCalendar17.setTime(date39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1172");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        long long3 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTime();
        boolean boolean6 = mutableDateTime5.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1173");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField3 = copticChronology2.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.weekOfWeekyear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        long long22 = dateTimeZone19.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology23 = copticChronology2.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone19);
        java.lang.String str26 = dateTimeZone19.getName((long) 72);
        long long28 = dateTimeZone19.nextTransition((long) 10);
        java.lang.String str29 = dateTimeZone19.getID();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime1.toMutableDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime32 = dateTime1.plusMillis(155);
        org.joda.time.DateTime dateTime34 = dateTime32.minus((long) 15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime24", (dateTime1.compareTo(dateTime24) == 0) == dateTime1.equals(dateTime24));
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1174");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) chronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusHours((int) (byte) 1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMinutes(32769);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths(219);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMonths(0);
        org.joda.time.Instant instant19 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = instant19.toDateTime(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime.Property property23 = dateTime21.millisOfDay();
        boolean boolean25 = dateTime21.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime27 = dateTime21.plusMonths(117);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime30 = property28.addToCopy(327);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withDurationAdded(readableDuration31, 26392472);
        boolean boolean34 = localDateTime18.equals((java.lang.Object) dateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime21", (instant19.compareTo(dateTime21) == 0) == instant19.equals(dateTime21));
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1175");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(380);
        org.joda.time.DateTime dateTime3 = localDateTime0.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfEra();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) 36);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime dateTime8 = instant6.toDateTime();
        int int9 = property4.getDifference((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.minusDays(202);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(855);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes(411);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime7", (instant6.compareTo(dateTime7) == 0) == instant6.equals(dateTime7));
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1176");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = instant3.toDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withSecondOfMinute(2);
        int int8 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfDay();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale25);
        java.lang.String str27 = locale25.getDisplayName();
        boolean boolean28 = locale25.hasExtensions();
        java.util.Locale.setDefault(locale25);
        long long30 = dateTimeField22.set((long) 692, "8", locale25);
        java.lang.String str33 = nameProvider9.getName(locale25, "\u516c\u5143", "DateTimeField[weekyearOfCentury]");
        java.util.Calendar calendar34 = dateTime5.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime5.getZone();
        org.joda.time.DateTime dateTime37 = dateTime5.minusMonths(374);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1177");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(0);
        boolean boolean14 = dateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime18.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDateTime18.getFieldType(0);
        boolean boolean22 = dateTime2.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = dateTime2.plusSeconds(169);
        org.joda.time.DateTime dateTime26 = dateTime2.minusWeeks(0);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField28 = copticChronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology27.hourOfHalfday();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) 10);
        int int33 = localDate32.getWeekyear();
        int int34 = localDate32.getEra();
        org.joda.time.LocalDate localDate36 = localDate32.minusMonths(53);
        int int37 = localDate36.getDayOfYear();
        org.joda.time.LocalDate localDate39 = localDate36.minusDays(692);
        int int40 = localDate36.getWeekyear();
        org.joda.time.LocalDate localDate42 = localDate36.plusWeeks(23);
        org.joda.time.LocalDate.Property property43 = localDate42.weekyear();
        org.joda.time.LocalDate.Property property44 = localDate42.year();
        org.joda.time.LocalDate.Property property45 = localDate42.dayOfWeek();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime();
        boolean boolean47 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1178");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.DateTime.Property property4 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime5 = property4.roundCeilingCopy();
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        int int7 = dateTime5.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1179");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 'u', (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusHours(608);
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = instant5.toDateTime(dateTimeZone6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = instant8.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(2);
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.plusYears(663);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime7", (instant5.compareTo(dateTime7) == 0) == instant5.equals(dateTime7));
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1180");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        java.util.Locale locale5 = null;
        int int6 = property4.getMaximumTextLength(locale5);
        int int7 = property4.getMinimumValueOverall();
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = instant8.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime10.withCenturyOfEra(100);
        int int14 = dateTime10.getCenturyOfEra();
        org.joda.time.DateTime.Property property15 = dateTime10.weekyear();
        int int16 = property4.compareTo((org.joda.time.ReadableInstant) dateTime10);
        int int17 = property4.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime10", (instant8.compareTo(dateTime10) == 0) == instant8.equals(dateTime10));
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1181");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DurationField durationField4 = copticChronology0.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField4, and durationField1", !(durationField1.compareTo(durationField4) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField4.compareTo(durationField1))));
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1182");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.DateTime.Property property5 = dateTime2.era();
        boolean boolean7 = dateTime2.isAfter((long) 12);
        long long8 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime10 = dateTime2.plusSeconds(814);
        org.joda.time.DateTime dateTime11 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths(256);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMinutes(584);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime11", (instant0.compareTo(dateTime11) == 0) == instant0.equals(dateTime11));
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1183");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.lang.String str20 = dateTimeZone17.getName(100L, locale19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone17);
        long long22 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = copticChronology23.getZone();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology26.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime27", (dateTime21.compareTo(dateTime27) == 0) == dateTime21.equals(dateTime27));
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1184");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(117);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime2.getZone();
        int int10 = dateTime2.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime2.withDurationAdded((long) 26157, 866);
        org.joda.time.DateTime dateTime15 = dateTime2.withMillis((long) 26184082);
        org.joda.time.DateTime dateTime17 = dateTime2.minusWeeks(316);
        org.joda.time.DateTime.Property property18 = dateTime17.year();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.plus(readableDuration19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1185");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusHours(26157846);
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = instant5.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfDay();
        boolean boolean11 = dateTime7.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime13 = dateTime7.plusMonths(117);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundFloorCopy();
        org.joda.time.DateTime dateTime16 = property14.withMaximumValue();
        org.joda.time.DateTime dateTime18 = property14.addToCopy(26184082L);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.plus(readableDuration19);
        org.joda.time.DateTime dateTime22 = dateTime18.plusDays(258);
        org.joda.time.DateTime dateTime23 = localDateTime2.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks(790);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime7", (instant5.compareTo(dateTime7) == 0) == instant5.equals(dateTime7));
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1186");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        int int6 = localDate5.getWeekyear();
        java.lang.String str7 = localDate5.toString();
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readablePeriod9);
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = instant12.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.DateTime.Property property16 = dateTime14.millisOfDay();
        boolean boolean18 = dateTime14.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime20 = dateTime14.plusMonths(117);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfDay();
        org.joda.time.DateTime dateTime22 = property21.roundFloorCopy();
        org.joda.time.DateTime dateTime23 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(592);
        boolean boolean26 = dateTime10.equals((java.lang.Object) dateTime25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant11", (dateTime10.compareTo(instant11) == 0) == dateTime10.equals(instant11));
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1187");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.DateTime.Property property5 = dateTime2.era();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withPeriodAdded(readablePeriod7, 34);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes(190);
        org.joda.time.DateTime.Property property12 = dateTime9.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime9", (instant0.compareTo(dateTime9) == 0) == instant0.equals(dateTime9));
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1188");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = instant3.toDateTime(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra(100);
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField11 = copticChronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology31 = copticChronology10.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        java.lang.String str34 = dateTimeZone27.getNameKey((long) 2);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withEra(1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withEra(1);
        int int43 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.Chronology chronology44 = localDateTime40.getChronology();
        java.lang.String str45 = localDateTime40.toString();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.minusMinutes(1);
        boolean boolean48 = dateTimeZone27.isLocalDateTimeGap(localDateTime40);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime5.toMutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime51 = dateTime5.withYear((int) '#');
        org.joda.time.DateTime dateTime52 = dateTime5.withEarlierOffsetAtOverlap();
        java.util.GregorianCalendar gregorianCalendar53 = dateTime52.toGregorianCalendar();
        gregorianCalendar53.setTimeInMillis(0L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withEra(1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withEra(1);
        int int64 = localDateTime57.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.Chronology chronology65 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = chronology69.getZone();
        java.lang.String str71 = dateTimeZone70.getID();
        java.lang.String str73 = dateTimeZone70.getNameKey((long) (short) -1);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((java.lang.Object) gregorianCalendar53, dateTimeZone70);
        org.joda.time.DateTime dateTime77 = dateTime74.withDurationAdded(26580528L, 875);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime5", (instant3.compareTo(dateTime5) == 0) == instant3.equals(dateTime5));
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1189");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        org.joda.time.DateTime dateTime11 = dateTime8.plusYears(15);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(161);
        java.lang.Object obj15 = null;
        org.joda.time.Instant instant16 = new org.joda.time.Instant(obj15);
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTimeISO();
        boolean boolean18 = dateTime11.isEqual((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = instant16.toInstant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant16.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime21 = instant16.toMutableDateTimeISO();
        int int22 = mutableDateTime21.getDayOfWeek();
        int int23 = mutableDateTime21.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime17", (instant16.compareTo(mutableDateTime17) == 0) == instant16.equals(mutableDateTime17));
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1190");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfDay();
        org.joda.time.DateTime.Property property3 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime5 = property3.withMinimumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(241);
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.Instant instant11 = instant8.withDurationAdded((long) 917, 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) chronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusHours((int) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        int int24 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusMinutes(32769);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.plusYears(2);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withEra(1);
        int int35 = localDateTime34.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = localDateTime34.getFieldType(0);
        int int38 = localDateTime26.get(dateTimeFieldType37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime26.minusMonths(169);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withEra(1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withEra(1);
        int int49 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.Chronology chronology50 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.plusMinutes((int) 'u');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.withDurationAdded(readableDuration56, (-1));
        org.joda.time.LocalDateTime.Property property59 = localDateTime51.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property59.getFieldType();
        org.joda.time.LocalDateTime.Property property61 = localDateTime40.property(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType60.getDurationType();
        boolean boolean63 = instant11.isSupported(dateTimeFieldType60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant11", (dateTime7.compareTo(instant11) == 0) == dateTime7.equals(instant11));
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1191");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        int int4 = dateTime2.getMinuteOfHour();
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = instant5.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = dateTime7.toLocalDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        int int17 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology18.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        boolean boolean23 = dateTime7.equals((java.lang.Object) chronology21);
        org.joda.time.DateTime dateTime25 = dateTime7.withMonthOfYear(4);
        boolean boolean26 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        int int27 = dateTime2.getDayOfMonth();
        int int28 = dateTime2.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime7", (instant0.compareTo(dateTime7) == 0) == instant0.equals(dateTime7));
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1192");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        long long5 = property4.remainder();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1193");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = instant3.toInstant();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant3.minus(readableDuration6);
        org.joda.time.Instant instant10 = instant7.withDurationAdded((long) 42, 771);
        org.joda.time.Instant instant13 = instant10.withDurationAdded(28809100L, 47);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant13.withDurationAdded(readableDuration14, 27418559);
        org.joda.time.DateTime dateTime17 = instant16.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.minus(readableDuration18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1194");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra(1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        boolean boolean12 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusMinutes((int) 'u');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property29 = localDateTime11.secondOfMinute();
        org.joda.time.DateTime dateTime30 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField33 = copticChronology32.eras();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology32.yearOfEra();
        java.lang.String str35 = copticChronology32.toString();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology32);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology32.minuteOfDay();
        org.joda.time.Chronology chronology38 = copticChronology32.withUTC();
        org.joda.time.DateTime dateTime39 = dateTime30.withChronology((org.joda.time.Chronology) copticChronology32);
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1195");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime5 = dateTime2.plusMonths(26319178);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1196");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = instant1.toDateTime(dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfEra();
        org.joda.time.DateTime.Property property5 = dateTime3.millisOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) chronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.property(dateTimeFieldType12);
        boolean boolean14 = dateTime3.isSupported(dateTimeFieldType12);
        long long15 = dateTime3.getMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime3.getZone();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(1645514585954L, dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime3", (instant1.compareTo(dateTime3) == 0) == instant1.equals(dateTime3));
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1197");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology5 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField8 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField8", Math.signum(durationField1.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField1)));
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1198");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.era();
        java.lang.String str6 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.millisOfSecond();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = instant11.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime13.withCenturyOfEra(100);
        boolean boolean17 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField19 = copticChronology18.eras();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withEra(1);
        int int29 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.Chronology chronology30 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        long long38 = dateTimeZone35.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology39 = copticChronology18.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone35);
        java.lang.String str42 = dateTimeZone35.getNameKey((long) 2);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withEra(1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withEra(1);
        int int51 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.Chronology chronology52 = localDateTime48.getChronology();
        java.lang.String str53 = localDateTime48.toString();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.minusMinutes(1);
        boolean boolean56 = dateTimeZone35.isLocalDateTimeGap(localDateTime48);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime13.toMutableDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology58 = copticChronology0.withZone(dateTimeZone35);
        java.lang.String str59 = dateTimeZone35.getID();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMillis(26666);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime13", (instant11.compareTo(dateTime13) == 0) == instant11.equals(dateTime13));
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1199");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        long long17 = dateTimeZone14.convertLocalToUTC((long) '#', false);
        long long19 = dateTimeZone14.nextTransition((long) 510);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        int int28 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusMinutes((int) 'u');
        java.util.Date date35 = localDateTime30.toDate();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.withMillisOfSecond(2);
        boolean boolean38 = dateTimeZone14.isLocalDateTimeGap(localDateTime37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 158);
        org.joda.time.DateTime dateTime42 = dateTime40.withMillisOfSecond(865);
        org.joda.time.Instant instant43 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = instant43.toDateTime(dateTimeZone44);
        org.joda.time.Instant instant46 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = instant46.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withSecondOfMinute(2);
        int int51 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean52 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean54 = dateTime45.isSupported(dateTimeFieldType53);
        org.joda.time.DateTime dateTime55 = localDateTime37.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime57 = dateTime55.minusHours(505);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField59 = copticChronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology58.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone61 = copticChronology58.getZone();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        long long64 = dateTimeZone61.getMillisKeepLocal(dateTimeZone62, 169L);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime67 = dateTime57.withZoneRetainFields(dateTimeZone61);
        org.joda.time.Instant instant69 = org.joda.time.Instant.parse("2022-02-22T07:18:07.233");
        org.joda.time.Instant instant71 = instant69.plus((long) 916);
        org.joda.time.Instant instant73 = instant71.minus(1053129245050498L);
        int int74 = dateTime67.compareTo((org.joda.time.ReadableInstant) instant71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime45", (instant43.compareTo(dateTime45) == 0) == instant43.equals(dateTime45));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1200");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        java.lang.String str5 = property4.getAsShortText();
        org.joda.time.DateTime dateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime8 = property4.addToCopy(1157587200000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1201");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.year();
        org.joda.time.Chronology chronology6 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField7 = copticChronology0.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField7, and durationField1", !(durationField1.compareTo(durationField7) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField7.compareTo(durationField1))));
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1202");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        java.lang.String str5 = property4.getAsShortText();
        org.joda.time.DateTime dateTime6 = property4.getDateTime();
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = instant7.toDateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime9.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime9.toGregorianCalendar();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra(1);
        int int18 = localDateTime17.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime17.getFieldType(0);
        boolean boolean21 = dateTime9.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime25.getFieldType(0);
        boolean boolean29 = dateTime9.isSupported(dateTimeFieldType28);
        java.lang.String str30 = dateTimeFieldType28.getName();
        org.joda.time.DateTime dateTime32 = dateTime6.withField(dateTimeFieldType28, 10);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withDurationAdded(readableDuration33, 26555721);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1203");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.yearOfEra();
        java.lang.String str4 = copticChronology1.toString();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField13 = copticChronology1.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField2, durationField13, and durationField2", !(durationField2.compareTo(durationField13) == 0) || (Math.signum(durationField2.compareTo(durationField2)) == Math.signum(durationField13.compareTo(durationField2))));
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1204");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        int int9 = dateTime8.getCenturyOfEra();
        boolean boolean10 = dateTime8.isEqualNow();
        org.joda.time.DateTime dateTime12 = dateTime8.withMillisOfDay((int) (short) 10);
        org.joda.time.DateTime.Property property13 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = instant17.toDateTime(dateTimeZone18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime22 = dateTime19.withCenturyOfEra(100);
        boolean boolean23 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime24 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime19.plusMinutes(513);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology29 = localTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localTime28.toDateTimeToday(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfMonth(10);
        int int34 = dateTime33.getCenturyOfEra();
        org.joda.time.DateTime.Property property35 = dateTime33.era();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.minus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readablePeriod38);
        boolean boolean40 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property41 = dateTime19.secondOfMinute();
        boolean boolean42 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property43 = dateTime8.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime19", (instant17.compareTo(dateTime19) == 0) == instant17.equals(dateTime19));
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1205");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        long long21 = dateTimeZone18.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology22 = copticChronology1.withZone(dateTimeZone18);
        int int24 = dateTimeZone18.getOffsetFromLocal(100L);
        org.joda.time.DateTime dateTime25 = dateTime0.withZone(dateTimeZone18);
        boolean boolean26 = dateTime0.isAfterNow();
        org.joda.time.DateTime.Property property27 = dateTime0.minuteOfHour();
        org.joda.time.DateTime dateTime29 = property27.addToCopy(142);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime25", (dateTime0.compareTo(dateTime25) == 0) == dateTime0.equals(dateTime25));
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1206");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        java.lang.String str5 = property4.getAsShortText();
        org.joda.time.DateTime dateTime6 = property4.getDateTime();
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = instant7.toDateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime9.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime9.toGregorianCalendar();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra(1);
        int int18 = localDateTime17.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime17.getFieldType(0);
        boolean boolean21 = dateTime9.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime25.getFieldType(0);
        boolean boolean29 = dateTime9.isSupported(dateTimeFieldType28);
        java.lang.String str30 = dateTimeFieldType28.getName();
        org.joda.time.DateTime dateTime32 = dateTime6.withField(dateTimeFieldType28, 10);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.DateTime dateTime34 = property33.withMaximumValue();
        org.joda.time.DateTime dateTime36 = property33.addToCopy(780942L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1207");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        org.joda.time.DateTime dateTime11 = dateTime8.plusYears(15);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(161);
        java.lang.Object obj15 = null;
        org.joda.time.Instant instant16 = new org.joda.time.Instant(obj15);
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTimeISO();
        boolean boolean18 = dateTime11.isEqual((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant19 = instant16.toInstant();
        org.joda.time.Instant instant22 = instant19.withDurationAdded((long) (-1897), 24);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant19.minus(readableDuration23);
        org.joda.time.Instant instant27 = instant24.withDurationAdded((long) 818, 965);
        org.joda.time.MutableDateTime mutableDateTime28 = instant24.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime17", (instant24.compareTo(mutableDateTime17) == 0) == instant24.equals(mutableDateTime17));
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1208");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour(2);
        int int4 = localTime1.size();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime7 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime9 = property5.addWrapFieldToCopy(26);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localTime11.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfMonth(10);
        org.joda.time.DateTime dateTime18 = dateTime14.minusHours((int) (short) 100);
        org.joda.time.DateTime.Property property19 = dateTime18.year();
        org.joda.time.DateTime dateTime21 = dateTime18.plusYears(15);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime21.minusSeconds(161);
        java.lang.Object obj25 = null;
        org.joda.time.Instant instant26 = new org.joda.time.Instant(obj25);
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTimeISO();
        boolean boolean28 = dateTime21.isEqual((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Instant instant29 = instant26.toInstant();
        org.joda.time.MutableDateTime mutableDateTime30 = instant26.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime31 = instant26.toMutableDateTimeISO();
        long long32 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.LocalTime localTime33 = property5.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime27", (instant26.compareTo(mutableDateTime27) == 0) == instant26.equals(mutableDateTime27));
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1209");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.minus(readableDuration4);
        org.joda.time.DateTime dateTime7 = dateTime2.plusWeeks(32772);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfMonth(11);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField11 = copticChronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology31 = copticChronology10.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        java.lang.String str34 = dateTimeZone27.getName((long) 72);
        int int36 = dateTimeZone27.getOffsetFromLocal((long) 6);
        long long38 = dateTimeZone27.convertUTCToLocal((long) 169);
        long long40 = dateTimeZone27.nextTransition(0L);
        org.joda.time.DateTime dateTime41 = dateTime7.withZone(dateTimeZone27);
        long long44 = dateTimeZone27.convertLocalToUTC(994L, false);
        long long47 = dateTimeZone27.adjustOffset((long) 998, false);
        int int49 = dateTimeZone27.getStandardOffset((-53237751990L));
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(1645514505916L, dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime41", (dateTime7.compareTo(dateTime41) == 0) == dateTime7.equals(dateTime41));
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1210");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.yearOfEra();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField8 = copticChronology0.months();
        boolean boolean9 = durationField8.isPrecise();
        long long11 = durationField8.getValueAsLong(0L);
        long long14 = durationField8.getDifferenceAsLong(0L, (long) 212);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = instant15.toDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withSecondOfMinute(2);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        int int28 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime17, chronology29);
        int int32 = localDateTime31.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusWeeks(472);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusYears(52);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.year();
        org.joda.time.DurationField durationField38 = property37.getLeapDurationField();
        int int39 = durationField8.compareTo(durationField38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant15", (dateTime7.compareTo(instant15) == 0) == dateTime7.equals(instant15));
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1211");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(0);
        boolean boolean14 = dateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime16 = dateTime2.withMillis((long) (short) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        org.joda.time.DateTime dateTime19 = dateTime16.minusYears(970);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withDurationAdded(readableDuration20, 797);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1212");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getStandardOffset((long) 849);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(2, 7, 16, 4, (int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours(23);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime8.getZone();
        long long13 = dateTimeZone11.convertUTCToLocal((long) 21);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, 1645514182768L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfDay();
        org.joda.time.DateTime.Property property19 = dateTime17.weekyear();
        org.joda.time.DateTime.Property property20 = dateTime17.secondOfDay();
        org.joda.time.DateTime dateTime21 = property20.getDateTime();
        int int22 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = instant23.toDateTime(dateTimeZone24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime25.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime25.toGregorianCalendar();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withEra(1);
        int int34 = localDateTime33.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime33.getFieldType(0);
        boolean boolean37 = dateTime25.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withEra(1);
        int int42 = localDateTime41.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime41.getFieldType(0);
        boolean boolean45 = dateTime25.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime48 = dateTime25.withField(dateTimeFieldType46, 72);
        int int49 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = dateTimeZone11.isStandardOffset((long) 373);
        int int53 = dateTimeZone11.getStandardOffset((long) 26428824);
        java.util.TimeZone timeZone54 = dateTimeZone11.toTimeZone();
        int int55 = timeZone54.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime25", (instant23.compareTo(dateTime25) == 0) == instant23.equals(dateTime25));
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1213");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField3 = copticChronology2.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.weekOfWeekyear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        long long22 = dateTimeZone19.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology23 = copticChronology2.withZone(dateTimeZone19);
        int int25 = dateTimeZone19.getOffsetFromLocal(100L);
        org.joda.time.DateTime dateTime26 = dateTime1.withZone(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(432000L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readableDuration28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readableDuration30);
        int int32 = localDateTime29.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.plus(readableDuration33);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField36 = copticChronology35.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology35.hourOfHalfday();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) 10);
        int int41 = localDate40.getWeekyear();
        int int42 = localDate40.getEra();
        org.joda.time.LocalDate localDate44 = localDate40.minusMonths(53);
        int int45 = localDate44.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate48 = localDate44.withPeriodAdded(readablePeriod46, 225);
        org.joda.time.LocalDate.Property property49 = localDate48.weekyear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDate48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime26", (dateTime1.compareTo(dateTime26) == 0) == dateTime1.equals(dateTime26));
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1214");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.halfdayOfDay();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime8 = localTime6.withMinuteOfHour(2);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.joda.time.LocalTime localTime12 = property9.setCopy("0", locale11);
        int[] intArray14 = copticChronology0.get((org.joda.time.ReadablePartial) localTime12, 26184082L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localTime16.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfMonth(10);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay23 = dateTime21.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean25 = dateTime21.isSupported(dateTimeFieldType24);
        org.joda.time.LocalTime.Property property26 = localTime12.property(dateTimeFieldType24);
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField29 = copticChronology28.eras();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) chronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str43 = nameProvider39.getShortName(locale40, "", "");
        java.lang.String str44 = property37.getAsShortText(locale40);
        java.lang.String str45 = dateTimeField30.getAsText(1L, locale40);
        java.lang.String str48 = nameProvider27.getShortName(locale40, "eras", "English (Canada)");
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale49);
        java.lang.String str51 = locale49.getDisplayName();
        boolean boolean52 = locale49.hasExtensions();
        java.lang.String str53 = locale49.getCountry();
        java.lang.String str54 = locale49.getDisplayVariant();
        java.util.Locale locale56 = new java.util.Locale("English (Canada)");
        java.lang.String str57 = locale56.getVariant();
        java.lang.String str58 = locale49.getDisplayCountry(locale56);
        java.lang.String str61 = nameProvider27.getName(locale49, "Tue Dec 22 07:21:42 GMT 2026", "169");
        boolean boolean62 = localTime12.equals((java.lang.Object) "Tue Dec 22 07:21:42 GMT 2026");
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField29", Math.signum(durationField1.compareTo(durationField29)) == -Math.signum(durationField29.compareTo(durationField1)));
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1215");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = dateTime1.toString("10", locale3);
        org.joda.time.DateTime dateTime8 = dateTime1.withDayOfYear(345);
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar10 = dateTime8.toCalendar(locale9);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter13.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withDefaultYear(16);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.eras();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology17.weekOfWeekyear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        int int28 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        long long37 = dateTimeZone34.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology38 = copticChronology17.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone34);
        java.lang.String str41 = dateTimeZone34.getName(10598109367999L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter16.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime43 = dateTime8.toDateTime(dateTimeZone34);
        org.joda.time.Instant instant44 = org.joda.time.Instant.now();
        org.joda.time.Instant instant47 = instant44.withDurationAdded((long) '#', 17);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant44.minus(readableDuration48);
        boolean boolean50 = dateTime43.isAfter((org.joda.time.ReadableInstant) instant49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant49.plus(readableDuration51);
        org.joda.time.Chronology chronology53 = instant49.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime43", (dateTime8.compareTo(dateTime43) == 0) == dateTime8.equals(dateTime43));
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1216");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 'u', (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusHours(608);
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = instant5.toDateTime(dateTimeZone6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = instant8.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(2);
        int int13 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        long long20 = dateTimeField17.add((long) 26447555, 832L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime7", (instant5.compareTo(dateTime7) == 0) == instant5.equals(dateTime7));
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1217");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField4 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        long long7 = dateTimeField5.roundHalfFloor((long) 1969);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial16 = null;
        int int17 = dateTimeField15.getMaximumValue(readablePartial16);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale18.toLanguageTag();
        int int20 = dateTimeField15.getMaximumTextLength(locale18);
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str25 = nameProvider21.getShortName(locale22, "", "");
        java.lang.String str26 = locale18.getDisplayName(locale22);
        java.lang.String str27 = locale13.getDisplayCountry(locale22);
        java.lang.String str28 = locale12.getDisplayCountry(locale13);
        java.lang.String str29 = locale13.getISO3Language();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField31 = copticChronology30.eras();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology30.yearOfEra();
        java.lang.String str33 = copticChronology30.toString();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology30.halfdayOfDay();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale36);
        java.lang.String str38 = locale36.getDisplayName();
        boolean boolean39 = locale36.hasExtensions();
        java.lang.String str40 = dateTimeField34.getAsShortText(98, locale36);
        java.util.Locale locale41 = locale36.stripExtensions();
        java.lang.String str42 = locale13.getDisplayVariant(locale36);
        java.lang.String str43 = locale36.getDisplayCountry();
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("");
        java.lang.String str46 = locale36.getDisplayName(locale45);
        java.lang.String str47 = dateTimeField5.getAsShortText(749, locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField31", Math.signum(durationField4.compareTo(durationField31)) == -Math.signum(durationField31.compareTo(durationField4)));
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1218");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(12214398L);
        org.joda.time.Instant instant2 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = instant2.toDateTime(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.DateTime.Property property6 = dateTime4.millisOfDay();
        java.lang.String str7 = property6.getAsShortText();
        org.joda.time.DateTime dateTime8 = property6.getDateTime();
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = instant9.toDateTime(dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = dateTime11.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime11.toGregorianCalendar();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        int int20 = localDateTime19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = localDateTime19.getFieldType(0);
        boolean boolean23 = dateTime11.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        int int28 = localDateTime27.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = localDateTime27.getFieldType(0);
        boolean boolean31 = dateTime11.isSupported(dateTimeFieldType30);
        java.lang.String str32 = dateTimeFieldType30.getName();
        org.joda.time.DateTime dateTime34 = dateTime8.withField(dateTimeFieldType30, 10);
        int int35 = localDate1.get(dateTimeFieldType30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime4", (instant2.compareTo(dateTime4) == 0) == instant2.equals(dateTime4));
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1219");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter6.getParser();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter6.getZone();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField10 = copticChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.hourOfHalfday();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology9);
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) 10);
        int int15 = localDate14.getWeekyear();
        org.joda.time.LocalDate localDate17 = localDate14.withYear(3);
        org.joda.time.LocalDate.Property property18 = localDate14.year();
        org.joda.time.LocalDate.Property property19 = localDate14.centuryOfEra();
        org.joda.time.LocalDate localDate20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate21 = property19.withMinimumValue();
        org.joda.time.LocalDate localDate23 = localDate21.plusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        java.util.Locale locale28 = new java.util.Locale("22-Feb-2000 7:18:59 AM", "28 Apr 1899 23:16:20 GMT");
        org.joda.time.LocalDate localDate29 = property24.setCopy("169", locale28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter6.withLocale(locale28);
        org.joda.time.Instant instant31 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = instant31.toDateTime(dateTimeZone32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime.Property property35 = dateTime33.millisOfDay();
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology36.minuteOfDay();
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField42 = copticChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology41.hourOfHalfday();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology41);
        int int45 = localDate44.getMonthOfYear();
        org.joda.time.LocalDate.Property property46 = localDate44.weekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = null;
        org.joda.time.format.DateTimeParser dateTimeParser49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter48, dateTimeParser49);
        java.util.Locale locale51 = dateTimeFormatter50.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial54 = null;
        int int55 = dateTimeField53.getMaximumValue(readablePartial54);
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.toLanguageTag();
        int int58 = dateTimeField53.getMaximumTextLength(locale56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter50.withLocale(locale56);
        java.lang.String str60 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDate44, 11, locale56);
        java.util.Calendar calendar61 = dateTime33.toCalendar(locale56);
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale62);
        java.lang.String str64 = locale62.getDisplayName();
        boolean boolean65 = locale62.hasExtensions();
        java.lang.String str66 = locale62.getCountry();
        java.lang.String str67 = locale62.getDisplayVariant();
        java.util.Calendar calendar68 = dateTime33.toCalendar(locale62);
        java.lang.String str69 = locale62.getLanguage();
        java.lang.String str70 = locale62.getCountry();
        java.lang.String str71 = locale28.getDisplayVariant(locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime33", (instant31.compareTo(dateTime33) == 0) == instant31.equals(dateTime33));
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1220");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        java.lang.String str5 = property4.getAsShortText();
        org.joda.time.DateTime dateTime6 = property4.getDateTime();
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = instant7.toDateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime9.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime9.toGregorianCalendar();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra(1);
        int int18 = localDateTime17.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime17.getFieldType(0);
        boolean boolean21 = dateTime9.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime25.getFieldType(0);
        boolean boolean29 = dateTime9.isSupported(dateTimeFieldType28);
        java.lang.String str30 = dateTimeFieldType28.getName();
        org.joda.time.DateTime dateTime32 = dateTime6.withField(dateTimeFieldType28, 10);
        org.joda.time.Instant instant33 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = instant33.toDateTime(dateTimeZone34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.joda.time.DateTime.Property property37 = dateTime35.millisOfDay();
        boolean boolean39 = dateTime35.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime41 = dateTime35.plusMonths(117);
        org.joda.time.DateTime.Property property42 = dateTime41.millisOfDay();
        org.joda.time.DateTime dateTime43 = property42.roundFloorCopy();
        org.joda.time.DateTime dateTime44 = property42.withMaximumValue();
        int int45 = dateTime44.getYearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withEra(1);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withEra(1);
        int int55 = localDateTime48.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.Chronology chronology56 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology60.getZone();
        long long64 = dateTimeZone61.convertLocalToUTC((long) '#', false);
        int int66 = dateTimeZone61.getOffset(100L);
        org.joda.time.Chronology chronology67 = copticChronology46.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime68 = dateTime44.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime69 = dateTime32.withZone(dateTimeZone61);
        org.joda.time.DateTime.Property property70 = dateTime69.dayOfYear();
        org.joda.time.DateTime dateTime71 = property70.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1221");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.era();
        java.lang.String str7 = copticChronology1.toString();
        org.joda.time.DurationField durationField8 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.yearOfEra();
        org.joda.time.DurationField durationField10 = copticChronology1.halfdays();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) 86401899, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField13 = copticChronology12.eras();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology12.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology12);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.hours();
        boolean boolean18 = localDateTime16.isSupported(durationFieldType17);
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology19.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = copticChronology19.add(readablePeriod22, (long) 4, 2);
        org.joda.time.DateTimeField dateTimeField26 = copticChronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology19.millisOfSecond();
        boolean boolean28 = durationFieldType17.isSupported((org.joda.time.Chronology) copticChronology19);
        boolean boolean29 = localTime11.isSupported(durationFieldType17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField13", Math.signum(durationField8.compareTo(durationField13)) == -Math.signum(durationField13.compareTo(durationField8)));
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1222");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField7 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.year();
        org.joda.time.DurationField durationField10 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField12 = copticChronology0.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField1, and durationField7", !(durationField12.compareTo(durationField1) == 0) || (Math.signum(durationField12.compareTo(durationField7)) == Math.signum(durationField1.compareTo(durationField7))));
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1223");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime5.getWeekOfWeekyear();
        java.util.Date date8 = dateTime5.toDate();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField10 = copticChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.halfdayOfDay();
        org.joda.time.DurationField durationField15 = copticChronology9.days();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        int int18 = localDateTime17.getWeekyear();
        int int19 = localDateTime17.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.era();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withWeekOfWeekyear(22);
        int[] intArray24 = copticChronology9.get((org.joda.time.ReadablePartial) localDateTime17, (-9936000000L));
        org.joda.time.DurationField durationField25 = copticChronology9.weeks();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology9);
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime29 = dateTime26.withYear(981);
        java.util.Date date30 = dateTime29.toDate();
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology31.weekyearOfCentury();
        long long36 = dateTimeField34.roundFloor(0L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withEra(1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withEra(1);
        int int45 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.plusMinutes((int) 'u');
        org.joda.time.LocalDateTime.Property property52 = localDateTime47.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime47.withPeriodAdded(readablePeriod53, 182);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withSecondOfMinute(17);
        java.util.Locale locale60 = new java.util.Locale("java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-22T07:17:01.652");
        java.lang.String str61 = locale60.getDisplayCountry();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = locale65.getDisplayScript(locale66);
        java.lang.String str68 = dateTime63.toString("10", locale65);
        java.util.Set<java.lang.String> strSet69 = locale65.getUnicodeLocaleKeys();
        java.lang.String str70 = locale60.getDisplayVariant(locale65);
        java.lang.String str71 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime55, locale65);
        org.joda.time.DateTime dateTime72 = dateTime29.withFields((org.joda.time.ReadablePartial) localDateTime55);
        int int73 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime26", (instant0.compareTo(dateTime26) == 0) == instant0.equals(dateTime26));
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1224");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.minus(readableDuration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((java.lang.Object) dateTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime4.withMillisOfSecond((int) 'x');
        org.joda.time.DateTime dateTime10 = dateTime4.withYear(648);
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(0);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology13.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology13.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime19", (dateTime12.compareTo(dateTime19) == 0) == dateTime12.equals(dateTime19));
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1225");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 28);
        long long2 = instant1.getMillis();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField4 = copticChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = instant1.toMutableDateTime((org.joda.time.Chronology) copticChronology3);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology3.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1226");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate.Property property4 = localDate3.year();
        org.joda.time.LocalDate localDate6 = property4.addToCopy(419);
        org.joda.time.LocalDate localDate8 = property4.addWrapFieldToCopy(32769);
        org.joda.time.LocalDate localDate9 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property4.getLocalDate();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology11.era();
        java.lang.String str17 = copticChronology11.toString();
        org.joda.time.DurationField durationField18 = copticChronology11.hours();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology11.yearOfEra();
        org.joda.time.DurationField durationField20 = copticChronology11.halfdays();
        java.lang.String str21 = copticChronology11.toString();
        org.joda.time.DurationField durationField22 = copticChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology11.halfdayOfDay();
        long long26 = dateTimeField23.addWrapField(762L, 26421853);
        long long29 = dateTimeField23.add((long) 898, 227);
        long long31 = dateTimeField23.roundFloor(60000L);
        boolean boolean32 = property4.equals((java.lang.Object) long31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField18", Math.signum(durationField1.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField1)));
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1227");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        int int6 = localDate5.getWeekyear();
        org.joda.time.LocalDate localDate8 = localDate5.plusWeeks(17);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks(117);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate12.minus(readablePeriod13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.plus(readablePeriod15);
        org.joda.time.LocalDate localDate17 = localDate8.withFields((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate.Property property18 = localDate8.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDate12 and localDate17", (localDate12.compareTo(localDate17) == 0) == localDate12.equals(localDate17));
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1228");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology21 = copticChronology0.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone17);
        java.lang.String str24 = dateTimeZone17.getName((long) 72);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
        java.lang.String str26 = copticChronology25.toString();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology25.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField29 = copticChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology28.hourOfHalfday();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology28);
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) 10);
        int int34 = localDate33.getWeekyear();
        int int35 = localDate33.getEra();
        org.joda.time.LocalDate localDate37 = localDate33.minusMonths(53);
        org.joda.time.LocalDate localDate39 = localDate33.minusMonths(29);
        int int40 = localDate39.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate42 = localDate39.plus(readablePeriod41);
        org.joda.time.LocalDate localDate44 = localDate39.minusWeeks(764);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate47 = localDate39.minusDays(5);
        int int48 = localDate39.getEra();
        org.joda.time.LocalDate.Property property49 = localDate39.dayOfWeek();
        long long51 = copticChronology25.set((org.joda.time.ReadablePartial) localDate39, (long) 63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField29", Math.signum(durationField1.compareTo(durationField29)) == -Math.signum(durationField29.compareTo(durationField1)));
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1229");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.yearOfEra();
        java.lang.String str4 = copticChronology1.toString();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.minuteOfHour();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("ja");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 869);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = dateTimeZone14.getName((long) 2, locale18);
        java.lang.String str20 = dateTimeField9.getAsText((long) 72, locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localTime24.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfMonth(10);
        org.joda.time.DateTime dateTime31 = dateTime27.minusHours((int) (short) 100);
        int int32 = dateTime31.getCenturyOfEra();
        boolean boolean33 = dateTime31.isEqualNow();
        org.joda.time.DateTime dateTime35 = dateTime31.withMonthOfYear(6);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTime();
        org.joda.time.Chronology chronology37 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfHalfday();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromMillisOfDay((long) 604800, chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime42 = localTime39.withPeriodAdded(readablePeriod40, 550);
        java.lang.String str43 = localTime42.toString();
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology45.dayOfYear();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology45.weekyearOfCentury();
        org.joda.time.DurationField durationField49 = copticChronology45.seconds();
        org.joda.time.DurationField durationField50 = copticChronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology45.halfdayOfDay();
        org.joda.time.DurationField durationField52 = copticChronology45.months();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology45.secondOfDay();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.fromMillisOfDay((long) 30061659, (org.joda.time.Chronology) copticChronology45);
        org.joda.time.LocalTime[] localTimeArray55 = new org.joda.time.LocalTime[] { localTime42, localTime54 };
        org.joda.time.LocalTime[] localTimeArray56 = strSet21.toArray(localTimeArray55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField2 and durationField49", Math.signum(durationField2.compareTo(durationField49)) == -Math.signum(durationField49.compareTo(durationField2)));
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1230");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField8 = copticChronology0.seconds();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField11 = copticChronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology31 = copticChronology10.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        int int34 = calendar33.getWeeksInWeekYear();
        int int36 = calendar33.getActualMinimum(0);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.fromCalendarFields(calendar33);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks((int) (short) 100);
        int int40 = localDateTime37.size();
        boolean boolean41 = dateTimeZone27.isLocalDateTimeGap(localDateTime37);
        boolean boolean42 = dateTimeZone27.isFixed();
        org.joda.time.DateTime dateTime43 = dateTime9.withZone(dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField11", Math.signum(durationField1.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField1)));
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1231");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.hourOfHalfday();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.year();
        org.joda.time.DurationField durationField7 = copticChronology1.hours();
        org.joda.time.Chronology chronology8 = copticChronology1.withUTC();
        org.joda.time.DurationField durationField9 = copticChronology1.days();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.secondOfMinute();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 193, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField12 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField13 = copticChronology1.centuries();
        org.joda.time.DurationField durationField14 = copticChronology1.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField2, and durationField7", !(durationField14.compareTo(durationField2) == 0) || (Math.signum(durationField14.compareTo(durationField7)) == Math.signum(durationField2.compareTo(durationField7))));
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1232");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((java.lang.Object) chronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusHours((int) (byte) 1);
        int int15 = localDateTime11.getYearOfCentury();
        int[] intArray17 = copticChronology0.get((org.joda.time.ReadablePartial) localDateTime11, (-27648000000L));
        org.joda.time.DurationField durationField18 = copticChronology0.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField18, and durationField1", !(durationField1.compareTo(durationField18) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField18.compareTo(durationField1))));
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1233");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        int int7 = dateTime6.getCenturyOfEra();
        org.joda.time.DateTime.Property property8 = dateTime6.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readablePeriod11);
        boolean boolean14 = dateTime12.isBefore((long) 605);
        boolean boolean16 = dateTime12.isAfter((long) 35);
        org.joda.time.DateTime dateTime18 = dateTime12.minusWeeks(0);
        int int19 = dateTime12.getDayOfMonth();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localTime21.toDateTimeToday(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfMonth(10);
        org.joda.time.DateTime dateTime28 = dateTime24.minusHours((int) (short) 100);
        int int29 = dateTime28.getCenturyOfEra();
        boolean boolean30 = dateTime28.isEqualNow();
        org.joda.time.DateTime dateTime32 = dateTime28.withMonthOfYear(6);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTime();
        int int34 = dateTime33.getDayOfYear();
        int int35 = dateTime33.getSecondOfMinute();
        boolean boolean36 = dateTime33.isBeforeNow();
        int int37 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localTime39.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfMonth(10);
        org.joda.time.DateTime dateTime46 = dateTime42.minusHours((int) (short) 100);
        int int47 = dateTime46.getCenturyOfEra();
        int int48 = dateTime46.getWeekyear();
        org.joda.time.DateTime dateTime50 = dateTime46.plusMonths(37);
        boolean boolean51 = dateTime33.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology52.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        long long58 = copticChronology52.add(readablePeriod55, (long) 4, 2);
        org.joda.time.DateTimeField dateTimeField59 = copticChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology52.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology52.clockhourOfDay();
        org.joda.time.DurationField durationField62 = copticChronology52.seconds();
        org.joda.time.DateTime dateTime63 = dateTime46.toDateTime((org.joda.time.Chronology) copticChronology52);
        org.joda.time.DurationField durationField64 = copticChronology52.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime63", (dateTime28.compareTo(dateTime63) == 0) == dateTime28.equals(dateTime63));
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1234");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        long long14 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime2.minusSeconds(22);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.eras();
        org.joda.time.DateTime dateTime19 = dateTime2.toDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra(117);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField23 = copticChronology22.eras();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology22.weekOfWeekyear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withEra(1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withEra(1);
        int int33 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        long long42 = dateTimeZone39.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology43 = copticChronology22.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.Instant instant45 = org.joda.time.Instant.now();
        org.joda.time.Instant instant48 = instant45.withDurationAdded((long) '#', 17);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = instant45.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime50.minusMonths(604800);
        int int54 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime50);
        java.util.Calendar.Builder builder55 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withEra(1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withEra(1);
        int int64 = localDateTime57.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        int int65 = localDateTime61.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime61.minus(readableDuration66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.era();
        java.util.Date date69 = localDateTime67.toDate();
        int int70 = date69.getHours();
        java.util.Calendar.Builder builder71 = builder55.setInstant(date69);
        java.util.Calendar.Builder builder73 = builder71.setLenient(false);
        java.util.Calendar calendar74 = builder71.build();
        int int75 = calendar74.getWeeksInWeekYear();
        boolean boolean76 = dateTimeZone39.equals((java.lang.Object) int75);
        org.joda.time.DateTime dateTime77 = dateTime21.toDateTime(dateTimeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime19", (instant0.compareTo(dateTime19) == 0) == instant0.equals(dateTime19));
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1235");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(117);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime2.getZone();
        org.joda.time.DateTime.Property property10 = dateTime2.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField12 = copticChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology11.halfdayOfDay();
        org.joda.time.DurationField durationField17 = copticChronology11.days();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        int int20 = localDateTime19.getWeekyear();
        int int21 = localDateTime19.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.era();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withWeekOfWeekyear(22);
        int[] intArray26 = copticChronology11.get((org.joda.time.ReadablePartial) localDateTime19, (-9936000000L));
        org.joda.time.DurationField durationField27 = copticChronology11.weeks();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology11.millisOfDay();
        org.joda.time.DateTime dateTime29 = dateTime2.withChronology((org.joda.time.Chronology) copticChronology11);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology11.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime29", (instant0.compareTo(dateTime29) == 0) == instant0.equals(dateTime29));
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1236");
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField3 = copticChronology2.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.yearOfEra();
        java.lang.String str5 = copticChronology2.toString();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 11, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField9 = copticChronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology8.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.Chronology chronology20 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology24.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology29 = copticChronology8.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone25);
        java.lang.String str32 = dateTimeZone25.getName((long) 72);
        org.joda.time.Chronology chronology33 = copticChronology2.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology37 = copticChronology2.withUTC();
        org.joda.time.DurationField durationField38 = copticChronology2.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField3, durationField38, and durationField3", !(durationField3.compareTo(durationField38) == 0) || (Math.signum(durationField3.compareTo(durationField3)) == Math.signum(durationField38.compareTo(durationField3))));
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1237");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        long long14 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime2.minusSeconds(22);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.eras();
        org.joda.time.DateTime dateTime19 = dateTime2.toDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = instant20.toDateTime(dateTimeZone21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime22.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime22.toGregorianCalendar();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withEra(1);
        int int31 = localDateTime30.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDateTime30.getFieldType(0);
        boolean boolean34 = dateTime22.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withEra(1);
        int int39 = localDateTime38.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime38.getFieldType(0);
        boolean boolean42 = dateTime22.isSupported(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType41.getDurationType();
        boolean boolean44 = dateTime19.isSupported(dateTimeFieldType41);
        java.util.Date date45 = dateTime19.toDate();
        org.joda.time.DateTime dateTime47 = dateTime19.plusWeeks(2037);
        org.joda.time.DateTime.Property property48 = dateTime19.secondOfMinute();
        org.joda.time.DateTime dateTime50 = dateTime19.minusMonths(562);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.plus(readableDuration51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime19", (instant0.compareTo(dateTime19) == 0) == instant0.equals(dateTime19));
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1238");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = instant3.toDateTime(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra(100);
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTime();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = instant12.toDateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant12.withDurationAdded(readableDuration15, (int) ' ');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField19 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.hourOfHalfday();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology18);
        int int22 = localDate21.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate21.toDateTimeAtMidnight(dateTimeZone23);
        int int25 = instant17.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime(dateTimeZone26);
        boolean boolean28 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime24);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime11.toGregorianCalendar();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.halfdayOfDay();
        org.joda.time.DurationField durationField32 = copticChronology30.minutes();
        org.joda.time.DurationField durationField33 = copticChronology30.eras();
        boolean boolean34 = durationField33.isSupported();
        boolean boolean35 = gregorianCalendar29.equals((java.lang.Object) durationField33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField33, durationField19, and durationField32", !(durationField33.compareTo(durationField19) == 0) || (Math.signum(durationField33.compareTo(durationField32)) == Math.signum(durationField19.compareTo(durationField32))));
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1239");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        int int6 = localDate5.getWeekyear();
        int int7 = localDate5.getEra();
        org.joda.time.LocalDate localDate9 = localDate5.withMonthOfYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property10 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate12 = property10.roundCeilingCopy();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("ja");
        timeZone14.setID("UTC");
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14);
        calendar17.setTimeInMillis(762L);
        long long20 = calendar17.getTimeInMillis();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField22 = copticChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology21.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withEra(1);
        int int32 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology33 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        long long41 = dateTimeZone38.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology42 = copticChronology21.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone38);
        java.lang.String str45 = dateTimeZone38.getName((long) 72);
        long long47 = dateTimeZone38.nextTransition((long) 10);
        java.lang.String str48 = dateTimeZone38.toString();
        boolean boolean49 = calendar17.after((java.lang.Object) dateTimeZone38);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone("ja");
        java.time.ZoneId zoneId53 = timeZone52.toZoneId();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone(zoneId53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getTimeZone(zoneId53);
        calendar50.setTimeZone(timeZone55);
        calendar50.setMinimalDaysInFirstWeek(1);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getTimeZone("5");
        int int62 = timeZone60.getOffset((long) 22);
        calendar50.setTimeZone(timeZone60);
        boolean boolean64 = dateTimeZone38.equals((java.lang.Object) timeZone60);
        org.joda.time.Interval interval65 = localDate12.toInterval(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField22", Math.signum(durationField1.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField1)));
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1240");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime8 = dateTime2.plusMonths(117);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime2.getZone();
        org.joda.time.DateTime.Property property10 = dateTime2.minuteOfHour();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField12 = copticChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology11.halfdayOfDay();
        org.joda.time.DurationField durationField17 = copticChronology11.days();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        int int20 = localDateTime19.getWeekyear();
        int int21 = localDateTime19.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.era();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withWeekOfWeekyear(22);
        int[] intArray26 = copticChronology11.get((org.joda.time.ReadablePartial) localDateTime19, (-9936000000L));
        org.joda.time.DurationField durationField27 = copticChronology11.weeks();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology11.millisOfDay();
        org.joda.time.DateTime dateTime29 = dateTime2.withChronology((org.joda.time.Chronology) copticChronology11);
        int int30 = dateTime29.getDayOfYear();
        org.joda.time.Instant instant31 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = instant31.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withSecondOfMinute(2);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.minus(readableDuration36);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        boolean boolean39 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime37);
        int int40 = dateTime37.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime29", (instant0.compareTo(dateTime29) == 0) == instant0.equals(dateTime29));
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1241");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        int int9 = dateTime8.getCenturyOfEra();
        boolean boolean10 = dateTime8.isEqualNow();
        org.joda.time.DateTime dateTime12 = dateTime8.withMonthOfYear(6);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField14 = copticChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology13.centuryOfEra();
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTime((org.joda.time.Chronology) copticChronology13);
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTimeISO();
        int int21 = dateTime20.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime19", (dateTime20.compareTo(dateTime19) == 0) == dateTime20.equals(dateTime19));
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1242");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 602, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField2, durationField7, and durationField2", !(durationField2.compareTo(durationField7) == 0) || (Math.signum(durationField2.compareTo(durationField2)) == Math.signum(durationField7.compareTo(durationField2))));
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1243");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.Locale locale3 = dateTimeFormatter2.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField5.getMaximumValue(readablePartial6);
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.toLanguageTag();
        int int10 = dateTimeField5.getMaximumTextLength(locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withLocale(locale8);
        java.util.Locale locale12 = dateTimeFormatter2.getLocale();
        boolean boolean13 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField15 = copticChronology14.eras();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        int int25 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology30.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology35 = copticChronology14.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone31);
        java.lang.String str38 = dateTimeZone31.getName((long) 72);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31);
        java.lang.String str40 = copticChronology39.toString();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology39.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) copticChronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology44.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology44.weekyearOfCentury();
        org.joda.time.DurationField durationField48 = copticChronology44.seconds();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology44.minuteOfDay();
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField51 = copticChronology50.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology50.hourOfHalfday();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology50);
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) 10);
        int int56 = localDate55.getWeekyear();
        int int57 = localDate55.getEra();
        org.joda.time.LocalDate localDate59 = localDate55.minusMonths(53);
        int int60 = localDate59.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDate localDate63 = localDate59.withPeriodAdded(readablePeriod61, 225);
        int int64 = dateTimeField49.getMaximumValue((org.joda.time.ReadablePartial) localDate63);
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale67);
        java.lang.String str69 = locale67.getDisplayName();
        boolean boolean70 = locale67.hasExtensions();
        java.lang.String str71 = locale67.getCountry();
        long long72 = dateTimeField49.set((long) 777, "59", locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter43.withLocale(locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField15 and durationField48", Math.signum(durationField15.compareTo(durationField48)) == -Math.signum(durationField48.compareTo(durationField15)));
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1244");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        int int4 = localDate3.getMonthOfYear();
        org.joda.time.LocalDate.Property property5 = localDate3.weekyear();
        org.joda.time.LocalDate localDate6 = property5.roundHalfFloorCopy();
        int int7 = localDate6.getWeekOfWeekyear();
        int int8 = localDate6.getDayOfYear();
        org.joda.time.LocalDate localDate10 = localDate6.plusYears(762);
        java.util.Date date11 = localDate10.toDate();
        int int12 = localDate10.getCenturyOfEra();
        org.joda.time.LocalDate localDate14 = localDate10.withYear(1738);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = instant15.toDateTime(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.DateTime.Property property19 = dateTime17.millisOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) chronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.property(dateTimeFieldType26);
        boolean boolean28 = dateTime17.isSupported(dateTimeFieldType26);
        long long29 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime17.minusSeconds(22);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField33 = copticChronology32.eras();
        org.joda.time.DateTime dateTime34 = dateTime17.toDateTime((org.joda.time.Chronology) copticChronology32);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear(60);
        org.joda.time.DateTime dateTime38 = dateTime34.minusHours(23);
        org.joda.time.DateTime dateTime39 = localDate14.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField33", Math.signum(durationField1.compareTo(durationField33)) == -Math.signum(durationField33.compareTo(durationField1)));
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1245");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T07:17:19.066");
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField3 = copticChronology2.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.yearOfEra();
        java.lang.String str5 = copticChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology2.secondOfDay();
        int int7 = dateTime1.get(dateTimeField6);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime11 = localTime8.withFieldAdded(durationFieldType9, 312);
        org.joda.time.DateTime dateTime13 = dateTime1.withFieldAdded(durationFieldType9, 883);
        java.lang.String str14 = durationFieldType9.getName();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField16 = copticChronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = copticChronology15.getZone();
        org.joda.time.DurationField durationField19 = copticChronology15.millis();
        boolean boolean20 = durationFieldType9.isSupported((org.joda.time.Chronology) copticChronology15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField3 and durationField16", Math.signum(durationField3.compareTo(durationField16)) == -Math.signum(durationField16.compareTo(durationField3)));
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1246");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.plusYears((int) (short) 100);
        org.joda.time.DateTime dateTime8 = dateTime2.withWeekOfWeekyear(12);
        org.joda.time.DateTime dateTime10 = dateTime8.withCenturyOfEra(2000);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks(931);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfSecond(9);
        org.joda.time.DateTime.Property property15 = dateTime12.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1247");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalTime localTime6 = localTime3.withField(dateTimeFieldType4, (int) (byte) 10);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = instant7.toDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withSecondOfMinute(2);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readableDuration12);
        boolean boolean15 = dateTime9.equals((java.lang.Object) 52);
        org.joda.time.DateTime.Property property16 = dateTime9.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime18 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property19 = dateTime9.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime9", (instant7.compareTo(dateTime9) == 0) == instant7.equals(dateTime9));
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1248");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1249");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime2.toMutableDateTimeISO();
        java.lang.String str7 = mutableDateTime5.toString("1738-01-09");
        boolean boolean8 = mutableDateTime5.isBeforeNow();
        java.util.Date date9 = mutableDateTime5.toDate();
        long long10 = date9.getTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1250");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean7 = dateTime5.isAfterNow();
        org.joda.time.DateTime dateTime9 = dateTime5.plusYears(1737);
        org.joda.time.DateTime.Property property10 = dateTime5.secondOfDay();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localTime12.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfMonth(10);
        org.joda.time.DateTime dateTime19 = dateTime15.minusHours((int) (short) 100);
        org.joda.time.DateTime.Property property20 = dateTime19.year();
        java.lang.String str21 = property20.getName();
        org.joda.time.DateTime dateTime23 = property20.addWrapFieldToCopy(292272708);
        int int24 = property10.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime23.minusSeconds(39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime5", (instant0.compareTo(dateTime5) == 0) == instant0.equals(dateTime5));
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1251");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2, chronology14);
        org.joda.time.DateTime dateTime18 = dateTime2.plusYears(608);
        int int19 = dateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = dateTime2.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(811);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1252");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11");
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.roundHalfFloorCopy();
        java.util.Date date4 = dateTime3.toDate();
        int int5 = dateTime3.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        int int8 = dateTimeZone6.getStandardOffset((long) 849);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTime dateTime10 = dateTime3.withChronology((org.joda.time.Chronology) copticChronology9);
        org.joda.time.DateTime dateTime12 = dateTime3.plusWeeks(455);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime10", (dateTime3.compareTo(dateTime10) == 0) == dateTime3.equals(dateTime10));
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1253");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime2.minus(readableDuration5);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfMinute();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        java.util.Locale locale12 = dateTimeFormatter11.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial15 = null;
        int int16 = dateTimeField14.getMaximumValue(readablePartial15);
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale17.toLanguageTag();
        int int19 = dateTimeField14.getMaximumTextLength(locale17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter11.withLocale(locale17);
        java.lang.String str21 = locale17.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale17.getUnicodeLocaleAttributes();
        int int23 = property8.getMaximumShortTextLength(locale17);
        java.util.Set<java.lang.String> strSet24 = locale17.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1254");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("ja");
        timeZone1.setID("ja");
        timeZone1.setID("eras");
        timeZone1.setRawOffset(15);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = instant9.toDateTime(dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime11.toYearMonthDay();
        org.joda.time.DateTime dateTime16 = dateTime11.minusDays(5);
        boolean boolean17 = calendar8.after((java.lang.Object) dateTime16);
        int int19 = calendar8.getGreatestMinimum(11);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDate20.getFieldTypes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime11", (instant9.compareTo(dateTime11) == 0) == instant9.equals(dateTime11));
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1255");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField3 = copticChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.hourOfHalfday();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) 10);
        int int8 = localDate7.getWeekyear();
        int int9 = localDate7.getEra();
        java.util.Date date10 = localDate7.toDate();
        java.lang.String str11 = localDate7.toString();
        java.util.Locale locale15 = new java.util.Locale("java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-22T07:17:01.652");
        java.lang.String str16 = locale15.getDisplayCountry();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        java.lang.String str23 = dateTime18.toString("10", locale20);
        java.util.Set<java.lang.String> strSet24 = locale20.getUnicodeLocaleKeys();
        java.lang.String str25 = locale15.getDisplayVariant(locale20);
        java.lang.String str26 = localDate7.toString("1738-06-15", locale20);
        org.joda.time.Instant instant27 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = instant27.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withSecondOfMinute(2);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.minus(readableDuration32);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime33.secondOfMinute();
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = null;
        org.joda.time.format.DateTimeParser dateTimeParser37 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter36, dateTimeParser37);
        java.util.Locale locale39 = dateTimeFormatter38.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial42 = null;
        int int43 = dateTimeField41.getMaximumValue(readablePartial42);
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.toLanguageTag();
        int int46 = dateTimeField41.getMaximumTextLength(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter38.withLocale(locale44);
        java.lang.String str48 = locale44.getISO3Language();
        java.util.Set<java.lang.String> strSet49 = locale44.getUnicodeLocaleAttributes();
        int int50 = property35.getMaximumShortTextLength(locale44);
        java.lang.String str51 = locale20.getDisplayVariant(locale44);
        java.util.Calendar calendar52 = dateTime1.toCalendar(locale44);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("ja");
        java.time.ZoneId zoneId55 = timeZone54.toZoneId();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone(zoneId55);
        java.util.TimeZone.setDefault(timeZone61);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getTimeZone("5");
        boolean boolean65 = timeZone61.hasSameRules(timeZone64);
        calendar52.setTimeZone(timeZone61);
        calendar52.set(0, 0, 904, 26576295, 602);
        calendar52.set(74, 108, 986, 26694376, 228, 659);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1256");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime2.toGregorianCalendar();
        org.joda.time.DateTime.Property property7 = dateTime2.era();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) dateTime2);
        org.joda.time.LocalTime localTime10 = localTime8.minusHours(586);
        org.joda.time.LocalTime localTime12 = localTime8.withMillisOfSecond(507);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1257");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = instant3.toDateTime(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra(100);
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTime();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = instant12.toDateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant12.withDurationAdded(readableDuration15, (int) ' ');
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField19 = copticChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.hourOfHalfday();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology18);
        int int22 = localDate21.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate21.toDateTimeAtMidnight(dateTimeZone23);
        int int25 = instant17.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime(dateTimeZone26);
        boolean boolean28 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime30 = dateTime11.withMillisOfDay(517);
        org.joda.time.LocalDate localDate31 = dateTime30.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime5", (instant3.compareTo(dateTime5) == 0) == instant3.equals(dateTime5));
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1258");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        int int4 = localDate3.getMonthOfYear();
        org.joda.time.LocalDate.Property property5 = localDate3.weekyear();
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = instant10.toDateTime(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime15 = dateTime12.withCenturyOfEra(100);
        boolean boolean16 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime17 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        int int19 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        java.lang.String str21 = dateTime18.toString("50903");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime18", (instant10.compareTo(dateTime18) == 0) == instant10.equals(dateTime18));
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1259");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.plus(readableDuration4);
        org.joda.time.Instant instant8 = instant3.withDurationAdded((-259200000L), 981);
        org.joda.time.MutableDateTime mutableDateTime9 = instant3.toMutableDateTimeISO();
        org.joda.time.Instant instant11 = instant3.plus((long) 134);
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField13 = copticChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology12.hourOfHalfday();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology12);
        int int16 = localDate15.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtMidnight(dateTimeZone17);
        int int19 = dateTime18.getEra();
        int int20 = dateTime18.getMonthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime18.withMillisOfDay(22);
        boolean boolean23 = instant11.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Instant instant25 = instant11.plus((long) 505);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.plus(readableDuration26);
        org.joda.time.Instant instant29 = instant25.withMillis(1645514284102L);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant32 = instant25.withDurationAdded(readableDuration30, 317);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime9", (instant3.compareTo(mutableDateTime9) == 0) == instant3.equals(mutableDateTime9));
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1260");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withEra(1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        int int9 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.Chronology chronology10 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMinuteOfHour((int) '#');
        boolean boolean14 = strSet0.equals((java.lang.Object) localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy(706);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = instant18.toDateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.DateTime dateTime23 = dateTime20.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar24 = dateTime20.toGregorianCalendar();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withEra(1);
        int int29 = localDateTime28.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDateTime28.getFieldType(0);
        boolean boolean32 = dateTime20.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = dateTime20.withMillis((long) (short) 1);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime37 = dateTime34.minusYears(970);
        int int38 = property15.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property39 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime20", (instant18.compareTo(dateTime20) == 0) == instant18.equals(dateTime20));
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1261");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2, chronology14);
        org.joda.time.DateTime dateTime18 = dateTime2.minusSeconds((int) (byte) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) chronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfFloorCopy();
        int int26 = localDateTime25.getDayOfMonth();
        org.joda.time.DateTime dateTime27 = dateTime2.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.DateTime dateTime29 = dateTime2.plusDays(2046);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        int int31 = dateTime29.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1262");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMinuteOfHour((int) '#');
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minus(readableDuration13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        boolean boolean21 = localDateTime18.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra(1);
        int int30 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusMinutes((int) 'u');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime32);
        int int38 = localDateTime20.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime20.withCenturyOfEra(3);
        java.util.Date date41 = localDateTime20.toDate();
        boolean boolean42 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Instant instant43 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = instant43.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withSecondOfMinute(2);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withEra(1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withEra(1);
        int int56 = localDateTime49.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.Chronology chronology57 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime45, chronology57);
        int int60 = localDateTime59.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.minusWeeks(472);
        org.joda.time.Instant instant63 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = instant63.toDateTime(dateTimeZone64);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfEra();
        org.joda.time.DateTime.Property property67 = dateTime65.millisOfDay();
        boolean boolean69 = dateTime65.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime71 = dateTime65.plusMonths(117);
        org.joda.time.DateTime.Property property72 = dateTime71.millisOfDay();
        org.joda.time.DateTime dateTime73 = property72.roundFloorCopy();
        org.joda.time.DateTime dateTime74 = property72.withMaximumValue();
        org.joda.time.DateTime dateTime76 = property72.addToCopy(26184082L);
        org.joda.time.DateTime dateTime77 = property72.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateTime.Property property79 = dateTime77.property(dateTimeFieldType78);
        boolean boolean80 = localDateTime62.isSupported(dateTimeFieldType78);
        int int81 = localDateTime20.get(dateTimeFieldType78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime45", (instant43.compareTo(dateTime45) == 0) == instant43.equals(dateTime45));
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1263");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.yearOfEra();
        java.lang.String str4 = copticChronology1.toString();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField6 = copticChronology1.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField2, durationField6, and durationField2", !(durationField2.compareTo(durationField6) == 0) || (Math.signum(durationField2.compareTo(durationField2)) == Math.signum(durationField6.compareTo(durationField2))));
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1264");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfDay();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField6 = copticChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.hourOfHalfday();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology5);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) 10);
        int int11 = localDate10.getWeekyear();
        java.util.Date date12 = localDate10.toDate();
        org.joda.time.LocalDate localDate14 = localDate10.plusWeeks(171);
        org.joda.time.LocalDate localDate16 = localDate10.plusMonths(12);
        org.joda.time.LocalDate localDate18 = localDate10.withYearOfCentury(1);
        org.joda.time.LocalDate.Property property19 = localDate18.weekOfWeekyear();
        org.joda.time.LocalDate localDate21 = property19.addWrapFieldToCopy(826);
        org.joda.time.LocalDate localDate23 = localDate21.withYear(236);
        int int24 = dateTimeField4.getMaximumValue((org.joda.time.ReadablePartial) localDate21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField6", Math.signum(durationField1.compareTo(durationField6)) == -Math.signum(durationField6.compareTo(durationField1)));
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1265");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        int int6 = localDate5.getWeekyear();
        org.joda.time.LocalDate localDate8 = localDate5.withYear(3);
        org.joda.time.LocalDate.Property property9 = localDate5.year();
        java.util.Date date10 = localDate5.toDate();
        org.joda.time.LocalDate localDate12 = localDate5.withWeekOfWeekyear(17);
        org.joda.time.LocalDate.Property property13 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField16 = copticChronology15.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.hourOfHalfday();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology15);
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) 10);
        int int21 = localDate20.getWeekyear();
        org.joda.time.LocalDate localDate23 = localDate20.plusWeeks(17);
        int int24 = localDate23.getWeekyear();
        java.lang.String str25 = localDate23.toString();
        org.joda.time.LocalDate localDate27 = localDate23.plusYears(2);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate23.minus(readablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = localDate29.toInterval(dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate29.plusDays(605);
        org.joda.time.DateTime dateTime34 = localDate33.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale38.getDisplayScript(locale39);
        java.lang.String str41 = dateTime36.toString("10", locale38);
        org.joda.time.DateTime dateTime43 = dateTime36.withDayOfYear(345);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.plus(readablePeriod44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readablePeriod46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean49 = dateTime47.isSupported(dateTimeFieldType48);
        boolean boolean50 = localDate33.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDate localDate52 = localDate14.withField(dateTimeFieldType48, 1701);
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField54 = copticChronology53.eras();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology53.weekOfWeekyear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withEra(1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withEra(1);
        int int64 = localDateTime57.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.Chronology chronology65 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = chronology69.getZone();
        long long73 = dateTimeZone70.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology74 = copticChronology53.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone70);
        java.lang.String str77 = dateTimeZone70.getName((long) 72);
        org.joda.time.chrono.CopticChronology copticChronology78 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone70);
        java.lang.String str79 = copticChronology78.toString();
        org.joda.time.DateTimeField dateTimeField80 = copticChronology78.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType48.getField((org.joda.time.Chronology) copticChronology78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField54", Math.signum(durationField1.compareTo(durationField54)) == -Math.signum(durationField54.compareTo(durationField1)));
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1266");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.halfdayOfDay();
        long long7 = dateTimeField4.getDifferenceAsLong((long) 0, (long) (short) 0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        int int16 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMonths(1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.dayOfYear();
        org.joda.time.tz.NameProvider nameProvider23 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str27 = nameProvider23.getShortName(locale24, "", "");
        java.lang.String str28 = locale24.getDisplayScript();
        java.lang.String str29 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime18, (-38088), locale24);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime18.minusMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.minusMinutes(1200);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) chronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfFloorCopy();
        int int41 = property39.getMaximumValue();
        java.lang.Object obj42 = null;
        boolean boolean43 = property39.equals(obj42);
        org.joda.time.LocalDateTime localDateTime44 = property39.roundHalfFloorCopy();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withFieldAdded(durationFieldType45, 26369302);
        boolean boolean48 = localDateTime33.isSupported(durationFieldType45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.secondOfMinute();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        int int54 = property51.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime56 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField59 = copticChronology58.eras();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology58.yearOfEra();
        java.lang.String str61 = copticChronology58.toString();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology58);
        org.joda.time.DateTimeField dateTimeField63 = copticChronology58.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology58.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology58.weekyear();
        long long67 = dateTimeField65.roundHalfCeiling(51494400036L);
        int int68 = dateTime55.get(dateTimeField65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField59", Math.signum(durationField1.compareTo(durationField59)) == -Math.signum(durationField59.compareTo(durationField1)));
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1267");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology12.minuteOfDay();
        boolean boolean17 = durationFieldType11.isSupported((org.joda.time.Chronology) copticChronology12);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology12.millisOfSecond();
        java.lang.String str22 = copticChronology12.toString();
        org.joda.time.DurationField durationField23 = copticChronology12.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField23, and durationField10", !(durationField10.compareTo(durationField23) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField23.compareTo(durationField10))));
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1268");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology21 = copticChronology0.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone17);
        java.lang.String str24 = dateTimeZone17.getName((long) 72);
        long long26 = dateTimeZone17.nextTransition((long) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfYear();
        java.lang.String str30 = copticChronology28.toString();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = copticChronology28.add(readablePeriod31, 26295326L, 11);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology28);
        org.joda.time.DurationField durationField36 = copticChronology28.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField36, and durationField1", !(durationField1.compareTo(durationField36) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField36.compareTo(durationField1))));
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1269");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        int int16 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withEra(1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withEra(1);
        int int27 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        int int28 = localDateTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withEra(1);
        int int33 = localDateTime32.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = localDateTime32.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.withField(dateTimeFieldType35, 7);
        int[] intArray39 = chronology17.get((org.joda.time.ReadablePartial) localDateTime37, (long) (byte) 10);
        org.joda.time.Chronology chronology40 = chronology17.withUTC();
        org.joda.time.DurationField durationField41 = durationFieldType7.getField(chronology17);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(0L, chronology17);
        boolean boolean43 = durationFieldType5.isSupported(chronology17);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology17);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField46 = copticChronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology45.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withEra(1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withEra(1);
        int int58 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.Chronology chronology59 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withEra(1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withEra(1);
        int int69 = localDateTime62.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        int int70 = localDateTime66.getMillisOfSecond();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(chronology71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withEra(1);
        int int75 = localDateTime74.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = localDateTime74.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime66.withField(dateTimeFieldType77, 7);
        int[] intArray81 = chronology59.get((org.joda.time.ReadablePartial) localDateTime79, (long) (byte) 10);
        int int82 = dateTimeField48.getMaximumValue((org.joda.time.ReadablePartial) localDateTime49, intArray81);
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        java.lang.String str85 = dateTimeField48.getAsShortText(510, locale84);
        java.util.Calendar calendar86 = dateTime44.toCalendar(locale84);
        java.lang.String str87 = locale84.getDisplayCountry();
        int int88 = dateTimeField4.getMaximumTextLength(locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField41", Math.signum(durationField1.compareTo(durationField41)) == -Math.signum(durationField41.compareTo(durationField1)));
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1270");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        long long3 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant6 = instant1.withMillis((long) 168);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 620);
        org.joda.time.Instant instant11 = instant9.minus((long) (-292275054));
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant9.plus(readableDuration12);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.halfdayOfDay();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) 777, (org.joda.time.Chronology) copticChronology15);
        org.joda.time.DurationField durationField18 = copticChronology15.eras();
        org.joda.time.MutableDateTime mutableDateTime19 = instant13.toMutableDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.Instant instant22 = instant13.withDurationAdded(1645514604799L, 4657953);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime19", (instant13.compareTo(mutableDateTime19) == 0) == instant13.equals(mutableDateTime19));
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1271");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField6 = copticChronology0.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField6, and durationField1", !(durationField1.compareTo(durationField6) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField6.compareTo(durationField1))));
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1272");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        int int6 = localDate5.getWeekyear();
        int int7 = localDate5.getEra();
        org.joda.time.LocalDate localDate9 = localDate5.minusMonths(53);
        int int10 = localDate9.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate13 = localDate9.withPeriodAdded(readablePeriod11, 225);
        org.joda.time.LocalDate.Property property14 = localDate13.weekyear();
        org.joda.time.LocalDate localDate16 = localDate13.withCenturyOfEra(53);
        java.lang.String str17 = localDate16.toString();
        org.joda.time.LocalDate localDate19 = localDate16.minusDays(9);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime();
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField22 = copticChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology21.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withEra(1);
        int int32 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology33 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        long long41 = dateTimeZone38.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology42 = copticChronology21.withZone(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        boolean boolean45 = dateTimeZone38.isStandardOffset(43860512L);
        org.joda.time.DateMidnight dateMidnight46 = localDate16.toDateMidnight(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField22", Math.signum(durationField1.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField1)));
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1273");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withEra(1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra(1);
        int int10 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.Chronology chronology11 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfDay();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale16);
        java.lang.String str18 = locale16.getDisplayName();
        boolean boolean19 = locale16.hasExtensions();
        java.util.Locale.setDefault(locale16);
        long long21 = dateTimeField13.set((long) 692, "8", locale16);
        java.lang.String str24 = nameProvider0.getName(locale16, "\u516c\u5143", "DateTimeField[weekyearOfCentury]");
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField26 = copticChronology25.eras();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology25.weekOfWeekyear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withEra(1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withEra(1);
        int int36 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Chronology chronology37 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology41.getZone();
        long long45 = dateTimeZone42.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology46 = copticChronology25.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone42);
        java.lang.String str49 = dateTimeZone42.getName((long) 72);
        long long51 = dateTimeZone42.nextTransition((long) 10);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone42);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str56 = locale55.getScript();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = dateTimeZone42.getName((long) 3, locale55);
        java.lang.String str61 = nameProvider0.getName(locale55, "2022-02-22T07:19:44.507", "java.util.GregorianCalendar[time=1645514401395,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=1,MILLISECOND=395,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.TimeZone timeZone63 = java.util.TimeZone.getTimeZone("ja");
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone63);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        boolean boolean67 = dateTimeZone65.isStandardOffset((long) 869);
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str70 = dateTimeZone65.getName((long) 2, locale69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale69);
        java.lang.String str74 = nameProvider0.getName(locale69, "Property[minuteOfDay]", "java.util.GregorianCalendar[time=2402896857001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=860,ERA=1,YEAR=2046,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=57,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.chrono.CopticChronology copticChronology77 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField78 = copticChronology77.halfdays();
        org.joda.time.DateTimeField dateTimeField79 = copticChronology77.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField80 = copticChronology77.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField81 = copticChronology77.halfdayOfDay();
        org.joda.time.Chronology chronology82 = copticChronology77.withUTC();
        org.joda.time.DateTimeField dateTimeField83 = copticChronology77.hourOfHalfday();
        int int86 = dateTimeField83.getDifference((long) ' ', (long) 1);
        java.util.Locale locale88 = java.util.Locale.getDefault();
        java.lang.String str89 = dateTimeField83.getAsShortText(1645514194831L, locale88);
        java.lang.String str92 = nameProvider0.getName(locale88, "2022-02-22T07:23:31.446", "German");
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField26 and durationField78", Math.signum(durationField26.compareTo(durationField78)) == -Math.signum(durationField78.compareTo(durationField26)));
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1274");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra(1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        boolean boolean12 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusMinutes((int) 'u');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property29 = localDateTime11.secondOfMinute();
        org.joda.time.DateTime dateTime30 = dateTime5.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField33 = copticChronology32.eras();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology32.yearOfEra();
        java.lang.String str35 = copticChronology32.toString();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology32);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology32.minuteOfDay();
        org.joda.time.Chronology chronology38 = copticChronology32.withUTC();
        org.joda.time.DateTime dateTime39 = dateTime30.withChronology((org.joda.time.Chronology) copticChronology32);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withEra(1);
        int int44 = localDateTime43.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = localDateTime43.getFieldType(0);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plus(readablePeriod47);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField50 = copticChronology49.eras();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology49.weekOfWeekyear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withEra(1);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withEra(1);
        int int60 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.Chronology chronology61 = localDateTime57.getChronology();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = chronology65.getZone();
        long long69 = dateTimeZone66.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology70 = copticChronology49.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone66);
        java.lang.String str73 = dateTimeZone66.getNameKey((long) 2);
        org.joda.time.DateTime dateTime74 = localDateTime43.toDateTime(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(dateTimeZone66);
        long long77 = copticChronology32.set((org.joda.time.ReadablePartial) localDateTime75, (long) 545);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime39", (instant0.compareTo(dateTime39) == 0) == instant0.equals(dateTime39));
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1275");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology12.minuteOfDay();
        boolean boolean17 = durationFieldType11.isSupported((org.joda.time.Chronology) copticChronology12);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology12.minuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        int int28 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.Chronology chronology29 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        long long37 = dateTimeZone34.convertLocalToUTC((long) '#', false);
        long long39 = dateTimeZone34.nextTransition((-2004229859000L));
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) '#', dateTimeZone34);
        org.joda.time.DateTime dateTime42 = dateTime40.minusDays(987);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths(887);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.parse("11");
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfMonth();
        org.joda.time.DateTime dateTime49 = property47.addWrapFieldToCopy(23);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime49.getZone();
        long long54 = dateTimeZone51.convertLocalToUTC(1645507282508L, false);
        org.joda.time.DateTime dateTime55 = dateTime44.withZoneRetainFields(dateTimeZone51);
        org.joda.time.Chronology chronology56 = copticChronology12.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField57 = copticChronology12.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField57, and durationField10", !(durationField10.compareTo(durationField57) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField57.compareTo(durationField10))));
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1276");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime6.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.era();
        java.lang.String str15 = copticChronology9.toString();
        org.joda.time.DurationField durationField16 = copticChronology9.hours();
        org.joda.time.DateTime dateTime17 = dateTime6.toDateTime((org.joda.time.Chronology) copticChronology9);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        boolean boolean19 = calendar18.isWeekDateSupported();
        calendar18.clear(1);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromCalendarFields(calendar18);
        boolean boolean23 = calendar18.isWeekDateSupported();
        java.util.TimeZone timeZone24 = calendar18.getTimeZone();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromCalendarFields(calendar18);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.halfdayOfDay();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay((long) 777, (org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalTime.Property property32 = localTime29.property(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getDurationType();
        int int34 = localTime25.get(dateTimeFieldType31);
        org.joda.time.DateTime.Property property35 = dateTime17.property(dateTimeFieldType31);
        org.joda.time.DateTime dateTime38 = dateTime17.withDurationAdded((long) 271, 742);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(86301145);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime17", (dateTime6.compareTo(dateTime17) == 0) == dateTime6.equals(dateTime17));
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1277");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1645514265582L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear(138);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis(749);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        int int15 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int16 = localDateTime8.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withDurationAdded(readableDuration17, 388);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField21 = copticChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology20.hourOfDay();
        boolean boolean23 = localDateTime8.equals((java.lang.Object) copticChronology20);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology20.halfdayOfDay();
        org.joda.time.DateTime dateTime26 = dateTime6.toDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.DurationField durationField27 = copticChronology20.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime26", (dateTime6.compareTo(dateTime26) == 0) == dateTime6.equals(dateTime26));
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1278");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = dateTime1.toString("10", locale3);
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strSet7.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator9 = strSet7.spliterator();
        int int10 = strSet7.size();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField12 = copticChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology11.hourOfHalfday();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology11);
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) 10);
        int int17 = localDate16.getWeekyear();
        org.joda.time.LocalDate localDate19 = localDate16.withYear(3);
        org.joda.time.LocalDate.Property property20 = localDate16.year();
        org.joda.time.LocalDate localDate21 = property20.roundCeilingCopy();
        boolean boolean22 = strSet7.remove((java.lang.Object) localDate21);
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet7.spliterator();
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField26 = copticChronology25.eras();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology25.yearOfEra();
        java.lang.String str28 = copticChronology25.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology25);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology25.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone32 = copticChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology25.minuteOfHour();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("ja");
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        boolean boolean40 = dateTimeZone38.isStandardOffset((long) 869);
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str43 = dateTimeZone38.getName((long) 2, locale42);
        java.lang.String str44 = dateTimeField33.getAsText((long) 72, locale42);
        java.util.Set<java.lang.String> strSet45 = locale42.getUnicodeLocaleAttributes();
        int int46 = strSet45.size();
        java.lang.String[] strArray49 = new java.lang.String[] { "English (Canada)", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        java.lang.Object[] objArray52 = strSet50.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList58);
        java.util.Locale locale61 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale64);
        java.lang.String str66 = locale64.getDisplayName();
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale69);
        java.lang.String str71 = locale69.getDisplayName();
        boolean boolean72 = locale69.hasExtensions();
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale61, locale62, locale63, locale64, locale67, locale68, locale69 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList74, filteringMode76);
        boolean boolean78 = strSet50.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54);
        boolean boolean79 = strSet45.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54);
        boolean boolean80 = strSet7.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField26", Math.signum(durationField12.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField12)));
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1279");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        long long21 = dateTimeZone18.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology22 = copticChronology1.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone18);
        java.lang.String str25 = dateTimeZone18.getName((long) 72);
        long long27 = dateTimeZone18.nextTransition((long) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(1645514286443L, (org.joda.time.Chronology) copticChronology29);
        java.lang.String str32 = copticChronology29.toString();
        org.joda.time.DurationField durationField33 = copticChronology29.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField2, durationField33, and durationField2", !(durationField2.compareTo(durationField33) == 0) || (Math.signum(durationField2.compareTo(durationField2)) == Math.signum(durationField33.compareTo(durationField2))));
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1280");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekyearOfCentury();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay((long) 388, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.DurationField durationField9 = property6.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField2, durationField9, and durationField2", !(durationField2.compareTo(durationField9) == 0) || (Math.signum(durationField2.compareTo(durationField2)) == Math.signum(durationField9.compareTo(durationField2))));
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1281");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(161);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury(70);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(185);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        int int16 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.Chronology chronology17 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.eras();
        org.joda.time.DurationFieldType durationFieldType19 = durationField18.getType();
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology20.minuteOfDay();
        boolean boolean25 = durationFieldType19.isSupported((org.joda.time.Chronology) copticChronology20);
        org.joda.time.DateTimeField dateTimeField26 = copticChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology20.monthOfYear();
        org.joda.time.DateTime dateTime28 = dateTime7.toDateTime((org.joda.time.Chronology) copticChronology20);
        org.joda.time.DateTimeField dateTimeField29 = copticChronology20.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime28", (dateTime7.compareTo(dateTime28) == 0) == dateTime7.equals(dateTime28));
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1282");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        long long9 = copticChronology0.getDateTimeMillis((long) 869, 20, (int) (byte) 1, 17, 550);
        org.joda.time.DurationField durationField10 = copticChronology0.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField10, and durationField1", !(durationField1.compareTo(durationField10) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField10.compareTo(durationField1))));
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1283");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        int int7 = dateTime6.getCenturyOfEra();
        org.joda.time.DateTime.Property property8 = dateTime6.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.minus(readablePeriod9);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField17 = copticChronology13.seconds();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 32, (org.joda.time.Chronology) copticChronology13);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        boolean boolean22 = copticChronology13.equals((java.lang.Object) dateTime20);
        org.joda.time.DurationField durationField23 = copticChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology13.dayOfYear();
        org.joda.time.DurationField durationField25 = copticChronology13.halfdays();
        org.joda.time.DateTime dateTime26 = dateTime10.toDateTime((org.joda.time.Chronology) copticChronology13);
        int int27 = dateTime10.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime26", (dateTime10.compareTo(dateTime26) == 0) == dateTime10.equals(dateTime26));
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1284");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology5 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField8 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField8", Math.signum(durationField1.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField1)));
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1285");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology3.minuteOfDay();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField9 = copticChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology8.hourOfHalfday();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology8);
        int int12 = localDate11.getMonthOfYear();
        org.joda.time.LocalDate.Property property13 = localDate11.weekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        java.util.Locale locale18 = dateTimeFormatter17.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial21 = null;
        int int22 = dateTimeField20.getMaximumValue(readablePartial21);
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.toLanguageTag();
        int int25 = dateTimeField20.getMaximumTextLength(locale23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter17.withLocale(locale23);
        java.lang.String str27 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDate11, 11, locale23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withLocale(locale23);
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder29.clear();
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale.Builder builder33 = builder30.setLanguageTag("UTC");
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField35 = copticChronology34.eras();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology34.yearOfEra();
        java.lang.String str37 = copticChronology34.toString();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology34.halfdayOfDay();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = locale40.getDisplayName();
        boolean boolean43 = locale40.hasExtensions();
        java.lang.String str44 = dateTimeField38.getAsShortText(98, locale40);
        java.util.Locale locale45 = locale40.stripExtensions();
        java.util.Locale.Builder builder46 = builder30.setLocale(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withLocale(locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField35", Math.signum(durationField9.compareTo(durationField35)) == -Math.signum(durationField35.compareTo(durationField9)));
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1286");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = copticChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 70, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.dayOfYear();
        org.joda.time.DurationField durationField9 = copticChronology1.seconds();
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = instant10.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withSecondOfMinute(2);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withEra(1);
        int int23 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime12, chronology24);
        int int27 = localDateTime26.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYear(23);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDateTime26.toDateTime(dateTimeZone30);
        int int33 = localDateTime26.getCenturyOfEra();
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology34.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology34.clockhourOfHalfday();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology34);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology34.year();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology34.yearOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withEra(1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withEra(1);
        int int51 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        int int52 = localDateTime48.getMillisOfSecond();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withEra(1);
        int int57 = localDateTime56.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDateTime56.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime48.withField(dateTimeFieldType59, 7);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withYear(0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime65 = property64.withMaximumValue();
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.plusMinutes(122);
        int[] intArray70 = copticChronology34.get((org.joda.time.ReadablePartial) localDateTime68, 26608810L);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime26, intArray70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime40", (instant10.compareTo(dateTime40) == 0) == instant10.equals(dateTime40));
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1287");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField2 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField5 = copticChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.era();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) chronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusHours((int) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        int int20 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime22.getFieldTypes();
        long long25 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime22, (long) 36);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField27 = copticChronology26.eras();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology26.weekOfWeekyear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withEra(1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withEra(1);
        int int37 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology38 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology42.getZone();
        long long46 = dateTimeZone43.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology47 = copticChronology26.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone43);
        java.lang.String str50 = dateTimeZone43.getName((long) 72);
        int int52 = dateTimeZone43.getOffsetFromLocal((long) 6);
        long long54 = dateTimeZone43.convertUTCToLocal((long) 169);
        long long57 = dateTimeZone43.convertLocalToUTC((long) 692, true);
        java.lang.String str59 = dateTimeZone43.getNameKey(26184082L);
        org.joda.time.Instant instant60 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = instant60.toDateTime(dateTimeZone61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfEra();
        org.joda.time.DateTime.Property property64 = dateTime62.millisOfDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((java.lang.Object) chronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.property(dateTimeFieldType71);
        boolean boolean73 = dateTime62.isSupported(dateTimeFieldType71);
        org.joda.time.DateTime.Property property74 = dateTime62.weekyear();
        org.joda.time.DateTime dateTime75 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.chrono.CopticChronology copticChronology76 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField77 = copticChronology76.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology76.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        long long82 = copticChronology76.add(readablePeriod79, (long) 4, 2);
        org.joda.time.DateTimeField dateTimeField83 = copticChronology76.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField84 = copticChronology76.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField85 = copticChronology76.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField86 = copticChronology76.monthOfYear();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime62, (org.joda.time.Chronology) copticChronology76);
        int int88 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime89 = localDateTime22.toDateTime(dateTimeZone43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField2 and durationField27", Math.signum(durationField2.compareTo(durationField27)) == -Math.signum(durationField27.compareTo(durationField2)));
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1288");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        int int5 = localDateTime1.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMillis(9);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusHours(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime1.minuteOfHour();
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("ja");
        timeZone13.setID("ja");
        timeZone13.setID("eras");
        timeZone13.setRawOffset((int) (byte) 1);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("ja");
        timeZone21.setID("UTC");
        boolean boolean24 = timeZone13.hasSameRules(timeZone21);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone21);
        java.util.Calendar.Builder builder26 = builder11.setTimeZone(timeZone21);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) chronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str38 = nameProvider34.getShortName(locale35, "", "");
        java.lang.String str39 = property32.getAsShortText(locale35);
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.lang.String str44 = nameProvider40.getShortName(locale41, "", "");
        java.lang.String str45 = locale35.getDisplayCountry(locale41);
        java.util.Calendar.Builder builder46 = builder11.setLocale(locale35);
        java.util.Locale locale50 = new java.util.Locale("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=339,MONTH=0,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=48,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=-1,MINUTE=26157846,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]", "00:00:00.100", "2022-02-22T07:16:55.252");
        java.util.Calendar.Builder builder51 = builder11.setLocale(locale50);
        java.lang.String str52 = locale50.getDisplayLanguage();
        int int53 = property10.getMaximumShortTextLength(locale50);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getTimeZone("ja");
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        timeZone55.setRawOffset(0);
        int int60 = timeZone55.getRawOffset();
        timeZone55.setRawOffset(2070);
        java.util.Locale.Category category63 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.lang.String str65 = locale64.toLanguageTag();
        java.util.Locale.setDefault(category63, locale64);
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale67);
        java.lang.String str69 = locale67.getDisplayName();
        boolean boolean70 = locale67.hasExtensions();
        java.lang.String str71 = locale67.getCountry();
        java.lang.String str72 = locale67.getDisplayVariant();
        java.util.Locale.setDefault(category63, locale67);
        java.util.Locale locale74 = java.util.Locale.getDefault(category63);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone55, locale74);
        java.lang.String str76 = property10.getAsShortText(locale74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar56", (calendar25.compareTo(calendar56) == 0) == calendar25.equals(calendar56));
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1289");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.yearOfEra();
        java.lang.String str4 = copticChronology1.toString();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.secondOfMinute();
        org.joda.time.DurationField durationField11 = dateTimeField10.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField2, durationField11, and durationField2", !(durationField2.compareTo(durationField11) == 0) || (Math.signum(durationField2.compareTo(durationField2)) == Math.signum(durationField11.compareTo(durationField2))));
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1290");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withEra(1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        int int9 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.Chronology chronology10 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DurationFieldType durationFieldType12 = durationField11.getType();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology13.minuteOfDay();
        boolean boolean18 = durationFieldType12.isSupported((org.joda.time.Chronology) copticChronology13);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology13.era();
        boolean boolean21 = instant0.equals((java.lang.Object) dateTimeField20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra(1);
        int int30 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        int int31 = localDateTime27.getMillisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withEra(1);
        int int36 = localDateTime35.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = localDateTime35.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.withField(dateTimeFieldType38, 7);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime27.plus(readablePeriod41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.weeks();
        boolean boolean44 = localDateTime42.isSupported(durationFieldType43);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField46 = copticChronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology45.weekOfWeekyear();
        org.joda.time.DurationField durationField48 = copticChronology45.weekyears();
        org.joda.time.DurationField durationField49 = copticChronology45.centuries();
        org.joda.time.DurationField durationField50 = durationFieldType43.getField((org.joda.time.Chronology) copticChronology45);
        org.joda.time.DateTimeField dateTimeField51 = copticChronology45.yearOfEra();
        boolean boolean52 = dateTimeField51.isSupported();
        int int53 = instant0.get(dateTimeField51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField46", Math.signum(durationField11.compareTo(durationField46)) == -Math.signum(durationField46.compareTo(durationField11)));
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1291");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(1645514171724L);
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField3 = copticChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.hourOfHalfday();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) 10);
        int int8 = localDate7.getWeekyear();
        org.joda.time.LocalDate localDate10 = localDate7.plusWeeks(17);
        int int11 = localDate10.getWeekyear();
        java.lang.String str12 = localDate10.toString();
        org.joda.time.Chronology chronology13 = localDate10.getChronology();
        org.joda.time.LocalDate localDate15 = localDate10.withWeekyear(970);
        org.joda.time.LocalDate localDate17 = localDate15.minusWeeks(310);
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime19.getZone();
        org.joda.time.DateTime dateTime21 = localTime1.toDateTimeToday(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime19", (dateTime18.compareTo(mutableDateTime19) == 0) == dateTime18.equals(mutableDateTime19));
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1292");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfHalfday();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        long long10 = copticChronology0.add((long) 177, (long) 13, 292);
        org.joda.time.DateTimeZone dateTimeZone11 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.centuryOfEra();
        java.util.Locale locale17 = new java.util.Locale("UTC", "", "weekOfWeekyear");
        java.lang.String str18 = locale17.getLanguage();
        int int19 = dateTimeField13.getMaximumShortTextLength(locale17);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField21 = copticChronology20.eras();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology20.weekOfWeekyear();
        int int24 = dateTimeField22.getMinimumValue((long) 23);
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = dateTimeField22.getAsText(26329781, locale26);
        java.lang.String str29 = locale17.getDisplayLanguage(locale26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField21", Math.signum(durationField1.compareTo(durationField21)) == -Math.signum(durationField21.compareTo(durationField1)));
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1293");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) chronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekOfWeekyear();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime8 = property5.addToCopy((long) 7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusHours(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(29);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        int int20 = localDateTime19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = localDateTime19.getFieldType(0);
        int int23 = localDateTime15.indexOf(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.plusSeconds(822);
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField28 = copticChronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology27.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(1645514182768L, (org.joda.time.Chronology) copticChronology27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.dayOfMonth();
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) chronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.property(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withWeekyear((int) (short) 1);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        int int46 = localDateTime44.getMonthOfYear();
        int int47 = localDateTime44.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.withCenturyOfEra(831);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) chronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.property(dateTimeFieldType57);
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology59.dayOfYear();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology59.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology59.minuteOfDay();
        org.joda.time.DurationField durationField64 = copticChronology59.months();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology59.yearOfEra();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology59);
        org.joda.time.DurationField durationField67 = copticChronology59.months();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology59.dayOfYear();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType57.getField((org.joda.time.Chronology) copticChronology59);
        int int70 = localDateTime50.get(dateTimeFieldType57);
        int int71 = localDateTime15.get(dateTimeFieldType57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime49 and localDateTime50", (localDateTime49.compareTo(localDateTime50) == 0) == localDateTime49.equals(localDateTime50));
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1294");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        int int5 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekOfWeekyear();
        java.lang.String str9 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField11 = copticChronology0.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField11, and durationField1", !(durationField1.compareTo(durationField11) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField11.compareTo(durationField1))));
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1295");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology0.add(readablePeriod3, (long) 0, 345);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.era();
        org.joda.time.DurationField durationField9 = copticChronology0.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField9, and durationField1", !(durationField1.compareTo(durationField9) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField9.compareTo(durationField1))));
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1296");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        long long21 = dateTimeZone18.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology22 = copticChronology1.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone18);
        java.lang.String str25 = dateTimeZone18.getName((long) 72);
        long long27 = dateTimeZone18.nextTransition((long) 10);
        java.lang.String str28 = dateTimeZone18.getID();
        long long31 = dateTimeZone18.adjustOffset((long) 1738, false);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 130, dateTimeZone18);
        int int33 = localDateTime32.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusSeconds(450);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays(54);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localTime39.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfMonth(10);
        int int45 = dateTime44.getCenturyOfEra();
        org.joda.time.DateTime.Property property46 = dateTime44.era();
        org.joda.time.LocalTime localTime47 = dateTime44.toLocalTime();
        int int48 = dateTime44.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime44.getZone();
        org.joda.time.DateTime.Property property50 = dateTime44.dayOfWeek();
        org.joda.time.DateTime.Property property51 = dateTime44.secondOfDay();
        org.joda.time.DateTime dateTime52 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology55 = localTime54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localTime54.toDateTimeToday(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfMonth(10);
        org.joda.time.DateTime dateTime61 = dateTime57.minusHours((int) (short) 100);
        int int62 = dateTime61.getCenturyOfEra();
        int int63 = dateTime61.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean65 = dateTime61.isSupported(dateTimeFieldType64);
        java.lang.String str66 = dateTimeFieldType64.toString();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType64.getDurationType();
        java.lang.String str68 = dateTimeFieldType64.toString();
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology71 = localTime70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = localTime70.toDateTimeToday(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.withDayOfMonth(10);
        org.joda.time.DateTime dateTime76 = dateTime75.toDateTimeISO();
        int int77 = dateTime75.getMillisOfDay();
        org.joda.time.Chronology chronology78 = dateTime75.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType64.getField(chronology78);
        org.joda.time.chrono.CopticChronology copticChronology81 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField82 = copticChronology81.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField83 = copticChronology81.dayOfYear();
        org.joda.time.DateTimeField dateTimeField84 = copticChronology81.weekyearOfCentury();
        org.joda.time.DurationField durationField85 = copticChronology81.seconds();
        org.joda.time.DateTimeField dateTimeField86 = copticChronology81.millisOfSecond();
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) 70, (org.joda.time.Chronology) copticChronology81);
        boolean boolean88 = dateTimeFieldType64.isSupported((org.joda.time.Chronology) copticChronology81);
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType64.getDurationType();
        int int90 = dateTime52.get(dateTimeFieldType64);
        int int91 = localDateTime37.get(dateTimeFieldType64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField2 and durationField85", Math.signum(durationField2.compareTo(durationField85)) == -Math.signum(durationField85.compareTo(durationField2)));
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1297");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.weekyear();
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField8 = copticChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology7.hourOfHalfday();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) 10);
        int int13 = localDate12.getWeekyear();
        int int14 = localDate12.getEra();
        org.joda.time.LocalDate localDate16 = localDate12.minusMonths(53);
        org.joda.time.LocalDate localDate18 = localDate12.minusMonths(29);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate20 = localDate18.plus(readablePeriod19);
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField23 = copticChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology22.hourOfHalfday();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology22);
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) 10);
        int int28 = localDate27.getWeekyear();
        int int29 = localDate27.getEra();
        org.joda.time.LocalDate localDate31 = localDate27.withMonthOfYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property32 = localDate27.yearOfEra();
        org.joda.time.LocalDate localDate33 = property32.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate35 = property34.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate38 = localDate35.withPeriodAdded(readablePeriod36, 632);
        org.joda.time.Instant instant39 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = instant39.toDateTime(dateTimeZone40);
        org.joda.time.Instant instant42 = dateTime41.toInstant();
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField44 = copticChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology43.hourOfHalfday();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology43);
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) 10);
        int int49 = localDate48.getWeekyear();
        org.joda.time.LocalDate localDate51 = localDate48.withYear(3);
        org.joda.time.DateTime dateTime52 = dateTime41.withFields((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime54 = localDate38.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        int int55 = localDate38.getYearOfEra();
        int[] intArray56 = localDate38.getValues();
        copticChronology0.validate((org.joda.time.ReadablePartial) localDate18, intArray56);
        org.joda.time.DateTimeField dateTimeField58 = copticChronology0.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and dateTime41", (instant39.compareTo(dateTime41) == 0) == instant39.equals(dateTime41));
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1298");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1738);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = instant3.toDateTime(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra(100);
        boolean boolean9 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField11 = copticChronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology31 = copticChronology10.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        java.lang.String str34 = dateTimeZone27.getNameKey((long) 2);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withEra(1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withEra(1);
        int int43 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.Chronology chronology44 = localDateTime40.getChronology();
        java.lang.String str45 = localDateTime40.toString();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.minusMinutes(1);
        boolean boolean48 = dateTimeZone27.isLocalDateTimeGap(localDateTime40);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime5.toMutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime51 = dateTime5.withYear((int) '#');
        org.joda.time.DateTime dateTime53 = dateTime5.plus((long) 940);
        org.joda.time.Instant instant54 = dateTime5.toInstant();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant54.minus(readableDuration55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime5", (instant3.compareTo(dateTime5) == 0) == instant3.equals(dateTime5));
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1299");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        long long20 = dateTimeZone17.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology21 = copticChronology0.withZone(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone17);
        java.lang.String str24 = dateTimeZone17.getNameKey((long) 2);
        int int26 = dateTimeZone17.getOffset((long) 596);
        int int28 = dateTimeZone17.getOffset((long) 2);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = instant29.toDateTime(dateTimeZone30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTime.Property property33 = dateTime31.millisOfDay();
        boolean boolean35 = dateTime31.equals((java.lang.Object) 10);
        org.joda.time.DateTime dateTime37 = dateTime31.plusMonths(117);
        org.joda.time.LocalDateTime localDateTime38 = dateTime37.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfEra();
        boolean boolean40 = dateTimeZone17.equals((java.lang.Object) property39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime31", (dateTime22.compareTo(dateTime31) == 0) == dateTime22.equals(dateTime31));
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1300");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology9.millis();
        org.joda.time.DurationField durationField13 = chronology9.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology9.getZone();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = instant17.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withSecondOfMinute(2);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.minus(readableDuration22);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime23.secondOfMinute();
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        java.util.Locale locale29 = dateTimeFormatter28.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = dateTimeField31.getMaximumValue(readablePartial32);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.toLanguageTag();
        int int36 = dateTimeField31.getMaximumTextLength(locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter28.withLocale(locale34);
        java.lang.String str38 = locale34.getISO3Language();
        java.util.Set<java.lang.String> strSet39 = locale34.getUnicodeLocaleAttributes();
        int int40 = property25.getMaximumShortTextLength(locale34);
        java.util.Locale locale42 = new java.util.Locale("English (Canada)");
        java.lang.String str43 = locale42.getVariant();
        java.lang.String str44 = locale34.getDisplayScript(locale42);
        java.util.Set<java.lang.String> strSet45 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str46 = dateTimeZone14.getName(1645514625558L, locale42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime19", (dateTime15.compareTo(dateTime19) == 0) == dateTime15.equals(dateTime19));
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1301");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 'u', (org.joda.time.Chronology) copticChronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) chronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = property8.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusWeeks(543);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDateTime11 and localDateTime14", (localDateTime11.compareTo(localDateTime14) == 0) == localDateTime11.equals(localDateTime14));
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1302");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar6 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(0);
        boolean boolean14 = dateTime2.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime18.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = localDateTime18.getFieldType(0);
        boolean boolean22 = dateTime2.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = dateTime2.plusMillis((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime27 = dateTime24.withFieldAdded(durationFieldType25, 134);
        java.lang.String str28 = durationFieldType25.getName();
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology29.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology29.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology29.millisOfSecond();
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = null;
        org.joda.time.format.DateTimeParser dateTimeParser37 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter36, dateTimeParser37);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeFormatter38.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter38.withDefaultYear(16);
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField43 = copticChronology42.eras();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology42.weekOfWeekyear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withEra(1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withEra(1);
        int int53 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.Chronology chronology54 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = chronology58.getZone();
        long long62 = dateTimeZone59.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology63 = copticChronology42.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone59);
        java.lang.String str66 = dateTimeZone59.getName(10598109367999L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter41.withZone(dateTimeZone59);
        org.joda.time.Chronology chronology68 = copticChronology29.withZone(dateTimeZone59);
        boolean boolean69 = durationFieldType25.isSupported(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1303");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((-1));
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 26497386);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localTime12.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfMonth(10);
        org.joda.time.DateTime dateTime19 = dateTime15.minusHours((int) (short) 100);
        int int20 = dateTime19.getCenturyOfEra();
        boolean boolean21 = dateTime19.isEqualNow();
        org.joda.time.DateTime dateTime23 = dateTime19.withMillisOfDay((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds(7);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMinutes((int) (short) 0);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField29 = copticChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField33 = copticChronology28.years();
        int int34 = copticChronology28.getMinimumDaysInFirstWeek();
        org.joda.time.DateTime dateTime35 = dateTime23.withChronology((org.joda.time.Chronology) copticChronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter10.withChronology((org.joda.time.Chronology) copticChronology28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime35", (dateTime23.compareTo(dateTime35) == 0) == dateTime23.equals(dateTime35));
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1304");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay5 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime dateTime7 = dateTime2.minusDays(5);
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime2.toYearMonthDay();
        org.joda.time.DateTime.Property property9 = dateTime2.weekOfWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime2.minusMillis(616);
        int int12 = dateTime11.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1305");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField6 = copticChronology0.millis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        int int17 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.Chronology chronology18 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int26 = dateTimeZone23.getOffset((long) 12);
        boolean boolean28 = dateTimeZone23.isStandardOffset((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours(161);
        org.joda.time.DateTime dateTime34 = dateTime30.minus((long) 11);
        org.joda.time.DateTime dateTime36 = dateTime30.plusYears(24);
        int int37 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 168, dateTimeZone23);
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        boolean boolean41 = dateTimeZone23.equals((java.lang.Object) 1680054L);
        boolean boolean42 = localDateTime7.equals((java.lang.Object) boolean41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime7.withWeekyear(530);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime7.toDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime7.minusDays(852);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime46", (dateTime30.compareTo(dateTime46) == 0) == dateTime30.equals(dateTime46));
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1306");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime6.millisOfSecond();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime10 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = property8.addWrapFieldToCopy(388);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localTime14.toDateTimeToday(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfMonth(10);
        org.joda.time.DateTime dateTime21 = dateTime17.minusHours((int) (short) 100);
        int int22 = dateTime21.getCenturyOfEra();
        boolean boolean23 = dateTime21.isEqualNow();
        org.joda.time.DateTime dateTime25 = dateTime21.withMonthOfYear(6);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTime();
        int int27 = dateTime26.getDayOfYear();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localTime29.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfMonth(10);
        org.joda.time.DateTime dateTime36 = dateTime32.minusHours((int) (short) 100);
        int int37 = dateTime36.getCenturyOfEra();
        boolean boolean38 = dateTime36.isEqualNow();
        org.joda.time.DateTime dateTime40 = dateTime36.withMillisOfDay((int) (short) 10);
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekyear(165);
        org.joda.time.DateTime dateTime44 = dateTime42.plusWeeks(70);
        boolean boolean45 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime42);
        java.lang.String str46 = dateTime42.toString();
        org.joda.time.DateTime dateTime48 = dateTime42.withWeekOfWeekyear(4);
        org.joda.time.chrono.CopticChronology copticChronology49 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField50 = copticChronology49.halfdays();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology49.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology49.centuryOfEra();
        org.joda.time.DurationField durationField55 = copticChronology49.weeks();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime42.toMutableDateTime((org.joda.time.Chronology) copticChronology49);
        org.joda.time.DateTime dateTime58 = dateTime42.plusWeeks(533);
        int int59 = property8.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and mutableDateTime56", (dateTime42.compareTo(mutableDateTime56) == 0) == dateTime42.equals(mutableDateTime56));
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1307");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property6 = dateTime4.era();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        int int15 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int16 = localDateTime12.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra(1);
        int int21 = localDateTime20.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = localDateTime20.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime12.withField(dateTimeFieldType23, 7);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime12.plus(readablePeriod26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime12.plus(readablePeriod28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) chronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.property(dateTimeFieldType36);
        boolean boolean38 = localDateTime29.isEqual((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTime dateTime39 = localDateTime29.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.withCenturyOfEra(497);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury(21);
        int int44 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime.Property property45 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime46 = property45.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1308");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfDay();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale19);
        java.lang.String str21 = locale19.getDisplayName();
        boolean boolean22 = locale19.hasExtensions();
        java.util.Locale.setDefault(locale19);
        long long24 = dateTimeField16.set((long) 692, "8", locale19);
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale19.getDisplayVariant(locale25);
        org.joda.time.tz.NameProvider nameProvider28 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withEra(1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withEra(1);
        int int39 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.Chronology chronology40 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology44.getZone();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        int int48 = dateTimeZone45.getOffset((long) 12);
        boolean boolean50 = dateTimeZone45.isStandardOffset((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusHours(161);
        org.joda.time.DateTime dateTime56 = dateTime52.minus((long) 11);
        org.joda.time.DateTime dateTime58 = dateTime52.plusYears(24);
        int int59 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 168, dateTimeZone45);
        org.joda.time.Instant instant61 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = instant61.toDateTime(dateTimeZone62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.DateTime.Property property65 = dateTime63.millisOfDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology66);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((java.lang.Object) chronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.property(dateTimeFieldType72);
        boolean boolean74 = dateTime63.isSupported(dateTimeFieldType72);
        org.joda.time.LocalDateTime.Property property75 = localDateTime60.property(dateTimeFieldType72);
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        org.joda.time.LocalDateTime localDateTime78 = property75.setCopy("53", locale77);
        java.lang.String str81 = nameProvider28.getShortName(locale77, "2022-02-22T07:16:56.708", "2022-02-22T07:17:21.584");
        java.lang.String str82 = locale25.getDisplayVariant(locale77);
        org.joda.time.DateTime dateTime83 = property3.setCopy("878", locale25);
        java.util.Set<java.lang.Character> charSet84 = locale25.getExtensionKeys();
        java.lang.String str85 = locale25.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1309");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfHalfday();
        org.joda.time.Chronology chronology5 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField6 = copticChronology0.months();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        java.lang.String str8 = copticChronology0.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) chronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        int int16 = property14.getMaximumValue();
        java.lang.Object obj17 = null;
        boolean boolean18 = property14.equals(obj17);
        org.joda.time.LocalDateTime localDateTime20 = property14.addToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.years();
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology24.weekyearOfCentury();
        org.joda.time.DurationField durationField28 = copticChronology24.seconds();
        org.joda.time.DurationField durationField29 = copticChronology24.halfdays();
        boolean boolean30 = durationFieldType23.isSupported((org.joda.time.Chronology) copticChronology24);
        boolean boolean31 = localDateTime21.isSupported(durationFieldType23);
        java.lang.String str32 = durationFieldType23.getName();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime20.withFieldAdded(durationFieldType23, 777);
        org.joda.time.DateTime dateTime35 = localDateTime20.toDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime20.minusWeeks(169);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstance();
        int int39 = copticChronology38.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology38.secondOfDay();
        org.joda.time.DurationField durationField41 = copticChronology38.eras();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology38);
        java.lang.String str43 = copticChronology38.toString();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology38.millisOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withEra(1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withEra(1);
        int int53 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.Chronology chronology54 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.plusMinutes((int) 'u');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime55.withDurationAdded(readableDuration60, (-1));
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.dayOfMonth();
        int[] intArray65 = copticChronology38.get((org.joda.time.ReadablePartial) localDateTime62, 0L);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime20, intArray65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField41", Math.signum(durationField1.compareTo(durationField41)) == -Math.signum(durationField41.compareTo(durationField1)));
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1310");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property6 = dateTime4.era();
        org.joda.time.DateMidnight dateMidnight7 = dateTime4.toDateMidnight();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        int int16 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        int int17 = localDateTime13.getMillisOfSecond();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra(1);
        int int22 = localDateTime21.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = localDateTime21.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withField(dateTimeFieldType24, 7);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYear(0);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = instant29.toDateTime(dateTimeZone30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.DateTime.Property property33 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime34 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        int int35 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime37 = property36.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readablePeriod38);
        org.joda.time.DateTime dateTime41 = dateTime39.minus((long) 17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1311");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour(2);
        int int4 = localTime1.size();
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField6 = copticChronology5.halfdays();
        org.joda.time.DurationField durationField7 = copticChronology5.months();
        boolean boolean8 = localTime1.equals((java.lang.Object) copticChronology5);
        org.joda.time.LocalTime localTime10 = localTime1.withSecondOfMinute(0);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localTime12.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfMonth(10);
        org.joda.time.DateTime dateTime19 = dateTime15.minusHours((int) (short) 100);
        org.joda.time.DateTime.Property property20 = dateTime19.year();
        org.joda.time.DateTime dateTime22 = dateTime19.plusYears(15);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime22.minusSeconds(161);
        java.lang.Object obj26 = null;
        org.joda.time.Instant instant27 = new org.joda.time.Instant(obj26);
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTimeISO();
        boolean boolean29 = dateTime22.isEqual((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant30 = instant27.toInstant();
        org.joda.time.Instant instant33 = instant30.withDurationAdded((long) (-1897), 24);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.plus(readableDuration34);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localTime37.toDateTimeToday(dateTimeZone39);
        int int41 = localTime37.getMillisOfDay();
        java.util.Date date42 = new java.util.Date();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.fromDateFields(date42);
        org.joda.time.LocalTime.Property property44 = localTime43.secondOfMinute();
        org.joda.time.LocalTime localTime45 = property44.roundHalfCeilingCopy();
        boolean boolean46 = localTime37.equals((java.lang.Object) property44);
        org.joda.time.LocalTime localTime48 = property44.addCopy(598);
        int int49 = property44.getMaximumValue();
        org.joda.time.LocalTime localTime51 = property44.addCopy((-9936000));
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField53 = copticChronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology52.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology52.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology52.halfdayOfDay();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime60 = localTime58.withMinuteOfHour(2);
        org.joda.time.LocalTime.Property property61 = localTime60.millisOfDay();
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        org.joda.time.LocalTime localTime64 = property61.setCopy("0", locale63);
        int[] intArray66 = copticChronology52.get((org.joda.time.ReadablePartial) localTime64, 26184082L);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology69 = localTime68.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = localTime68.toDateTimeToday(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.withDayOfMonth(10);
        org.joda.time.DateTime dateTime74 = dateTime73.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay75 = dateTime73.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean77 = dateTime73.isSupported(dateTimeFieldType76);
        org.joda.time.LocalTime.Property property78 = localTime64.property(dateTimeFieldType76);
        org.joda.time.LocalTime.Property property79 = localTime64.millisOfSecond();
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology82 = localTime81.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = localTime81.toDateTimeToday(dateTimeZone83);
        org.joda.time.DateTime dateTime86 = dateTime84.withDayOfMonth(10);
        int int87 = dateTime86.getCenturyOfEra();
        org.joda.time.DateTime.Property property88 = dateTime86.era();
        org.joda.time.LocalTime localTime89 = dateTime86.toLocalTime();
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.LocalTime localTime92 = localTime89.withPeriodAdded(readablePeriod90, 286);
        org.joda.time.LocalTime localTime93 = localTime64.withFields((org.joda.time.ReadablePartial) localTime92);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int95 = localTime64.indexOf(dateTimeFieldType94);
        int int96 = localTime51.indexOf(dateTimeFieldType94);
        int int97 = instant33.get(dateTimeFieldType94);
        int int98 = localTime1.get(dateTimeFieldType94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and mutableDateTime28", (instant27.compareTo(mutableDateTime28) == 0) == instant27.equals(mutableDateTime28));
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1312");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        boolean boolean6 = dateTime2.equals((java.lang.Object) 10);
        org.joda.time.DateTime.Property property7 = dateTime2.secondOfMinute();
        org.joda.time.DateTime dateTime8 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = instant9.toDateTime(dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime11.toYearMonthDay();
        org.joda.time.DateTime dateTime16 = dateTime11.minusDays(5);
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime11.toYearMonthDay();
        boolean boolean18 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = instant20.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withSecondOfMinute(2);
        org.joda.time.DateTime.Property property25 = dateTime22.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime22.withChronology(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime27.getZone();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) 1461116880000000L, dateTimeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone28);
        java.lang.String str32 = dateTimeZone28.getShortName(604800L);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime2.toMutableDateTime(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1313");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField4 = copticChronology0.seconds();
        org.joda.time.DurationField durationField5 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField7 = copticChronology0.weeks();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField9 = copticChronology0.minutes();
        java.lang.String str10 = copticChronology0.toString();
        org.joda.time.DurationField durationField11 = copticChronology0.centuries();
        java.lang.String str12 = durationField11.toString();
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.halfdayOfDay();
        org.joda.time.DurationField durationField15 = copticChronology13.weekyears();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        int int24 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology29.getZone();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        int int33 = dateTimeZone30.getOffset((long) 12);
        boolean boolean35 = dateTimeZone30.isStandardOffset((-3628800000L));
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone30);
        org.joda.time.Chronology chronology37 = copticChronology13.withZone(dateTimeZone30);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withEra(1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withEra(1);
        int int46 = localDateTime39.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.Chronology chronology47 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology51.getZone();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        int int55 = dateTimeZone52.getOffset((long) 12);
        org.joda.time.Chronology chronology56 = copticChronology13.withZone(dateTimeZone52);
        org.joda.time.DurationField durationField57 = chronology56.eras();
        boolean boolean58 = durationField57.isPrecise();
        int int59 = durationField11.compareTo(durationField57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField57, durationField4, and durationField5", !(durationField57.compareTo(durationField4) == 0) || (Math.signum(durationField57.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1314");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(1645514485052L, dateTimeZone1);
        java.lang.Object obj3 = null;
        org.joda.time.Instant instant4 = new org.joda.time.Instant(obj3);
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime6 = instant4.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = instant4.get(dateTimeFieldType7);
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology11.minuteOfDay();
        org.joda.time.DurationField durationField16 = copticChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType7.getField((org.joda.time.Chronology) copticChronology11);
        boolean boolean18 = localDateTime2.isSupported(dateTimeFieldType7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and mutableDateTime5", (instant4.compareTo(mutableDateTime5) == 0) == instant4.equals(mutableDateTime5));
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1315");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTimeISO();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime5", (instant3.compareTo(mutableDateTime5) == 0) == instant3.equals(mutableDateTime5));
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1316");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withSecondOfMinute(2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology14 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2, chronology14);
        org.joda.time.DateTime dateTime18 = dateTime2.minusSeconds((int) (byte) -1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) chronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfFloorCopy();
        int int26 = localDateTime25.getDayOfMonth();
        org.joda.time.DateTime dateTime27 = dateTime2.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1317");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = instant1.toDateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withSecondOfMinute(2);
        org.joda.time.DateTime.Property property6 = dateTime3.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.withChronology(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) 1461116880000000L, dateTimeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone9);
        java.lang.String str13 = dateTimeZone9.getShortName(604800L);
        int int15 = dateTimeZone9.getOffset((long) 38090);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime3", (instant1.compareTo(dateTime3) == 0) == instant1.equals(dateTime3));
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1318");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("11");
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        java.lang.String str4 = dateTime1.toString("\u65e5\u6587");
        org.joda.time.DateMidnight dateMidnight5 = dateTime1.toDateMidnight();
        org.joda.time.DateTime dateTime7 = dateTime1.minusYears(6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(readableDuration8, (int) (short) 100);
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = instant11.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withSecondOfMinute(2);
        org.joda.time.DateTime dateTime16 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property17 = dateTime15.era();
        org.joda.time.DateMidnight dateMidnight18 = dateTime15.toDateMidnight();
        int int19 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime21 = dateTime15.plusHours(121);
        int int22 = dateTime15.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime13", (instant11.compareTo(dateTime13) == 0) == instant11.equals(dateTime13));
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1319");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) chronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundFloorCopy();
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = instant10.toDateTime(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfDay();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology15.millisOfSecond();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter24.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter24.withDefaultYear(16);
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField29 = copticChronology28.eras();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology28.weekOfWeekyear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withEra(1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withEra(1);
        int int39 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.Chronology chronology40 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology44.getZone();
        long long48 = dateTimeZone45.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology49 = copticChronology28.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone45);
        java.lang.String str52 = dateTimeZone45.getName(10598109367999L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter27.withZone(dateTimeZone45);
        org.joda.time.Chronology chronology54 = copticChronology15.withZone(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime12.toMutableDateTime((org.joda.time.Chronology) copticChronology15);
        org.joda.time.Instant instant57 = new org.joda.time.Instant(1645514330872L);
        boolean boolean58 = mutableDateTime55.isEqual((org.joda.time.ReadableInstant) instant57);
        int int59 = property5.compareTo((org.joda.time.ReadableInstant) instant57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime12", (instant10.compareTo(dateTime12) == 0) == instant10.equals(dateTime12));
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1320");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays(380);
        org.joda.time.DateTime dateTime3 = localDateTime0.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfEra();
        org.joda.time.DateTime dateTime5 = localDateTime0.toDateTime();
        boolean boolean6 = dateTime5.isAfterNow();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readablePeriod7);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField10 = copticChronology9.eras();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        int int20 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        long long29 = dateTimeZone26.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology30 = copticChronology9.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone26);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        int int33 = calendar32.getWeeksInWeekYear();
        int int35 = calendar32.getActualMinimum(0);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.fromCalendarFields(calendar32);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks((int) (short) 100);
        int int39 = localDateTime36.size();
        boolean boolean40 = dateTimeZone26.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateTime dateTime41 = dateTime8.withZoneRetainFields(dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime31", (dateTime3.compareTo(dateTime31) == 0) == dateTime3.equals(dateTime31));
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1321");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) '#', 17);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime8 = dateTime5.minusMonths(604800);
        int int9 = dateTime5.getEra();
        org.joda.time.DateTime.Property property10 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime5.minusMinutes(266);
        long long13 = dateTime12.getMillis();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra(1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra(1);
        int int22 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology27.getZone();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        int int31 = dateTimeZone28.getOffset((long) 12);
        boolean boolean33 = dateTimeZone28.isStandardOffset((-3628800000L));
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.lang.String str37 = dateTimeZone28.getNameKey((long) (byte) 1);
        java.lang.String str38 = dateTimeZone28.getID();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime12.toMutableDateTime(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime5", (instant0.compareTo(dateTime5) == 0) == instant0.equals(dateTime5));
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1322");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime1.minus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime1.plusWeeks(32772);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfMonth(11);
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField10 = copticChronology9.eras();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        int int20 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        long long29 = dateTimeZone26.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology30 = copticChronology9.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone26);
        java.lang.String str33 = dateTimeZone26.getName((long) 72);
        int int35 = dateTimeZone26.getOffsetFromLocal((long) 6);
        long long37 = dateTimeZone26.convertUTCToLocal((long) 169);
        long long39 = dateTimeZone26.nextTransition(0L);
        org.joda.time.DateTime dateTime40 = dateTime6.withZone(dateTimeZone26);
        org.joda.time.Instant instant41 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = instant41.toDateTime(dateTimeZone42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.DateTime dateTime46 = dateTime43.withCenturyOfEra(100);
        int int47 = dateTime43.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime49 = dateTime43.minus(readablePeriod48);
        java.lang.Object obj50 = null;
        org.joda.time.Instant instant51 = new org.joda.time.Instant(obj50);
        org.joda.time.MutableDateTime mutableDateTime52 = instant51.toMutableDateTimeISO();
        long long53 = instant51.getMillis();
        org.joda.time.MutableDateTime mutableDateTime54 = instant51.toMutableDateTimeISO();
        int int55 = dateTime43.compareTo((org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTime dateTime57 = dateTime43.withYearOfEra(97);
        org.joda.time.DateTime dateTime59 = dateTime43.plusYears(7200);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(500);
        org.joda.time.DateTime dateTime62 = dateTime43.toDateTime(dateTimeZone61);
        boolean boolean63 = dateTime6.equals((java.lang.Object) dateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime62", (dateTime31.compareTo(dateTime62) == 0) == dateTime31.equals(dateTime62));
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1323");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.yearOfEra();
        java.lang.String str4 = copticChronology1.toString();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 1, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.era();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.era();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.monthOfYear();
        int int12 = copticChronology1.getMinimumDaysInFirstWeek();
        java.lang.String str13 = copticChronology1.toString();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField15 = copticChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology14.hourOfHalfday();
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology14);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        org.joda.time.LocalDate.Property property20 = localDate18.weekyear();
        org.joda.time.LocalDate localDate22 = localDate18.minusYears(1970);
        org.joda.time.LocalDate.Property property23 = localDate18.year();
        int int24 = property23.getMaximumValueOverall();
        org.joda.time.LocalDate localDate25 = property23.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        int int28 = dateTimeZone26.getStandardOffset((long) 849);
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone26);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = localDate25.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime33 = localDate17.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.Chronology chronology34 = copticChronology1.withZone(dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField2 and durationField15", Math.signum(durationField2.compareTo(durationField15)) == -Math.signum(durationField15.compareTo(durationField2)));
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1324");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("ja");
        timeZone1.setID("ja");
        timeZone1.setID("eras");
        timeZone1.setRawOffset((int) (byte) 1);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("ja");
        timeZone9.setID("UTC");
        boolean boolean12 = timeZone1.hasSameRules(timeZone9);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone9);
        calendar13.setMinimalDaysInFirstWeek(483);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        java.lang.Integer int19 = dateTimeFormatter18.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter18.withPivotYear(48);
        boolean boolean22 = calendar13.before((java.lang.Object) dateTimeFormatter21);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("ja");
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone24);
        timeZone24.setRawOffset(605);
        calendar13.setTimeZone(timeZone24);
        java.util.Calendar.Builder builder29 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withEra(1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withEra(1);
        int int38 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        int int39 = localDateTime35.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.minus(readableDuration40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.era();
        java.util.Date date43 = localDateTime41.toDate();
        int int44 = date43.getHours();
        java.util.Calendar.Builder builder45 = builder29.setInstant(date43);
        java.util.Date date52 = new java.util.Date(513, 26195173, 497, 134, 5, 170);
        java.util.Calendar.Builder builder53 = builder29.setInstant(date52);
        java.util.Calendar calendar54 = builder29.build();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(340, 43);
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        int int59 = timeZone58.getRawOffset();
        java.util.Calendar.Builder builder60 = builder29.setTimeZone(timeZone58);
        boolean boolean61 = timeZone24.hasSameRules(timeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar25", (calendar13.compareTo(calendar25) == 0) == calendar13.equals(calendar25));
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1325");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusMinutes((int) 'u');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime18.getMonthOfYear();
        boolean boolean20 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusMinutes(26209877);
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = instant23.toDateTime(dateTimeZone24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime.Property property27 = dateTime25.millisOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) chronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.property(dateTimeFieldType34);
        boolean boolean36 = dateTime25.isSupported(dateTimeFieldType34);
        long long37 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime25.minusSeconds(22);
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField41 = copticChronology40.eras();
        org.joda.time.DateTime dateTime42 = dateTime25.toDateTime((org.joda.time.Chronology) copticChronology40);
        org.joda.time.Instant instant43 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = instant43.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.DateTime dateTime48 = dateTime45.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar49 = dateTime45.toGregorianCalendar();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withEra(1);
        int int54 = localDateTime53.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = localDateTime53.getFieldType(0);
        boolean boolean57 = dateTime45.isSupported(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withEra(1);
        int int62 = localDateTime61.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = localDateTime61.getFieldType(0);
        boolean boolean65 = dateTime45.isSupported(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType64.getDurationType();
        boolean boolean67 = dateTime42.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime22.withField(dateTimeFieldType64, 845);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime42", (instant23.compareTo(dateTime42) == 0) == instant23.equals(dateTime42));
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1326");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        long long14 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime2.minusSeconds(22);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.eras();
        org.joda.time.DateTime dateTime19 = dateTime2.toDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear(524);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime19", (instant0.compareTo(dateTime19) == 0) == instant0.equals(dateTime19));
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1327");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfSecond();
        org.joda.time.DurationField durationField4 = copticChronology0.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField4, and durationField1", !(durationField1.compareTo(durationField4) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField4.compareTo(durationField1))));
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1328");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 602, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField6 = copticChronology1.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField2, durationField6, and durationField2", !(durationField2.compareTo(durationField6) == 0) || (Math.signum(durationField2.compareTo(durationField2)) == Math.signum(durationField6.compareTo(durationField2))));
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1329");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.lang.String str20 = dateTimeZone17.getName(100L, locale19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone17);
        long long22 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = copticChronology23.getZone();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime((org.joda.time.Chronology) copticChronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(972);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.withDurationAdded(readableDuration30, 86399999);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime27", (dateTime21.compareTo(dateTime27) == 0) == dateTime21.equals(dateTime27));
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1330");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 450);
        org.joda.time.Instant instant4 = instant1.withDurationAdded((long) 886, 188);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField6 = copticChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology5.clockhourOfHalfday();
        java.lang.String str10 = copticChronology5.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = instant1.toMutableDateTime((org.joda.time.Chronology) copticChronology5);
        org.joda.time.DurationField durationField12 = copticChronology5.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1331");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField7 = copticChronology3.seconds();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology3);
        org.joda.time.DateTime dateTime9 = dateTime1.withChronology((org.joda.time.Chronology) copticChronology3);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology3.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime9", (dateTime1.compareTo(dateTime9) == 0) == dateTime1.equals(dateTime9));
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1332");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 814);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths(59);
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra(674);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField8 = copticChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology7.hourOfHalfday();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology7);
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) 10);
        int int13 = localDate12.getWeekyear();
        int int14 = localDate12.getEra();
        org.joda.time.LocalDate localDate16 = localDate12.withMonthOfYear((int) (byte) 1);
        int int17 = localDate12.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate18 = localDate5.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate20 = localDate18.plusYears(26294601);
        org.joda.time.LocalDate.Property property21 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate22 = property21.withMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on localDate12 and localDate18", (localDate12.compareTo(localDate18) == 0) == localDate12.equals(localDate18));
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1333");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        int int4 = localDate3.getMonthOfYear();
        org.joda.time.LocalDate.Property property5 = localDate3.weekyear();
        org.joda.time.LocalDate localDate6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate7 = property5.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property5.setCopy(34);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate9.minus(readablePeriod11);
        int int13 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate.Property property14 = localDate12.era();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField16 = copticChronology15.eras();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra(1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.Chronology chronology27 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        long long35 = dateTimeZone32.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology36 = copticChronology15.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone32);
        java.lang.String str39 = dateTimeZone32.getName((long) 72);
        long long41 = dateTimeZone32.nextTransition((long) 10);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = copticChronology43.withZone(dateTimeZone45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withEra(1);
        int int51 = localDateTime50.getMonthOfYear();
        org.joda.time.Chronology chronology52 = localDateTime50.getChronology();
        int int53 = localDateTime50.getSecondOfMinute();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) chronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.weekOfWeekyear();
        org.joda.time.DurationField durationField60 = property59.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime62 = property59.addToCopy((long) 7);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfSecond();
        boolean boolean64 = localDateTime50.isAfter((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime50.plus(readablePeriod65);
        int[] intArray68 = chronology46.get((org.joda.time.ReadablePartial) localDateTime50, (long) 1738);
        int int69 = property14.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField16", Math.signum(durationField1.compareTo(durationField16)) == -Math.signum(durationField16.compareTo(durationField1)));
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1334");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = copticChronology0.add(readablePeriod3, (long) 4, 2);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.yearOfCentury();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime localTime12 = localTime10.withMinuteOfHour(2);
        int int13 = localTime10.size();
        org.joda.time.LocalTime.Property property14 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property14.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime17 = property14.getLocalTime();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localTime19.toDateTimeToday(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfMonth(10);
        org.joda.time.DateTime dateTime26 = dateTime22.minusHours((int) (short) 100);
        int int27 = dateTime26.getCenturyOfEra();
        int int28 = dateTime26.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean30 = dateTime26.isSupported(dateTimeFieldType29);
        boolean boolean31 = localTime17.isSupported(dateTimeFieldType29);
        java.lang.String str32 = localTime17.toString();
        org.joda.time.LocalTime localTime34 = localTime17.withMillisOfDay(1439);
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.toLanguageTag();
        java.util.Locale.setDefault(category36, locale37);
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = locale40.getDisplayName();
        boolean boolean43 = locale40.hasExtensions();
        java.lang.String str44 = locale40.getCountry();
        java.lang.String str45 = locale40.getDisplayVariant();
        java.util.Locale.setDefault(category36, locale40);
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category36, locale47);
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.lang.String str50 = locale49.toLanguageTag();
        java.lang.String str51 = locale47.getDisplayVariant(locale49);
        java.lang.String str52 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localTime34, 0, locale49);
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField54 = copticChronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology53.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone56 = copticChronology53.getZone();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        long long59 = dateTimeZone56.getMillisKeepLocal(dateTimeZone57, 169L);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((java.lang.Object) localTime34, dateTimeZone57);
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.parse("2022-02-22T07:17:19.066");
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField64 = copticChronology63.eras();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology63.yearOfEra();
        java.lang.String str66 = copticChronology63.toString();
        org.joda.time.DateTimeField dateTimeField67 = copticChronology63.secondOfDay();
        int int68 = dateTime62.get(dateTimeField67);
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime72 = localTime69.withFieldAdded(durationFieldType70, 312);
        org.joda.time.DateTime dateTime74 = dateTime62.withFieldAdded(durationFieldType70, 883);
        boolean boolean75 = localTime34.isSupported(durationFieldType70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField54 and durationField64", Math.signum(durationField54.compareTo(durationField64)) == -Math.signum(durationField64.compareTo(durationField54)));
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1335");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        int int7 = dateTime6.getCenturyOfEra();
        org.joda.time.DateTime.Property property8 = dateTime6.era();
        org.joda.time.DateTime dateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        int int11 = dateTime9.getMillisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField16 = copticChronology12.seconds();
        org.joda.time.DurationField durationField17 = copticChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology12.minuteOfDay();
        org.joda.time.DurationField durationField20 = copticChronology12.halfdays();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime9.toMutableDateTime((org.joda.time.Chronology) copticChronology12);
        org.joda.time.DurationField durationField22 = copticChronology12.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and mutableDateTime21", (dateTime9.compareTo(mutableDateTime21) == 0) == dateTime9.equals(mutableDateTime21));
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1336");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfHalfday();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField8 = copticChronology7.eras();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology7.weekOfWeekyear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra(1);
        int int18 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        long long27 = dateTimeZone24.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology28 = copticChronology7.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone24);
        java.lang.String str31 = dateTimeZone24.getName((long) 72);
        long long33 = dateTimeZone24.nextTransition((long) 10);
        java.lang.String str34 = dateTimeZone24.getID();
        int int36 = dateTimeZone24.getOffsetFromLocal(1645514360464L);
        org.joda.time.Chronology chronology37 = copticChronology0.withZone(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField8", Math.signum(durationField1.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField1)));
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1337");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localTime1.toDateTimeToday(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(10);
        org.joda.time.DateTime dateTime8 = dateTime4.minusHours((int) (short) 100);
        int int9 = dateTime8.getCenturyOfEra();
        boolean boolean10 = dateTime8.isEqualNow();
        org.joda.time.DateTime dateTime12 = dateTime8.withMillisOfDay((int) (short) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusSeconds(7);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMinutes((int) (short) 0);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology17.halfdayOfDay();
        org.joda.time.DurationField durationField22 = copticChronology17.years();
        int int23 = copticChronology17.getMinimumDaysInFirstWeek();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology((org.joda.time.Chronology) copticChronology17);
        long long28 = copticChronology17.add((long) 483, 25200000L, 69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime24", (dateTime12.compareTo(dateTime24) == 0) == dateTime12.equals(dateTime24));
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1338");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.secondOfDay();
        org.joda.time.Chronology chronology5 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField8, and durationField1", !(durationField1.compareTo(durationField8) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField8.compareTo(durationField1))));
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1339");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.eras();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfEra();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.era();
        org.joda.time.DurationField durationField7 = copticChronology0.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField7, and durationField1", !(durationField1.compareTo(durationField7) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField7.compareTo(durationField1))));
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1340");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.DateTime.Property property5 = dateTime2.era();
        boolean boolean7 = dateTime2.isAfter((long) 12);
        long long8 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime10 = dateTime2.plusSeconds(814);
        org.joda.time.DateTime dateTime11 = dateTime2.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant13 = org.joda.time.Instant.parse("2022-02-22T07:18:07.233");
        org.joda.time.Instant instant15 = instant13.plus((long) 916);
        boolean boolean17 = instant15.isEqual((long) 887);
        long long18 = instant15.getMillis();
        org.joda.time.Instant instant20 = instant15.plus(1645514253679L);
        int int21 = dateTime2.compareTo((org.joda.time.ReadableInstant) instant15);
        int int22 = dateTime2.getWeekyear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) chronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfFloorCopy();
        int int30 = property28.getMaximumValue();
        java.lang.Object obj31 = null;
        boolean boolean32 = property28.equals(obj31);
        org.joda.time.LocalDateTime localDateTime34 = property28.addToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMillisOfSecond(93);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField38 = copticChronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology37.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology37.weekyearOfCentury();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((org.joda.time.Chronology) copticChronology37);
        org.joda.time.DateTimeField dateTimeField43 = copticChronology37.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField43.getType();
        int int45 = localDateTime34.get(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = dateTime2.withField(dateTimeFieldType44, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime42", (instant0.compareTo(dateTime42) == 0) == instant0.equals(dateTime42));
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1341");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("ja");
        timeZone2.setID("ja");
        timeZone2.setID("eras");
        timeZone2.setRawOffset((int) (byte) 1);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("ja");
        timeZone10.setID("UTC");
        boolean boolean13 = timeZone2.hasSameRules(timeZone10);
        java.util.Calendar.Builder builder14 = builder0.setTimeZone(timeZone10);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(72, 505, 668, 170);
        java.util.Calendar calendar20 = builder14.build();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withEra(1);
        int int29 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.Chronology chronology30 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology34.getZone();
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.lang.String str38 = dateTimeZone35.getName(100L, locale37);
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.util.Calendar.Builder builder41 = builder14.setLocale(locale37);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("ja");
        timeZone43.setID("ja");
        timeZone43.setID("eras");
        timeZone43.setRawOffset(15);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone43);
        boolean boolean51 = timeZone43.observesDaylightTime();
        java.util.Calendar.Builder builder52 = builder14.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder53 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withEra(1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withEra(1);
        int int62 = localDateTime55.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        int int63 = localDateTime59.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.minus(readableDuration64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.era();
        java.util.Date date67 = localDateTime65.toDate();
        int int68 = date67.getHours();
        java.util.Calendar.Builder builder69 = builder53.setInstant(date67);
        java.util.Calendar.Builder builder71 = builder69.setLenient(false);
        java.util.Calendar.Builder builder73 = builder71.setLenient(false);
        java.util.Calendar.Builder builder77 = builder71.setWeekDate(57, 543, 177);
        java.util.Calendar.Builder builder81 = builder71.setTimeOfDay(82, 64799999, 106);
        java.util.TimeZone timeZone83 = java.util.TimeZone.getTimeZone("5");
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone83);
        java.lang.String str85 = timeZone83.getID();
        java.util.Calendar.Builder builder86 = builder71.setTimeZone(timeZone83);
        java.util.Locale.Builder builder87 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder88 = builder87.clearExtensions();
        java.util.Locale.Builder builder90 = builder87.setScript("");
        java.util.Locale locale91 = builder87.build();
        java.util.Set<java.lang.String> strSet92 = locale91.getUnicodeLocaleKeys();
        java.util.Calendar.Builder builder93 = builder71.setLocale(locale91);
        java.lang.String str94 = timeZone43.getDisplayName(locale91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar50 and calendar84", (calendar50.compareTo(calendar84) == 0) == calendar50.equals(calendar84));
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1342");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) 'u');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        boolean boolean13 = dateTime2.isSupported(dateTimeFieldType11);
        long long14 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime2.minusSeconds(22);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField18 = copticChronology17.eras();
        org.joda.time.DateTime dateTime19 = dateTime2.toDateTime((org.joda.time.Chronology) copticChronology17);
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = instant20.toDateTime(dateTimeZone21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime25 = dateTime22.withCenturyOfEra(100);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime22.toGregorianCalendar();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withEra(1);
        int int31 = localDateTime30.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDateTime30.getFieldType(0);
        boolean boolean34 = dateTime22.isSupported(dateTimeFieldType33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withEra(1);
        int int39 = localDateTime38.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime38.getFieldType(0);
        boolean boolean42 = dateTime22.isSupported(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType41.getDurationType();
        boolean boolean44 = dateTime19.isSupported(dateTimeFieldType41);
        java.util.Date date45 = dateTime19.toDate();
        org.joda.time.LocalDateTime localDateTime46 = dateTime19.toLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withPeriodAdded(readablePeriod47, 143249);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime19", (instant0.compareTo(dateTime19) == 0) == instant0.equals(dateTime19));
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1343");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Chronology chronology12 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra(1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra(1);
        int int22 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        int int23 = localDateTime19.getMillisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        int int28 = localDateTime27.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = localDateTime27.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime19.withField(dateTimeFieldType30, 7);
        int[] intArray34 = chronology12.get((org.joda.time.ReadablePartial) localDateTime32, (long) (byte) 10);
        org.joda.time.Chronology chronology35 = chronology12.withUTC();
        org.joda.time.DurationField durationField36 = durationFieldType2.getField(chronology12);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(0L, chronology12);
        boolean boolean38 = durationFieldType0.isSupported(chronology12);
        org.joda.time.DateTimeField dateTimeField39 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField40 = chronology12.hours();
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology41.weekyearOfCentury();
        org.joda.time.DurationField durationField45 = copticChronology41.seconds();
        org.joda.time.DurationField durationField46 = copticChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology41.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology41.minuteOfDay();
        org.joda.time.DurationField durationField49 = copticChronology41.halfdays();
        int int50 = durationField40.compareTo(durationField49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField36 and durationField45", (durationField36.compareTo(durationField45) == 0) == durationField36.equals(durationField45));
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1344");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withEra(1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        int int9 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.Chronology chronology10 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        int int20 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        int int21 = localDateTime17.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime25.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime17.withField(dateTimeFieldType28, 7);
        int[] intArray32 = chronology10.get((org.joda.time.ReadablePartial) localDateTime30, (long) (byte) 10);
        org.joda.time.Chronology chronology33 = chronology10.withUTC();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 978, chronology33);
        java.util.GregorianCalendar gregorianCalendar35 = dateTime34.toGregorianCalendar();
        org.joda.time.ReadablePartial readablePartial36 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.withFields(readablePartial36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(736);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime(dateTimeZone39);
        org.joda.time.LocalTime localTime41 = dateTime37.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and dateTime40", (dateTime37.compareTo(dateTime40) == 0) == dateTime37.equals(dateTime40));
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1345");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField2 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekyearOfCentury();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 869, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField7 = copticChronology1.years();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.weekyear();
        org.joda.time.DurationField durationField9 = copticChronology1.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField2, and durationField7", !(durationField9.compareTo(durationField2) == 0) || (Math.signum(durationField9.compareTo(durationField7)) == Math.signum(durationField2.compareTo(durationField7))));
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1346");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        int int9 = localDateTime1.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = localDateTime1.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusYears(171);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.year();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 28);
        long long18 = instant17.getMillis();
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField20 = copticChronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology19.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime27 = instant17.toMutableDateTime((org.joda.time.Chronology) copticChronology19);
        int int28 = property14.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = property14.withMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime27", (instant17.compareTo(mutableDateTime27) == 0) == instant17.equals(mutableDateTime27));
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1347");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = instant0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime2.withCenturyOfEra(100);
        int int6 = dateTime2.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime2.minus(readablePeriod7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        long long12 = instant10.getMillis();
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTimeISO();
        int int14 = dateTime2.compareTo((org.joda.time.ReadableInstant) instant10);
        org.joda.time.DateTime dateTime16 = dateTime2.withYearOfEra(97);
        org.joda.time.DateTime dateTime18 = dateTime2.plusYears(7200);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(500);
        org.joda.time.DateTime dateTime21 = dateTime2.toDateTime(dateTimeZone20);
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField24 = copticChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology23.weekyearOfCentury();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 869, (org.joda.time.Chronology) copticChronology23);
        org.joda.time.DateTime dateTime28 = localDate27.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.parse("11");
        org.joda.time.DateTime dateTime32 = dateTime30.withSecondOfMinute((int) (short) 1);
        org.joda.time.DateTime dateTime33 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime32.withWeekyear(0);
        int int36 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime21.withMillisOfDay(26320);
        org.joda.time.DateTime dateTime40 = dateTime21.withYearOfEra(101);
        boolean boolean41 = dateTime40.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime21", (instant0.compareTo(dateTime21) == 0) == instant0.equals(dateTime21));
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest2.test1348");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField1 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) 10);
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate8 = localDate3.minusWeeks(280);
        org.joda.time.LocalDate localDate10 = localDate3.plusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DurationField durationField13 = copticChronology12.eras();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withEra(1);
        int int23 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.Chronology chronology24 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology28.getZone();
        long long32 = dateTimeZone29.convertLocalToUTC((long) '#', false);
        org.joda.time.Chronology chronology33 = copticChronology12.withZone(dateTimeZone29);
        int int35 = dateTimeZone29.getOffsetFromLocal(100L);
        org.joda.time.DateTime dateTime36 = dateTime11.withZone(dateTimeZone29);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withEra(1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withEra(1);
        int int45 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.Chronology chronology46 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology50.getZone();
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = dateTimeZone51.getName(100L, locale53);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes(117);
        boolean boolean58 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withEra(1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withEra(1);
        int int67 = localDateTime60.compareTo((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.Chronology chronology68 = localDateTime64.getChronology();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(chronology68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.plusMinutes((int) 'u');
        org.joda.time.LocalDateTime.Property property74 = localDateTime69.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = property74.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minus(readablePeriod76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property78.getFieldType();
        org.joda.time.DateTime dateTime81 = dateTime11.withField(dateTimeFieldType79, 30);
        org.joda.time.Instant instant82 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = instant82.toDateTime(dateTimeZone83);
        org.joda.time.Instant instant85 = dateTime84.toInstant();
        org.joda.time.Chronology chronology86 = instant85.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField88 = dateTimeFieldType79.getField(chronology86);
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType79.getDurationType();
        boolean boolean90 = localDate10.isSupported(durationFieldType89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField1 and durationField13", Math.signum(durationField1.compareTo(durationField13)) == -Math.signum(durationField13.compareTo(durationField1)));
    }
}


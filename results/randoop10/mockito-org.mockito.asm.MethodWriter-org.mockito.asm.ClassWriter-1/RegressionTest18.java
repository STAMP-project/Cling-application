import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest18 {

    public static boolean debug = false;

    @Test
    public void test09001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09001");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitMultiANewArrayInsn("L1413182688", 12);
        methodVisitor16.visitMethodInsn(78, "L537907644", "", "L2069898161");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = methodVisitor16.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor16.visitParameterAnnotation((int) (byte) 100, "L2133258398", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test09002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09002");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        int int57 = classWriter37.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter37.visitAnnotation("", true);
        byte[] byteArray61 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        int int64 = classReader62.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader62, (int) '4');
        int int68 = classReader62.readUnsignedShort(5);
        int int70 = classReader62.getItem(1);
        byte[] byteArray71 = classReader62.b;
        java.lang.String str72 = classReader62.getSuperName();
        short short74 = classReader62.readShort((int) (short) 0);
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField(63, "L884076874", "L430363814", "L1083553839", (java.lang.Object) short74);
        fieldVisitor75.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = fieldVisitor75.visitAnnotation("L430363814", false);
        annotationVisitor79.visitEnum("L687099442", "L231790898", "L658437003");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 51966 + "'", int64 == 51966);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 11 + "'", int70 == 11);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) -13570 + "'", short74 == (short) -13570);
        org.junit.Assert.assertNotNull(fieldVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test09003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09003");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader7, (int) '4');
        classWriter13.visitSource("L959574331", "L749737959");
        classWriter13.visitSource("L959574331", "");
        int int23 = classWriter13.newField("L1287617384", "L1040125103", "L529122729");
        byte[] byteArray24 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray24, (int) (short) 3, 779);
        int int29 = classReader27.readByte(25);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader27, (-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 13 + "'", int23 == 13);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 10, 76, 57, 53, 57, 53, 55, 52, 51, 51, 49, 1, 0, 11, 76, 49, 50, 56, 55, 54, 49, 55, 51, 56, 52, 7, 0, 8, 1, 0, 11, 76, 49, 48, 52, 48, 49, 50, 53, 49, 48, 51, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 12, 0, 10, 0, 11, 9, 0, 9, 0, 12, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 2, 0, 7, 0, 15, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test09004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09004");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        int int14 = classWriter11.newNameType("L1780214503", "L877442963");
        int int19 = classWriter11.newMethod("L1373865546", "L1821467279", "L976656549", true);
        int int21 = classWriter11.newClass("L537907644");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 17 + "'", int21 == 17);
    }

    @Test
    public void test09005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09005");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        annotationVisitor21.visitEnum("L1223439170", "L579675851", "L1962189950");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor21.visitAnnotation("L1589078908", "L1148690681");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = annotationVisitor28.visitArray("L1249077817");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor30);
    }

    @Test
    public void test09006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09006");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        classWriter24.visitOuterClass("hi!", "", "");
        int int54 = classWriter24.newClass("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(2560, "L1132227206", "", "L1287376048", (java.lang.Object) int54);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor55.visitAnnotation("L396424273", false);
        fieldVisitor55.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = fieldVisitor55.visitAnnotation("L532079015", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test09007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09007");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        java.lang.Object obj39 = null;
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter19.visitField(9, "L1601838046", "L2062266913", "L680573325", obj39);
        classWriter19.visitSource("L636727990", "");
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        label49.info = strArray65;
        classWriter19.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(0, "L1132227206", "L535346328", "L2062266913", strArray65);
        byte[] byteArray70 = classWriter1.toByteArray();
        int int72 = classWriter1.newClass("L1889100462");
        int int76 = classWriter1.newField("L1368708044", "L2014806404", "L1132227206");
        classWriter1.visitOuterClass("L2001797632", "L1068224943", "L77196307");
        classWriter1.visitSource("L770960792", "L473224764");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 49, 51, 50, 50, 50, 55, 50, 48, 54, 1, 0, 10, 76, 53, 51, 53, 51, 52, 54, 51, 50, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 10, 0, 2, 0, 11, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 12, 0, 0, 0, 2, 0, 13, 0, 1, 0, 14, 0, 0, 0, 4, 0, 6, 0, 7]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 16 + "'", int72 == 16);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 21 + "'", int76 == 21);
    }

    @Test
    public void test09008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09008");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        int int36 = classReader35.header;
        int int37 = classReader35.header;
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader35.readUnsignedShort((int) (short) 2561);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 90 + "'", int36 == 90);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
    }

    @Test
    public void test09009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09009");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 10);
        classWriter1.visitSource("L303436840", "L872213106");
        classWriter1.visitSource("L1457309764", "L126270280");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        classWriter13.visitOuterClass("hi!", "", "");
        int int25 = classWriter13.newNameType("hi!", "hi!");
        int int27 = classWriter13.newUTF8("hi!");
        classWriter13.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter13.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter13.visitAnnotation("L680573325", false);
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter1.visitField(256, "L1482040464", "L2147079915", "L264795169", (java.lang.Object) "L680573325");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        int int67 = classWriter47.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter47.visitAnnotation("", true);
        byte[] byteArray71 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        int int74 = classReader72.readByte(13);
        int int76 = classReader72.readInt(7);
        int int78 = classReader72.readInt((int) (short) 100);
        int int80 = classReader72.readByte((int) (byte) 0);
        java.lang.String[] strArray81 = classReader72.getInterfaces();
        classWriter1.visit(36, 36, "L855647295", "L1037094794", "L2072202085", strArray81);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 7 + "'", int74 == 7);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2561 + "'", int76 == 2561);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 65536 + "'", int78 == 65536);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 202 + "'", int80 == 202);
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test09010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09010");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitVarInsn((-1107296256), 65210);
        methodVisitor25.visitIntInsn((int) (byte) 0, 12);
        methodVisitor25.visitIntInsn(28, (int) (short) 8460);
        methodVisitor25.visitMultiANewArrayInsn("L1611208075", (int) (short) 3);
        methodVisitor25.visitIincInsn((int) (short) 12342, 2);
        methodVisitor25.visitMultiANewArrayInsn("L670848135", (int) (short) 19506);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test09011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09011");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        int int61 = classWriter41.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter41.visitAnnotation("", true);
        byte[] byteArray65 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        int int68 = classReader66.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader66, (int) '4');
        long long72 = classReader66.readLong(2);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(classReader66, 0);
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField((int) (short) 17784, "", "", "L1715729238", (java.lang.Object) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = fieldVisitor75.visitAnnotation("L1789245551", true);
        org.mockito.asm.Attribute attribute79 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor75.visitAttribute(attribute79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 51966 + "'", int68 == 51966);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-4990551337079930870L) + "'", long72 == (-4990551337079930870L));
        org.junit.Assert.assertNotNull(fieldVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test09012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09012");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L2000102916", "L2062266913", "L59063553", (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter12.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (byte) 0);
        int int29 = classWriter12.newConst((java.lang.Object) int28);
        int int33 = classWriter12.newField("hi!", "", "L809431533");
        java.lang.String[] strArray43 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter12.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray43);
        int int48 = classWriter12.newField("L680573325", "L242883751", "L636727990");
        classWriter12.visitOuterClass("L1928858580", "L426422007", "L976656549");
        int int53 = classWriter1.newConst((java.lang.Object) "L426422007");
        int int56 = classWriter1.newNameType("L364320201", "L30632432");
        int int58 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L594880957", "\001", "L1492159317", 65210);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 13 + "'", int58 == 13);
    }

    @Test
    public void test09013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09013");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 10);
        classWriter1.visitSource("L303436840", "L872213106");
        classWriter1.visitSource("L1457309764", "L126270280");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        classWriter13.visitOuterClass("hi!", "", "");
        int int25 = classWriter13.newNameType("hi!", "hi!");
        int int27 = classWriter13.newUTF8("hi!");
        classWriter13.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter13.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter13.visitAnnotation("L680573325", false);
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter1.visitField(256, "L1482040464", "L2147079915", "L264795169", (java.lang.Object) "L680573325");
        classWriter1.visitInnerClass("L1441910664", "L1877410732", "L1462503514", (int) (short) 28532);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(fieldVisitor40);
    }

    @Test
    public void test09014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09014");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int33 = classReader26.getAccess();
        java.lang.String str34 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, 10);
        int int38 = classReader26.readUnsignedShort((int) (short) 10);
        int int39 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader26.readUnsignedShort(163);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 256 + "'", int38 == 256);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test09015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09015");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        classWriter1.visitInnerClass("", "L1028579140", "", 8);
        byte[] byteArray37 = classWriter1.toByteArray();
        int int39 = classWriter1.newUTF8("L414874932");
        int int41 = classWriter1.newUTF8("L1086414642");
        classWriter1.visitOuterClass("L1148041100", "L890847236", "L415508906");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter1.visitAnnotation("L407879786", false);
        annotationVisitor48.visitEnd();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 1, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 5, 0, 0, 0, 0, 0, 0, 0, 10, 7, 0, 4, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 5, 0, 2, 0, 10, 0, 0, 0, 2, 0, 7, 0, 11, 0, 0, 0, 2, 0, 6, 0, 1, 0, 100, 0, 1, 0, 2, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 11, 0, 0, 0, 2, 0, 1, 0, 1, 0, 13, 0, 0, 0, 10, 0, 1, 0, 3, 0, 9, 0, 1, 0, 8]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 15 + "'", int41 == 15);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test09016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09016");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        int int35 = classWriter1.newMethod("L1086414642", "", "L419471195", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        int int64 = classWriter44.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter44.visitAnnotation("", true);
        byte[] byteArray68 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        short short71 = classReader69.readShort((int) (byte) 0);
        int int73 = classReader69.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader69, 0);
        int int76 = classReader69.getAccess();
        java.lang.String str77 = classReader69.getSuperName();
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader69, 10);
        org.mockito.asm.FieldVisitor fieldVisitor80 = classWriter1.visitField(17, "L917225789", "L172254079", "L590888141", (java.lang.Object) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = fieldVisitor80.visitAnnotation("L467340186", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = fieldVisitor80.visitAnnotation("L1872723002", true);
        annotationVisitor86.visitEnum("L1771090025", "L928426883", "L542271741");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 14 + "'", int35 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) -13570 + "'", short71 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2560 + "'", int73 == 2560);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(fieldVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test09017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09017");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        int int29 = classWriter9.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        classWriter35.visitOuterClass("hi!", "", "");
        classWriter35.visitEnd();
        java.lang.String[] strArray72 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter35.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter9.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter1.visitMethod(78, "L1936126716", "L1386483578", "L728847777", strArray72);
        java.lang.String[] strArray80 = null;
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter1.visitMethod(163, "L430363814", "L1471680267", "L146399554", strArray80);
        methodVisitor81.visitFieldInsn(19, "L570733821", "L714029947", "L750409565");
        methodVisitor81.visitIntInsn(28, 38);
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor81.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(methodVisitor81);
    }

    @Test
    public void test09018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09018");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = fieldVisitor31.visitAnnotation("L636727990", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor31.visitAnnotation("L579675851", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor31.visitAnnotation("L3043237", true);
        fieldVisitor31.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = fieldVisitor31.visitAnnotation("L1734325664", false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test09019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09019");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        classWriter1.visitInnerClass("L667379532", "L2039587225", "hi!", 15);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        int int73 = classWriter53.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter53.visitAnnotation("", true);
        byte[] byteArray77 = classWriter53.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        short short80 = classReader78.readShort((int) (byte) 0);
        int int82 = classReader78.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(classReader78, 0);
        java.lang.String[] strArray85 = classReader78.getInterfaces();
        byte[] byteArray86 = classReader78.b;
        java.lang.String str87 = classReader78.getSuperName();
        long long89 = classReader78.readLong(14);
        java.lang.String[] strArray90 = classReader78.getInterfaces();
        classWriter1.visit(768, 13874, "L282070366", "L1803469792", "", strArray90);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short80 + "' != '" + (short) -13570 + "'", short80 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2560 + "'", int82 == 2560);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 282574545512737L + "'", long89 == 282574545512737L);
        org.junit.Assert.assertNotNull(strArray90);
    }

    @Test
    public void test09020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09020");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(3, 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitAnnotation("L242883751", false);
        methodVisitor25.visitVarInsn(9, (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn((int) (short) 13063, 67764226);
        methodVisitor25.visitMethodInsn(1818575214, "L396424273", "", "L331709749");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test09021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09021");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        int int31 = classReader29.readInt((int) (short) 100);
        int int32 = classReader29.header;
        byte[] byteArray33 = classReader29.b;
        // The following exception was thrown during execution in test generation
        try {
            short short35 = classReader29.readShort((int) (short) 12342);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12342");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65536 + "'", int31 == 65536);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09022");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L2000102916", "L636727990");
        classWriter1.visitInnerClass("L1009580268", "L1700698598", "L1283200231", 78);
        int int73 = classWriter1.newMethod("L1988321994", "L2015149232", "L76446579", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter1.visitAnnotation("L571285779", false);
        annotationVisitor76.visitEnd();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 19 + "'", int73 == 19);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test09023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09023");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int34 = classWriter32.newClass("L1511591972");
        byte[] byteArray35 = classWriter32.toByteArray();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 11, 76, 49, 53, 49, 49, 53, 57, 49, 57, 55, 50, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09024");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        classWriter1.visitSource("L264795169", "L680573325");
        classWriter1.visitSource("L1013343419", "L1142940414");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        int int65 = classWriter45.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter45.visitAnnotation("", true);
        byte[] byteArray69 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray69);
        int int71 = classReader70.getAccess();
        byte[] byteArray72 = classReader70.b;
        byte[] byteArray73 = classReader70.b;
        byte[] byteArray74 = classReader70.b;
        java.lang.String[] strArray75 = classReader70.getInterfaces();
        classWriter38.visit(0, 13, "L590888141", "", "L1413182688", strArray75);
        classWriter1.visit(104, 256, "L1377529303", "L714852893", "L749737959", strArray75);
        classWriter1.visitSource("L862760825", "L1247545373");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray75);
    }

    @Test
    public void test09025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09025");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitTypeInsn((int) (byte) -1, "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor16.visitAnnotation("L1013343419", true);
        methodVisitor16.visitTypeInsn(202, "L1004763019");
        methodVisitor16.visitVarInsn(12, (int) (short) 13063);
        methodVisitor16.visitIincInsn((int) (short) -1, (int) (short) 256);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L974709289" + "'", str75, "L974709289");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test09026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09026");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        int int37 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 10);
        int int43 = classWriter39.newField("L1930348385", "L295165602", "L295165602");
        classWriter39.visitSource("L9401833", "");
        classWriter39.visitSource("L1132227206", "L975788322");
        org.mockito.asm.Attribute attribute50 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter39.visitAttribute(attribute50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
    }

    @Test
    public void test09027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09027");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        int int52 = classWriter1.newClass("L529122729");
        byte[] byteArray53 = classWriter1.toByteArray();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 13 + "'", int52 == 13);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 19, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 3, 0, 0, 0, 1, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 12, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 100, 0, 10, 0, 11, 0, 2, 0, 14, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 15, 0, 0, 0, 2, 0, 16, 0, 2, 0, 17, 0, 0, 0, 4, 0, 6, 0, 7, 0, 18, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
    }

    @Test
    public void test09028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09028");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1847716459", false);
        classWriter1.visitSource("L959574331", "L1140828792");
        classWriter1.visitInnerClass("L1868396987", "L363565416", "L278437344", 47806);
        java.lang.Object obj41 = null;
        org.mockito.asm.FieldVisitor fieldVisitor42 = classWriter1.visitField(16779852, "L689023041", "L727709537", "L1333287168", obj41);
        org.mockito.asm.Attribute attribute43 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor42.visitAttribute(attribute43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor42);
    }

    @Test
    public void test09029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09029");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        java.lang.Object obj79 = label75.info;
        java.lang.Object obj80 = label75.info;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNull(obj80);
    }

    @Test
    public void test09030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09030");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        java.lang.Object obj39 = null;
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter19.visitField(9, "L1601838046", "L2062266913", "L680573325", obj39);
        classWriter19.visitSource("L636727990", "");
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        label49.info = strArray65;
        classWriter19.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(0, "L1132227206", "L535346328", "L2062266913", strArray65);
        classWriter1.visitInnerClass("L999961130", "L1013343419", "L1945103414", 0);
        java.lang.String[] strArray79 = null;
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter1.visitMethod(26729, "L900410062", "L1202930291", "L1291288126", strArray79);
        methodVisitor80.visitMaxs(156461415, (int) (short) 25857);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor80);
    }

    @Test
    public void test09031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09031");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L897597087", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = annotationVisitor14.visitArray("L9401833");
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor14.visitAnnotation("L9401833", "L199336802");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = annotationVisitor19.visitArray("L2132185573");
        annotationVisitor19.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test09032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09032");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.header;
        int int33 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        int int62 = classWriter35.newConst((java.lang.Object) "hi!");
        classWriter35.visitSource("L488861128", "L897597087");
        classWriter35.visitInnerClass("L624707113", "L728847777", "L1601838046", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter35.visitAnnotation("L488861128", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter35.visitAnnotation("L426422007", true);
        classWriter35.visitSource("L339402249", "L238640077");
        classWriter35.visitOuterClass("L75359331", "L85145148", "L341335602");
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter35, (int) (short) 1034);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test09033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09033");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter1.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = classReader27.getItem(2048);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2048");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 50, 50, 51, 52, 51, 57, 49, 55, 48, 7, 0, 9, 1, 0, 11, 76, 50, 48, 49, 52, 56, 48, 54, 52, 48, 52, 7, 0, 11, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 7, 0, 14, 1, 0, 11, 76, 49, 53, 48, 53, 56, 54, 54, 50, 55, 50, 12, 0, 9, 0, 16, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 18, 0, 0, 0, 4, 0, 15, 0, 17, 0, 19, 0, 0, 0, 10, 0, 1, 0, 10, 0, 12, 0, 13, 10, 1]");
    }

    @Test
    public void test09034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09034");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitVarInsn((int) (byte) 1, (int) '#');
        methodVisitor25.visitCode();
        methodVisitor25.visitFieldInsn(7, "L1111133036", "L590888141", "L1162526488");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = methodVisitor25.visitAnnotation("L2097292751", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test09035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09035");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L59063553", true);
        methodVisitor16.visitInsn(0);
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(28532, 19);
        methodVisitor16.visitIntInsn(0, 19);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor16.visitAnnotationDefault();
        annotationVisitor38.visitEnum("L1247818576", "L402550819", "L1714745954");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test09036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09036");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        int int35 = classWriter1.newMethod("L1086414642", "", "L419471195", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("L946131795", true);
        int int45 = classWriter1.newField("L402550819", "L648000686", "L35507987");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 14 + "'", int35 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21 + "'", int45 == 21);
    }

    @Test
    public void test09037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09037");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        classWriter1.visitInnerClass("L897597087", "L590888141", "L1287376048", 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L791392221", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L389281063", "L1745031302", "\001", 611177);
        byte[] byteArray16 = classWriter1.toByteArray();
        int int18 = classWriter1.newClass("L482405892");
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 10, 76, 56, 57, 55, 53, 57, 55, 48, 56, 55, 7, 0, 1, 1, 0, 10, 76, 53, 57, 48, 56, 56, 56, 49, 52, 49, 7, 0, 3, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 10, 76, 55, 57, 49, 51, 57, 50, 50, 50, 49, 1, 0, 10, 76, 51, 56, 57, 50, 56, 49, 48, 54, 51, 7, 0, 7, 1, 0, 11, 76, 49, 55, 52, 53, 48, 51, 49, 51, 48, 50, 7, 0, 9, 1, 0, 1, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 12, 0, 0, 0, 18, 0, 2, 0, 2, 0, 4, 0, 5, 0, 6, 0, 8, 0, 10, 0, 11, 83, 105, 0, 13, 0, 0, 0, 6, 0, 1, 0, 6, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
    }

    @Test
    public void test09038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09038");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        byte[] byteArray37 = classReader26.b;
        int int39 = classReader26.readInt(0);
        int int41 = classReader26.readInt(78);
        int int43 = classReader26.readInt(36);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-889275714) + "'", int39 == (-889275714));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1698786926 + "'", int41 == 1698786926);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 67174410 + "'", int43 == 67174410);
    }

    @Test
    public void test09039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09039");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        int int3 = classWriter1.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter10.newMethod("", "", "hi!", true);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter10.visitMethod(0, "", "", "hi!", strArray24);
        classWriter1.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray24);
        byte[] byteArray27 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter1.visitAnnotation("L215906456", false);
        int int34 = classWriter1.newField("L586588902", "L757149937", "L1520330258");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 35, 0, 10, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 5, 1, 0, 0, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 32, 0, 3, 0, 6, 0, 4, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 4]");
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
    }

    @Test
    public void test09040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09040");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(classReader53, (int) (byte) -1);
        int int57 = classReader53.readUnsignedShort(82);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(classReader53, 1869898100);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter65.newMethod("", "", "hi!", true);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter65.visitMethod(0, "", "", "hi!", strArray79);
        methodVisitor80.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor80.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor80.visitAnnotation("L2089731244", true);
        methodVisitor80.visitTypeInsn((int) 'a', "L1434815605");
        org.mockito.asm.FieldVisitor fieldVisitor97 = classWriter59.visitField(17, "L1287376048", "L967793538", "L1148041100", (java.lang.Object) 'a');
        fieldVisitor97.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor93);
        org.junit.Assert.assertNotNull(fieldVisitor97);
    }

    @Test
    public void test09041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09041");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        methodVisitor43.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor43.visitCode();
        methodVisitor43.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        methodVisitor70.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        methodVisitor70.visitLabel(label74);
        java.lang.String str76 = label74.toString();
        methodVisitor43.visitLineNumber((int) (short) -1, label74);
        label74.info = (-1.0f);
        methodVisitor25.visitLineNumber(19, label74);
        methodVisitor25.visitMultiANewArrayInsn("L959574331", (int) 'a');
        methodVisitor25.visitEnd();
        methodVisitor25.visitMultiANewArrayInsn("L467340186", (-21316096));
        methodVisitor25.visitFieldInsn(0, "L1393085977", "L1150125104", "L203863779");
        methodVisitor25.visitTypeInsn((int) 'a', "L1435737877");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L1152729594" + "'", str76, "L1152729594");
    }

    @Test
    public void test09042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09042");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        methodVisitor16.visitCode();
        methodVisitor16.visitMethodInsn((-21316096), "", "L329202279", "L1242211911");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label53 = new org.mockito.asm.Label();
        methodVisitor49.visitLabel(label53);
        java.lang.Object obj55 = label53.info;
        java.lang.Object obj56 = label53.info;
        java.lang.Object obj57 = label53.info;
        methodVisitor16.visitJumpInsn(0, label53);
        java.lang.Object obj59 = label53.info;
        int int60 = label53.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test09043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09043");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        methodVisitor25.visitMaxs(13, 254);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor25.visitAnnotation("L455650823", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label46 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        label46.info = strArray62;
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter41.visitMethod((int) (short) 100, "", "hi!", "", strArray62);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = methodVisitor65.visitAnnotationDefault();
        methodVisitor65.visitIincInsn((int) (short) 1, 15);
        org.mockito.asm.Label label71 = new org.mockito.asm.Label();
        java.lang.String str72 = label71.toString();
        methodVisitor65.visitJumpInsn(0, label71);
        java.lang.String str74 = label71.toString();
        methodVisitor25.visitLabel(label71);
        org.mockito.asm.Attribute attribute76 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor66);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "L1321146094" + "'", str72, "L1321146094");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L1321146094" + "'", str74, "L1321146094");
    }

    @Test
    public void test09044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09044");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        classWriter1.visitSource("L2132757815", "L467340186");
        org.mockito.asm.Attribute attribute45 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
    }

    @Test
    public void test09045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09045");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        int int31 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader26.readUnsignedShort(2816);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
    }

    @Test
    public void test09046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09046");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int37 = classWriter34.newNameType("\001", "L624707113");
        classWriter34.visitSource("L101926124", "L19561572");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
    }

    @Test
    public void test09047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09047");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitEnd();
        methodVisitor41.visitEnd();
        methodVisitor41.visitFieldInsn((int) (byte) 100, "\001", "L1386483578", "L841843626");
        methodVisitor41.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = methodVisitor41.visitAnnotationDefault();
        methodVisitor41.visitIincInsn(611177, 7);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = methodVisitor41.visitAnnotationDefault();
        annotationVisitor54.visitEnum("L84564479", "L221255805", "\000");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test09048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09048");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        int int53 = classWriter1.newUTF8("L1221801792");
        int int55 = classWriter1.newUTF8("L2089731244");
        int int58 = classWriter1.newNameType("L1685807285", "L2039247828");
        byte[] byteArray59 = classWriter1.toByteArray();
        byte[] byteArray60 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        int int63 = classReader61.readInt(36);
        java.lang.String str64 = classReader61.getSuperName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 1, 0, 11, 76, 50, 48, 56, 57, 55, 51, 49, 50, 52, 52, 1, 0, 11, 76, 49, 54, 56, 53, 56, 48, 55, 50, 56, 53, 1, 0, 11, 76, 50, 48, 51, 57, 50, 52, 55, 56, 50, 56, 12, 0, 6, 0, 7, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 10, 0, 0, 0, 2, 0, 2, 0, 2, 0, 11, 0, 0, 0, 2, 0, 2, 0, 12, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 1, 0, 11, 76, 50, 48, 56, 57, 55, 51, 49, 50, 52, 52, 1, 0, 11, 76, 49, 54, 56, 53, 56, 48, 55, 50, 56, 53, 1, 0, 11, 76, 50, 48, 51, 57, 50, 52, 55, 56, 50, 56, 12, 0, 6, 0, 7, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 10, 0, 0, 0, 2, 0, 2, 0, 2, 0, 11, 0, 0, 0, 2, 0, 2, 0, 12, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 740402 + "'", int63 == 740402);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test09049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09049");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int40 = classWriter1.newMethod("L42491767", "L688061379", "", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 17 + "'", int40 == 17);
    }

    @Test
    public void test09050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09050");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitMultiANewArrayInsn("L1611208075", 16);
        methodVisitor16.visitIincInsn(33, 7);
        methodVisitor16.visitInsn(1659509);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor16.visitAnnotation("L367225907", false);
        methodVisitor16.visitMultiANewArrayInsn("L1169247122", 24);
        methodVisitor16.visitMethodInsn((-1), "L126169797", "L765138463", "L1104252878");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test09051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09051");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readUnsignedShort(82);
        int int34 = classReader26.header;
        int int36 = classReader26.readInt(0);
        char[] charArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj39 = classReader26.readConst(1763772160, charArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1763772160");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 28532 + "'", int33 == 28532);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-889275714) + "'", int36 == (-889275714));
    }

    @Test
    public void test09052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09052");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        int int22 = classWriter1.newField("L4531833", "L4531833", "L1009580268");
        int int24 = classWriter1.newClass("");
        classWriter1.visitSource("L680573325", "L1847716459");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        classWriter33.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter68.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(0);
        int int81 = classWriter76.newMethod("", "", "hi!", true);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter76.visitMethod(0, "", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter68.visitMethod(8, "hi!", "", "", strArray90);
        classWriter33.visit(8, 8, "L2000102916", "", "hi!", strArray90);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod(78, "L1498837454", "", "L2000102916", strArray90);
        methodVisitor94.visitFieldInsn((-889275714), "L1372146937", "L302994160", "L961648214");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test09053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09053");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader26, 10);
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        byte[] byteArray31 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            long long33 = classReader26.readLong((int) (short) -17730);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09054");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        byte[] byteArray12 = classReader9.b;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        int int35 = classWriter15.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter15.visitAnnotation("", true);
        byte[] byteArray39 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        int int42 = classReader40.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader40, (int) '4');
        int int46 = classReader40.readUnsignedShort(5);
        int int47 = classReader40.getAccess();
        int int49 = classReader40.readByte(0);
        java.lang.String[] strArray50 = classReader40.getInterfaces();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        int int73 = classWriter53.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter53.visitAnnotation("", true);
        byte[] byteArray77 = classWriter53.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        short short80 = classReader78.readShort((int) (byte) 0);
        int int82 = classReader78.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(classReader78, 0);
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(classReader78, 0);
        int int88 = classReader78.readByte((int) (byte) 10);
        char[] charArray93 = new char[] { '#', '4', '4' };
        java.lang.String str94 = classReader78.readUTF8(100, charArray93);
        java.lang.String str95 = classReader40.readUTF8(25, charArray93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = classReader9.readUTF8(199680, charArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 51966 + "'", int42 == 51966);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 202 + "'", int49 == 202);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short80 + "' != '" + (short) -13570 + "'", short80 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2560 + "'", int82 == 2560);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hi!" + "'", str95, "hi!");
    }

    @Test
    public void test09055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09055");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.String str54 = label51.toString();
        java.lang.Object obj55 = label51.info;
        java.lang.String str56 = label51.toString();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter58.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter66.newMethod("", "", "hi!", true);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter66.visitMethod(0, "", "", "hi!", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter58.visitMethod(8, "hi!", "", "", strArray80);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter58.visitAnnotation("hi!", false);
        annotationVisitor85.visit("", (java.lang.Object) 100.0d);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = annotationVisitor85.visitArray("");
        java.lang.Class<?> wildcardClass91 = annotationVisitor90.getClass();
        label51.info = annotationVisitor90;
        java.lang.Object obj93 = label51.info;
        java.lang.Object obj94 = label51.info;
        int int95 = label51.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L534063043" + "'", str54, "L534063043");
        org.junit.Assert.assertNull(obj55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L534063043" + "'", str56, "L534063043");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertNotNull(obj94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test09056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09056");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        byte[] byteArray32 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        java.lang.String[] strArray34 = classReader33.getInterfaces();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray34);
    }

    @Test
    public void test09057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09057");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitIntInsn(186, 779);
        methodVisitor51.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = methodVisitor51.visitAnnotation("", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor59);
    }

    @Test
    public void test09058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09058");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        java.lang.String str30 = classReader26.getSuperName();
        int int31 = classReader26.header;
        byte[] byteArray32 = classReader26.b;
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            short short36 = classReader26.readShort((int) (short) 2816);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2816");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09059");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        short short70 = classReader68.readShort((int) (byte) 0);
        int int72 = classReader68.readUnsignedShort((int) ' ');
        long long74 = classReader68.readLong((int) '#');
        int int76 = classReader68.getItem(0);
        java.lang.String str77 = classReader68.getSuperName();
        short short79 = classReader68.readShort(13);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader68, (int) (short) 0);
        org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter1.visitField((int) (short) -13570, "L529122729", "L75359331", "L2037791973", (java.lang.Object) (short) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = fieldVisitor82.visitAnnotation("L976656549", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = fieldVisitor82.visitAnnotation("", true);
        fieldVisitor82.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) -13570 + "'", short70 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2560 + "'", int72 == 2560);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1126999590795363L + "'", long74 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + short79 + "' != '" + (short) 1792 + "'", short79 == (short) 1792);
        org.junit.Assert.assertNotNull(fieldVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test09060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09060");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L1132227206", false);
        classWriter1.visitOuterClass("L1611208075", "L1928858580", "L1715729238");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L951385459", "L1781680600", "L2106764488");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test09061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09061");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader3 = new org.mockito.asm.ClassReader(byteArray0, 23, 1698786926);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09062");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        java.lang.String str28 = classReader27.getSuperName();
        byte[] byteArray29 = classReader27.b;
        short short31 = classReader27.readShort(2);
        int int33 = classReader27.readByte(77);
        // The following exception was thrown during execution in test generation
        try {
            short short35 = classReader27.readShort(48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48640");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) -17730 + "'", short31 == (short) -17730);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test09063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09063");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn((int) 'a', (int) '4');
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMultiANewArrayInsn("L671718527", (int) (short) 1792);
        methodVisitor16.visitMaxs((int) (short) 26913, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = methodVisitor16.visitAnnotation("L1601838046", true);
        methodVisitor16.visitMultiANewArrayInsn("L1674107149", 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test09064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09064");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter35.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        label50.info = strArray66;
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter45.visitMethod((int) (short) 100, "", "hi!", "", strArray66);
        classWriter35.visit(9, (int) (byte) 100, "L238476442", "L275489687", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter1.visitMethod(2, "", "L1962189950", "L2062266913", strArray66);
        methodVisitor71.visitCode();
        methodVisitor71.visitVarInsn(1751720204, (-1));
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor71.visitAnnotationDefault();
        methodVisitor71.visitMethodInsn(16842755, "L144067663", "L120713780", "L624011766");
        methodVisitor71.visitIntInsn((int) (short) 3072, (int) (short) 2048);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test09065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09065");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L1601838046", true);
        int int16 = classWriter1.newClass("L936297181");
        int int18 = classWriter1.newUTF8("L1921354976");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
    }

    @Test
    public void test09066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09066");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitTypeInsn(3, "L1162526488");
        methodVisitor25.visitIincInsn(0, (int) (short) -13570);
        methodVisitor25.visitTypeInsn(0, "L1553193067");
        methodVisitor25.visitCode();
        org.mockito.asm.Attribute attribute57 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test09067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09067");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        byte[] byteArray39 = classReader38.b;
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        int int41 = classReader40.header;
        short short43 = classReader40.readShort(24);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 90 + "'", int41 == 90);
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 256 + "'", short43 == (short) 256);
    }

    @Test
    public void test09068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09068");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitVarInsn((int) (byte) 1, (int) '#');
        methodVisitor25.visitCode();
        methodVisitor25.visitIntInsn((int) 'a', 554434561);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label39 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        label39.info = strArray55;
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod((int) (short) 100, "", "hi!", "", strArray55);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = methodVisitor58.visitAnnotationDefault();
        methodVisitor58.visitIincInsn((int) (short) 1, 15);
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        java.lang.String str65 = label64.toString();
        methodVisitor58.visitJumpInsn(0, label64);
        java.lang.String str67 = label64.toString();
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        int int89 = classWriter69.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = classWriter69.visitAnnotation("", true);
        byte[] byteArray93 = classWriter69.toByteArray();
        org.mockito.asm.ClassReader classReader94 = new org.mockito.asm.ClassReader(byteArray93);
        java.lang.String str95 = classReader94.getSuperName();
        java.lang.String[] strArray96 = classReader94.getInterfaces();
        label64.info = classReader94;
        methodVisitor25.visitLabel(label64);
        java.lang.Object obj99 = label64.info;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor59);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "L135246598" + "'", str65, "L135246598");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "L135246598" + "'", str67, "L135246598");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 6 + "'", int89 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(obj99);
    }

    @Test
    public void test09069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09069");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitInsn(202);
        methodVisitor16.visitIincInsn(26, 27);
        methodVisitor16.visitEnd();
        methodVisitor16.visitTypeInsn(156461415, "L172254079");
        methodVisitor16.visitInsn(13876);
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09070");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        java.lang.String[] strArray44 = new java.lang.String[] { "L1899113546", "L397385256", "L4531833", "L1511591972" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter1.visitMethod(2, "L1774908040", "L2142211483", "L284303737", strArray44);
        int int50 = classWriter1.newMethod("L1458874009", "L8293919", "L1889100462", true);
        org.mockito.asm.Attribute attribute51 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 31 + "'", int50 == 31);
    }

    @Test
    public void test09071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09071");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitEnd();
    }

    @Test
    public void test09072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09072");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        short short38 = classReader26.readShort(19);
        byte[] byteArray39 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray42 = classReader26.getInterfaces();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 26729 + "'", short38 == (short) 26729);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test09073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09073");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        int int29 = classWriter9.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        classWriter35.visitOuterClass("hi!", "", "");
        classWriter35.visitEnd();
        java.lang.String[] strArray72 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter35.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter9.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter1.visitMethod(78, "L1936126716", "L1386483578", "L728847777", strArray72);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor75.visitAnnotationDefault();
        methodVisitor75.visitIincInsn(458753, (int) (short) 1);
        methodVisitor75.visitInsn((int) 'a');
        methodVisitor75.visitCode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test09074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09074");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        methodVisitor62.visitMultiANewArrayInsn("L1619769466", (-1107296256));
        methodVisitor62.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
    }

    @Test
    public void test09075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09075");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn((int) 'a', (int) '4');
        methodVisitor16.visitFieldInsn(1694564377, "L688713901", "L203863779", "L905591693");
        methodVisitor16.visitIincInsn(1659509, 184549888);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09076");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        methodVisitor25.visitCode();
        methodVisitor25.visitMethodInsn(10, "L1928858580", "L1013343419", "L1368708044");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = methodVisitor25.visitAnnotation("L590888141", false);
        methodVisitor25.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor25.visitParameterAnnotation((int) (short) 25970, "L1126469108", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor68);
    }

    @Test
    public void test09077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09077");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        int int22 = classWriter1.newField("L4531833", "L4531833", "L1009580268");
        int int24 = classWriter1.newClass("");
        classWriter1.visitSource("L680573325", "L1847716459");
        int int29 = classWriter1.newClass("");
        classWriter1.visitInnerClass("L1978666081", "L268449408", "L242883751", (int) (short) 780);
        int int38 = classWriter1.newField("L1042599060", "L1949580175", "L550889567");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 25 + "'", int38 == 25);
    }

    @Test
    public void test09078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09078");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L488861128", "L275489687", "L749737959");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        methodVisitor56.visitFieldInsn(8, "hi!", "", "");
        methodVisitor56.visitTypeInsn((int) (byte) 100, "");
        methodVisitor56.visitIincInsn((int) (byte) 10, 6);
        methodVisitor56.visitMultiANewArrayInsn("L897597087", 100);
        methodVisitor56.visitVarInsn(16, (int) 'a');
        org.mockito.asm.FieldVisitor fieldVisitor74 = classWriter1.visitField(458753, "L136145448", "L426422007", "L1111133036", (java.lang.Object) 16);
        classWriter1.visitOuterClass("L341764360", "L334680853", "L362499933");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = classWriter1.visitAnnotation("L1221492672", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = annotationVisitor81.visitAnnotation("L755632097", "L1213624950");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(fieldVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test09079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09079");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        int int37 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int41 = classReader26.readUnsignedShort(82);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 28532 + "'", int41 == 28532);
    }

    @Test
    public void test09080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09080");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitIincInsn((int) (byte) 10, 6);
        methodVisitor16.visitInsn(199680);
        methodVisitor16.visitVarInsn(24, 6);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09081");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        methodVisitor25.visitMaxs(13, 254);
        methodVisitor25.visitCode();
        methodVisitor25.visitIntInsn(1164862316, 43);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor25.visitAnnotation("L1865857207", false);
        methodVisitor25.visitCode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test09082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09082");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int29 = classReader26.header;
        int int31 = classReader26.readByte(8);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 16);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 101);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter35.visitAnnotation("L937415612", true);
        classWriter35.visitOuterClass("L1585142029", "L2037699670", "L1633827670");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test09083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09083");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        classWriter1.visitOuterClass("L728847777", "\001", "L809431533");
        byte[] byteArray10 = classWriter1.toByteArray();
        java.lang.Class<?> wildcardClass11 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 10, 76, 55, 50, 56, 56, 52, 55, 55, 55, 55, 7, 0, 3, 1, 0, 1, 1, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 5, 0, 6, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 4, 0, 4, 0, 7]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test09084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09084");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readUnsignedShort(29);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, 458753);
        int int38 = classReader26.readByte((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 512 + "'", int34 == 512);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 202 + "'", int38 == 202);
    }

    @Test
    public void test09085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09085");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readInt(5);
        int int14 = classReader7.readInt(20);
        byte[] byteArray15 = classReader7.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 909717811 + "'", int14 == 909717811);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test09086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09086");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        long long38 = classReader26.readLong(100);
        java.lang.String str39 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test09087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09087");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        int int38 = classReader26.header;
        int int39 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test09088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09088");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn(0, 10);
        methodVisitor25.visitMaxs(5, (-1));
        methodVisitor25.visitMaxs((int) (short) -13570, (int) (short) -326);
        methodVisitor25.visitInsn(28257);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test09089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09089");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        int int14 = classWriter11.newNameType("L242883751", "L1009580268");
        int int19 = classWriter11.newMethod("L149220781", "L624707113", "L419471195", false);
        classWriter11.visitOuterClass("L934106996", "L1685807285", "L2096601958");
        classWriter11.visitEnd();
        java.lang.Class<?> wildcardClass25 = classWriter11.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test09090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09090");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L1132227206", "L749737959", "L1132227206");
        int int35 = classWriter1.newNameType("L728847777", "hi!");
        int int37 = classWriter1.newClass("L664111037");
        classWriter1.visitOuterClass("L1066716797", "L2039587225", "L4531833");
        java.lang.Class<?> wildcardClass42 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test09091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09091");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 3909);
        classWriter1.visitEnd();
    }

    @Test
    public void test09092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09092");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter1.visitAnnotation("L1287376048", false);
        int int88 = classWriter1.newClass("L809431533");
        byte[] byteArray89 = classWriter1.toByteArray();
        int int93 = classWriter1.newField("L1974208773", "L381058472", "L1068224943");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 16 + "'", int88 == 16);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 24 + "'", int93 == 24);
    }

    @Test
    public void test09093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09093");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        classWriter1.visitOuterClass("L1017623370", "L75359331", "L1178822359");
        byte[] byteArray35 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter41.newConst((java.lang.Object) (short) 1);
        classWriter41.visitSource("", "L2000102916");
        classWriter41.visitSource("", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter41.visitAnnotation("L1111133036", false);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((-1107296256));
        int int55 = classWriter41.newConst((java.lang.Object) (-1107296256));
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor56 = classWriter1.visitField((-1161953280), "L300339955", "L1687335926", "L428020352", (java.lang.Object) classWriter41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@5461dd31");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 7, 0, 7, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 1, 0, 11, 76, 49, 51, 54, 56, 55, 48, 56, 48, 52, 52, 12, 0, 9, 0, 10, 1, 0, 11, 76, 49, 48, 49, 55, 54, 50, 51, 51, 55, 48, 7, 0, 12, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 11, 76, 49, 49, 55, 56, 56, 50, 50, 51, 53, 57, 12, 0, 14, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 1, 0, 17, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
    }

    @Test
    public void test09094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09094");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        byte[] byteArray32 = classReader26.b;
        int int33 = classReader26.getAccess();
        int int34 = classReader26.header;
        short short36 = classReader26.readShort(33);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 1694564377);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 2 + "'", short36 == (short) 2);
    }

    @Test
    public void test09095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09095");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        classWriter1.visitSource("L728847777", "L59063553");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(254);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter33.visitAnnotation("L1076056118", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label48 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int55 = classWriter50.newMethod("", "", "hi!", true);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter50.visitMethod(0, "", "", "hi!", strArray64);
        label48.info = strArray64;
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter43.visitMethod((int) (short) 100, "", "hi!", "", strArray64);
        classWriter33.visit((-1107296256), 1793, "L1162526488", "L170800745", "L1735602342", strArray64);
        classWriter1.visit((int) (short) 17784, 5, "L150818074", "L82136369", "L1162526488", strArray64);
        int int73 = classWriter1.newField("", "L727709537", "L1352784969");
        classWriter1.visitSource("L1901444169", "L1162526488");
        java.lang.Class<?> wildcardClass77 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 21 + "'", int73 == 21);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test09096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09096");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 156461415);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter40.visitAnnotation("L372427501", false);
        int int47 = classWriter40.newField("L1530728970", "L40714478", "L613443549");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter40.visitAnnotation("L1862340090", true);
        annotationVisitor50.visit("L1709223207", (java.lang.Object) 282574488797186L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16 + "'", int47 == 16);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test09097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09097");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        classWriter13.visitSource("", "L2000102916");
        int int23 = classWriter13.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        classWriter30.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter30.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter44.newConst((java.lang.Object) (byte) 0);
        int int47 = classWriter30.newConst((java.lang.Object) int46);
        int int51 = classWriter30.newField("hi!", "", "L809431533");
        java.lang.String[] strArray61 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter30.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray61);
        classWriter13.visit(5, (int) ' ', "L2000102916", "L636727990", "L2062266913", strArray61);
        int int64 = classWriter1.newConst((java.lang.Object) 5);
        int int68 = classWriter1.newField("L1028579140", "", "L2062266913");
        int int73 = classWriter1.newMethod("L590888141", "", "L2127085380", true);
        int int75 = classWriter1.newClass("L1221492672");
        classWriter1.visitInnerClass("L964927155", "L73116903", "L455650823", 132);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 16 + "'", int73 == 16);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 18 + "'", int75 == 18);
    }

    @Test
    public void test09098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09098");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        methodVisitor25.visitVarInsn(0, 82);
        methodVisitor25.visitVarInsn(19, 156461415);
        methodVisitor25.visitInsn(223337);
        methodVisitor25.visitMultiANewArrayInsn("L545510600", 10);
        methodVisitor25.visitEnd();
        methodVisitor25.visitCode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test09099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09099");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        java.lang.String str30 = classReader26.getSuperName();
        long long32 = classReader26.readLong(20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7575349242370196235L + "'", long32 == 7575349242370196235L);
    }

    @Test
    public void test09100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09100");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        int int31 = classWriter1.newUTF8("L488861128");
        byte[] byteArray32 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        byte[] byteArray34 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute35 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test09101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09101");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        methodVisitor25.visitMaxs(13, 254);
        methodVisitor25.visitVarInsn((int) (short) 1792, 875903244);
        methodVisitor25.visitInsn((-21316096));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test09102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09102");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray7, 0, 156461415);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader10, 1025);
        classWriter12.visitInnerClass("L862760825", "L1692352756", "L2078833339", 13);
        org.mockito.asm.Attribute attribute18 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter12.visitAttribute(attribute18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09103");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        int int11 = classWriter1.newMethod("L1013343419", "\001", "L488861128", true);
        int int15 = classWriter1.newField("L1962189950", "L1283200231", "L1387910543");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("L1611208075", true);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int30 = classWriter25.newMethod("", "", "hi!", true);
        classWriter25.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter25.visitAnnotation("", false);
        org.mockito.asm.Label label43 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        label43.info = strArray59;
        classWriter25.visit(2, (-889275714), "L2000102916", "L4531833", "L2127085380", strArray59);
        classWriter1.visit(458753, 0, "L2102614230", "L1031503101", "L959183788", strArray59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 17 + "'", int15 == 17);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
    }

    @Test
    public void test09104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09104");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L1497855016", "", "L1889100462");
        classWriter1.visitSource("L1685807285", "L467340186");
        classWriter1.visitInnerClass("L500545133", "\000", "L1912967891", 33);
        int int29 = classWriter1.newMethod("L324925920", "L282070366", "L917225789", true);
        byte[] byteArray30 = classWriter1.toByteArray();
        java.lang.Class<?> wildcardClass31 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test09105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09105");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotation("L1013343419", true);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter67.newMethod("", "", "hi!", true);
        classWriter67.visitOuterClass("hi!", "", "");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitTypeInsn(12848, "L193489512");
        java.lang.Object obj81 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLdcInsn(obj81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
    }

    @Test
    public void test09106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09106");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        int int29 = classWriter1.newNameType("L529122729", "L1789245551");
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(3, "hi!", "hi!", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter1.visitMethod((int) (short) -1, "L1529613096", "L842833106", "L1192381465", strArray57);
        methodVisitor60.visitMethodInsn(51966, "L214240977", "L2092231191", "L579675851");
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter67.newMethod("", "", "hi!", true);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter67.visitMethod(0, "", "", "hi!", strArray81);
        methodVisitor82.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label86 = new org.mockito.asm.Label();
        methodVisitor82.visitLabel(label86);
        org.mockito.asm.ClassWriter classWriter89 = new org.mockito.asm.ClassWriter(0);
        int int91 = classWriter89.newConst((java.lang.Object) (short) 1);
        classWriter89.visitSource("", "");
        label86.info = "";
        java.lang.String str96 = label86.toString();
        int int97 = label86.getOffset();
        methodVisitor60.visitLabel(label86);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "L2106936784" + "'", str96, "L2106936784");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test09107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09107");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        methodVisitor48.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor48.visitCode();
        methodVisitor48.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        methodVisitor75.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        methodVisitor75.visitLabel(label79);
        java.lang.String str81 = label79.toString();
        methodVisitor48.visitLineNumber((int) (short) -1, label79);
        label79.info = (-1.0f);
        java.lang.String str85 = label79.toString();
        methodVisitor25.visitLabel(label79);
        methodVisitor25.visitIincInsn((int) (short) 1031, 393472);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L681739194" + "'", str81, "L681739194");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L681739194" + "'", str85, "L681739194");
    }

    @Test
    public void test09108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09108");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.getItem(0);
        int int32 = classReader26.getAccess();
        int int34 = classReader26.readByte(4);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (-889275714));
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader26.readInt((int) (short) 3909);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test09109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09109");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        short short83 = classReader81.readShort((int) (byte) 0);
        int int85 = classReader81.readUnsignedShort((int) ' ');
        long long87 = classReader81.readLong((int) '#');
        org.mockito.asm.FieldVisitor fieldVisitor88 = classWriter1.visitField(10, "L1847716459", "", "L749737959", (java.lang.Object) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = fieldVisitor88.visitAnnotation("L841843626", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = fieldVisitor88.visitAnnotation("L1287617384", false);
        org.mockito.asm.Attribute attribute95 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor88.visitAttribute(attribute95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short83 + "' != '" + (short) -13570 + "'", short83 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2560 + "'", int85 == 2560);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1126999590795363L + "'", long87 == 1126999590795363L);
        org.junit.Assert.assertNotNull(fieldVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test09110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09110");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        methodVisitor17.visitIntInsn(104, (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter22.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter22.visitMethod(8, "hi!", "", "", strArray44);
        methodVisitor46.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = methodVisitor46.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        methodVisitor68.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        methodVisitor68.visitLabel(label72);
        methodVisitor46.visitJumpInsn((-1), label72);
        java.lang.String str75 = label72.toString();
        java.lang.String str76 = label72.toString();
        methodVisitor17.visitLabel(label72);
        java.lang.Class<?> wildcardClass78 = methodVisitor17.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1565953266" + "'", str75, "L1565953266");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L1565953266" + "'", str76, "L1565953266");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test09111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09111");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        int int57 = classWriter37.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter37.visitAnnotation("", true);
        byte[] byteArray61 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        int int64 = classReader62.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader62, (int) '4');
        long long68 = classReader62.readLong(2);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader62, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter70.visitAnnotation("L1715729238", false);
        int int74 = classWriter1.newConst((java.lang.Object) "L1715729238");
        int int79 = classWriter1.newMethod("L1605224709", "L1403549550", "L620334303", false);
        int int83 = classWriter1.newField("L2137629854", "", "L490330075");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 51966 + "'", int64 == 51966);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-4990551337079930870L) + "'", long68 == (-4990551337079930870L));
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 13 + "'", int74 == 13);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 19 + "'", int79 == 19);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 24 + "'", int83 == 24);
    }

    @Test
    public void test09112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09112");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        classWriter1.visitEnd();
        int int40 = classWriter1.newField("L869086645", "L1562568468", "L780726187");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 21 + "'", int40 == 21);
    }

    @Test
    public void test09113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09113");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        long long35 = classReader26.readLong(61);
        int int37 = classReader26.readUnsignedShort(63);
        int int38 = classReader26.getAccess();
        int int39 = classReader26.header;
        java.lang.String str40 = classReader26.getSuperName();
        byte[] byteArray41 = classReader26.b;
        java.lang.String[] strArray42 = classReader26.getInterfaces();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 7278098581565042292L + "'", long35 == 7278098581565042292L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 25 + "'", int37 == 25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test09114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09114");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        short short38 = classReader26.readShort(19);
        byte[] byteArray39 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int43 = classWriter41.newClass("L1317000137");
        classWriter41.visitSource("L975788322", "L979622605");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter41.visitAnnotation("L95180820", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 26729 + "'", short38 == (short) 26729);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11 + "'", int43 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor49);
    }

    @Test
    public void test09115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09115");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        methodVisitor25.visitCode();
        methodVisitor25.visitFieldInsn(29, "L577562510", "L721083102", "L442162059");
        methodVisitor25.visitMaxs(13, 21);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitFieldInsn(3, "L298732935", "L2101600596", "L1269304540");
        org.mockito.asm.Label label76 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitJumpInsn(3072, label76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor69);
    }

    @Test
    public void test09116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09116");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(104);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.Class<?> wildcardClass4 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test09117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09117");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        int int37 = classReader26.getAccess();
        int int39 = classReader26.readByte(100);
        java.lang.String str40 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 3);
        java.lang.String str43 = classReader26.getSuperName();
        java.lang.String str44 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test09118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09118");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        java.lang.String str38 = classReader26.getSuperName();
        byte[] byteArray39 = classReader26.b;
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader40.readByte(1694564377);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1694564377");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09119");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter27.visitMethod(0, "", "", "hi!", strArray41);
        int int47 = classWriter27.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter27.visitAnnotation("", true);
        byte[] byteArray51 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        int int54 = classReader52.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(classReader52, (int) '4');
        int int58 = classReader52.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader52, (int) '#');
        byte[] byteArray61 = classReader52.b;
        java.lang.String[] strArray62 = classReader52.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter1.visitMethod(17, "L75359331", "L1628304347", "L1847716459", strArray62);
        classWriter1.visitSource("L1611208075", "L1962189950");
        classWriter1.visitSource("L146399554", "L41216715");
        int int71 = classWriter1.newClass("L1370122910");
        classWriter1.visitSource("L2015149232", "L859506825");
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter1.visitAnnotation("L1579135061", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = classWriter1.visitAnnotation("L2011074501", false);
        org.mockito.asm.Attribute attribute81 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 51966 + "'", int54 == 51966);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 16 + "'", int71 == 16);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test09120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09120");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.String str54 = label51.toString();
        java.lang.String str55 = label51.toString();
        java.lang.String str56 = label51.toString();
        int int57 = label51.getOffset();
        int int58 = label51.getOffset();
        int int59 = label51.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L1660188887" + "'", str54, "L1660188887");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L1660188887" + "'", str55, "L1660188887");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L1660188887" + "'", str56, "L1660188887");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test09121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09121");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        classWriter27.visitOuterClass("hi!", "", "");
        classWriter27.visitEnd();
        java.lang.String[] strArray64 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter27.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter1.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray64);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter1.visitAnnotation("L1004763019", false);
        int int72 = classWriter1.newNameType("hi!", "L1601838046");
        int int76 = classWriter1.newField("L729032685", "L1967276318", "L912963918");
        classWriter1.visitOuterClass("L1113967537", "L612501353", "L1210370409");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 14 + "'", int72 == 14);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20 + "'", int76 == 20);
    }

    @Test
    public void test09122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09122");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L535346328", true);
        int int36 = classWriter1.newClass("L430363814");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 13 + "'", int36 == 13);
    }

    @Test
    public void test09123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09123");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter27.visitAnnotation("hi!", false);
        annotationVisitor54.visitEnum("hi!", "", "hi!");
        annotationVisitor24.visit("", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = annotationVisitor24.visitArray("");
        annotationVisitor61.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = annotationVisitor61.visitAnnotation("L805282072", "L179737210");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = annotationVisitor61.visitArray("L688713901");
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = annotationVisitor67.visitAnnotation("L1442989098", "L474216599");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
    }

    @Test
    public void test09124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09124");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        label34.info = strArray50;
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter29.visitMethod((int) (short) 100, "", "hi!", "", strArray50);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter56.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter56.visitMethod(8, "hi!", "", "", strArray78);
        methodVisitor25.visitFrame(7, (int) (byte) 0, (java.lang.Object[]) strArray50, (int) (short) -1, (java.lang.Object[]) strArray78);
        methodVisitor25.visitIincInsn((int) 'a', 100);
        org.mockito.asm.Attribute attribute85 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(methodVisitor80);
    }

    @Test
    public void test09125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09125");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(classReader13, 78);
        int int17 = classReader13.readUnsignedShort(100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test09126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09126");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L967793538");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09127");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 28532);
        int int3 = classWriter1.newUTF8("L73404539");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test09128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09128");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L1132227206", "L749737959", "L1132227206");
        classWriter1.visitEnd();
        byte[] byteArray34 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray34, 0, 101);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray34, 22, 105);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 11, 76, 49, 49, 51, 50, 50, 50, 55, 50, 48, 54, 7, 0, 5, 1, 0, 10, 76, 55, 52, 57, 55, 51, 55, 57, 53, 57, 12, 0, 7, 0, 5, 9, 0, 6, 0, 8, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 10, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 11, 0, 0, 0, 2, 0, 3, 0, 1, 0, 12, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test09129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09129");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitEnd();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        java.lang.String str86 = label83.toString();
        java.lang.String str87 = label83.toString();
        org.mockito.asm.Label[] labelArray88 = new org.mockito.asm.Label[] {};
        methodVisitor16.visitTableSwitchInsn((int) (short) -1, 1, label83, labelArray88);
        methodVisitor16.visitVarInsn(10, (int) (short) -1);
        methodVisitor16.visitIntInsn(26, 12592);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L2002954257" + "'", str86, "L2002954257");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L2002954257" + "'", str87, "L2002954257");
        org.junit.Assert.assertNotNull(labelArray88);
    }

    @Test
    public void test09130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09130");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(37);
    }

    @Test
    public void test09131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09131");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        short short31 = classReader26.readShort(17);
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        int int34 = classReader26.readByte((int) (byte) 100);
        org.mockito.asm.ClassVisitor classVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept(classVisitor35, (int) (short) 2892);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 3 + "'", short31 == (short) 3);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test09132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09132");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.getItem(2);
        int int37 = classReader26.getAccess();
        int int38 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader26.readUnsignedShort((int) (short) 12342);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
    }

    @Test
    public void test09133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09133");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int30 = classReader26.readInt(2);
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader26.readByte(3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3072");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1161953280) + "'", int30 == (-1161953280));
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test09134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09134");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        int int65 = classWriter45.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter45.visitAnnotation("", true);
        byte[] byteArray69 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray69);
        short short72 = classReader70.readShort((int) (byte) 0);
        int int74 = classReader70.readUnsignedShort((int) ' ');
        long long76 = classReader70.readLong((int) '#');
        int int78 = classReader70.getItem(0);
        java.lang.String str79 = classReader70.getSuperName();
        long long81 = classReader70.readLong((int) (short) 3);
        int int83 = classReader70.readInt(63);
        org.mockito.asm.FieldVisitor fieldVisitor84 = classWriter39.visitField((int) (short) 7, "L1927659804", "L1334226032", "L2132845283", (java.lang.Object) int83);
        classWriter39.visitSource("L976656549", "L1743208258");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short72 + "' != '" + (short) -13570 + "'", short72 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2560 + "'", int74 == 2560);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1126999590795363L + "'", long76 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-4755801206503241215L) + "'", long81 == (-4755801206503241215L));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1659509 + "'", int83 == 1659509);
        org.junit.Assert.assertNotNull(fieldVisitor84);
    }

    @Test
    public void test09135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09135");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(12592, (int) (short) 10);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        methodVisitor51.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = methodVisitor51.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        methodVisitor51.visitJumpInsn((-1), label77);
        java.lang.String str80 = label77.toString();
        java.lang.String str81 = label77.toString();
        java.lang.String str82 = label77.toString();
        java.lang.Object obj83 = label77.info;
        methodVisitor16.visitJumpInsn(458753, label77);
        methodVisitor16.visitVarInsn((int) (byte) 1, 33);
        org.mockito.asm.Attribute attribute88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "L1236699075" + "'", str80, "L1236699075");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L1236699075" + "'", str81, "L1236699075");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "L1236699075" + "'", str82, "L1236699075");
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test09136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09136");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        byte[] byteArray37 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L636727990", "", "L897597087");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        int int67 = classWriter47.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter47.visitAnnotation("", true);
        byte[] byteArray71 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        int int74 = classReader72.readUnsignedShort((int) (byte) 0);
        int int76 = classReader72.readUnsignedShort(1);
        java.lang.String[] strArray77 = classReader72.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter1.visitMethod(0, "L1054441001", "L1685807285", "L710635264", strArray77);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor78.visitAnnotationDefault();
        methodVisitor78.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor78.visitParameterAnnotation(51052546, "L523453504", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 51966 + "'", int74 == 51966);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 65210 + "'", int76 == 65210);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test09137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09137");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor15.visitAnnotation("L275489687", "L275489687");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = annotationVisitor18.visitAnnotation("L2014806404", "L120720304");
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter24.newMethod("", "", "hi!", true);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter24.visitMethod(0, "", "", "hi!", strArray38);
        int int44 = classWriter24.newMethod("", "", "hi!", false);
        classWriter24.visitInnerClass("", "", "", (int) ' ');
        classWriter24.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter24.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int63 = classWriter24.newMethod("L590888141", "L959574331", "L897597087", true);
        int int67 = classWriter24.newField("L2132431650", "", "L976618452");
        annotationVisitor21.visit("L492184427", (java.lang.Object) "");
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 18 + "'", int63 == 18);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 23 + "'", int67 == 23);
    }

    @Test
    public void test09138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09138");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        int int44 = classReader38.readInt(0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter1.visitMethod((int) (short) 1, "L238476442", "L999961130", "L535346328", strArray45);
        methodVisitor46.visitIincInsn(1793, 2561);
        methodVisitor46.visitTypeInsn(13874, "L983840536");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor56 = methodVisitor46.visitParameterAnnotation(5, "L1521482602", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-889275714) + "'", int44 == (-889275714));
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
    }

    @Test
    public void test09139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09139");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMethodInsn((int) (short) 100, "L1601838046", "L749737959", "L897597087");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((-1), 4);
        methodVisitor16.visitFieldInsn(12592, "L680573325", "L535346328", "");
        methodVisitor16.visitTypeInsn(4, "L1004763019");
        methodVisitor16.visitIntInsn(3072, 256);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter47.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter47.visitMethod(8, "hi!", "", "", strArray69);
        methodVisitor71.visitIntInsn((int) (short) 1, 6);
        methodVisitor71.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor71.visitAnnotation("hi!", false);
        methodVisitor71.visitMethodInsn((int) (short) -1, "hi!", "hi!", "hi!");
        methodVisitor71.visitMultiANewArrayInsn("L1847716459", 9);
        methodVisitor71.visitFieldInsn(163, "L40714478", "L71945869", "L2037791973");
        methodVisitor16.visitLdcInsn((java.lang.Object) 163);
        methodVisitor16.visitIntInsn(51966, 15);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor99 = methodVisitor16.visitParameterAnnotation((int) (byte) 10, "L550782947", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test09140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09140");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        int int33 = classReader26.readUnsignedShort(5);
        short short35 = classReader26.readShort(23);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 1 + "'", short35 == (short) 1);
    }

    @Test
    public void test09141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09141");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L416240281", "L71945869");
        classWriter1.visitSource("L885118192", "L1300307050");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
    }

    @Test
    public void test09142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09142");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, (int) 'a');
        byte[] byteArray34 = classWriter33.toByteArray();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter40.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter40.visitMethod(8, "hi!", "", "", strArray62);
        methodVisitor64.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor64.visitJumpInsn(1, label69);
        methodVisitor64.visitMaxs(3, 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = methodVisitor64.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor64.visitAnnotation("L242883751", false);
        methodVisitor64.visitVarInsn(9, (int) (byte) 100);
        methodVisitor64.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter33.visitField(204, "L1661423890", "L2097292751", "L809460736", (java.lang.Object) methodVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@39c51aeb");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test09143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09143");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        int int32 = classReader26.header;
        short short34 = classReader26.readShort((int) (short) 100);
        int int36 = classReader26.readInt(11);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        long long39 = classReader26.readLong(51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 1 + "'", short34 == (short) 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1792 + "'", int36 == 1792);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2624986962354548L + "'", long39 == 2624986962354548L);
    }

    @Test
    public void test09144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09144");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader3 = new org.mockito.asm.ClassReader(byteArray0, 34, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09145");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        methodVisitor45.visitFieldInsn(8, "hi!", "", "");
        methodVisitor45.visitTypeInsn((int) (byte) 100, "");
        methodVisitor25.visitLdcInsn((java.lang.Object) (byte) 100);
        methodVisitor25.visitVarInsn(12, (-1107296256));
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        methodVisitor75.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        methodVisitor75.visitLabel(label79);
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter(0);
        int int84 = classWriter82.newConst((java.lang.Object) (short) 1);
        classWriter82.visitSource("", "");
        label79.info = "";
        int int89 = label79.getOffset();
        java.lang.String str90 = label79.toString();
        java.lang.Object obj91 = label79.info;
        int int92 = label79.getOffset();
        java.lang.Object obj93 = null;
        label79.info = obj93;
        java.lang.Object obj95 = label79.info;
        methodVisitor25.visitJumpInsn(201326848, label79);
        methodVisitor25.visitIntInsn((int) (short) 0, 808597809);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "L442236114" + "'", str90, "L442236114");
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + "" + "'", obj91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test09146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09146");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        int int36 = classWriter31.newMethod("L624707113", "L1017623370", "L2000102916", false);
        classWriter31.visitOuterClass("L3043237", "L1850773126", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter31.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter31.visitAnnotation("L362499933", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = annotationVisitor46.visitAnnotation("L214240977", "L913773226");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor49);
    }

    @Test
    public void test09147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09147");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        char[] charArray38 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj39 = classReader26.readConst((int) (short) 4, charArray38);
        java.lang.String str40 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        int int70 = classReader68.readUnsignedShort((int) (byte) 0);
        short short72 = classReader68.readShort(7);
        int int73 = classReader68.header;
        int int75 = classReader68.readInt(19);
        char[] charArray80 = new char[] { '4', '#', '#' };
        java.lang.String str81 = classReader68.readUTF8(14, charArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = classReader26.readUTF8(512, charArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "" + "'", obj39, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 51966 + "'", int70 == 51966);
        org.junit.Assert.assertTrue("'" + short72 + "' != '" + (short) 0 + "'", short72 == (short) 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 90 + "'", int73 == 90);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1751720204 + "'", int75 == 1751720204);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test09148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09148");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L59063553", true);
        methodVisitor16.visitInsn(0);
        methodVisitor16.visitCode();
        methodVisitor16.visitVarInsn((int) (byte) 0, 1751720204);
        methodVisitor16.visitFieldInsn(7, "L936297181", "L2069898161", "L1938659678");
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test09149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09149");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L1969123537", false);
        classWriter1.visitSource("L170800745", "L1700758411");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("L975788322", true);
        classWriter1.visitInnerClass("L1235615576", "L940801507", "L1009580268", (int) (short) 1792);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test09150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09150");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = fieldVisitor31.visitAnnotation("L636727990", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor31.visitAnnotation("L579675851", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor31.visitAnnotation("L242883751", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = annotationVisitor40.visitAnnotation("L1221492672", "L684697689");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = annotationVisitor40.visitAnnotation("", "L1967276318");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = annotationVisitor40.visitArray("L977826039");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test09151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09151");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 48640);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        int int56 = classWriter36.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter36.visitAnnotation("", true);
        byte[] byteArray60 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        short short63 = classReader61.readShort((int) (byte) 0);
        int int65 = classReader61.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(classReader61, 0);
        java.lang.String[] strArray68 = classReader61.getInterfaces();
        byte[] byteArray69 = classReader61.b;
        java.lang.String str70 = classReader61.getSuperName();
        long long72 = classReader61.readLong(14);
        java.lang.String str73 = classReader61.getSuperName();
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader61, 16);
        int int76 = classReader61.header;
        char[] charArray83 = new char[] { 'a', '#', '4', '4', '4' };
        java.lang.Object obj84 = classReader61.readConst((int) (short) 4, charArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = classReader26.readConst(40, charArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 40");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) -13570 + "'", short63 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2560 + "'", int65 == 2560);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 282574545512737L + "'", long72 == 282574545512737L);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 90 + "'", int76 == 90);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "a#444");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "a#444");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[a, #, 4, 4, 4]");
        org.junit.Assert.assertEquals("'" + obj84 + "' != '" + "" + "'", obj84, "");
    }

    @Test
    public void test09152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09152");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readInt(5);
        long long14 = classReader7.readLong(78);
        java.lang.String[] strArray15 = classReader7.getInterfaces();
        byte[] byteArray16 = classReader7.b;
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(classReader7, 29);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = classReader7.readLong((-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test09153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09153");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitIntInsn(0, (int) (byte) 10);
        methodVisitor16.visitIincInsn(26, (int) (short) 0);
        methodVisitor16.visitIntInsn(0, (-1107296256));
        methodVisitor16.visitLdcInsn((java.lang.Object) "L815303353");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test09154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09154");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        java.lang.String str38 = classReader26.getSuperName();
        int int39 = classReader26.header;
        short short41 = classReader26.readShort(7);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = classReader26.getItem((int) (short) 22121);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22121");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
    }

    @Test
    public void test09155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09155");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        classWriter1.visitOuterClass("L1132227206", "L1132227206", "L749737959");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("L1423401218", true);
        java.lang.Object obj20 = null;
        org.mockito.asm.FieldVisitor fieldVisitor21 = classWriter1.visitField(67764226, "L1984968925", "L1735602342", "L1261572287", obj20);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = fieldVisitor21.visitAnnotation("L1967552389", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = fieldVisitor21.visitAnnotation("L1527568082", true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(fieldVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
    }

    @Test
    public void test09156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09156");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        classWriter31.visitOuterClass("L1757134939", "L1721954051", "L415508906");
        int int37 = classWriter31.newClass("L1249077817");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
    }

    @Test
    public void test09157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09157");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        methodVisitor45.visitFieldInsn(8, "hi!", "", "");
        methodVisitor45.visitTypeInsn((int) (byte) 100, "");
        methodVisitor25.visitLdcInsn((java.lang.Object) (byte) 100);
        methodVisitor25.visitVarInsn(12, (-1107296256));
        methodVisitor25.visitIincInsn((int) (byte) 100, (int) (short) 100);
        methodVisitor25.visitVarInsn((int) (byte) 1, (int) (short) 2387);
        methodVisitor25.visitIincInsn(10, 82);
        methodVisitor25.visitMethodInsn((int) (short) 7, "L282070366", "L1149107046", "L1999236766");
        methodVisitor25.visitVarInsn((int) (short) 12342, 1000814);
        methodVisitor25.visitFieldInsn(196864, "L550889567", "L777505617", "L745089702");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
    }

    @Test
    public void test09158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09158");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        byte[] byteArray36 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        byte[] byteArray38 = classReader37.b;
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter41.newConst((java.lang.Object) (short) 1);
        classWriter41.visitSource("", "L2000102916");
        int int50 = classWriter41.newField("L1601838046", "L2000102916", "\001");
        classWriter41.visitOuterClass("L415508906", "L1742400311", "L1358038794");
        int int56 = classWriter41.newUTF8("L1055269373");
        // The following exception was thrown during execution in test generation
        try {
            classReader39.accept((org.mockito.asm.ClassVisitor) classWriter41, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 14 + "'", int56 == 14);
    }

    @Test
    public void test09159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09159");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        int int51 = classWriter1.newClass("L1132227206");
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int62 = classWriter57.newMethod("", "", "hi!", true);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor72 = classWriter57.visitMethod(0, "", "", "hi!", strArray71);
        int int77 = classWriter57.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = classWriter57.visitAnnotation("", true);
        byte[] byteArray81 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        short short84 = classReader82.readShort((int) (byte) 0);
        int int86 = classReader82.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter88 = new org.mockito.asm.ClassWriter(classReader82, 0);
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter(classReader82, 0);
        org.mockito.asm.ClassWriter classWriter92 = new org.mockito.asm.ClassWriter(classReader82, (int) (byte) 100);
        byte[] byteArray93 = classReader82.b;
        org.mockito.asm.ClassReader classReader94 = new org.mockito.asm.ClassReader(byteArray93);
        java.lang.String[] strArray95 = classReader94.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor96 = classWriter1.visitMethod(26729, "L372427501", "L763890461", "L961429004", strArray95);
        classWriter1.visitSource("L1397998158", "L922112985");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 18 + "'", int51 == 18);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(methodVisitor72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6 + "'", int77 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short84 + "' != '" + (short) -13570 + "'", short84 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2560 + "'", int86 == 2560);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(methodVisitor96);
    }

    @Test
    public void test09160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09160");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int35 = classReader26.readByte(0);
        byte[] byteArray36 = classReader26.b;
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        int int38 = classReader26.header;
        java.lang.String[] strArray39 = classReader26.getInterfaces();
        int int40 = classReader26.header;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 202 + "'", int35 == 202);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
    }

    @Test
    public void test09161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09161");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        int int39 = classReader26.readInt(82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1869898100 + "'", int39 == 1869898100);
    }

    @Test
    public void test09162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09162");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        int int39 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(872);
        int int43 = classWriter41.newClass("L1804838555");
        byte[] byteArray44 = classWriter41.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter41, 12592);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 11, 76, 49, 56, 48, 52, 56, 51, 56, 53, 53, 53, 7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09163");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter20.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter20.visitMethod(8, "hi!", "", "", strArray42);
        methodVisitor44.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        methodVisitor44.visitJumpInsn(1, label49);
        methodVisitor44.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = methodVisitor44.visitAnnotation("L275489687", false);
        methodVisitor44.visitCode();
        methodVisitor44.visitIincInsn(14, (int) (short) 0);
        methodVisitor44.visitTypeInsn((int) (byte) 1, "L1004763019");
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = methodVisitor44.visitAnnotation("L1827009202", true);
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter14.visitField(28532, "L1901444169", "L81546457", "L911323346", (java.lang.Object) "L1827009202");
        fieldVisitor65.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(fieldVisitor65);
    }

    @Test
    public void test09164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09164");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 768);
        org.mockito.asm.Attribute attribute2 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09165");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L428215077", "", "\001", (int) (byte) 100);
        classWriter1.visitOuterClass("L9401833", "L1058109766", "L755949095");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L1901444169", false);
        classWriter1.visitSource("L1189635920", "L1321167593");
        byte[] byteArray25 = classWriter1.toByteArray();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(byteArray25);
    }

    @Test
    public void test09166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09166");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L242883751", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("L1628304347", false);
        classWriter1.visitEnd();
        int int34 = classWriter1.newUTF8("");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter40.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label55 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int62 = classWriter57.newMethod("", "", "hi!", true);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor72 = classWriter57.visitMethod(0, "", "", "hi!", strArray71);
        label55.info = strArray71;
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter50.visitMethod((int) (short) 100, "", "hi!", "", strArray71);
        classWriter40.visit(9, (int) (byte) 100, "L238476442", "L275489687", "", strArray71);
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter1.visitMethod(51966, "L2132431650", "", "L1315079658", strArray71);
        methodVisitor76.visitMaxs((int) (byte) 10, (int) (short) 3909);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor76.visitParameterAnnotation(32, "L345550585", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(methodVisitor72);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(methodVisitor76);
    }

    @Test
    public void test09167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09167");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            short short38 = classReader26.readShort(872);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 872");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test09168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09168");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitCode();
        methodVisitor25.visitEnd();
        methodVisitor25.visitFieldInsn((int) (short) 17784, "L755844592", "L745089702", "L1505866272");
        methodVisitor25.visitEnd();
        methodVisitor25.visitInsn(16);
        methodVisitor25.visitFieldInsn((int) 'a', "L100659198", "L929163950", "L1130683384");
        methodVisitor25.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test09169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09169");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        int int18 = classWriter1.newClass("L1581248331");
        classWriter1.visitOuterClass("L1485760031", "L1014361754", "");
        java.lang.Class<?> wildcardClass23 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test09170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09170");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L1429849124", "L755844592", "L1497855016");
        classWriter1.visitInnerClass("L667379532", "L2101600596", "L8293919", 52);
    }

    @Test
    public void test09171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09171");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMaxs(9, (int) (byte) -1);
        methodVisitor16.visitIincInsn(8, (int) ' ');
        methodVisitor16.visitMethodInsn(1, "L529122729", "L110679537", "L488861128");
        methodVisitor16.visitMultiANewArrayInsn("L278038742", (int) (byte) 0);
        methodVisitor16.visitVarInsn(0, (int) (short) 12598);
        methodVisitor16.visitVarInsn(0, (int) (short) 2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09172");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int7 = classWriter1.newField("hi!", "L275489687", "L1028579140");
        byte[] byteArray8 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("L1162526488", "L1936126716", "L1221801792", (int) (byte) 0);
        int int18 = classWriter1.newMethod("L975788322", "L2055992619", "L765138463", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 12, 0, 4, 0, 5, 9, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 18 + "'", int18 == 18);
    }

    @Test
    public void test09173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09173");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        methodVisitor62.visitIincInsn(13, 202);
        methodVisitor62.visitInsn((int) (byte) 10);
        methodVisitor62.visitTypeInsn(3, "L1002757230");
        methodVisitor62.visitInsn(24);
        methodVisitor62.visitMultiANewArrayInsn("L112220547", 78);
        methodVisitor62.visitFieldInsn((-889275714), "L71360886", "L1387910543", "L855647295");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
    }

    @Test
    public void test09174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09174");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.Label label1 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(5);
        classWriter3.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray8 = classWriter3.toByteArray();
        label1.info = byteArray8;
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray8);
        int int12 = classReader10.getItem((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(classReader10, 12);
        int int15 = classReader10.getAccess();
        label0.info = classReader10;
        java.lang.Object obj17 = label0.info;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = label0.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test09175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09175");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor46.visitCode();
        methodVisitor46.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        java.lang.String str79 = label77.toString();
        methodVisitor46.visitLineNumber((int) (short) -1, label77);
        methodVisitor16.visitLabel(label77);
        java.lang.String str82 = label77.toString();
        int int83 = label77.getOffset();
        java.lang.String str84 = label77.toString();
        java.lang.String str85 = label77.toString();
        int int86 = label77.getOffset();
        java.lang.Object obj87 = label77.info;
        java.lang.Object obj88 = label77.info;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L719893634" + "'", str79, "L719893634");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "L719893634" + "'", str82, "L719893634");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L719893634" + "'", str84, "L719893634");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L719893634" + "'", str85, "L719893634");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test09176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09176");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L683506282", "L139544873", "L1142940414");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test09177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09177");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        java.lang.String str12 = classReader7.getSuperName();
        int int13 = classReader7.header;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        classWriter15.visitOuterClass("hi!", "", "");
        int int27 = classWriter15.newNameType("hi!", "hi!");
        int int30 = classWriter15.newNameType("hi!", "");
        java.lang.Object obj35 = null;
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter15.visitField(9, "L1601838046", "L2062266913", "L680573325", obj35);
        classWriter15.visitOuterClass("L1847716459", "L275489687", "L680573325");
        int int44 = classWriter15.newField("L1208026886", "L680573325", "L1386483578");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter15.visitAnnotation("L1387910543", false);
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter15, 131076);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 78 + "'", int13 == 78);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21 + "'", int44 == 21);
        org.junit.Assert.assertNotNull(annotationVisitor47);
    }

    @Test
    public void test09178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09178");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        int int37 = classWriter17.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter43.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter43.visitMethod(8, "hi!", "", "", strArray65);
        classWriter43.visitOuterClass("hi!", "", "");
        classWriter43.visitEnd();
        java.lang.String[] strArray80 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter43.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter17.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter1.visitMethod(2561, "L749737959", "L2062266913", "L1368708044", strArray80);
        int int86 = classWriter1.newNameType("L1058656014", "L1009580268");
        classWriter1.visitSource("L127591338", "L529122729");
        classWriter1.visitSource("L59063553", "L2002866190");
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = classWriter1.visitAnnotation("L318923605", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = annotationVisitor95.visitArray("L1132227206");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 14 + "'", int86 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor95);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test09179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09179");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = methodVisitor25.visitAnnotation("hi!", false);
        annotationVisitor34.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test09180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09180");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        classWriter1.visitInnerClass("", "L1028579140", "", 8);
        byte[] byteArray37 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        int int40 = classReader38.getItem(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = classReader38.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 1, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 5, 0, 0, 0, 0, 0, 0, 0, 10, 7, 0, 4, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 5, 0, 2, 0, 10, 0, 0, 0, 2, 0, 7, 0, 11, 0, 0, 0, 2, 0, 6, 0, 1, 0, 100, 0, 1, 0, 2, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 11, 0, 0, 0, 2, 0, 1, 0, 1, 0, 13, 0, 0, 0, 10, 0, 1, 0, 3, 0, 9, 0, 1, 0, 8]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test09181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09181");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("L1221801792", (int) (short) 1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotation("L2133049941", false);
        methodVisitor16.visitTypeInsn(1000814, "L364320201");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test09182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09182");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 163);
        int int39 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, 16779852);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
    }

    @Test
    public void test09183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09183");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L75359331", "L1930348385");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        int int57 = classWriter37.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter37.visitAnnotation("", true);
        byte[] byteArray61 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        short short64 = classReader62.readShort((int) (byte) 0);
        int int66 = classReader62.readUnsignedShort((int) ' ');
        long long68 = classReader62.readLong((int) '#');
        int int70 = classReader62.readInt(7);
        int int71 = classReader62.header;
        int int73 = classReader62.readByte(15);
        java.lang.String[] strArray74 = classReader62.getInterfaces();
        classWriter1.visit(202, 65210, "L838653747", "L935241002", "L1315470340", strArray74);
        classWriter1.visitOuterClass("L749100806", "L1283200231", "L1757155508");
        classWriter1.visitSource("L1429849124", "L1802147735");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) -13570 + "'", short64 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2560 + "'", int66 == 2560);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1126999590795363L + "'", long68 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2561 + "'", int70 == 2561);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 90 + "'", int71 == 90);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(strArray74);
    }

    @Test
    public void test09184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09184");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        classWriter1.visitSource("L728847777", "L59063553");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("L1061017776", true);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter35.visitAnnotation("L579675851", true);
        byte[] byteArray39 = classWriter35.toByteArray();
        byte[] byteArray40 = classWriter35.toByteArray();
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        int int73 = classWriter53.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter53.visitAnnotation("", true);
        byte[] byteArray77 = classWriter53.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        short short80 = classReader78.readShort((int) (byte) 0);
        int int82 = classReader78.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(classReader78, 0);
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(classReader78, 0);
        int int88 = classReader78.getItem(2);
        java.lang.String[] strArray89 = classReader78.getInterfaces();
        classWriter46.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray89);
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter35.visitMethod(0, "L339402249", "L1423401218", "L918742398", strArray89);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter1.visitMethod((int) (short) 2048, "L1223439170", "L1158904698", "L1315470340", strArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor92.visitParameterAnnotation((int) (short) -326, "L1750086343", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short80 + "' != '" + (short) -13570 + "'", short80 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2560 + "'", int82 == 2560);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 14 + "'", int88 == 14);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor92);
    }

    @Test
    public void test09185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09185");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        methodVisitor16.visitIincInsn(6, 65210);
        methodVisitor16.visitTypeInsn(256, "L64402136");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09186");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        methodVisitor16.visitEnd();
        methodVisitor16.visitIincInsn(15, 23);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitVarInsn(9, 61);
        methodVisitor16.visitIntInsn(23, 17);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L689781346" + "'", str75, "L689781346");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test09187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09187");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        java.lang.String str36 = classReader26.getSuperName();
        short short38 = classReader26.readShort((int) (short) 0);
        int int39 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, 512);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) -13570 + "'", short38 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test09188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09188");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter1.visitAnnotation("L1287376048", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = annotationVisitor86.visitAnnotation("", "L1605224709");
        annotationVisitor89.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = annotationVisitor89.visitArray("L1709223207");
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = annotationVisitor89.visitArray("L202294627");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test09189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09189");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        int int11 = classWriter1.newMethod("L1013343419", "\001", "L488861128", true);
        int int15 = classWriter1.newField("L1962189950", "L1283200231", "L1387910543");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("L1611208075", true);
        classWriter1.visitEnd();
        int int22 = classWriter1.newNameType("L919963785", "L550889567");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 17 + "'", int15 == 17);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 21 + "'", int22 == 21);
    }

    @Test
    public void test09190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09190");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 78);
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        long long39 = classReader26.readLong((int) '4');
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, 875903244);
        int int43 = classReader26.readInt(139);
        char[] charArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = classReader26.readConst((int) '4', charArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 671996662362764405L + "'", long39 == 671996662362764405L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1536 + "'", int43 == 1536);
    }

    @Test
    public void test09191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09191");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L75359331", "L1930348385");
        classWriter1.visitEnd();
        byte[] byteArray31 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray31, 0, (int) (short) -1);
        java.lang.String[] strArray35 = classReader34.getInterfaces();
        java.lang.String[] strArray36 = classReader34.getInterfaces();
        int int37 = classReader34.header;
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader34.readUnsignedShort(554434561);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 204 + "'", int37 == 204);
    }

    @Test
    public void test09192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09192");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitTypeInsn((int) (byte) -1, "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitEnd();
        org.mockito.asm.Label label89 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitJumpInsn((int) (short) 2387, label89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L828287521" + "'", str75, "L828287521");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test09193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09193");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray7);
        int int10 = classReader8.readInt(1);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader8, 40);
        java.lang.String str13 = classReader8.getSuperName();
        byte[] byteArray14 = classReader8.b;
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray14);
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        int int38 = classWriter18.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter18.visitAnnotation("", true);
        byte[] byteArray42 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        short short45 = classReader43.readShort((int) (byte) 0);
        int int47 = classReader43.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(classReader43, 0);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader43, 0);
        int int53 = classReader43.readByte((int) (byte) 10);
        char[] charArray58 = new char[] { '#', '4', '4' };
        java.lang.String str59 = classReader43.readUTF8(100, charArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = classReader15.readConst((int) (short) 8460, charArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8460");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 2, 0, 2, 0, 4, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-21316096) + "'", int10 == (-21316096));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 2, 0, 2, 0, 4, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) -13570 + "'", short45 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2560 + "'", int47 == 2560);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test09194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09194");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader3 = new org.mockito.asm.ClassReader(byteArray0, 554434561, 50331648);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09195");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMethodInsn((int) (short) 100, "L1601838046", "L749737959", "L897597087");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((-1), 4);
        methodVisitor16.visitFieldInsn(12592, "L680573325", "L535346328", "");
        methodVisitor16.visitTypeInsn(4, "L1004763019");
        methodVisitor16.visitTypeInsn((int) (short) 8460, "L295165602");
        methodVisitor16.visitIincInsn(49, (int) (short) -16896);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09196");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 78);
        byte[] byteArray36 = classWriter35.toByteArray();
        classWriter35.visitSource("L1577334486", "L1710158961");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09197");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        methodVisitor25.visitMethodInsn(10, "L749737959", "L488861128", "L59063553");
        methodVisitor25.visitFieldInsn(254, "L688061379", "L1505866272", "L2127085380");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        methodVisitor53.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label57 = new org.mockito.asm.Label();
        methodVisitor53.visitLabel(label57);
        java.lang.Object obj59 = label57.info;
        java.lang.Object obj60 = label57.info;
        int int61 = label57.getOffset();
        methodVisitor25.visitLineNumber(7, label57);
        java.lang.Object obj63 = label57.info;
        int int64 = label57.getOffset();
        java.lang.Object obj65 = label57.info;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(obj65);
    }

    @Test
    public void test09198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09198");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter1.visitAnnotation("L809431533", false);
        annotationVisitor54.visitEnd();
        java.lang.Object obj57 = null;
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor54.visit("L1796582550", obj57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test09199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09199");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitIincInsn((int) (byte) 10, 6);
        methodVisitor16.visitMultiANewArrayInsn("L897597087", 100);
        methodVisitor16.visitVarInsn(16, (int) 'a');
        methodVisitor16.visitIntInsn((int) (short) 10, 29);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09200");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int10 = classReader9.header;
        int int12 = classReader9.readInt((int) (short) 7);
        int int14 = classReader9.readUnsignedShort((int) (short) 1);
        int int16 = classReader9.readUnsignedShort(5);
        int int17 = classReader9.getAccess();
        byte[] byteArray18 = classReader9.b;
        java.lang.String str19 = classReader9.getSuperName();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 78 + "'", int10 == 78);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1793 + "'", int12 == 1793);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 65210 + "'", int14 == 65210);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test09201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09201");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L75359331", "L1930348385");
        classWriter1.visitEnd();
        byte[] byteArray31 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray31, 0, (int) (short) -1);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray31);
        int int36 = classReader35.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader35.getItem(779);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 779");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test09202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09202");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        char[] charArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = classReader37.readConst(184549888, charArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 184549888");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
    }

    @Test
    public void test09203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09203");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        byte[] byteArray32 = classReader26.b;
        int int33 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short35 = classReader26.readShort(1751720204);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1751720204");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test09204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09204");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitSource("L636727990", "");
        org.mockito.asm.Label label31 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        label31.info = strArray47;
        classWriter1.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray47);
        classWriter1.visitSource("L529122729", "L2037791973");
        classWriter1.visitSource("L664111037", "L1930348385");
        classWriter1.visitSource("L976618452", "L1629650344");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
    }

    @Test
    public void test09205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09205");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader38, 0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        classWriter1.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray45);
        classWriter1.visitSource("L264795169", "L1028579140");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("L1208026886", false);
        classWriter1.visitInnerClass("L475038998", "L1477812870", "", 78);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test09206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09206");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        methodVisitor25.visitIincInsn((int) (short) 4, 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter38.visitMethod(8, "hi!", "", "", strArray60);
        methodVisitor62.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = methodVisitor62.visitAnnotationDefault();
        methodVisitor62.visitMaxs((int) ' ', (int) '4');
        methodVisitor62.visitVarInsn(22, (int) (short) 3072);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        java.lang.String str75 = label74.toString();
        methodVisitor62.visitJumpInsn(20, label74);
        java.lang.String str77 = label74.toString();
        methodVisitor25.visitJumpInsn(14, label74);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor66);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1500357990" + "'", str75, "L1500357990");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "L1500357990" + "'", str77, "L1500357990");
    }

    @Test
    public void test09207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09207");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        classWriter32.visitOuterClass("hi!", "", "");
        int int44 = classWriter32.newNameType("hi!", "hi!");
        int int47 = classWriter32.newNameType("hi!", "");
        java.lang.Object obj52 = null;
        org.mockito.asm.FieldVisitor fieldVisitor53 = classWriter32.visitField(9, "L1601838046", "L2062266913", "L680573325", obj52);
        classWriter32.visitSource("L636727990", "");
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        label62.info = strArray78;
        classWriter32.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray78);
        classWriter1.visit((int) (short) 0, 2, "L636727990", "L1601838046", "L238476442", strArray78);
        classWriter1.visitSource("L488861128", "L624707113");
        classWriter1.visitEnd();
        int int89 = classWriter1.newNameType("L620334303", "L1386483578");
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = classWriter1.visitAnnotation("L306461258", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor53);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 13 + "'", int89 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test09208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09208");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        methodVisitor17.visitIntInsn(104, (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter22.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter22.visitMethod(8, "hi!", "", "", strArray44);
        methodVisitor46.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = methodVisitor46.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        methodVisitor68.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        methodVisitor68.visitLabel(label72);
        methodVisitor46.visitJumpInsn((-1), label72);
        java.lang.String str75 = label72.toString();
        java.lang.String str76 = label72.toString();
        methodVisitor17.visitLabel(label72);
        label72.info = "L644674685";
        java.lang.String str80 = label72.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L884179996" + "'", str75, "L884179996");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L884179996" + "'", str76, "L884179996");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "L884179996" + "'", str80, "L884179996");
    }

    @Test
    public void test09209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09209");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitInnerClass("L1847716459", "L579675851", "L976656549", (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L2062266913", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        byte[] byteArray40 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        int int43 = classReader41.readUnsignedShort((int) (byte) 0);
        short short45 = classReader41.readShort(7);
        int int46 = classReader41.header;
        int int47 = classReader41.getAccess();
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(classReader41, 23);
        int int51 = classReader41.readByte(90);
        short short53 = classReader41.readShort(19);
        java.lang.String[] strArray54 = classReader41.getInterfaces();
        classWriter1.visit(65536, 872, "L1223439170", "L2141212410", "L46285906", strArray54);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(5);
        classWriter61.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter61.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        fieldVisitor72.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = fieldVisitor72.visitAnnotation("L755844592", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = fieldVisitor72.visitAnnotation("L2034910382", false);
        org.mockito.asm.FieldVisitor fieldVisitor80 = classWriter1.visitField((-1107296256), "L77196307", "L120713780", "L607357044", (java.lang.Object) false);
        int int84 = classWriter1.newField("L560005029", "L1562158187", "L2012296629");
        int int86 = classWriter1.newClass("L724436236");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 51966 + "'", int43 == 51966);
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 0 + "'", short45 == (short) 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 90 + "'", int46 == 90);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 26729 + "'", short53 == (short) 26729);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(fieldVisitor80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 21 + "'", int84 == 21);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 23 + "'", int86 == 23);
    }

    @Test
    public void test09210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09210");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        int int38 = classReader26.readUnsignedShort(0);
        java.lang.String str39 = classReader26.getSuperName();
        int int40 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, 26);
        java.lang.String str43 = classReader26.getSuperName();
        java.lang.String str44 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            short short46 = classReader26.readShort((int) (short) 1280);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1280");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 51966 + "'", int38 == 51966);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test09211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09211");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(28532);
        classWriter1.visitOuterClass("L1130683384", "L404468677", "L278437344");
    }

    @Test
    public void test09212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09212");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(5);
        classWriter18.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int25 = classWriter18.newClass("");
        byte[] byteArray26 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray26, 0, (int) '#');
        int int30 = classReader29.header;
        java.lang.String[] strArray31 = classReader29.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter1.visitMethod((int) (short) -1, "L1075066296", "L1628304347", "L264795169", strArray31);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        classWriter34.visitSource("", "L2000102916");
        int int44 = classWriter34.newMethod("", "L2062266913", "L809431533", false);
        classWriter34.visitEnd();
        classWriter34.visitOuterClass("hi!", "L809431533", "L636727990");
        byte[] byteArray50 = classWriter34.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor32.visitLdcInsn((java.lang.Object) byteArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@669352fb");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 40 + "'", int30 == 40);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 12, 0, 5, 0, 10, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 2, 0, 2, 0, 13, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 0, 14, 0, 0, 0, 4, 0, 9, 0, 11]");
    }

    @Test
    public void test09213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09213");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "", "L1889100462");
        byte[] byteArray7 = classWriter1.toByteArray();
        classWriter1.visitSource("L1434815605", "L30632432");
        org.mockito.asm.Attribute attribute11 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 11, 76, 49, 56, 56, 57, 49, 48, 48, 52, 54, 50, 12, 0, 1, 0, 3, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 4, 0, 2, 0, 4]");
    }

    @Test
    public void test09214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09214");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitCode();
        methodVisitor25.visitMethodInsn(6, "L791392221", "L1403549550", "L560005029");
        methodVisitor25.visitVarInsn(256, (int) (short) 8460);
        methodVisitor25.visitInsn(199680);
        methodVisitor25.visitMaxs(65792, 67764226);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test09215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09215");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(1751720204, 875903244);
        methodVisitor16.visitTypeInsn(26729, "L1952894981");
        methodVisitor16.visitMethodInsn(0, "L2062266913", "L1292845306", "L1083553839");
        methodVisitor16.visitMaxs(33, 65210);
        methodVisitor16.visitIntInsn(1792, 1763773440);
        methodVisitor16.visitCode();
        methodVisitor16.visitTypeInsn((int) ' ', "L455575035");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test09216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09216");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(3, 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitAnnotation("L242883751", false);
        methodVisitor25.visitVarInsn(9, (int) (byte) 100);
        methodVisitor25.visitIincInsn(63, 254);
        methodVisitor25.visitMethodInsn((int) (byte) 1, "L152278810", "", "L939302844");
        methodVisitor25.visitTypeInsn((int) (byte) 100, "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test09217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09217");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong((int) (short) 3);
        int int38 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader26.readUnsignedShort(33555457);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-4755801206503241215L) + "'", long37 == (-4755801206503241215L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
    }

    @Test
    public void test09218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09218");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitIntInsn(29, 28);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = methodVisitor25.visitAnnotation("L1508588630", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor63);
    }

    @Test
    public void test09219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09219");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int34 = classReader26.header;
        short short36 = classReader26.readShort(0);
        int int38 = classReader26.readByte((int) (byte) 100);
        int int39 = classReader26.getAccess();
        int int41 = classReader26.readByte(4);
        byte[] byteArray42 = classReader26.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09220");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        char[] charArray38 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj39 = classReader26.readConst((int) (short) 4, charArray38);
        byte[] byteArray40 = classReader26.b;
        int int41 = classReader26.header;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "" + "'", obj39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 90 + "'", int41 == 90);
    }

    @Test
    public void test09221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09221");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        classWriter1.visitSource("L2132757815", "L467340186");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(1793);
        org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter1.visitField(1, "L1269304540", "L189750198", "", (java.lang.Object) 1793);
        classWriter1.visitOuterClass("L1540520089", "L1111133036", "L1530458799");
        int int60 = classWriter1.newField("L665659274", "RuntimeVisibleAnnotations", "L2117797780");
        classWriter1.visitSource("", "L884179996");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 24 + "'", int60 == 24);
    }

    @Test
    public void test09222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09222");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-21316096));
        org.mockito.asm.FieldVisitor fieldVisitor7 = classWriter1.visitField(2560, "L116545920", "L76446579", "L162365000", (java.lang.Object) 909717811);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = fieldVisitor7.visitAnnotation("L278437344", true);
        annotationVisitor10.visitEnum("L791392221", "L1061017776", "L648632758");
        org.junit.Assert.assertNotNull(fieldVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
    }

    @Test
    public void test09223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09223");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L897597087", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = annotationVisitor14.visitArray("L9401833");
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor14.visitAnnotation("L9401833", "L199336802");
        annotationVisitor19.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor19.visitArray("L1480783762");
        annotationVisitor22.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test09224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09224");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        java.lang.String str38 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 16);
        int int41 = classReader26.getAccess();
        byte[] byteArray42 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray42, 16, 808464688);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09225");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L1601838046", true);
        int int16 = classWriter1.newClass("L936297181");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter23.newConst((java.lang.Object) (byte) 0);
        int int27 = classWriter23.newUTF8("");
        classWriter23.visitEnd();
        int int32 = classWriter23.newField("L488861128", "L1292845306", "L3043237");
        java.lang.String[] strArray38 = null;
        classWriter23.visit(10, 156461415, "L2127085380", "L81546457", "L1936126716", strArray38);
        classWriter23.visitEnd();
        int int43 = classWriter23.newNameType("L936297181", "L838653747");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(5);
        classWriter49.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int56 = classWriter49.newClass("");
        classWriter49.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(0);
        int int79 = classWriter74.newMethod("", "", "hi!", true);
        java.lang.String[] strArray88 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter74.visitMethod(0, "", "", "hi!", strArray88);
        label72.info = strArray88;
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter67.visitMethod((int) (short) 100, "", "hi!", "", strArray88);
        classWriter49.visit(1793, (int) (byte) 1, "L2037791973", "L488861128", "L680573325", strArray88);
        org.mockito.asm.MethodVisitor methodVisitor93 = classWriter23.visitMethod((int) (byte) -1, "", "L1127712874", "L95180820", strArray88);
        classWriter1.visit(7, 204, "L1578097997", "L2085471365", "L1975230523", strArray88);
        int int97 = classWriter1.newNameType("L1527568082", "L1530458799");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor89);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(methodVisitor93);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 18 + "'", int97 == 18);
    }

    @Test
    public void test09226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09226");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 56);
        java.lang.String str36 = classReader26.getSuperName();
        byte[] byteArray37 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09227");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        classWriter27.visitOuterClass("hi!", "", "");
        classWriter27.visitEnd();
        java.lang.String[] strArray64 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter27.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter1.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray64);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter1.visitAnnotation("L1004763019", false);
        int int72 = classWriter1.newNameType("hi!", "L1601838046");
        classWriter1.visitSource("L1962189950", "");
        classWriter1.visitInnerClass("L1111133036", "L172254079", "L1287376048", 202);
        java.lang.Object obj85 = null;
        org.mockito.asm.FieldVisitor fieldVisitor86 = classWriter1.visitField(4, "L1490365060", "L841843626", "L1611208075", obj85);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 14 + "'", int72 == 14);
        org.junit.Assert.assertNotNull(fieldVisitor86);
    }

    @Test
    public void test09228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09228");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        short short38 = classReader26.readShort(22);
        java.lang.String str39 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 22121);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = classReader26.readLong(909717811);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 3072 + "'", short38 == (short) 3072);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test09229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09229");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        methodVisitor16.visitCode();
        methodVisitor16.visitMethodInsn((-21316096), "", "L329202279", "L1242211911");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label53 = new org.mockito.asm.Label();
        methodVisitor49.visitLabel(label53);
        java.lang.Object obj55 = label53.info;
        java.lang.Object obj56 = label53.info;
        java.lang.Object obj57 = label53.info;
        methodVisitor16.visitJumpInsn(0, label53);
        methodVisitor16.visitVarInsn((int) (short) -13570, (int) (short) 22121);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test09230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09230");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMaxs(9, (int) (byte) -1);
        methodVisitor16.visitIincInsn(8, (int) ' ');
        methodVisitor16.visitInsn(1793);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label53 = new org.mockito.asm.Label();
        methodVisitor49.visitLabel(label53);
        methodVisitor16.visitLabel(label53);
        methodVisitor16.visitVarInsn(33, 1793);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        int int80 = classWriter60.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = classWriter60.visitAnnotation("", true);
        byte[] byteArray84 = classWriter60.toByteArray();
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84);
        short short87 = classReader85.readShort((int) (byte) 0);
        int int89 = classReader85.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter91 = new org.mockito.asm.ClassWriter(classReader85, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = classWriter91.visitAnnotation("L9401833", true);
        byte[] byteArray95 = classWriter91.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLdcInsn((java.lang.Object) classWriter91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@53a8dd0b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short87 + "' != '" + (short) -13570 + "'", short87 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2560 + "'", int89 == 2560);
        org.junit.Assert.assertNotNull(annotationVisitor94);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 8, 76, 57, 52, 48, 49, 56, 51, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 10, 0, 0]");
    }

    @Test
    public void test09231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09231");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        methodVisitor25.visitMaxs(13, 254);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = methodVisitor25.visitAnnotationDefault();
        annotationVisitor37.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test09232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09232");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readInt((int) (byte) 1);
        java.lang.String str10 = classReader7.getSuperName();
        int int12 = classReader7.readByte((int) (short) 4);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = classReader7.readLong((-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-21316096) + "'", int9 == (-21316096));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test09233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09233");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        int int37 = classWriter17.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter17.visitAnnotation("", true);
        byte[] byteArray41 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        int int43 = classReader42.getAccess();
        byte[] byteArray44 = classReader42.b;
        byte[] byteArray45 = classReader42.b;
        byte[] byteArray46 = classReader42.b;
        java.lang.String[] strArray47 = classReader42.getInterfaces();
        char[] charArray54 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj55 = classReader42.readConst((int) (short) 4, charArray54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = classReader14.readUTF8((int) (short) 13063, charArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + "" + "'", obj55, "");
    }

    @Test
    public void test09234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09234");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        int int31 = classWriter1.newUTF8("L488861128");
        classWriter1.visitOuterClass("", "L976656549", "L1669912474");
        int int37 = classWriter1.newClass("L1471680267");
        classWriter1.visitInnerClass("L976656549", "L1628304347", "L81546457", 63);
        int int45 = classWriter1.newNameType("L946793861", "L146399554");
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        int int71 = classWriter51.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter51.visitAnnotation("", true);
        byte[] byteArray75 = classWriter51.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray75);
        java.lang.String str77 = classReader76.getSuperName();
        int int78 = classReader76.header;
        java.lang.String[] strArray79 = classReader76.getInterfaces();
        int int81 = classReader76.readByte(0);
        int int83 = classReader76.readUnsignedShort(1);
        long long85 = classReader76.readLong(7);
        byte[] byteArray86 = classReader76.b;
        java.lang.String[] strArray87 = classReader76.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter1.visitMethod((int) (short) 1, "L863761147", "L1962189950", "\001", strArray87);
        methodVisitor88.visitMaxs(42, (int) (short) 25445);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor88.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20 + "'", int45 == 20);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 90 + "'", int78 == 90);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 202 + "'", int81 == 202);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 65210 + "'", int83 == 65210);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 10999411246848L + "'", long85 == 10999411246848L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(methodVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test09235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09235");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        java.lang.Object[] objArray20 = null;
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter23.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter23.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        short short62 = classReader60.readShort((int) (byte) 0);
        int int64 = classReader60.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader60, 0);
        java.lang.String[] strArray67 = classReader60.getInterfaces();
        classWriter23.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray67);
        methodVisitor17.visitFrame(8, 15, objArray20, (-889275714), (java.lang.Object[]) strArray67);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = methodVisitor17.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = methodVisitor17.visitAnnotationDefault();
        methodVisitor17.visitVarInsn(22, 24);
        org.mockito.asm.Attribute attribute75 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor17.visitAttribute(attribute75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) -13570 + "'", short62 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2560 + "'", int64 == 2560);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor71);
    }

    @Test
    public void test09236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09236");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("L1589078908", false);
        int int26 = classWriter1.newClass("L203863779");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("L41452044", true);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        classWriter35.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        classWriter46.visitOuterClass("hi!", "", "");
        int int58 = classWriter46.newNameType("hi!", "hi!");
        int int61 = classWriter46.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter68.newMethod("", "", "hi!", true);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter68.visitMethod(0, "", "", "hi!", strArray82);
        classWriter46.visit(5, 6, "", "", "", strArray82);
        org.mockito.asm.MethodVisitor methodVisitor85 = classWriter35.visitMethod((int) (short) 0, "", "", "", strArray82);
        byte[] byteArray86 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        org.mockito.asm.ClassWriter classWriter89 = new org.mockito.asm.ClassWriter(classReader87, (int) (byte) -1);
        int int91 = classReader87.readUnsignedShort(82);
        org.mockito.asm.ClassWriter classWriter93 = new org.mockito.asm.ClassWriter(classReader87, 1869898100);
        java.lang.String[] strArray94 = classReader87.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor95 = classWriter1.visitMethod(72, "", "L402550819", "L1975782857", strArray94);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(methodVisitor85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(methodVisitor95);
    }

    @Test
    public void test09237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09237");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("L110679537", "L1221801792", "L2089731244", (int) (short) -13570);
        byte[] byteArray24 = classWriter1.toByteArray();
        int int27 = classWriter1.newNameType("", "L77196307");
        int int31 = classWriter1.newField("L110679537", "L1546658809", "L1847716459");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        short short60 = classReader58.readShort((int) (byte) 0);
        int int62 = classReader58.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(classReader58, 0);
        java.lang.String[] strArray65 = classReader58.getInterfaces();
        byte[] byteArray66 = classReader58.b;
        java.lang.String str67 = classReader58.getSuperName();
        long long69 = classReader58.readLong(14);
        java.lang.String str70 = classReader58.getSuperName();
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(classReader58, 16);
        int int73 = classReader58.header;
        byte[] byteArray74 = classReader58.b;
        int int75 = classReader58.getAccess();
        int int76 = classWriter1.newConst((java.lang.Object) int75);
        classWriter1.visitOuterClass("L917419798", "L436759653", "L888522535");
        classWriter1.visitSource("L1562568468", "");
        classWriter1.visitOuterClass("L1934870073", "L964574936", "L362499933");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 10, 76, 49, 49, 48, 54, 55, 57, 53, 51, 55, 7, 0, 9, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 11, 1, 0, 11, 76, 50, 48, 56, 57, 55, 51, 49, 50, 52, 52, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 2, 0, 3, 0, 15, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 6, 0, 7, 0, 17, 0, 0, 0, 10, 0, 1, 0, 10, 0, 12, 0, 13, -54, -2]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 23 + "'", int31 == 23);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) -13570 + "'", short60 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2560 + "'", int62 == 2560);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 282574545512737L + "'", long69 == 282574545512737L);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 90 + "'", int73 == 90);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 24 + "'", int76 == 24);
    }

    @Test
    public void test09238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09238");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        long long37 = classReader26.readLong(8);
        int int39 = classReader26.getItem(3);
        long long41 = classReader26.readLong(100);
        int int43 = classReader26.readUnsignedShort(1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2815849279193089L + "'", long37 == 2815849279193089L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 17 + "'", int39 == 17);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 281474976776193L + "'", long41 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 65210 + "'", int43 == 65210);
    }

    @Test
    public void test09239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09239");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        int int11 = classWriter1.newMethod("L1013343419", "\001", "L488861128", true);
        int int15 = classWriter1.newField("L1962189950", "L1283200231", "L1387910543");
        int int17 = classWriter1.newUTF8("L1292845306");
        classWriter1.visitOuterClass("L674940947", "L1075066296", "L1629650344");
        classWriter1.visitOuterClass("L828384535", "L1471680267", "L1855754182");
        classWriter1.visitEnd();
        byte[] byteArray27 = classWriter1.toByteArray();
        int int32 = classWriter1.newMethod("L463484842", "L468980830", "L150818074", true);
        int int37 = classWriter1.newMethod("L777505617", "L220092028", "L1954937829", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 17 + "'", int15 == 17);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 18 + "'", int17 == 18);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 41 + "'", int37 == 41);
    }

    @Test
    public void test09240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09240");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        org.mockito.asm.ClassWriter classWriter88 = new org.mockito.asm.ClassWriter(5);
        classWriter88.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor94 = classWriter1.visitField(256, "L1700698598", "L1889100462", "L1715729238", (java.lang.Object) "hi!");
        fieldVisitor94.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = fieldVisitor94.visitAnnotation("L264795169", true);
        fieldVisitor94.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(fieldVisitor94);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test09241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09241");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        int int28 = classWriter1.newUTF8("hi!");
        byte[] byteArray29 = classWriter1.toByteArray();
        classWriter1.visitSource("L1700698598", "L1726462062");
        int int37 = classWriter1.newMethod("L1099494342", "L455650823", "L665659274", true);
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
    }

    @Test
    public void test09242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09242");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((int) (byte) -1, 0);
        methodVisitor16.visitInsn(16777223);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        methodVisitor59.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        methodVisitor59.visitJumpInsn(1, label64);
        methodVisitor59.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = methodVisitor59.visitAnnotation("L275489687", false);
        methodVisitor59.visitCode();
        methodVisitor59.visitTypeInsn(1, "L683506282");
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(0);
        int int80 = classWriter75.newMethod("", "", "hi!", true);
        java.lang.String[] strArray89 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor90 = classWriter75.visitMethod(0, "", "", "hi!", strArray89);
        methodVisitor90.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label94 = new org.mockito.asm.Label();
        methodVisitor90.visitLabel(label94);
        java.lang.Object obj96 = label94.info;
        java.lang.Object obj97 = label94.info;
        methodVisitor59.visitLabel(label94);
        methodVisitor16.visitLabel(label94);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(methodVisitor90);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test09243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09243");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 458753);
        java.lang.String str40 = classReader26.getSuperName();
        byte[] byteArray41 = classReader26.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09244");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        int int15 = classWriter1.newField("L1490365060", "L1386483578", "L636727990");
        byte[] byteArray16 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter20.newMethod("", "", "hi!", true);
        classWriter20.visitOuterClass("hi!", "", "");
        int int32 = classWriter20.newNameType("hi!", "hi!");
        int int35 = classWriter20.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        classWriter20.visit(5, 6, "", "", "", strArray56);
        org.mockito.asm.FieldVisitor fieldVisitor64 = classWriter20.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter20.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray69 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray69);
        int int71 = classReader70.header;
        char[] charArray79 = new char[] { ' ', 'a', '#', '4', '4', 'a' };
        java.lang.String str80 = classReader70.readUTF8(12, charArray79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj81 = classReader17.readConst(82, charArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 82");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 13 + "'", int15 == 13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 11, 76, 49, 52, 57, 48, 51, 54, 53, 48, 54, 48, 7, 0, 8, 1, 0, 11, 76, 49, 51, 56, 54, 52, 56, 51, 53, 55, 56, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 12, 0, 10, 0, 11, 9, 0, 9, 0, 12, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 2, 0, 2, 0, 15, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(fieldVisitor64);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 163 + "'", int71 == 163);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "\000a#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "\000a#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[\000, a, #, 4, 4, a]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\000" + "'", str80, "\000");
    }

    @Test
    public void test09245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09245");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter(0);
        int int8 = classWriter3.newMethod("", "", "hi!", true);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor18 = classWriter3.visitMethod(0, "", "", "hi!", strArray17);
        methodVisitor18.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor18.visitCode();
        methodVisitor18.visitIincInsn(0, 5);
        int int28 = classWriter1.newConst((java.lang.Object) 0);
        classWriter1.visitOuterClass("L3043237", "L624707113", "L2127085380");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        int int58 = classWriter38.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter38.visitAnnotation("", true);
        byte[] byteArray62 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        int int64 = classReader63.getAccess();
        byte[] byteArray65 = classReader63.b;
        int int67 = classReader63.readByte((int) '#');
        java.lang.String str68 = classReader63.getSuperName();
        int int70 = classReader63.readInt(15);
        long long72 = classReader63.readLong(61);
        java.lang.String[] strArray73 = classReader63.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter1.visitMethod((int) (short) -326, "L917225789", "L1228081592", "L1086414642", strArray73);
        classWriter1.visitOuterClass("L664029952", "L334680853", "L81460580");
        int int80 = classWriter1.newUTF8("L116545920");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(methodVisitor18);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 16842755 + "'", int70 == 16842755);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 7278098581565042292L + "'", long72 == 7278098581565042292L);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 14 + "'", int80 == 14);
    }

    @Test
    public void test09246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09246");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter12.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (byte) 0);
        int int29 = classWriter12.newConst((java.lang.Object) int28);
        classWriter12.visitEnd();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label41 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        label41.info = strArray57;
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod((int) (short) 100, "", "hi!", "", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter12.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray57);
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        label67.info = strArray83;
        classWriter12.visit(3, (int) (byte) 100, "L809431533", "L749737959", "L728847777", strArray83);
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter1.visitMethod(10, "L275489687", "\000", "L238476442", strArray83);
        methodVisitor87.visitMaxs(19506, 2561);
        methodVisitor87.visitInsn((int) (short) 1536);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
        org.junit.Assert.assertNotNull(methodVisitor87);
    }

    @Test
    public void test09247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09247");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        byte[] byteArray32 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray32, 47806, 1869898100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09248");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.FieldVisitor fieldVisitor10 = classWriter1.visitField((int) (byte) 1, "L110679537", "L75359331", "L238476442", (java.lang.Object) 100L);
        fieldVisitor10.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = fieldVisitor10.visitAnnotation("L1140828792", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = fieldVisitor10.visitAnnotation("L410514564", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = annotationVisitor17.visitAnnotation("L1973775324", "L482021899");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test09249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09249");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter1.visitEnd();
        int int5 = classWriter1.newNameType("L172254079", "L862723850");
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int16 = classWriter11.newMethod("", "", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter11.visitMethod(0, "", "", "hi!", strArray25);
        int int31 = classWriter11.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter11.visitAnnotation("", true);
        byte[] byteArray35 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        int int38 = classReader36.readUnsignedShort((int) (byte) 0);
        short short40 = classReader36.readShort(7);
        int int41 = classReader36.header;
        int int43 = classReader36.readInt(19);
        char[] charArray48 = new char[] { '4', '#', '#' };
        java.lang.String str49 = classReader36.readUTF8(14, charArray48);
        byte[] byteArray50 = classReader36.b;
        java.lang.String str51 = classReader36.getSuperName();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(classReader36, 17);
        java.lang.String str54 = classReader36.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(1869898100, "L821661888", "L1208026886", "L624707113", (java.lang.Object) classReader36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@49110f93");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(methodVisitor26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 51966 + "'", int38 == 51966);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 90 + "'", int41 == 90);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1751720204 + "'", int43 == 1751720204);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test09250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09250");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readByte((int) (byte) 10);
        char[] charArray41 = new char[] { '#', '4', '4' };
        java.lang.String str42 = classReader26.readUTF8(100, charArray41);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader26, 38);
        byte[] byteArray45 = classReader26.b;
        byte[] byteArray46 = classReader26.b;
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        int int48 = classReader47.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = classReader47.getItem(458753);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 458753");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test09251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09251");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        classWriter1.visitOuterClass("L1847716459", "L1142940414", "L1142940414");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter13.visitMethod(8, "hi!", "", "", strArray35);
        methodVisitor37.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor37.visitAnnotationDefault();
        methodVisitor37.visitMaxs((int) ' ', (int) '4');
        methodVisitor37.visitMaxs(13, 254);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField((int) '#', "L680573325", "L624707113", "L782129665", (java.lang.Object) 254);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("L1086414642", true);
        org.mockito.asm.FieldVisitor fieldVisitor58 = classWriter1.visitField((int) (short) 2, "L129454114", "L414541306", "L1758992365", (java.lang.Object) 1.0d);
        fieldVisitor58.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = fieldVisitor58.visitAnnotation("L146399554", false);
        org.mockito.asm.Attribute attribute63 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor58.visitAttribute(attribute63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(fieldVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test09252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09252");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(458753);
        classWriter1.visitInnerClass("L162365000", "L1790809036", "L1040125103", 7);
        int int8 = classWriter1.newClass("L1042599060");
        classWriter1.visitInnerClass("L500545133", "L158524288", "L1169695719", 25);
        int int16 = classWriter1.newNameType("L1287376048", "L1132227206");
        classWriter1.visitInnerClass("L594880957", "L665737352", "L46285906", 41);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
    }

    @Test
    public void test09253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09253");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        int int6 = classWriter1.newMethod("L275489687", "L275489687", "L275489687", false);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label13 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        label13.info = strArray29;
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter8.visitMethod((int) (short) 100, "", "hi!", "", strArray29);
        org.mockito.asm.FieldVisitor fieldVisitor38 = classWriter8.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = fieldVisitor38.visitAnnotation("L2000102916", false);
        int int42 = classWriter1.newConst((java.lang.Object) false);
        int int45 = classWriter1.newNameType("L959574331", "L75359331");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter1.visitAnnotation("L838653747", true);
        classWriter1.visitSource("L94594526", "L1049104679");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertNotNull(fieldVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test09254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09254");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        classWriter1.visitOuterClass("L1086414642", "L1789245551", "L428215077");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter1.visitAnnotation("L1726462062", true);
        annotationVisitor23.visitEnum("L143726105", "L367225907", "L1758992365");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = annotationVisitor23.visitArray("L1984968925");
        annotationVisitor23.visitEnum("L1042887332", "L1223623304", "L1642186947");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test09255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09255");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotation("L1013343419", true);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter67.newMethod("", "", "hi!", true);
        classWriter67.visitOuterClass("hi!", "", "");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitTypeInsn(12848, "L193489512");
        methodVisitor16.visitCode();
        methodVisitor16.visitMethodInsn(61, "L1706351722", "L1642186947", "L2106764488");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
    }

    @Test
    public void test09256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09256");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        methodVisitor48.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor48.visitCode();
        methodVisitor48.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        methodVisitor75.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        methodVisitor75.visitLabel(label79);
        java.lang.String str81 = label79.toString();
        methodVisitor48.visitLineNumber((int) (short) -1, label79);
        label79.info = (-1.0f);
        java.lang.String str85 = label79.toString();
        methodVisitor25.visitLabel(label79);
        methodVisitor25.visitEnd();
        methodVisitor25.visitTypeInsn((int) (byte) 1, "L1715729238");
        methodVisitor25.visitEnd();
        methodVisitor25.visitVarInsn(129, 12592);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L198672098" + "'", str81, "L198672098");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L198672098" + "'", str85, "L198672098");
    }

    @Test
    public void test09257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09257");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitTypeInsn((int) (byte) -1, "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitCode();
        methodVisitor16.visitInsn((int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor16.visitAnnotation("L688061379", true);
        methodVisitor16.visitIincInsn(1793, 5);
        methodVisitor16.visitIntInsn((int) (short) 1025, 875903244);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L75540483" + "'", str75, "L75540483");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test09258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09258");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        classWriter1.visitOuterClass("L541901146", "L264795169", "L418802221");
        classWriter1.visitInnerClass("L749100806", "L242883751", "L81546457", 24);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        methodVisitor57.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor57.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor57.visitInsn((int) (byte) 0);
        methodVisitor57.visitMaxs(0, (int) (byte) 0);
        methodVisitor57.visitInsn(63);
        methodVisitor57.visitMaxs(16842755, 65210);
        methodVisitor57.visitIntInsn(20, (-1));
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = annotationVisitor81.visitArray("L264795169");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = annotationVisitor81.visitArray("");
        // The following exception was thrown during execution in test generation
        try {
            int int86 = classWriter1.newConst((java.lang.Object) annotationVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@419c7d75");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test09259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09259");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        int int54 = classReader53.header;
        long long56 = classReader53.readLong(49);
        short short58 = classReader53.readShort(62);
        // The following exception was thrown during execution in test generation
        try {
            long long60 = classReader53.readLong(1025);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 82 + "'", int54 == 82);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 6012153161717204585L + "'", long56 == 6012153161717204585L);
        org.junit.Assert.assertTrue("'" + short58 + "' != '" + (short) 21359 + "'", short58 == (short) 21359);
    }

    @Test
    public void test09260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09260");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1847716459", false);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        int int54 = classWriter34.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter34.visitAnnotation("", true);
        byte[] byteArray58 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        short short61 = classReader59.readShort((int) (byte) 0);
        int int63 = classReader59.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader59, 0);
        java.lang.String[] strArray66 = classReader59.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter1.visitMethod(2560, "L1028579140", "L59063553", "hi!", strArray66);
        classWriter1.visitInnerClass("L579675851", "L897597087", "", 12);
        classWriter1.visitEnd();
        classWriter1.visitSource("L367225907", "L237112889");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short61 + "' != '" + (short) -13570 + "'", short61 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2560 + "'", int63 == 2560);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
    }

    @Test
    public void test09261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09261");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = fieldVisitor31.visitAnnotation("L636727990", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor31.visitAnnotation("L579675851", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor31.visitAnnotation("L242883751", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = annotationVisitor40.visitAnnotation("L1221492672", "L684697689");
        annotationVisitor43.visitEnum("L859506825", "L1803469792", "L693982720");
        annotationVisitor43.visitEnd();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test09262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09262");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        methodVisitor25.visitIntInsn((int) (short) -13570, 1);
        methodVisitor25.visitCode();
        methodVisitor25.visitMethodInsn((int) ' ', "L1601838046", "L782129665", "L1715729238");
        methodVisitor25.visitTypeInsn(8, "");
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor25.visitAnnotation("L1247545373", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor52 = methodVisitor25.visitParameterAnnotation(12336, "L163463949", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test09263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09263");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        classWriter34.visitOuterClass("L1601838046", "L110679537", "L976656549");
        int int41 = classWriter34.newNameType("L1142940414", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter34.visitAnnotation("L1287376048", true);
        int int46 = classWriter34.newUTF8("L1687335926");
        classWriter34.visitInnerClass("L11610906", "L1603381958", "L791392221", 3072);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 18 + "'", int46 == 18);
    }

    @Test
    public void test09264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09264");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int12 = classWriter7.newMethod("", "", "hi!", true);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor22 = classWriter7.visitMethod(0, "", "", "hi!", strArray21);
        methodVisitor22.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor22.visitCode();
        methodVisitor22.visitIincInsn(0, 5);
        methodVisitor22.visitCode();
        methodVisitor22.visitMaxs(0, 2561);
        methodVisitor22.visitTypeInsn(0, "L567497322");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter1.visitField(29, "L1595656597", "L2107462965", "L1402371927", (java.lang.Object) methodVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@7938501f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(methodVisitor22);
    }

    @Test
    public void test09265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09265");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        methodVisitor25.visitMultiANewArrayInsn("L755844592", 1751720204);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIntInsn(0, 117440769);
        methodVisitor25.visitMethodInsn((int) (short) 2816, "L1984968925", "L455650823", "L280564832");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        methodVisitor60.visitFieldInsn(8, "hi!", "", "");
        methodVisitor60.visitTypeInsn((int) (byte) 100, "");
        methodVisitor60.visitIincInsn((int) (byte) 10, 6);
        methodVisitor60.visitCode();
        methodVisitor60.visitMethodInsn(4, "L1413182688", "L541901146", "L1004763019");
        methodVisitor60.visitTypeInsn(17784, "L1511591972");
        methodVisitor25.visitLdcInsn((java.lang.Object) "L1511591972");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
    }

    @Test
    public void test09266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09266");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visit("", (java.lang.Object) 100.0d);
        annotationVisitor28.visit("", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor28.visitAnnotation("hi!", "");
        annotationVisitor28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor28.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = annotationVisitor28.visitAnnotation("L2062266913", "");
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter46.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter46.visitMethod(8, "hi!", "", "", strArray68);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter46.visitAnnotation("hi!", false);
        byte[] byteArray74 = classWriter46.toByteArray();
        int int76 = classWriter46.newUTF8("L488861128");
        byte[] byteArray77 = classWriter46.toByteArray();
        annotationVisitor43.visit("L755844592", (java.lang.Object) byteArray77);
        annotationVisitor43.visitEnum("L139544873", "L1004112457", "L664029952");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test09267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09267");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int34 = classReader26.header;
        int int36 = classReader26.readInt((int) (byte) 1);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        int int58 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitInnerClass("", "", "", (int) ' ');
        int int67 = classWriter38.newField("", "L2000102916", "hi!");
        int int72 = classWriter38.newMethod("L1086414642", "", "L419471195", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter38.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter38.visitAnnotation("L946131795", true);
        org.mockito.asm.Attribute attribute79 = null;
        org.mockito.asm.Attribute[] attributeArray80 = new org.mockito.asm.Attribute[] { attribute79 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray80, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-21316096) + "'", int36 == (-21316096));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 14 + "'", int72 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(attributeArray80);
    }

    @Test
    public void test09268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09268");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int30 = classReader26.readInt(78);
        int int32 = classReader26.readInt(78);
        byte[] byteArray33 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.readInt(29441);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1698786926 + "'", int30 == 1698786926);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1698786926 + "'", int32 == 1698786926);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09269");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        int int15 = classReader13.readInt((int) (byte) 0);
        int int17 = classReader13.getItem(0);
        java.lang.String str18 = classReader13.getSuperName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-889275714) + "'", int15 == (-889275714));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test09270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09270");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        methodVisitor16.visitCode();
        methodVisitor16.visitInsn(655616);
        methodVisitor16.visitIincInsn(1851880565, (int) (short) 2387);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        int int60 = classReader58.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(classReader58, (int) '4');
        int int64 = classReader58.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader58, (int) '#');
        short short68 = classReader58.readShort(0);
        long long70 = classReader58.readLong((int) (byte) 100);
        int int71 = classReader58.getAccess();
        java.lang.String str72 = classReader58.getSuperName();
        long long74 = classReader58.readLong(30);
        byte[] byteArray75 = classReader58.b;
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader58, 1763773440);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader58, 1763773440);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLdcInsn((java.lang.Object) classWriter79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@b7e5f2b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 51966 + "'", int60 == 51966);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) -13570 + "'", short68 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 281474976776193L + "'", long70 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1136895056675841L + "'", long74 == 1136895056675841L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09271");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 1);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        classWriter47.visitSource("L1931763549", "L1914124641");
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter47.visitAnnotation("L374960086", false);
        annotationVisitor53.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
        org.junit.Assert.assertNotNull(annotationVisitor53);
    }

    @Test
    public void test09272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09272");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor25.visitAnnotation("L1076056118", true);
        methodVisitor25.visitVarInsn((int) (short) -1, 26);
        methodVisitor25.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = methodVisitor25.visitAnnotation("L1315470340", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test09273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09273");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        char[] charArray38 = new char[] { '4', '#', '#' };
        java.lang.String str39 = classReader26.readUTF8(14, charArray38);
        byte[] byteArray40 = classReader26.b;
        java.lang.String str41 = classReader26.getSuperName();
        java.lang.String str42 = classReader26.getSuperName();
        java.lang.String str43 = classReader26.getSuperName();
        int int45 = classReader26.readByte((int) (byte) 100);
        int int47 = classReader26.readByte(0);
        short short49 = classReader26.readShort(3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, #, #]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 202 + "'", int47 == 202);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) -16896 + "'", short49 == (short) -16896);
    }

    @Test
    public void test09274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09274");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        int int3 = classWriter1.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int12 = classWriter10.newConst((java.lang.Object) (short) 1);
        int int14 = classWriter10.newUTF8("hi!");
        int int19 = classWriter10.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (short) 1);
        classWriter26.visitSource("", "L2000102916");
        int int36 = classWriter26.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        classWriter43.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter43.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter57.newConst((java.lang.Object) (byte) 0);
        int int60 = classWriter43.newConst((java.lang.Object) int59);
        int int64 = classWriter43.newField("hi!", "", "L809431533");
        java.lang.String[] strArray74 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter43.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray74);
        classWriter26.visit(5, (int) ' ', "L2000102916", "L636727990", "L2062266913", strArray74);
        classWriter10.visit(254, 0, "\001", "L426422007", "L59063553", strArray74);
        classWriter1.visit(40, (int) (short) 3072, "L1435737877", "L590888141", "L897597087", strArray74);
        java.lang.String[] strArray84 = null;
        classWriter1.visit(611177, 0, "L59063553", "L946793861", "L688061379", strArray84);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = classWriter1.visitAnnotation("L680573325", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = classWriter1.visitAnnotation("L2132431650", false);
        classWriter1.visitOuterClass("L1057654651", "L2056146720", "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 7 + "'", int36 == 7);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test09275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09275");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        byte[] byteArray40 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader26.readByte(611177);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 611177");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09276");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitInsn(63);
        methodVisitor16.visitMaxs(16842755, 65210);
        methodVisitor16.visitIntInsn(20, (-1));
        methodVisitor16.visitVarInsn(30, 909717811);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = methodVisitor16.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test09277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09277");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        int int29 = classWriter1.newNameType("L529122729", "L1789245551");
        int int31 = classWriter1.newClass("L755844592");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L1330884173", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader73, 0);
        int int83 = classReader73.getItem(2);
        java.lang.String[] strArray84 = classReader73.getInterfaces();
        classWriter41.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray84);
        classWriter1.visit(5, 0, "L1028579140", "L552318631", "L500545133", strArray84);
        classWriter1.visitInnerClass("L1377529303", "L1970148580", "L2032268392", 6);
        java.lang.Object obj96 = null;
        org.mockito.asm.FieldVisitor fieldVisitor97 = classWriter1.visitField((int) (short) 12342, "L763890461", "L189750198", "L1091409599", obj96);
        fieldVisitor97.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 14 + "'", int83 == 14);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(fieldVisitor97);
    }

    @Test
    public void test09278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09278");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L749737959", "L426422007", "L1435737877", (int) 'a');
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
    }

    @Test
    public void test09279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09279");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1945103414", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        classWriter13.visitEnd();
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter20.newMethod("", "", "hi!", true);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter20.visitMethod(0, "", "", "hi!", strArray34);
        int int40 = classWriter20.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter20.visitAnnotation("", true);
        byte[] byteArray44 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        short short47 = classReader45.readShort((int) (byte) 0);
        int int49 = classReader45.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader45, 0);
        java.lang.String[] strArray52 = classReader45.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter13.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray52);
        classWriter1.visit((int) (byte) 0, 0, "L172254079", "L110679537", "L415508906", strArray52);
        int int56 = classWriter1.newUTF8("L4531833");
        int int58 = classWriter1.newClass("L172254079");
        classWriter1.visitInnerClass("", "L2037791973", "L976618452", (int) (byte) 10);
        int int67 = classWriter1.newField("L1086414642", "L1256567156", "L128175309");
        classWriter1.visitInnerClass("L1370122910", "", "L1616863659", 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) -13570 + "'", short47 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2560 + "'", int49 == 2560);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 19 + "'", int67 == 19);
    }

    @Test
    public void test09280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09280");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        methodVisitor41.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor41.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test09281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09281");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        byte[] byteArray38 = classReader26.b;
        int int40 = classReader26.getItem(4);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader26.readUnsignedShort(1000814);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23 + "'", int40 == 23);
    }

    @Test
    public void test09282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09282");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(90);
        classWriter1.visitOuterClass("L774045562", "L1628304347", "L1642186947");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        classWriter13.visitSource("", "L2000102916");
        int int23 = classWriter13.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray28 = null;
        org.mockito.asm.MethodVisitor methodVisitor29 = classWriter13.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray28);
        java.lang.Object[] objArray32 = null;
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter35.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        int int67 = classWriter47.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter47.visitAnnotation("", true);
        byte[] byteArray71 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        short short74 = classReader72.readShort((int) (byte) 0);
        int int76 = classReader72.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter(classReader72, 0);
        java.lang.String[] strArray79 = classReader72.getInterfaces();
        classWriter35.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray79);
        methodVisitor29.visitFrame(8, 15, objArray32, (-889275714), (java.lang.Object[]) strArray79);
        classWriter1.visit((-1107296256), 28532, "L1004112457", "L207820460", "L693982720", strArray79);
        int int84 = classWriter1.newUTF8("L473304883");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 10, 76, 55, 55, 52, 48, 52, 53, 53, 54, 50, 7, 0, 1, 1, 0, 11, 76, 49, 54, 50, 56, 51, 48, 52, 51, 52, 55, 1, 0, 11, 76, 49, 54, 52, 50, 49, 56, 54, 57, 52, 55, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertNotNull(methodVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) -13570 + "'", short74 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2560 + "'", int76 == 2560);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 12 + "'", int84 == 12);
    }

    @Test
    public void test09283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09283");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter1.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int38 = classWriter1.newNameType("L749737959", "L1601838046");
        classWriter1.visitInnerClass("L2000102916", "L1028579140", "", 100);
        classWriter1.visitSource("L59063553", "L1497855016");
        int int48 = classWriter1.newUTF8("L1605224709");
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("L727709537", true);
        classWriter1.visitSource("L594418938", "L1655799832");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test09284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09284");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        int int30 = classWriter1.newField("L1208026886", "L680573325", "L1386483578");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter1.visitAnnotation("L1387910543", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter1.visitAnnotation("L1423401218", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = annotationVisitor36.visitAnnotation("L397385256", "L2062266913");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test09285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09285");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray4);
        byte[] byteArray9 = classReader8.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 82, (int) (short) 12336);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09286");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        classWriter24.visitOuterClass("hi!", "", "");
        int int54 = classWriter24.newClass("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(2560, "L1132227206", "", "L1287376048", (java.lang.Object) int54);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor55.visitAnnotation("L275489687", true);
        fieldVisitor55.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = fieldVisitor55.visitAnnotation("L1086414642", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = fieldVisitor55.visitAnnotation("L181903634", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor55.visitAnnotation("L1100502214", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = fieldVisitor55.visitAnnotation("L784900793", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = annotationVisitor71.visitAnnotation("L1511591972", "L454047201");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test09287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09287");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label26 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        label26.info = strArray42;
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter21.visitMethod((int) (short) 100, "", "hi!", "", strArray42);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter21.visitAnnotation("L1847716459", false);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        int int74 = classWriter54.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter54.visitAnnotation("", true);
        byte[] byteArray78 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray78);
        short short81 = classReader79.readShort((int) (byte) 0);
        int int83 = classReader79.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter85 = new org.mockito.asm.ClassWriter(classReader79, 0);
        java.lang.String[] strArray86 = classReader79.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter21.visitMethod(2560, "L1028579140", "L59063553", "hi!", strArray86);
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter1.visitMethod((int) (byte) 1, "L897597087", "L809431533", "L1221801792", strArray86);
        classWriter1.visitEnd();
        int int93 = classWriter1.newField("L2082140197", "L71360886", "L2082140197");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short81 + "' != '" + (short) -13570 + "'", short81 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2560 + "'", int83 == 2560);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor87);
        org.junit.Assert.assertNotNull(methodVisitor88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 15 + "'", int93 == 15);
    }

    @Test
    public void test09288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09288");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        methodVisitor25.visitLabel(label83);
        methodVisitor25.visitIntInsn((int) '4', 3);
        methodVisitor25.visitMultiANewArrayInsn("L2037791973", 3);
        methodVisitor25.visitIntInsn(26, (int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn(67174410, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test09289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09289");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        short short38 = classReader26.readShort(19);
        byte[] byteArray39 = classReader26.b;
        java.lang.String str40 = classReader26.getSuperName();
        int int42 = classReader26.readUnsignedShort((int) '#');
        byte[] byteArray43 = classReader26.b;
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 26729 + "'", short38 == (short) 26729);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09290");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitIincInsn((int) (byte) 10, 6);
        methodVisitor16.visitMultiANewArrayInsn("L1013343419", 1698786926);
        methodVisitor16.visitIincInsn(0, (-1107296256));
        methodVisitor16.visitMethodInsn(0, "L1316968579", "L1667871964", "L1872723002");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09291");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label26 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        label26.info = strArray42;
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter21.visitMethod((int) (short) 100, "", "hi!", "", strArray42);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter21.visitAnnotation("L1847716459", false);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        int int74 = classWriter54.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter54.visitAnnotation("", true);
        byte[] byteArray78 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray78);
        short short81 = classReader79.readShort((int) (byte) 0);
        int int83 = classReader79.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter85 = new org.mockito.asm.ClassWriter(classReader79, 0);
        java.lang.String[] strArray86 = classReader79.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter21.visitMethod(2560, "L1028579140", "L59063553", "hi!", strArray86);
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter1.visitMethod((int) (byte) 1, "L897597087", "L809431533", "L1221801792", strArray86);
        methodVisitor88.visitTypeInsn(13876, "L1287617384");
        methodVisitor88.visitFieldInsn((int) (byte) -1, "", "L1482145872", "L1415251495");
        org.mockito.asm.Attribute attribute97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor88.visitAttribute(attribute97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short81 + "' != '" + (short) -13570 + "'", short81 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2560 + "'", int83 == 2560);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor87);
        org.junit.Assert.assertNotNull(methodVisitor88);
    }

    @Test
    public void test09292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09292");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L1132227206", "L749737959", "L1132227206");
        int int35 = classWriter1.newNameType("L728847777", "hi!");
        int int37 = classWriter1.newClass("L664111037");
        int int40 = classWriter1.newNameType("L719893634", "L1035851567");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
    }

    @Test
    public void test09293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09293");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        methodVisitor62.visitMultiANewArrayInsn("L1619769466", (-1107296256));
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = methodVisitor62.visitAnnotation("L1148690681", true);
        java.lang.Class<?> wildcardClass69 = annotationVisitor68.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test09294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09294");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        short short33 = classReader26.readShort(0);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.readByte(16842755);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16842755");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) -13570 + "'", short33 == (short) -13570);
    }

    @Test
    public void test09295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09295");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        int int52 = classReader51.header;
        int int53 = classReader51.getAccess();
        java.lang.String[] strArray54 = classReader51.getInterfaces();
        java.lang.String str55 = classReader51.getSuperName();
        int int57 = classReader51.getItem(13);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 163 + "'", int52 == 163);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 83 + "'", int57 == 83);
    }

    @Test
    public void test09296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09296");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        short short37 = classReader26.readShort(13);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, 18);
        long long43 = classReader26.readLong(6);
        byte[] byteArray44 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader26, 27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1792 + "'", short37 == (short) 1792);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 42966450183L + "'", long43 == 42966450183L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09297");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = fieldVisitor22.visitAnnotation("L136145448", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = fieldVisitor22.visitAnnotation("L1387910543", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = fieldVisitor22.visitAnnotation("L325385758", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = fieldVisitor22.visitAnnotation("L1878780030", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor22.visitAnnotation("L2077104398", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test09298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09298");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray12);
        java.lang.String[] strArray15 = classReader14.getInterfaces();
        int int16 = classReader14.getAccess();
        int int17 = classReader14.getAccess();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (byte) 10);
        classWriter19.visitEnd();
        byte[] byteArray21 = classWriter19.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            classReader14.accept((org.mockito.asm.ClassVisitor) classWriter19, (int) (short) 25970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09299");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitIincInsn(1763773440, 57174305);
        methodVisitor16.visitTypeInsn((int) 'a', "L2078535908");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L537856854" + "'", str75, "L537856854");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test09300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09300");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitInnerClass("L2000102916", "L1847716459", "", (int) '#');
        classWriter1.visitInnerClass("L136145448", "L959574331", "L541901146", 8);
        int int74 = classWriter1.newMethod("L136145448", "L1591899557", "L720530545", false);
        int int79 = classWriter1.newMethod("L729032685", "L1549350954", "", true);
        int int82 = classWriter1.newNameType("L1019177379", "L573057906");
        int int85 = classWriter1.newNameType("L2107462965", "L149220781");
        int int90 = classWriter1.newMethod("L123678575", "L135718477", "", false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20 + "'", int74 == 20);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 25 + "'", int79 == 25);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 28 + "'", int82 == 28);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 31 + "'", int85 == 31);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 36 + "'", int90 == 36);
    }

    @Test
    public void test09301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09301");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L150818074", true);
        methodVisitor25.visitIntInsn(12850, 1869898100);
        methodVisitor25.visitInsn(11);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor44 = methodVisitor25.visitParameterAnnotation(33, "L1099905954", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test09302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09302");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        int int38 = classReader26.getItem(1);
        int int40 = classReader26.readInt((int) (short) 100);
        int int42 = classReader26.readInt((int) (short) 1);
        short short44 = classReader26.readShort(0);
        java.lang.String[] strArray45 = classReader26.getInterfaces();
        int int46 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            long long48 = classReader26.readLong(167);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 65536 + "'", int40 == 65536);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-21316096) + "'", int42 == (-21316096));
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -13570 + "'", short44 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 90 + "'", int46 == 90);
    }

    @Test
    public void test09303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09303");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor16.visitAnnotation("L1368708044", true);
        methodVisitor16.visitMaxs(65210, 1);
        methodVisitor16.visitIincInsn(0, (int) (byte) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor16.visitAnnotationDefault();
        annotationVisitor88.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test09304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09304");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        short short33 = classReader26.readShort((int) '#');
        byte[] byteArray34 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            long long36 = classReader26.readLong(33555457);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 4 + "'", short33 == (short) 4);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09305");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L790593526");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09306");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1025);
        org.mockito.asm.Attribute attribute2 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09307");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        java.lang.String str34 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        int int38 = classReader26.getItem((int) (byte) 0);
        int int40 = classReader26.readByte((int) '#');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test09308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09308");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitFieldInsn(0, "L1530458799", "L755949095", "L1482145872");
        methodVisitor16.visitVarInsn((int) 'a', (int) (short) 13063);
        methodVisitor16.visitFieldInsn(17, "L1434815605", "L914282524", "L34653613");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L697175703" + "'", str75, "L697175703");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test09309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09309");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L2000102916", "L636727990");
        int int68 = classWriter1.newMethod("L976656549", "L2000102916", "L1287376048", false);
        classWriter1.visitEnd();
        int int71 = classWriter1.newClass("L1093218044");
        classWriter1.visitInnerClass("L720019929", "L647798807", "L278038742", (int) (short) 26989);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 13 + "'", int68 == 13);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 15 + "'", int71 == 15);
    }

    @Test
    public void test09310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09310");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        int int54 = classReader53.header;
        short short56 = classReader53.readShort((int) (byte) 0);
        java.lang.String[] strArray57 = classReader53.getInterfaces();
        int int59 = classReader53.getItem(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 82 + "'", int54 == 82);
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) -13570 + "'", short56 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test09311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09311");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        int int20 = classWriter1.newNameType("L1017623370", "L4531833");
        java.lang.String[] strArray25 = null;
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter1.visitMethod(100, "L2133586349", "", "L2000102916", strArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor30 = methodVisitor26.visitParameterAnnotation(18, "L577562510", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(methodVisitor26);
    }

    @Test
    public void test09312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09312");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        methodVisitor25.visitCode();
        methodVisitor25.visitFieldInsn(29, "L577562510", "L721083102", "L442162059");
        methodVisitor25.visitMaxs((-889275714), 256);
        methodVisitor25.visitInsn(12850);
        methodVisitor25.visitLdcInsn((java.lang.Object) "L977826039");
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        java.lang.String str74 = label73.toString();
        label73.info = "L2014806404";
        java.lang.String str77 = label73.toString();
        methodVisitor25.visitLabel(label73);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor25.visitParameterAnnotation(2560, "L1019177379", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L1986740854" + "'", str74, "L1986740854");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "L1986740854" + "'", str77, "L1986740854");
    }

    @Test
    public void test09313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09313");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader33, 0);
        int int43 = classReader33.getItem(2);
        java.lang.String[] strArray44 = classReader33.getInterfaces();
        classWriter1.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray44);
        classWriter1.visitEnd();
        classWriter1.visitSource("L1853844875", "L1790809036");
        classWriter1.visitInnerClass("L946793861", "L1566032477", "L1749810196", 1751720204);
        int int57 = classWriter1.newNameType("L438329471", "L1110710417");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 14 + "'", int57 == 14);
    }

    @Test
    public void test09314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09314");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitMultiANewArrayInsn("L1086414642", 512);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        methodVisitor59.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = methodVisitor59.visitAnnotationDefault();
        methodVisitor59.visitMaxs((int) ' ', (int) '4');
        methodVisitor59.visitVarInsn(22, (int) (short) 3072);
        org.mockito.asm.Label label71 = new org.mockito.asm.Label();
        java.lang.String str72 = label71.toString();
        methodVisitor59.visitJumpInsn(20, label71);
        java.lang.String str74 = label71.toString();
        methodVisitor25.visitJumpInsn((int) (byte) 10, label71);
        methodVisitor25.visitIntInsn(51, 24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor63);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "L2107777374" + "'", str72, "L2107777374");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L2107777374" + "'", str74, "L2107777374");
    }

    @Test
    public void test09315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09315");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.getAccess();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test09316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09316");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(90);
        classWriter1.visitEnd();
        classWriter1.visitSource("L1101713360", "L1373865546");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter12.visitMethod(0, "", "", "hi!", strArray26);
        int int32 = classWriter12.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter12.visitAnnotation("", true);
        byte[] byteArray36 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int38 = classReader37.getAccess();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader37, 10);
        java.lang.String[] strArray41 = classReader37.getInterfaces();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        classWriter1.visit(1793, 132, "L612243917", "L1995623923", "L1969123537", strArray42);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test09317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09317");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(12592, (int) (short) 10);
        methodVisitor16.visitFieldInsn((int) (short) -13570, "L624707113", "L590888141", "L624707113");
        methodVisitor16.visitIntInsn(163, 12);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor16.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test09318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09318");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1483790775");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09319");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        java.lang.String str30 = classReader26.getSuperName();
        long long32 = classReader26.readLong(20);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = classReader26.readLong((int) (short) 26913);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7575349242370196235L + "'", long32 == 7575349242370196235L);
    }

    @Test
    public void test09320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09320");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        classWriter1.visitInnerClass("L897597087", "L590888141", "L1287376048", 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L791392221", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L389281063", "L1745031302", "\001", 611177);
        java.lang.Class<?> wildcardClass16 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test09321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09321");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Attribute attribute2 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09322");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        byte[] byteArray37 = classReader26.b;
        int int39 = classReader26.readUnsignedShort(0);
        byte[] byteArray40 = classReader26.b;
        byte[] byteArray41 = classReader26.b;
        int int42 = classReader26.header;
        java.lang.String str43 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = classReader26.getItem((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 51966 + "'", int39 == 51966);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 90 + "'", int42 == 90);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test09323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09323");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        org.mockito.asm.ClassWriter classWriter88 = new org.mockito.asm.ClassWriter(0);
        classWriter88.visitOuterClass("L1847716459", "hi!", "L680573325");
        methodVisitor16.visitLdcInsn((java.lang.Object) "hi!");
        methodVisitor16.visitCode();
        methodVisitor16.visitInsn(101);
        methodVisitor16.visitVarInsn((int) (short) 13063, (int) (short) 2560);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test09324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09324");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label42 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        label42.info = strArray58;
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod((int) (short) 100, "", "hi!", "", strArray58);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter37.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor67.visitAnnotation("L636727990", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = fieldVisitor67.visitAnnotation("L535346328", false);
        org.mockito.asm.FieldVisitor fieldVisitor74 = classWriter1.visitField(7, "L1715729238", "L693982720", "L1490365060", (java.lang.Object) false);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = fieldVisitor74.visitAnnotation("L809431533", true);
        annotationVisitor77.visitEnum("L1411298446", "L1583234446", "L535346328");
        annotationVisitor77.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = annotationVisitor77.visitArray("L1572959883");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(fieldVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(fieldVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test09325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09325");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        short short70 = classReader68.readShort((int) (byte) 0);
        int int72 = classReader68.readUnsignedShort((int) ' ');
        long long74 = classReader68.readLong((int) '#');
        int int76 = classReader68.getItem(0);
        java.lang.String str77 = classReader68.getSuperName();
        short short79 = classReader68.readShort(13);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader68, (int) (short) 0);
        org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter1.visitField((int) (short) -13570, "L529122729", "L75359331", "L2037791973", (java.lang.Object) (short) 0);
        int int85 = classWriter1.newNameType("L9401833", "L667379532");
        int int89 = classWriter1.newField("L1291288126", "L343526401", "L680573325");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L534597979", "L740042223", "L1403549550");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) -13570 + "'", short70 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2560 + "'", int72 == 2560);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1126999590795363L + "'", long74 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + short79 + "' != '" + (short) 1792 + "'", short79 == (short) 1792);
        org.junit.Assert.assertNotNull(fieldVisitor82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 20 + "'", int85 == 20);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 26 + "'", int89 == 26);
    }

    @Test
    public void test09326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09326");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        int int29 = classWriter1.newMethod("L1489256177", "L837588174", "L1430234734", true);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "L503772107", "L1305858187");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
    }

    @Test
    public void test09327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09327");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitOuterClass("L1847716459", "hi!", "L680573325");
        int int9 = classWriter1.newField("L1889100462", "L1086414642", "L1566658664");
        classWriter1.visitInnerClass("L1669912474", "L199336802", "L1774908040", (int) (short) 26729);
        int int19 = classWriter1.newMethod("L313281740", "L1228081592", "L579675851", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("L1642186947", false);
        classWriter1.visitEnd();
        classWriter1.visitSource("L1667109172", "L1447139144");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(223337, "L573057906", "L1545548548", "L869352649", (java.lang.Object) 1694564377);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(fieldVisitor33);
    }

    @Test
    public void test09328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09328");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter1.visitAnnotation("L75359331", false);
        classWriter1.visitOuterClass("L179737210", "L415508906", "L529122729");
        classWriter1.visitInnerClass("L471701904", "L2127085380", "L885118192", 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test09329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09329");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter27.visitMethod(0, "", "", "hi!", strArray41);
        int int47 = classWriter27.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter27.visitAnnotation("", true);
        byte[] byteArray51 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        int int54 = classReader52.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(classReader52, (int) '4');
        int int58 = classReader52.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader52, (int) '#');
        byte[] byteArray61 = classReader52.b;
        java.lang.String[] strArray62 = classReader52.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter1.visitMethod(17, "L75359331", "L1628304347", "L1847716459", strArray62);
        classWriter1.visitSource("L1611208075", "L1962189950");
        classWriter1.visitSource("L146399554", "L41216715");
        int int71 = classWriter1.newClass("L1370122910");
        classWriter1.visitSource("L2015149232", "L859506825");
        classWriter1.visitInnerClass("L231790898", "L481389345", "L15843493", 139);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 51966 + "'", int54 == 51966);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 16 + "'", int71 == 16);
    }

    @Test
    public void test09330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09330");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1916372151");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09331");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader26.getItem(105);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 105");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
    }

    @Test
    public void test09332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09332");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.header;
        int int33 = classReader26.header;
        int int34 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        classWriter36.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter36.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter50.newConst((java.lang.Object) (byte) 0);
        int int53 = classWriter36.newConst((java.lang.Object) int52);
        int int57 = classWriter36.newField("hi!", "", "L809431533");
        java.lang.String[] strArray67 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter36.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray67);
        int int72 = classWriter36.newField("L680573325", "L242883751", "L636727990");
        classWriter36.visitSource("", "L334680853");
        int int78 = classWriter36.newNameType("L1909225199", "L427241356");
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter36, (int) (short) 25968);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 12 + "'", int57 == 12);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 22 + "'", int72 == 22);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 25 + "'", int78 == 25);
    }

    @Test
    public void test09333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09333");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray29, 15, 90);
        int int35 = classReader33.readUnsignedShort(2);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        classWriter38.visitOuterClass("hi!", "", "");
        int int50 = classWriter38.newNameType("hi!", "hi!");
        int int53 = classWriter38.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        classWriter38.visit(5, 6, "", "", "", strArray74);
        org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter38.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter38.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray87 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader88 = new org.mockito.asm.ClassReader(byteArray87);
        int int89 = classReader88.header;
        char[] charArray97 = new char[] { ' ', 'a', '#', '4', '4', 'a' };
        java.lang.String str98 = classReader88.readUTF8(12, charArray97);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj99 = classReader33.readConst(1792, charArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 47806 + "'", int35 == 47806);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(fieldVisitor82);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 163 + "'", int89 == 163);
        org.junit.Assert.assertNotNull(charArray97);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray97), "\000a#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray97), "\000a#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray97), "[\000, a, #, 4, 4, a]");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "\000" + "'", str98, "\000");
    }

    @Test
    public void test09334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09334");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = fieldVisitor12.visitAnnotation("L354659998", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = fieldVisitor12.visitAnnotation("L341335602", true);
        annotationVisitor21.visit("L2141594193", (java.lang.Object) 1698786926);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test09335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09335");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor46.visitCode();
        methodVisitor46.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        java.lang.String str79 = label77.toString();
        methodVisitor46.visitLineNumber((int) (short) -1, label77);
        methodVisitor16.visitLabel(label77);
        int int82 = label77.getOffset();
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(5);
        classWriter84.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray89 = classWriter84.toByteArray();
        org.mockito.asm.ClassReader classReader90 = new org.mockito.asm.ClassReader(byteArray89);
        int int91 = classReader90.getAccess();
        org.mockito.asm.ClassWriter classWriter93 = new org.mockito.asm.ClassWriter(classReader90, 40);
        label77.info = classReader90;
        java.lang.String str95 = label77.toString();
        java.lang.Object obj96 = label77.info;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L996961023" + "'", str79, "L996961023");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "L996961023" + "'", str95, "L996961023");
        org.junit.Assert.assertNotNull(obj96);
    }

    @Test
    public void test09336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09336");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        int int3 = classWriter1.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter10.newMethod("", "", "hi!", true);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter10.visitMethod(0, "", "", "hi!", strArray24);
        classWriter1.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray24);
        byte[] byteArray27 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor47.visitCode();
        methodVisitor47.visitIincInsn(0, 5);
        int int57 = classWriter30.newConst((java.lang.Object) 0);
        classWriter30.visitOuterClass("L3043237", "L624707113", "L2127085380");
        classWriter30.visitInnerClass("", "L636727990", "L1268109548", 872);
        int int71 = classWriter30.newMethod("L1140828792", "L120720304", "L1283200231", false);
        classReader28.accept((org.mockito.asm.ClassVisitor) classWriter30, 105);
        classWriter30.visitOuterClass("L1627366687", "L141363326", "L1192381465");
        classWriter30.visitOuterClass("L1337199277", "L1692352756", "L2062266913");
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter(5);
        classWriter83.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray88 = classWriter83.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = classWriter83.visitAnnotation("L207820460", true);
        int int93 = classWriter83.newClass("L221255805");
        // The following exception was thrown during execution in test generation
        try {
            int int94 = classWriter30.newConst((java.lang.Object) classWriter83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@21421b55");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 35, 0, 10, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 5, 1, 0, 0, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 32, 0, 3, 0, 6, 0, 4, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 17 + "'", int71 == 17);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 9 + "'", int93 == 9);
    }

    @Test
    public void test09337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09337");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1767016503");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09338");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        classWriter1.visitEnd();
        int int21 = classWriter1.newNameType("L1235168839", "L1717199564");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
    }

    @Test
    public void test09339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09339");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitIincInsn((int) (byte) 10, (int) '4');
        methodVisitor16.visitMaxs(100, 12592);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotation("L1013343419", true);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn(65210, (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = methodVisitor16.visitAnnotation("L1688164825", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = annotationVisitor72.visitAnnotation("L1757155508", "L144067663");
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = annotationVisitor72.visitArray("L911323346");
        annotationVisitor72.visitEnum("L1977524365", "L825811686", "L1656770953");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test09340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09340");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        short short38 = classReader26.readShort(22);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        int int41 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short43 = classReader26.readShort(1698786926);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1698786926");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 3072 + "'", short38 == (short) 3072);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test09341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09341");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        org.mockito.asm.Label label31 = new org.mockito.asm.Label();
        java.lang.String str32 = label31.toString();
        methodVisitor25.visitJumpInsn(0, label31);
        methodVisitor25.visitIincInsn(33, 38);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor40 = methodVisitor25.visitParameterAnnotation((int) (short) 1034, "L1336128092", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "L1566900844" + "'", str32, "L1566900844");
    }

    @Test
    public void test09342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09342");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        int int32 = classReader26.readByte((int) (short) 0);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        int int62 = classReader60.readUnsignedShort((int) (byte) 0);
        short short64 = classReader60.readShort(7);
        int int65 = classReader60.header;
        int int67 = classReader60.readInt(19);
        char[] charArray72 = new char[] { '4', '#', '#' };
        java.lang.String str73 = classReader60.readUTF8(14, charArray72);
        java.lang.Object obj74 = classReader26.readConst((int) (short) 3, charArray72);
        java.lang.String str75 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int77 = classReader26.readUnsignedShort(65792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 202 + "'", int32 == 202);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 51966 + "'", int62 == 51966);
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) 0 + "'", short64 == (short) 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 90 + "'", int65 == 90);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1751720204 + "'", int67 == 1751720204);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[h, i, !]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "hi!" + "'", obj74, "hi!");
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test09343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09343");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        byte[] byteArray21 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("L664029952", true);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        int int51 = classWriter31.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter31.visitAnnotation("", true);
        byte[] byteArray55 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(classReader56, 22);
        java.lang.String[] strArray59 = classReader56.getInterfaces();
        classWriter1.visit(127, 2816, "", "L1724469945", "L1113967537", strArray59);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter66.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(0);
        int int79 = classWriter74.newMethod("", "", "hi!", true);
        java.lang.String[] strArray88 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter74.visitMethod(0, "", "", "hi!", strArray88);
        org.mockito.asm.MethodVisitor methodVisitor90 = classWriter66.visitMethod(8, "hi!", "", "", strArray88);
        methodVisitor90.visitTypeInsn((int) (short) 0, "L897597087");
        methodVisitor90.visitEnd();
        methodVisitor90.visitVarInsn((-889275714), 2);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor98 = classWriter1.visitField(186, "L503713660", "L1969123537", "L833107638", (java.lang.Object) methodVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@5ae993a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 19, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 4, 0, 8, 0, 10, 0, 18, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor89);
        org.junit.Assert.assertNotNull(methodVisitor90);
    }

    @Test
    public void test09344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09344");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        methodVisitor25.visitFieldInsn(19, "L1215739340", "L2012296629", "L389458669");
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        methodVisitor50.visitCode();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        methodVisitor68.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        methodVisitor68.visitLabel(label72);
        java.lang.String str74 = label72.toString();
        label72.info = ' ';
        java.lang.Object obj77 = label72.info;
        methodVisitor50.visitLabel(label72);
        java.lang.String str79 = label72.toString();
        int int80 = label72.getOffset();
        java.lang.String str81 = label72.toString();
        methodVisitor25.visitLabel(label72);
        org.mockito.asm.Attribute attribute83 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L2093690360" + "'", str74, "L2093690360");
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + ' ' + "'", obj77, ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L2093690360" + "'", str79, "L2093690360");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L2093690360" + "'", str81, "L2093690360");
    }

    @Test
    public void test09345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09345");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L535346328", true);
        int int39 = classWriter1.newMethod("L264795169", "L2132845283", "L1007735311", true);
        int int43 = classWriter1.newField("L1919588599", "L872213106", "L1804134080");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        classWriter49.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter49.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter63.newConst((java.lang.Object) (byte) 0);
        int int66 = classWriter49.newConst((java.lang.Object) int65);
        classWriter49.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter49.visitAnnotation("L1601838046", true);
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField(67764226, "L862723850", "", "L473224764", (java.lang.Object) "L1601838046");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = fieldVisitor75.visitAnnotation("L1919150861", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 17 + "'", int39 == 17);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 23 + "'", int43 == 23);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(fieldVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test09346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09346");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMethodInsn((int) (short) 100, "L1601838046", "L749737959", "L897597087");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((-1), 4);
        methodVisitor16.visitFieldInsn(12592, "L680573325", "L535346328", "");
        methodVisitor16.visitTypeInsn(4, "L1004763019");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = methodVisitor16.visitAnnotation("L454047201", true);
        methodVisitor16.visitFieldInsn(167, "L780726187", "L1338797504", "L1264051504");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test09347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09347");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L488861128", "L728847777", "L1287376048");
        classWriter1.visitEnd();
        int int67 = classWriter1.newClass("L590888141");
        classWriter1.visitOuterClass("L590888141", "", "");
        int int73 = classWriter1.newClass("L1569012593");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 14 + "'", int67 == 14);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 17 + "'", int73 == 17);
    }

    @Test
    public void test09348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09348");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitTypeInsn(16, "L1928858580");
        methodVisitor25.visitTypeInsn(768, "L343526401");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test09349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09349");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitEnd();
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = methodVisitor16.visitAnnotation("L146399554", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = annotationVisitor27.visitAnnotation("L755408759", "L999600304");
        annotationVisitor30.visit("", (java.lang.Object) "L1161103829");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor30);
    }

    @Test
    public void test09350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09350");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("L1142940414", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("", false);
        classWriter1.visitInnerClass("L278038742", "L332181902", "L569030566", 100);
        classWriter1.visitSource("L1429849124", "L1969123537");
        int int30 = classWriter1.newClass("L75172810");
        int int32 = classWriter1.newUTF8("L1338797504");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        int int58 = classWriter38.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter38.visitAnnotation("", true);
        byte[] byteArray62 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        short short65 = classReader63.readShort((int) (byte) 0);
        int int67 = classReader63.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader63, 0);
        java.lang.String[] strArray70 = classReader63.getInterfaces();
        byte[] byteArray71 = classReader63.b;
        java.lang.String str72 = classReader63.getSuperName();
        long long74 = classReader63.readLong(14);
        java.lang.String str75 = classReader63.getSuperName();
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader63, 16);
        java.lang.String[] strArray78 = classReader63.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter1.visitMethod(1751720204, "", "L120713780", "L123678575", strArray78);
        int int84 = classWriter1.newMethod("L1514078428", "L198123551", "L1190768905", true);
        classWriter1.visitInnerClass("L2000102916", "L192150971", "L1574467454", (int) (short) -326);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 4, 0, 6, 0, 7, 0, 10, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) -13570 + "'", short65 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2560 + "'", int67 == 2560);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 282574545512737L + "'", long74 == 282574545512737L);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 27 + "'", int84 == 27);
    }

    @Test
    public void test09351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09351");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        classWriter1.visitOuterClass("L1847716459", "L1142940414", "L1142940414");
        java.lang.String[] strArray12 = null;
        org.mockito.asm.MethodVisitor methodVisitor13 = classWriter1.visitMethod(0, "L2045712064", "L2117999297", "", strArray12);
        methodVisitor13.visitIincInsn(1, (int) (short) 2892);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(methodVisitor13);
    }

    @Test
    public void test09352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09352");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1086414642", false);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int11 = classWriter9.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter9.visitMethod(8, "hi!", "", "", strArray31);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter9.visitAnnotation("hi!", false);
        byte[] byteArray37 = classWriter9.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        annotationVisitor6.visit("L684697689", (java.lang.Object) byteArray37);
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray37);
        java.lang.String[] strArray41 = classReader40.getInterfaces();
        byte[] byteArray42 = classReader40.b;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = classReader40.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test09353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09353");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitInsn(202);
        methodVisitor16.visitIincInsn(26, 27);
        methodVisitor16.visitInsn(875903244);
        methodVisitor16.visitIntInsn((-1161953280), 48640);
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("L2034910382", 22);
        methodVisitor16.visitIincInsn(29441, 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09354");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader33, 0);
        int int43 = classReader33.getItem(2);
        java.lang.String[] strArray44 = classReader33.getInterfaces();
        classWriter1.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray44);
        int int49 = classWriter1.newField("L1589078908", "L149220781", "");
        classWriter1.visitOuterClass("L492184427", "L829519303", "L161967399");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 11 + "'", int49 == 11);
    }

    @Test
    public void test09355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09355");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1307358075", "", "L1669912474");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("L586303771", false);
        classWriter1.visitInnerClass("L1616863659", "L34653613", "L1931763549", 90);
        classWriter1.visitSource("L1711625925", "L1705966817");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test09356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09356");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1089062975");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09357");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        short short31 = classReader29.readShort(27);
        int int32 = classReader29.header;
        byte[] byteArray33 = classReader29.b;
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader29, 47806);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = classReader29.readLong(13876);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 2816 + "'", short31 == (short) 2816);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09358");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = methodVisitor41.visitAnnotation("L809431533", true);
        methodVisitor41.visitMaxs(1793, 38);
        methodVisitor41.visitMultiANewArrayInsn("L1221801792", 9);
        methodVisitor41.visitLdcInsn((java.lang.Object) "L1268109548");
        methodVisitor41.visitInsn(56);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test09359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09359");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        short short38 = classReader26.readShort(19);
        byte[] byteArray39 = classReader26.b;
        java.lang.String str40 = classReader26.getSuperName();
        int int42 = classReader26.readUnsignedShort((int) '#');
        byte[] byteArray43 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int45 = classReader26.getItem((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 26729 + "'", short38 == (short) 26729);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09360");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitSource("L467340186", "L1669912474");
        byte[] byteArray14 = classWriter1.toByteArray();
        int int16 = classWriter1.newUTF8("L189750198");
        classWriter1.visitSource("L149498658", "L823768339");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 10, 76, 52, 54, 55, 51, 52, 48, 49, 56, 54, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 11, 76, 49, 54, 54, 57, 57, 49, 50, 52, 55, 52, 0, 11, 0, 0, 0, 4, 0, 6, 0, 7]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    }

    @Test
    public void test09361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09361");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L535346328", true);
        classWriter1.visitOuterClass("L1429849124", "L1583234446", "L782129665");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("L1036976475", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = annotationVisitor41.visitArray("L1262041297");
        annotationVisitor41.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test09362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09362");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitCode();
        methodVisitor25.visitVarInsn(12592, 0);
        methodVisitor25.visitFieldInsn((int) (short) 4, "L1142940414", "L1969123537", "L1307358075");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = methodVisitor25.visitAnnotation("L1266856712", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = methodVisitor25.visitAnnotation("L107823974", false);
        org.mockito.asm.Attribute attribute72 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
    }

    @Test
    public void test09363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09363");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        java.lang.String str30 = classReader26.getSuperName();
        int int31 = classReader26.header;
        byte[] byteArray32 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor51.visitCode();
        methodVisitor51.visitIincInsn(0, 5);
        int int61 = classWriter34.newConst((java.lang.Object) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter34.visitAnnotation("\000", true);
        classWriter34.visitEnd();
        classWriter34.visitOuterClass("L1262041297", "L1487951814", "L829519303");
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter34, 28532);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor64);
    }

    @Test
    public void test09364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09364");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray50, 0, 21);
        int int54 = classReader53.header;
        short short56 = classReader53.readShort(69);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = classReader53.readInt((-1161953280));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 163 + "'", int54 == 163);
        org.junit.Assert.assertTrue("'" + short56 + "' != '" + (short) 256 + "'", short56 == (short) 256);
    }

    @Test
    public void test09365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09365");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.readInt(842151478);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test09366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09366");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        methodVisitor16.visitTypeInsn(12592, "L275489687");
        methodVisitor16.visitLdcInsn((java.lang.Object) (byte) 10);
        methodVisitor16.visitEnd();
        methodVisitor16.visitFieldInsn(78, "L192150971", "L1093675238", "L885118192");
        methodVisitor16.visitMaxs(67174410, 141);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09367");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitIntInsn((int) (short) -13570, 3072);
        methodVisitor25.visitFieldInsn((int) (short) 4, "L1083553839", "L648000686", "L1291288126");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test09368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09368");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        java.lang.String[] strArray80 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter41.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(10, "hi!", "L590888141", "L2062266913", strArray80);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter1.visitAnnotation("L1287376048", false);
        int int88 = classWriter1.newClass("L809431533");
        byte[] byteArray89 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader92 = new org.mockito.asm.ClassReader(byteArray89, 17, 1659509);
        int int93 = classReader92.getAccess();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 16 + "'", int88 == 16);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1792 + "'", int93 == 1792);
    }

    @Test
    public void test09369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09369");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int10 = classWriter1.newField("L1601838046", "L2000102916", "\001");
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        int int37 = classWriter17.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter17.visitAnnotation("", true);
        byte[] byteArray41 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        short short44 = classReader42.readShort((int) (byte) 0);
        int int46 = classReader42.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(classReader42, 0);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader42, 0);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader42, (int) (byte) 100);
        byte[] byteArray53 = classReader42.b;
        java.lang.String[] strArray54 = classReader42.getInterfaces();
        classWriter1.visit((-1161953280), 0, "L85690983", "", "", strArray54);
        classWriter1.visitSource("L1548001428", "L390763851");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -13570 + "'", short44 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2560 + "'", int46 == 2560);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
    }

    @Test
    public void test09370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09370");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        byte[] byteArray37 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L636727990", "", "L897597087");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter48.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        org.mockito.asm.MethodVisitor methodVisitor72 = classWriter48.visitMethod(8, "hi!", "", "", strArray70);
        methodVisitor72.visitIntInsn((int) (short) 1, 6);
        methodVisitor72.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor72.visitAnnotation("hi!", false);
        methodVisitor72.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor72.visitIincInsn(100, 12);
        org.mockito.asm.FieldVisitor fieldVisitor88 = classWriter1.visitField(0, "", "L2059908172", "L664111037", (java.lang.Object) 12);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = fieldVisitor88.visitAnnotation("L620334303", true);
        fieldVisitor88.visitEnd();
        fieldVisitor88.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(methodVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(fieldVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test09371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09371");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        java.lang.Object obj39 = null;
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter19.visitField(9, "L1601838046", "L2062266913", "L680573325", obj39);
        classWriter19.visitSource("L636727990", "");
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        label49.info = strArray65;
        classWriter19.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(0, "L1132227206", "L535346328", "L2062266913", strArray65);
        classWriter1.visitInnerClass("L999961130", "L1013343419", "L1945103414", 0);
        classWriter1.visitInnerClass("L976656549", "L1223439170", "L665737352", 2560);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter1.visitAnnotation("L639586936", true);
        annotationVisitor82.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test09372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09372");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitIincInsn((int) (short) 100, (int) (short) -1);
        methodVisitor25.visitMethodInsn(3, "L1028510473", "L1601838046", "L1307358075");
        methodVisitor25.visitEnd();
        methodVisitor25.visitInsn((int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        classWriter42.visitOuterClass("hi!", "", "");
        int int54 = classWriter42.newNameType("hi!", "hi!");
        int int56 = classWriter42.newUTF8("hi!");
        classWriter42.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter42.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        methodVisitor25.visitLdcInsn((java.lang.Object) "L1505866272");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(5);
        classWriter68.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int75 = classWriter68.newClass("");
        classWriter68.visitOuterClass("L1132227206", "L1132227206", "L749737959");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter68.visitAnnotation("L1423401218", true);
        java.lang.Object obj87 = null;
        org.mockito.asm.FieldVisitor fieldVisitor88 = classWriter68.visitField(67764226, "L1984968925", "L1735602342", "L1261572287", obj87);
        fieldVisitor88.visitEnd();
        fieldVisitor88.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) fieldVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.FieldWriter@47f86964");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(fieldVisitor88);
    }

    @Test
    public void test09373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09373");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        int int31 = classReader29.readInt((int) (short) 100);
        int int32 = classReader29.header;
        int int34 = classReader29.getItem((int) (byte) 0);
        byte[] byteArray35 = classReader29.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65536 + "'", int31 == 65536);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09374");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L579675851", true);
        byte[] byteArray5 = classWriter1.toByteArray();
        byte[] byteArray6 = classWriter1.toByteArray();
        int int10 = classWriter1.newField("L77196307", "L1471680267", "L1169247122");
        classWriter1.visitInnerClass("L1158904698", "L1611366333", "", 15);
        int int17 = classWriter1.newUTF8("L1238209773");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 14 + "'", int17 == 14);
    }

    @Test
    public void test09375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09375");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        java.lang.String str30 = classReader26.getSuperName();
        java.lang.String str31 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test09376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09376");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        short short38 = classReader26.readShort(22);
        java.lang.String str39 = classReader26.getSuperName();
        java.lang.String str40 = classReader26.getSuperName();
        java.lang.String[] strArray41 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader26, 13874);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 3072 + "'", short38 == (short) 3072);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strArray41);
    }

    @Test
    public void test09377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09377");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        int int36 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader26.readUnsignedShort(12850);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 90 + "'", int36 == 90);
    }

    @Test
    public void test09378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09378");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        methodVisitor25.visitCode();
        methodVisitor25.visitMethodInsn(10, "L1928858580", "L1013343419", "L1368708044");
        methodVisitor25.visitInsn(2560);
        methodVisitor25.visitFieldInsn(110, "L397385256", "", "L224623650");
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(0);
        int int79 = classWriter74.newMethod("", "", "hi!", true);
        java.lang.String[] strArray88 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter74.visitMethod(0, "", "", "hi!", strArray88);
        methodVisitor89.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label93 = new org.mockito.asm.Label();
        methodVisitor89.visitLabel(label93);
        java.lang.Object obj95 = label93.info;
        int int96 = label93.getOffset();
        methodVisitor25.visitLabel(label93);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor89);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test09379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09379");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((int) (byte) -1, 0);
        methodVisitor16.visitVarInsn((int) '#', (int) '4');
        methodVisitor16.visitIincInsn(11, (int) '#');
        methodVisitor16.visitMaxs(16842755, (int) (byte) 0);
        methodVisitor16.visitIntInsn((int) (short) 1, 611177);
        methodVisitor16.visitMultiANewArrayInsn("", 63);
        methodVisitor16.visitMethodInsn(163, "L983840536", "L1629057842", "L2056146720");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09380");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int31 = classWriter26.newMethod("", "", "hi!", true);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter26.visitMethod(0, "", "", "hi!", strArray40);
        methodVisitor41.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label45 = new org.mockito.asm.Label();
        methodVisitor41.visitLabel(label45);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter48.newConst((java.lang.Object) (short) 1);
        classWriter48.visitSource("", "");
        label45.info = "";
        int int55 = label45.getOffset();
        java.lang.String str56 = label45.toString();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter58.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter66.newMethod("", "", "hi!", true);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter66.visitMethod(0, "", "", "hi!", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter58.visitMethod(8, "hi!", "", "", strArray80);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter58.visitAnnotation("hi!", false);
        label45.info = classWriter58;
        int int87 = label45.getOffset();
        java.lang.String str88 = label45.toString();
        java.lang.String str89 = label45.toString();
        int int90 = label45.getOffset();
        int int91 = label45.getOffset();
        int int92 = label45.getOffset();
        methodVisitor16.visitLabel(label45);
        java.lang.String str94 = label45.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L1598694134" + "'", str56, "L1598694134");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L1598694134" + "'", str88, "L1598694134");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "L1598694134" + "'", str89, "L1598694134");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L1598694134" + "'", str94, "L1598694134");
    }

    @Test
    public void test09381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09381");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitOuterClass("L199336802", "L275489687", "L2039587225");
        classWriter1.visitSource("L95180820", "L1451039961");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter1.visitAnnotation("L1483790775", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test09382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09382");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter20.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter20.visitMethod(8, "hi!", "", "", strArray42);
        methodVisitor44.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor44.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        methodVisitor66.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor66.visitLabel(label70);
        methodVisitor44.visitJumpInsn((-1), label70);
        methodVisitor17.visitJumpInsn((int) '#', label70);
        methodVisitor17.visitVarInsn(156461415, 33);
        methodVisitor17.visitFieldInsn((int) ' ', "L226569229", "L1269304540", "L620053054");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
    }

    @Test
    public void test09383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09383");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader3 = new org.mockito.asm.ClassReader(byteArray0, 0, (int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09384");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter1.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L680573325", false);
        int int29 = classWriter1.newUTF8("L107203139");
        java.lang.Class<?> wildcardClass30 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 19 + "'", int29 == 19);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test09385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09385");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitTypeInsn((int) (short) 0, "L897597087");
        methodVisitor25.visitEnd();
        methodVisitor25.visitMultiANewArrayInsn("L1589078908", 10);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor25.visitAnnotation("L765138463", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test09386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09386");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter35.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        label50.info = strArray66;
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter45.visitMethod((int) (short) 100, "", "hi!", "", strArray66);
        classWriter35.visit(9, (int) (byte) 100, "L238476442", "L275489687", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter1.visitMethod(2, "", "L1962189950", "L2062266913", strArray66);
        int int74 = classWriter1.newNameType("L838653747", "L1611208075");
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter1.visitAnnotation("", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 11 + "'", int74 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test09387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09387");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter20.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter20.visitMethod(8, "hi!", "", "", strArray42);
        methodVisitor44.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor44.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        methodVisitor66.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor66.visitLabel(label70);
        methodVisitor44.visitJumpInsn((-1), label70);
        methodVisitor17.visitJumpInsn((int) '#', label70);
        java.lang.Object obj74 = label70.info;
        int int75 = label70.getOffset();
        java.lang.Object obj76 = label70.info;
        int int77 = label70.getOffset();
        int int78 = label70.getOffset();
        java.lang.String str79 = label70.toString();
        java.lang.String str80 = label70.toString();
        java.lang.String str81 = label70.toString();
        java.lang.Object obj82 = label70.info;
        java.lang.String str83 = label70.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L2103327720" + "'", str79, "L2103327720");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "L2103327720" + "'", str80, "L2103327720");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L2103327720" + "'", str81, "L2103327720");
        org.junit.Assert.assertNull(obj82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "L2103327720" + "'", str83, "L2103327720");
    }

    @Test
    public void test09388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09388");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        classWriter32.visitOuterClass("hi!", "", "");
        int int44 = classWriter32.newNameType("hi!", "hi!");
        int int47 = classWriter32.newNameType("hi!", "");
        java.lang.Object obj52 = null;
        org.mockito.asm.FieldVisitor fieldVisitor53 = classWriter32.visitField(9, "L1601838046", "L2062266913", "L680573325", obj52);
        classWriter32.visitSource("L636727990", "");
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        label62.info = strArray78;
        classWriter32.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray78);
        classWriter1.visit((int) (short) 0, 2, "L636727990", "L1601838046", "L238476442", strArray78);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = classWriter1.visitAnnotation("L745089702", true);
        classWriter1.visitInnerClass("L1526570068", "L689023041", "L1223439170", 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor53);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test09389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09389");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMethodInsn((int) (short) 100, "L1601838046", "L749737959", "L897597087");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((-1), 4);
        methodVisitor16.visitInsn((int) (short) 10);
        methodVisitor16.visitTypeInsn(0, "L940801507");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09390");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader14, 13);
        long long18 = classReader14.readLong(29);
        java.lang.Class<?> wildcardClass19 = classReader14.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3546642118308083252L + "'", long18 == 3546642118308083252L);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test09391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09391");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitTypeInsn(16, "L1928858580");
        methodVisitor25.visitFieldInsn((int) (short) 7, "", "L1223439170", "L2127085380");
        methodVisitor25.visitEnd();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        classWriter44.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter44.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(5);
        int int65 = classWriter63.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(0);
        int int77 = classWriter72.newMethod("", "", "hi!", true);
        java.lang.String[] strArray86 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter72.visitMethod(0, "", "", "hi!", strArray86);
        classWriter63.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray86);
        classWriter44.visit((int) ' ', 8, "L1287376048", "L1028579140", "L680573325", strArray86);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLdcInsn((java.lang.Object) classWriter44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@497a4618");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor87);
    }

    @Test
    public void test09392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09392");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        java.lang.String str12 = classReader7.getSuperName();
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(classReader7, 65536);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader7, 184549888);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.FieldVisitor fieldVisitor63 = classWriter19.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter19.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray68 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        int int70 = classReader69.header;
        char[] charArray78 = new char[] { ' ', 'a', '#', '4', '4', 'a' };
        java.lang.String str79 = classReader69.readUTF8(12, charArray78);
        byte[] byteArray80 = classReader69.b;
        char[] charArray88 = new char[] { ' ', '#', '#', 'a', '4', '#' };
        java.lang.String str89 = classReader69.readClass(33, charArray88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj90 = classReader7.readConst(780, charArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 780");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(fieldVisitor63);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 163 + "'", int70 == 163);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "\000a#44a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "\000a#44a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[\000, a, #, 4, 4, a]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\000" + "'", str79, "\000");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "hi!a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "hi!a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[h, i, !, a, 4, #]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
    }

    @Test
    public void test09393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09393");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(13, (int) (short) 17784);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test09394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09394");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        int int37 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 0);
        classWriter39.visitEnd();
        org.mockito.asm.Attribute attribute41 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter39.visitAttribute(attribute41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test09395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09395");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readUnsignedShort(1);
        int int35 = classReader26.readByte(19);
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray36, 27, 163);
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray36);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader40, 43);
        byte[] byteArray43 = classReader40.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 104 + "'", int35 == 104);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09396");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        int int37 = classReader26.getAccess();
        int int39 = classReader26.readByte(100);
        byte[] byteArray40 = classReader26.b;
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader41, (int) 'a');
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter45.newConst((java.lang.Object) (byte) 0);
        int int49 = classWriter45.newUTF8("");
        classWriter45.visitEnd();
        classWriter45.visitEnd();
        classWriter45.visitSource("L1889100462", "L1769475365");
        classWriter45.visitOuterClass("\000", "L1967552389", "L1268109548");
        byte[] byteArray59 = classWriter45.toByteArray();
        classWriter45.visitSource("hi!", "L782129665");
        org.mockito.asm.Attribute[] attributeArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader41.accept((org.mockito.asm.ClassVisitor) classWriter45, attributeArray63, 25857);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 3, 0, 0, 0, 0, 1, 0, 0, 1, 0, 11, 76, 49, 56, 56, 57, 49, 48, 48, 52, 54, 50, 1, 0, 2, -64, -128, 7, 0, 4, 1, 0, 11, 76, 49, 57, 54, 55, 53, 53, 50, 51, 56, 57, 1, 0, 11, 76, 49, 50, 54, 56, 49, 48, 57, 53, 52, 56, 12, 0, 6, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 2, 0, 3, 0, 10, 0, 0, 0, 11, 76, 49, 55, 54, 57, 52, 55, 53, 51, 54, 53, 0, 11, 0, 0, 0, 4, 0, 5, 0, 8]");
    }

    @Test
    public void test09397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09397");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 56);
        java.lang.String str36 = classReader26.getSuperName();
        int int38 = classReader26.readInt((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 65536 + "'", int38 == 65536);
    }

    @Test
    public void test09398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09398");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L579675851", true);
        byte[] byteArray5 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(classReader6, 11);
        classWriter8.visitInnerClass("L1411298446", "L936297181", "L1345812268", (int) (short) 10);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09399");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        java.lang.String str38 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 16);
        int int41 = classReader26.header;
        byte[] byteArray42 = classReader26.b;
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String str44 = classReader43.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int46 = classReader43.getItem(141);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 141");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 90 + "'", int41 == 90);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test09400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09400");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.header;
        java.lang.String str34 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        int int57 = classWriter37.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter37.visitAnnotation("", true);
        byte[] byteArray61 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        short short64 = classReader62.readShort((int) (byte) 0);
        int int66 = classReader62.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(classReader62, 0);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader62, 0);
        int int72 = classReader62.readByte((int) (byte) 10);
        char[] charArray77 = new char[] { '#', '4', '4' };
        java.lang.String str78 = classReader62.readUTF8(100, charArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = classReader26.readClass(12592, charArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12592");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) -13570 + "'", short64 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2560 + "'", int66 == 2560);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test09401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09401");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label42 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        label42.info = strArray58;
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod((int) (short) 100, "", "hi!", "", strArray58);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter37.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor67.visitAnnotation("L636727990", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = fieldVisitor67.visitAnnotation("L535346328", false);
        org.mockito.asm.FieldVisitor fieldVisitor74 = classWriter1.visitField(7, "L1715729238", "L693982720", "L1490365060", (java.lang.Object) false);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = fieldVisitor74.visitAnnotation("L809431533", true);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(0);
        int int82 = classWriter80.newConst((java.lang.Object) (byte) 0);
        int int84 = classWriter80.newUTF8("");
        classWriter80.visitEnd();
        byte[] byteArray86 = classWriter80.toByteArray();
        annotationVisitor77.visit("L2102614230", (java.lang.Object) byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader90 = new org.mockito.asm.ClassReader(byteArray86, 512, 56);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(fieldVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(fieldVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test09402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09402");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("hi!", (-1));
        methodVisitor16.visitIincInsn(6, 65210);
        methodVisitor16.visitVarInsn(156461415, 14);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor16.visitParameterAnnotation(100, "L1742400311", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09403");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        int int35 = classReader26.getAccess();
        short short37 = classReader26.readShort((int) (byte) 100);
        int int38 = classReader26.getAccess();
        int int40 = classReader26.readByte((int) (short) 4);
        java.lang.String str41 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1 + "'", short37 == (short) 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test09404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09404");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("\000", true);
        int int9 = classWriter1.newMethod("L1889100462", "L172254079", "L590059745", false);
        classWriter1.visitSource("L1750086343", "L1139351323");
        int int17 = classWriter1.newMethod("L9401833", "L1766371387", "L1697475951", false);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter24.newMethod("", "", "hi!", true);
        classWriter24.visitOuterClass("hi!", "", "");
        int int36 = classWriter24.newNameType("hi!", "hi!");
        int int39 = classWriter24.newNameType("hi!", "");
        java.lang.Object obj44 = null;
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter24.visitField(9, "L1601838046", "L2062266913", "L680573325", obj44);
        int int47 = classWriter24.newClass("L1148690681");
        classWriter24.visitOuterClass("L829120697", "", "L620334303");
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int62 = classWriter57.newMethod("", "", "hi!", true);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor72 = classWriter57.visitMethod(0, "", "", "hi!", strArray71);
        int int77 = classWriter57.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = classWriter57.visitAnnotation("", true);
        byte[] byteArray81 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        int int83 = classReader82.getAccess();
        byte[] byteArray84 = classReader82.b;
        int int86 = classReader82.readByte((int) '#');
        java.lang.String[] strArray87 = classReader82.getInterfaces();
        java.lang.String[] strArray88 = classReader82.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter24.visitMethod((int) (short) 256, "L917225789", "L272096973", "L1213314048", strArray88);
        classWriter1.visit(127, 0, "L1660188887", "L1180257586", "L1768723690", strArray88);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 14 + "'", int17 == 14);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(methodVisitor72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6 + "'", int77 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor89);
    }

    @Test
    public void test09405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09405");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = methodVisitor51.visitAnnotation("L30632432", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = annotationVisitor54.visitArray("L1457309764");
        annotationVisitor54.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor56);
    }

    @Test
    public void test09406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09406");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 13063);
        classWriter33.visitSource("L455575035", "L851376494");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test09407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09407");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        classWriter1.visitEnd();
        int int10 = classWriter1.newMethod("L1434815605", "L1789245551", "L1110710417", true);
        classWriter1.visitInnerClass("L521456943", "L2147079915", "L2021165996", 62);
        classWriter1.visitInnerClass("L1447139144", "L999961130", "L1057654651", 16842755);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
    }

    @Test
    public void test09408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09408");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitVarInsn(5, 0);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        methodVisitor48.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor48.visitCode();
        methodVisitor48.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(0);
        int int65 = classWriter60.newMethod("", "", "hi!", true);
        java.lang.String[] strArray74 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter60.visitMethod(0, "", "", "hi!", strArray74);
        methodVisitor75.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        methodVisitor75.visitLabel(label79);
        java.lang.String str81 = label79.toString();
        methodVisitor48.visitLineNumber((int) (short) -1, label79);
        label79.info = (-1.0f);
        methodVisitor16.visitLabel(label79);
        methodVisitor16.visitMultiANewArrayInsn("", (int) (short) 10);
        methodVisitor16.visitEnd();
        methodVisitor16.visitMethodInsn((int) (short) 1, "L81460580", "L372427501", "L947368918");
        methodVisitor16.visitIntInsn((int) (short) 26913, (int) (short) 19506);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L1809966946" + "'", str81, "L1809966946");
    }

    @Test
    public void test09409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09409");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(33);
        classWriter1.visitSource("L976618452", "L295165602");
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter11.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod(3, "hi!", "hi!", "hi!", strArray33);
        byte[] byteArray36 = classWriter11.toByteArray();
        int int38 = classWriter11.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        classWriter44.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter44.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(5);
        int int65 = classWriter63.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(0);
        int int77 = classWriter72.newMethod("", "", "hi!", true);
        java.lang.String[] strArray86 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter72.visitMethod(0, "", "", "hi!", strArray86);
        classWriter63.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray86);
        classWriter44.visit((int) ' ', 8, "L1287376048", "L1028579140", "L680573325", strArray86);
        org.mockito.asm.MethodVisitor methodVisitor90 = classWriter11.visitMethod(256, "L890847236", "L529122729", "L1566032477", strArray86);
        classWriter1.visit(779, 19, "L755949095", "L1009580268", "L1434815605", strArray86);
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor87);
        org.junit.Assert.assertNotNull(methodVisitor90);
    }

    @Test
    public void test09410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09410");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(254);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L1076056118", false);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label16 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        label16.info = strArray32;
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod((int) (short) 100, "", "hi!", "", strArray32);
        classWriter1.visit((-1107296256), 1793, "L1162526488", "L170800745", "L1735602342", strArray32);
        classWriter1.visitInnerClass("L1774910523", "L398402377", "", (int) (short) 29441);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(methodVisitor35);
    }

    @Test
    public void test09411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09411");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        int int20 = classWriter1.newNameType("L1017623370", "L4531833");
        java.lang.String[] strArray25 = null;
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter1.visitMethod(100, "L2133586349", "", "L2000102916", strArray25);
        methodVisitor26.visitVarInsn(13365, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(methodVisitor26);
    }

    @Test
    public void test09412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09412");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        annotationVisitor26.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        int int50 = classWriter30.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter30.visitAnnotation("", true);
        byte[] byteArray54 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        short short57 = classReader55.readShort((int) (byte) 0);
        int int59 = classReader55.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(classReader55, 0);
        int int62 = classReader55.getAccess();
        java.lang.String str63 = classReader55.getSuperName();
        java.lang.String[] strArray64 = classReader55.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor26.visit("L1386483578", (java.lang.Object) classReader55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@48beca3d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short57 + "' != '" + (short) -13570 + "'", short57 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2560 + "'", int59 == 2560);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test09413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09413");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readInt(3);
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray31, 43, 1698786926);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1107296256) + "'", int30 == (-1107296256));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09414");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L1132227206", false);
        int int39 = classWriter1.newMethod("L1889100462", "L1928858580", "L579675851", true);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        int int66 = classWriter46.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter46.visitAnnotation("", true);
        byte[] byteArray70 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        int int73 = classReader71.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader71, (int) '4');
        int int77 = classReader71.readUnsignedShort(5);
        java.lang.String[] strArray78 = classReader71.getInterfaces();
        classWriter1.visit(12, (int) ' ', "L1497855016", "L2062266913", "L1945103414", strArray78);
        org.mockito.asm.Attribute attribute80 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 51966 + "'", int73 == 51966);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test09415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09415");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = annotationVisitor28.visitArray("L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = annotationVisitor31.visitArray("L972384730");
        annotationVisitor33.visitEnd();
        annotationVisitor33.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test09416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09416");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(458753);
        classWriter1.visitInnerClass("L162365000", "L1790809036", "L1040125103", 7);
        classWriter1.visitSource("L933225102", "L1511591972");
        classWriter1.visitSource("L1208026886", "L1572438104");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("L1769982856", false);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test09417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09417");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(5);
        classWriter18.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int25 = classWriter18.newClass("");
        byte[] byteArray26 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray26, 0, (int) '#');
        int int30 = classReader29.header;
        java.lang.String[] strArray31 = classReader29.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter1.visitMethod((int) (short) -1, "L1075066296", "L1628304347", "L264795169", strArray31);
        int int37 = classWriter1.newMethod("", "", "L809431533", false);
        int int39 = classWriter1.newUTF8("");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter45.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter45.visitMethod(8, "hi!", "", "", strArray67);
        methodVisitor69.visitIincInsn((int) 'a', (int) (byte) 100);
        methodVisitor69.visitFieldInsn(19, "L1215739340", "L2012296629", "L389458669");
        org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter1.visitField(28532, "L1366928636", "L1598501322", "L239670169", (java.lang.Object) "L1215739340");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 40 + "'", int30 == 40);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(fieldVisitor78);
    }

    @Test
    public void test09418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09418");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        methodVisitor25.visitIntInsn((int) (byte) 10, 1751720204);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitAnnotation("L755949095", true);
        methodVisitor25.visitFieldInsn(104, "L59063553", "L749737959", "L620334303");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        methodVisitor64.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label68 = new org.mockito.asm.Label();
        methodVisitor64.visitLabel(label68);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter71.newConst((java.lang.Object) (short) 1);
        classWriter71.visitSource("", "");
        label68.info = "";
        int int78 = label68.getOffset();
        java.lang.String str79 = label68.toString();
        java.lang.Object obj80 = label68.info;
        int int81 = label68.getOffset();
        int int82 = label68.getOffset();
        methodVisitor25.visitLineNumber(1694564377, label68);
        java.lang.String str84 = label68.toString();
        java.lang.String str85 = label68.toString();
        java.lang.Object obj86 = label68.info;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L92335760" + "'", str79, "L92335760");
        org.junit.Assert.assertEquals("'" + obj80 + "' != '" + "" + "'", obj80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L92335760" + "'", str84, "L92335760");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L92335760" + "'", str85, "L92335760");
        org.junit.Assert.assertEquals("'" + obj86 + "' != '" + "" + "'", obj86, "");
    }

    @Test
    public void test09419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09419");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        classWriter34.visitOuterClass("L4531833", "L1700698598", "L664111037");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(5);
        classWriter44.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int51 = classWriter44.newClass("");
        int int54 = classWriter44.newNameType("L1847716459", "");
        classWriter44.visitEnd();
        byte[] byteArray56 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray56);
        int int59 = classReader57.readByte((int) (byte) 0);
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter34.visitField(512, "L1372769316", "L1019177379", "L9401833", (java.lang.Object) int59);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = fieldVisitor60.visitAnnotation("L324925920", false);
        fieldVisitor60.visitEnd();
        org.mockito.asm.Attribute attribute65 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor60.visitAttribute(attribute65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 202 + "'", int59 == 202);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor63);
    }

    @Test
    public void test09420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09420");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("L745089702", false);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter46.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray49 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray49, (int) (byte) 0, 1);
        int int53 = classReader52.getAccess();
        int int55 = classReader52.readByte(16);
        java.lang.String[] strArray56 = classReader52.getInterfaces();
        classWriter1.visit(104, 25, "L492184427", "L103257873", "L594418938", strArray56);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter1.visitAnnotation("L1868424363", true);
        annotationVisitor60.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(annotationVisitor60);
    }

    @Test
    public void test09421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09421");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        classWriter1.visitInnerClass("L1017623370", "L1178822359", "L680573325", (int) '#');
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        int int61 = classWriter41.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter41.visitAnnotation("", true);
        byte[] byteArray65 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        short short68 = classReader66.readShort((int) (byte) 0);
        int int70 = classReader66.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(classReader66, 0);
        java.lang.String[] strArray73 = classReader66.getInterfaces();
        byte[] byteArray74 = classReader66.b;
        java.lang.String str75 = classReader66.getSuperName();
        byte[] byteArray76 = classReader66.b;
        java.lang.String[] strArray77 = classReader66.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter1.visitMethod(875903244, "hi!", "L1611208075", "L826610285", strArray77);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor78.visitAnnotation("L680573325", false);
        methodVisitor78.visitTypeInsn(16842755, "L1352784969");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor78.visitParameterAnnotation(52, "L1397998158", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) -13570 + "'", short68 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2560 + "'", int70 == 2560);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test09422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09422");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        methodVisitor25.visitVarInsn(0, 82);
        methodVisitor25.visitVarInsn(19, 156461415);
        methodVisitor25.visitCode();
        methodVisitor25.visitMaxs(186, 110);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test09423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09423");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("L110679537", "L1221801792", "L2089731244", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        int int31 = classWriter29.newConst((java.lang.Object) (short) 1);
        int int33 = classWriter29.newUTF8("hi!");
        classWriter29.visitOuterClass("L728847777", "\001", "L809431533");
        org.mockito.asm.FieldVisitor fieldVisitor38 = classWriter1.visitField((int) (short) 1, "L1628304347", "L1938659678", "L1601838046", (java.lang.Object) "\001");
        classWriter1.visitOuterClass("L916243867", "L538737171", "L1726462062");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter1.visitAnnotation("L749737959", false);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(fieldVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test09424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09424");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        annotationVisitor24.visitEnum("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = annotationVisitor24.visitAnnotation("", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = annotationVisitor24.visitAnnotation("L1402371927", "L18515553");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test09425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09425");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        int int18 = classWriter1.newMethod("L680573325", "\001", "L1847716459", false);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L445870120", "L540956256", "L129454114", 26913);
        int int26 = classWriter1.newClass("L542271741");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        int int59 = classReader58.getAccess();
        int int61 = classReader58.readUnsignedShort(23);
        long long63 = classReader58.readLong(2);
        java.lang.String[] strArray64 = classReader58.getInterfaces();
        classWriter1.visit(33, 1792, "L1353410662", "L1657088012", "", strArray64);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-4990551337079930870L) + "'", long63 == (-4990551337079930870L));
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test09426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09426");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int34 = classReader26.header;
        short short36 = classReader26.readShort(0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 17784);
        int int42 = classWriter38.newField("L1680082145", "L1716197211", "L1002757230");
        int int45 = classWriter38.newNameType("L791392221", "");
        int int47 = classWriter38.newClass("L11610906");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 90 + "'", int34 == 90);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 15 + "'", int42 == 15);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 17 + "'", int45 == 17);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 19 + "'", int47 == 19);
    }

    @Test
    public void test09427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09427");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        int int44 = classReader38.readInt(0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter1.visitMethod((int) (short) 1, "L238476442", "L999961130", "L535346328", strArray45);
        methodVisitor46.visitTypeInsn((int) (short) 3, "L1471680267");
        methodVisitor46.visitIincInsn(0, 23);
        methodVisitor46.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-889275714) + "'", int44 == (-889275714));
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
    }

    @Test
    public void test09428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09428");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        short short37 = classReader26.readShort(13);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, 18);
        long long43 = classReader26.readLong(6);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, 13);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = classReader26.readUnsignedShort(1659509);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1792 + "'", short37 == (short) 1792);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 42966450183L + "'", long43 == 42966450183L);
    }

    @Test
    public void test09429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09429");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L535346328", "L535346328");
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter1.visitAnnotation("L1928858580", false);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter69.newConst((java.lang.Object) (short) 1);
        int int73 = classWriter69.newUTF8("hi!");
        annotationVisitor66.visit("L446511586", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = annotationVisitor66.visitArray("L935241002");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test09430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09430");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L1429849124", "L535346328", "L110679537", (int) (byte) -1);
        int int35 = classWriter1.newField("L367225907", "L1901444169", "L1435737877");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("L1530728970", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 23 + "'", int35 == 23);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test09431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09431");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        int int52 = classWriter1.newNameType("L897597087", "L579675851");
        int int57 = classWriter1.newMethod("L590888141", "L680573325", "", false);
        byte[] byteArray58 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L689781346", "L1789245551", "L1527568082");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 23 + "'", int57 == 23);
        org.junit.Assert.assertNotNull(byteArray58);
    }

    @Test
    public void test09432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09432");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        methodVisitor33.visitCode();
        methodVisitor33.visitIntInsn(26729, 51966);
        methodVisitor33.visitVarInsn(26729, 8);
        org.mockito.asm.Label label44 = null;
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        methodVisitor61.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label65 = new org.mockito.asm.Label();
        methodVisitor61.visitLabel(label65);
        java.lang.String str67 = label65.toString();
        label65.info = ' ';
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor33.visitLocalVariable("L1545548548", "L1035851567", "L1270023076", label44, label65, 223337);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "L100632557" + "'", str67, "L100632557");
    }

    @Test
    public void test09433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09433");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 65210);
        methodVisitor16.visitTypeInsn(2560, "L1938659678");
        methodVisitor16.visitIincInsn(16, (int) (short) 100);
        methodVisitor16.visitInsn(3);
        methodVisitor16.visitIntInsn(14, (int) (short) 22121);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test09434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09434");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        java.lang.String str38 = classReader26.getSuperName();
        int int39 = classReader26.getAccess();
        long long41 = classReader26.readLong(40);
        // The following exception was thrown during execution in test generation
        try {
            short short43 = classReader26.readShort((int) (short) 2816);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2816");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5005860273151830383L + "'", long41 == 5005860273151830383L);
    }

    @Test
    public void test09435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09435");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitTypeInsn(101, "L1687335926");
        org.mockito.asm.Attribute attribute50 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test09436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09436");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitInsn(63);
        methodVisitor16.visitInsn(82);
        methodVisitor16.visitEnd();
        methodVisitor16.visitMethodInsn((int) (short) 0, "L1142762441", "L222144606", "L1442680030");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09437");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitFieldInsn(28532, "L1501531883", "L1004763019", "L598988683");
        methodVisitor25.visitTypeInsn(8, "L784900793");
        methodVisitor25.visitFieldInsn(32, "L1216808210", "L2044991236", "L81662335");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test09438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09438");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        classWriter34.visitOuterClass("L4531833", "L1700698598", "L664111037");
        classWriter34.visitOuterClass("L414874932", "L1969123537", "L1889100462");
        int int44 = classWriter34.newClass("L1396464054");
        org.mockito.asm.Attribute attribute45 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter34.visitAttribute(attribute45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21 + "'", int44 == 21);
    }

    @Test
    public void test09439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09439");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor16.visitParameterAnnotation((int) (short) 1025, "L1093218044", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test09440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09440");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.Object obj54 = label51.info;
        int int55 = label51.getOffset();
        java.lang.Object obj56 = label51.info;
        int int57 = label51.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test09441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09441");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 2);
        int int35 = classReader26.readInt(0);
        int int36 = classReader26.getAccess();
        short short38 = classReader26.readShort((int) (short) 9);
        java.lang.String str39 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader26.getItem((int) (short) 12598);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12598");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-889275714) + "'", int35 == (-889275714));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 2561 + "'", short38 == (short) 2561);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test09442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09442");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitInnerClass("L1287376048", "L897597087", "L897597087", (int) '#');
        classWriter1.visitSource("L1930348385", "L2037791973");
        classWriter1.visitSource("L995063226", "L661193128");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test09443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09443");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        methodVisitor25.visitVarInsn((int) '#', 23);
        methodVisitor25.visitIincInsn(21, 8);
        methodVisitor25.visitVarInsn((int) (byte) 0, 26729);
        methodVisitor25.visitFieldInsn(82, "L1076056118", "L905591693", "L946131795");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor47 = methodVisitor25.visitParameterAnnotation((int) (short) -1, "L60374215", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test09444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09444");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMaxs(6, (int) (byte) 10);
        methodVisitor16.visitIincInsn((int) (short) 1, (int) (short) -1);
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMethodInsn((int) (short) 1, "L264795169", "", "L529122729");
        methodVisitor16.visitVarInsn(0, 9);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor16.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test09445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09445");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        int int29 = classWriter9.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        classWriter35.visitOuterClass("hi!", "", "");
        classWriter35.visitEnd();
        java.lang.String[] strArray72 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter35.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter9.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray72);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter1.visitMethod(78, "L1936126716", "L1386483578", "L728847777", strArray72);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor75.visitAnnotationDefault();
        methodVisitor75.visitFieldInsn(12592, "L1581248331", "L1169320665", "L1423401218");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor75.visitAnnotationDefault();
        methodVisitor75.visitMaxs(196864, 1768777046);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test09446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09446");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader26, 10);
        classWriter29.visitOuterClass("L745396935", "L1004112457", "L1931763549");
        classWriter29.visitOuterClass("L71945869", "L1901131515", "L2107462965");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test09447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09447");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor25.visitAnnotation("L1076056118", true);
        methodVisitor25.visitVarInsn(909717811, 14);
        methodVisitor25.visitVarInsn(256, 17784);
        methodVisitor25.visitIincInsn(201326848, (int) (short) 7);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test09448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09448");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter1.visitAnnotation("L624707113", true);
        byte[] byteArray65 = classWriter1.toByteArray();
        int int68 = classWriter1.newNameType("L364320201", "L1901444169");
        java.lang.String[] strArray74 = null;
        classWriter1.visit(1034, 223337, "L2132185573", "L328183013", "L1093704381", strArray74);
        int int77 = classWriter1.newUTF8("L182578583");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 14, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 10, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 11, 0, 0, 0, 2, 0, 3, 0, 3, 0, 11, 0, 0, 0, 2, 0, 3, 0, 12, 0, 0, 0, 4, 0, 5, 0, 6, 0, 13, 0, 0, 0, 6, 0, 1, 0, 9, 0, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 16 + "'", int68 == 16);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 22 + "'", int77 == 22);
    }

    @Test
    public void test09449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09449");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMultiANewArrayInsn("L671872947", (int) '#');
        methodVisitor25.visitFieldInsn(12850, "L1640056714", "L590888141", "L1750086343");
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter58.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray61 = classWriter58.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter58.visitAnnotation("L841843626", false);
        methodVisitor25.visitLdcInsn((java.lang.Object) false);
        methodVisitor25.visitMaxs(105, 28532);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor64);
    }

    @Test
    public void test09450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09450");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readUnsignedShort(1);
        long long35 = classReader26.readLong(7);
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        byte[] byteArray38 = classReader37.b;
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10999411246848L + "'", long35 == 10999411246848L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09451");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter26.visitMethod(8, "hi!", "", "", strArray48);
        methodVisitor50.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        methodVisitor70.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        methodVisitor70.visitLabel(label74);
        java.lang.String str76 = label74.toString();
        int[] intArray80 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray81 = new org.mockito.asm.Label[] {};
        methodVisitor50.visitLookupSwitchInsn(label74, intArray80, labelArray81);
        java.lang.Object obj83 = label74.info;
        methodVisitor16.visitLabel(label74);
        methodVisitor16.visitMethodInsn((int) (short) -1, "L1847716459", "L624707113", "L238476442");
        methodVisitor16.visitIincInsn(12336, 875903244);
        methodVisitor16.visitVarInsn((int) (short) 12848, 32);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L2065166216" + "'", str76, "L2065166216");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray81);
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test09452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09452");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        int int37 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 10);
        int int43 = classWriter39.newField("L1930348385", "L295165602", "L295165602");
        classWriter39.visitSource("L9401833", "");
        int int50 = classWriter39.newField("L1304396351", "", "L1086414642");
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter39.visitAnnotation("L19561572", false);
        classWriter39.visitSource("L270454722", "L1875069328");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20 + "'", int50 == 20);
        org.junit.Assert.assertNotNull(annotationVisitor53);
    }

    @Test
    public void test09453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09453");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.readInt(7);
        int int35 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 14);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 51966);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2561 + "'", int34 == 2561);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 90 + "'", int35 == 90);
    }

    @Test
    public void test09454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09454");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        methodVisitor25.visitIntInsn((int) (byte) 10, 1751720204);
        methodVisitor25.visitInsn(12848);
        methodVisitor25.visitIincInsn((int) (short) 2892, 170);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test09455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09455");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int33 = classWriter1.newMethod("L1687335926", "", "L68825608", false);
        classWriter1.visitInnerClass("L755844592", "L684697689", "L1337199277", 33);
        classWriter1.visitSource("L1285156180", "L364378309");
        classWriter1.visitSource("L1800549256", "L6818069");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
    }

    @Test
    public void test09456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09456");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        int int30 = classReader26.readByte(28);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        classWriter32.visitOuterClass("hi!", "", "");
        int int44 = classWriter32.newNameType("hi!", "hi!");
        int int47 = classWriter32.newNameType("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter32.visitAnnotation("L1974467403", true);
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter32, 139);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test09457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09457");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMethodInsn(808597809, "L1482040464", "L1400392501", "L8290066");
        methodVisitor16.visitFieldInsn(202, "L1991590306", "L1766899022", "L1853844875");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor23);
    }

    @Test
    public void test09458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09458");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        methodVisitor58.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor58.visitLabel(label62);
        java.lang.String str64 = label62.toString();
        label62.info = ' ';
        methodVisitor25.visitLineNumber((int) '#', label62);
        methodVisitor25.visitEnd();
        methodVisitor25.visitInsn((int) (short) 21353);
        org.mockito.asm.Attribute attribute71 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "L1172230953" + "'", str64, "L1172230953");
    }

    @Test
    public void test09459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09459");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitVarInsn((-1107296256), 65210);
        methodVisitor25.visitIntInsn((int) (byte) 0, 12);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = methodVisitor25.visitAnnotation("L912963918", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = methodVisitor25.visitAnnotation("L1769982856", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor59);
    }

    @Test
    public void test09460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09460");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readByte((int) (byte) 10);
        char[] charArray41 = new char[] { '#', '4', '4' };
        java.lang.String str42 = classReader26.readUTF8(100, charArray41);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader26, 38);
        byte[] byteArray45 = classReader26.b;
        byte[] byteArray46 = classReader26.b;
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray46, (int) (short) -1, (int) (short) 9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test09461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09461");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitCode();
        methodVisitor16.visitMaxs(0, 2561);
        methodVisitor16.visitIincInsn(199680, (int) (short) 21353);
        methodVisitor16.visitMultiANewArrayInsn("L9401833", 1793);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor16.visitParameterAnnotation(0, "L969024055", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test09462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09462");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L809431533", "L636727990", "L636727990");
        classWriter1.visitInnerClass("L1847716459", "L976656549", "L2062266913", 9);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        classWriter1.visit((int) ' ', 2, "", "L71945869", "L667379532", strArray58);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter66.newMethod("", "", "hi!", true);
        classWriter66.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter66.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(0);
        int int82 = classWriter80.newConst((java.lang.Object) (byte) 0);
        int int83 = classWriter66.newConst((java.lang.Object) int82);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter66.visitAnnotation("L264795169", false);
        annotationVisitor86.visitEnum("L1223439170", "L579675851", "L1962189950");
        org.mockito.asm.FieldVisitor fieldVisitor91 = classWriter1.visitField(90, "L341764360", "L1789245551", "L1930348385", (java.lang.Object) "L1223439170");
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = fieldVisitor91.visitAnnotation("L1686860563", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(fieldVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test09463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09463");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor41.visitAnnotationDefault();
        methodVisitor41.visitIntInsn((-21316096), 909717811);
        methodVisitor41.visitMultiANewArrayInsn("L1168665692", 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test09464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09464");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        int int3 = classWriter1.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter10.newMethod("", "", "hi!", true);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter10.visitMethod(0, "", "", "hi!", strArray24);
        classWriter1.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray24);
        byte[] byteArray27 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor47.visitCode();
        methodVisitor47.visitIincInsn(0, 5);
        int int57 = classWriter30.newConst((java.lang.Object) 0);
        classWriter30.visitOuterClass("L3043237", "L624707113", "L2127085380");
        classWriter30.visitInnerClass("", "L636727990", "L1268109548", 872);
        int int71 = classWriter30.newMethod("L1140828792", "L120720304", "L1283200231", false);
        classReader28.accept((org.mockito.asm.ClassVisitor) classWriter30, 105);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader28, 17784);
        int int76 = classReader28.getAccess();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 35, 0, 10, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 5, 1, 0, 0, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 32, 0, 3, 0, 6, 0, 4, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 17 + "'", int71 == 17);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 32 + "'", int76 == 32);
    }

    @Test
    public void test09465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09465");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L2000102916", "L2062266913", "L59063553", (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter12.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (byte) 0);
        int int29 = classWriter12.newConst((java.lang.Object) int28);
        int int33 = classWriter12.newField("hi!", "", "L809431533");
        java.lang.String[] strArray43 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter12.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray43);
        int int48 = classWriter12.newField("L680573325", "L242883751", "L636727990");
        classWriter12.visitOuterClass("L1928858580", "L426422007", "L976656549");
        int int53 = classWriter1.newConst((java.lang.Object) "L426422007");
        classWriter1.visitSource("\000", "L809431533");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
    }

    @Test
    public void test09466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09466");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        int int6 = classWriter1.newMethod("L275489687", "L275489687", "L275489687", false);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label13 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        label13.info = strArray29;
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter8.visitMethod((int) (short) 100, "", "hi!", "", strArray29);
        org.mockito.asm.FieldVisitor fieldVisitor38 = classWriter8.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = fieldVisitor38.visitAnnotation("L2000102916", false);
        int int42 = classWriter1.newConst((java.lang.Object) false);
        classWriter1.visitSource("L41216715", "L233072654");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertNotNull(fieldVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
    }

    @Test
    public void test09467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09467");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitSource("L467340186", "L1669912474");
        byte[] byteArray14 = classWriter1.toByteArray();
        int int19 = classWriter1.newMethod("L1745031302", "L1488028553", "L976618452", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("L8293919", false);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 10, 76, 52, 54, 55, 51, 52, 48, 49, 56, 54, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 11, 76, 49, 54, 54, 57, 57, 49, 50, 52, 55, 52, 0, 11, 0, 0, 0, 4, 0, 6, 0, 7]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 17 + "'", int19 == 17);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test09468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09468");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(1751720204, 875903244);
        methodVisitor16.visitTypeInsn(26729, "L1952894981");
        methodVisitor16.visitTypeInsn(875903244, "L1930348385");
        methodVisitor16.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test09469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09469");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, 2561);
        classWriter30.visitOuterClass("L103257873", "L2027998385", "L1912967891");
        classWriter30.visitSource("L1936126716", "L2080829315");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray28);
    }

    @Test
    public void test09470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09470");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readByte(1);
        int int14 = classReader7.readUnsignedShort((int) (byte) 10);
        short short16 = classReader7.readShort(0);
        java.lang.String str17 = classReader7.getSuperName();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 254 + "'", int12 == 254);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 256 + "'", int14 == 256);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) -13570 + "'", short16 == (short) -13570);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test09471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09471");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitEnd();
        methodVisitor16.visitIntInsn(47806, 161);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitInsn(12848);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test09472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09472");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String str61 = classReader60.getSuperName();
        char[] charArray67 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj68 = classReader60.readConst(6, charArray67);
        java.lang.Object obj69 = classReader26.readConst(3, charArray67);
        byte[] byteArray70 = classReader26.b;
        int int71 = classReader26.header;
        int int72 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(classReader26, 170);
        classWriter74.visitOuterClass("L362499933", "L579675851", "L419471195");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + "\001" + "'", obj68, "\001");
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "hi!" + "'", obj69, "hi!");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 90 + "'", int71 == 90);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test09473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09473");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        int int34 = classReader26.readInt(17);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.readUnsignedShort(28532);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 223337 + "'", int34 == 223337);
    }

    @Test
    public void test09474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09474");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitVarInsn((int) (byte) 1, (int) '#');
        methodVisitor25.visitMaxs(100, (int) (short) 0);
        methodVisitor25.visitCode();
        methodVisitor25.visitInsn(16);
        methodVisitor25.visitVarInsn(256, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test09475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09475");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        short short37 = classReader26.readShort(13);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        classWriter47.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter47.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter61.newConst((java.lang.Object) (byte) 0);
        int int64 = classWriter47.newConst((java.lang.Object) int63);
        classWriter47.visitEnd();
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter(0);
        int int83 = classWriter78.newMethod("", "", "hi!", true);
        java.lang.String[] strArray92 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor93 = classWriter78.visitMethod(0, "", "", "hi!", strArray92);
        label76.info = strArray92;
        org.mockito.asm.MethodVisitor methodVisitor95 = classWriter71.visitMethod((int) (short) 100, "", "hi!", "", strArray92);
        org.mockito.asm.MethodVisitor methodVisitor96 = classWriter47.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray92);
        org.mockito.asm.MethodVisitor methodVisitor97 = classWriter41.visitMethod(204, "L939135397", "L1764016272", "L853819367", strArray92);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = classWriter39.newConst((java.lang.Object) strArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@1abb62cb");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1792 + "'", short37 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 5 + "'", int83 == 5);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(methodVisitor93);
        org.junit.Assert.assertNotNull(methodVisitor95);
        org.junit.Assert.assertNotNull(methodVisitor96);
        org.junit.Assert.assertNotNull(methodVisitor97);
    }

    @Test
    public void test09476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09476");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitMaxs(19, 47806);
        methodVisitor16.visitInsn((int) (short) 1792);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1657847749" + "'", str75, "L1657847749");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test09477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09477");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readUnsignedShort(7);
        int int38 = classReader26.readByte(0);
        int int40 = classReader26.readByte(90);
        java.lang.String str41 = classReader26.getSuperName();
        int int43 = classReader26.readInt(35);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = classReader26.readInt((int) (short) 28532);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 202 + "'", int38 == 202);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 262400 + "'", int43 == 262400);
    }

    @Test
    public void test09478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09478");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        classWriter34.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter37.visitInnerClass("L1847716459", "L579675851", "L976656549", (int) (byte) 0);
        classWriter37.visitEnd();
        classWriter37.visitInnerClass("", "L1019177379", "L1004112457", 1768777046);
        int int49 = classWriter34.newConst((java.lang.Object) "L1004112457");
        classWriter34.visitEnd();
        org.mockito.asm.Attribute attribute51 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter34.visitAttribute(attribute51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 11 + "'", int49 == 11);
    }

    @Test
    public void test09479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09479");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(1793, 26);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L1488028553", true);
        methodVisitor16.visitFieldInsn(65536, "L650167216", "L1919150861", "L1568855446");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test09480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09480");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        int int53 = classWriter1.newUTF8("L1221801792");
        int int55 = classWriter1.newUTF8("L2089731244");
        int int58 = classWriter1.newNameType("L1685807285", "L2039247828");
        int int62 = classWriter1.newField("L2051706745", "L782129665", "L120713780");
        classWriter1.visitInnerClass("L2117999297", "L917225789", "L612243917", (int) (short) -13570);
        int int69 = classWriter1.newClass("L2091850869");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 14 + "'", int62 == 14);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 21 + "'", int69 == 21);
    }

    @Test
    public void test09481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09481");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        int int28 = classWriter1.newUTF8("hi!");
        int int30 = classWriter1.newUTF8("L946793861");
        classWriter1.visitOuterClass("L103257873", "L1305858187", "L1202802091");
        int int37 = classWriter1.newNameType("", "L590059745");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 14 + "'", int37 == 14);
    }

    @Test
    public void test09482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09482");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readInt((int) (byte) 1);
        int int11 = classReader7.readByte((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        classWriter13.visitSource("", "L2000102916");
        int int20 = classWriter13.newUTF8("L1423401218");
        byte[] byteArray21 = classWriter13.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            classReader7.accept((org.mockito.asm.ClassVisitor) classWriter13, (int) (short) 13063);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-21316096) + "'", int9 == (-21316096));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 11, 76, 49, 52, 50, 51, 52, 48, 49, 50, 49, 56, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 2, 0, 2, 0, 5, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
    }

    @Test
    public void test09483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09483");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L1132227206", "L749737959", "L1132227206");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L1099155219", false);
        classWriter1.visitInnerClass("L1640056714", "L1546658809", "L1416493109", 20);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(0);
        int int51 = classWriter46.newMethod("", "", "hi!", true);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter46.visitMethod(0, "", "", "hi!", strArray60);
        int int66 = classWriter46.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter46.visitAnnotation("", true);
        byte[] byteArray70 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        int int73 = classReader71.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader71, (int) '4');
        long long77 = classReader71.readLong(2);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader71, 0);
        int int81 = classReader71.readByte(8);
        int int82 = classReader71.header;
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(classReader71, 1869898100);
        java.lang.String[] strArray85 = classReader71.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter1.visitMethod((int) (short) 256, "L442162059", "L1724469945", "L1757895657", strArray85);
        int int91 = classWriter1.newMethod("L1377529303", "L2105621899", "L1433835315", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 51966 + "'", int73 == 51966);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-4990551337079930870L) + "'", long77 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 90 + "'", int82 == 90);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 23 + "'", int91 == 23);
    }

    @Test
    public void test09484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09484");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        byte[] byteArray14 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L92965801", "L688061379", "L1555013391", (int) (short) 1792);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 4, 0, 6, 0, 7, 0, 10, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
    }

    @Test
    public void test09485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09485");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L535346328", "L535346328");
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter1.visitAnnotation("L1928858580", false);
        classWriter1.visitInnerClass("L1686860563", "L821661888", "L1457309764", 554434561);
        int int76 = classWriter1.newMethod("L1855830998", "L1147069629", "L450189616", false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20 + "'", int76 == 20);
    }

    @Test
    public void test09486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09486");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        byte[] byteArray21 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray21);
        java.lang.Class<?> wildcardClass23 = classReader22.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 19, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 17, 0, 0, 0, 4, 0, 8, 0, 10, 0, 18, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test09487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09487");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        byte[] byteArray34 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L161312276", "L862723850", "L991468484");
        classWriter1.visitOuterClass("L1928858580", "L1721932419", "L392695198");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(byteArray34);
    }

    @Test
    public void test09488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09488");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readByte((int) (byte) 10);
        short short38 = classReader26.readShort((int) (short) 7);
        java.lang.String[] strArray39 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader26.readInt(167837696);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 0 + "'", short38 == (short) 0);
        org.junit.Assert.assertNotNull(strArray39);
    }

    @Test
    public void test09489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09489");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        methodVisitor25.visitFieldInsn(10, "L1962189950", "L1028579140", "");
        methodVisitor25.visitFieldInsn(20, "L488861128", "L1505866272", "L1952894981");
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = methodVisitor25.visitAnnotation("L598694840", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = annotationVisitor72.visitArray("L1435737877");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test09490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09490");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 1);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        classWriter47.visitInnerClass("", "L817273435", "L136145448", 105);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter47.visitAnnotation("L238476442", true);
        int int60 = classWriter47.newMethod("L1855754182", "L2106764488", "L913773226", true);
        classWriter47.visitSource("L1092256168", "L644932592");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 19 + "'", int60 == 19);
    }

    @Test
    public void test09491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09491");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        methodVisitor45.visitFieldInsn(8, "hi!", "", "");
        methodVisitor45.visitTypeInsn((int) (byte) 100, "");
        methodVisitor25.visitLdcInsn((java.lang.Object) (byte) 100);
        methodVisitor25.visitVarInsn(12, (-1107296256));
        methodVisitor25.visitMaxs(100, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor64 = methodVisitor25.visitParameterAnnotation(34, "L782129665", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
    }

    @Test
    public void test09492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09492");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.Label label18 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter20.newMethod("", "", "hi!", true);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter20.visitMethod(0, "", "", "hi!", strArray34);
        label18.info = strArray34;
        classWriter1.visit(26, (int) (byte) 10, "L2022616480", "L426422007", "L2089731244", strArray34);
        classWriter1.visitOuterClass("L120720304", "L911323346", "L181903634");
        int int44 = classWriter1.newNameType("L918742398", "L46285906");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
    }

    @Test
    public void test09493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09493");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader38, 0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        classWriter1.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray45);
        classWriter1.visitSource("L264795169", "L1028579140");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("L1307358075", false);
        int int57 = classWriter1.newMethod("L579675851", "L1589078908", "L535346328", true);
        classWriter1.visitSource("L745089702", "");
        classWriter1.visitSource("L242883751", "L2059908172");
        classWriter1.visitInnerClass("L179737210", "L1780214503", "L149220781", (int) (short) 1792);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter1.visitAnnotation("L1275984428", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1438974949", false);
        int int77 = classWriter1.newNameType("L480997926", "L361667728");
        classWriter1.visitOuterClass("L537856854", "L1627366687", "L1557781805");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 25 + "'", int77 == 25);
    }

    @Test
    public void test09494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09494");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        java.lang.String str31 = classReader26.getSuperName();
        java.lang.String str32 = classReader26.getSuperName();
        int int34 = classReader26.readByte(42);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 99 + "'", int34 == 99);
    }

    @Test
    public void test09495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09495");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L809431533", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("L1949580175", true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test09496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09496");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        methodVisitor51.visitEnd();
        methodVisitor51.visitFieldInsn(16842755, "L345550585", "L733005525", "L84564479");
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = methodVisitor51.visitAnnotation("L1238273264", true);
        java.lang.Class<?> wildcardClass61 = methodVisitor51.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test09497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09497");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitVarInsn((-1107296256), 65210);
        methodVisitor25.visitIntInsn((int) (byte) 0, 12);
        methodVisitor25.visitIincInsn((int) (short) 100, 156461415);
        methodVisitor25.visitEnd();
        methodVisitor25.visitMaxs((int) (short) 17784, (int) ' ');
        methodVisitor25.visitVarInsn(23, 83);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test09498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09498");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L242883751", true);
        int int31 = classWriter1.newNameType("L1017623370", "L1004763019");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        int int57 = classWriter37.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter37.visitAnnotation("", true);
        byte[] byteArray61 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        short short64 = classReader62.readShort((int) (byte) 0);
        int int66 = classReader62.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(classReader62, 0);
        java.lang.String[] strArray69 = classReader62.getInterfaces();
        java.lang.String[] strArray70 = classReader62.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter1.visitMethod((int) (short) -17730, "L1514078428", "L765517289", "L1249077817", strArray70);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1007201117", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) -13570 + "'", short64 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2560 + "'", int66 == 2560);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test09499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09499");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor46.visitCode();
        methodVisitor46.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        java.lang.String str79 = label77.toString();
        methodVisitor46.visitLineNumber((int) (short) -1, label77);
        methodVisitor16.visitLabel(label77);
        java.lang.String str82 = label77.toString();
        int int83 = label77.getOffset();
        java.lang.String str84 = label77.toString();
        java.lang.String str85 = label77.toString();
        int int86 = label77.getOffset();
        int int87 = label77.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L1392383416" + "'", str79, "L1392383416");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "L1392383416" + "'", str82, "L1392383416");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L1392383416" + "'", str84, "L1392383416");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L1392383416" + "'", str85, "L1392383416");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 8 + "'", int87 == 8);
    }

    @Test
    public void test09500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09500");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitInnerClass("L1287376048", "L897597087", "L897597087", (int) '#');
        classWriter1.visitSource("L1930348385", "L2037791973");
        int int16 = classWriter1.newClass("L1169247122");
        int int18 = classWriter1.newClass("L2045712064");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L672580361", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }
}

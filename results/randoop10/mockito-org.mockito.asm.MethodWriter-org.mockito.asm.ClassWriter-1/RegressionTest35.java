import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest35 {

    public static boolean debug = false;

    @Test
    public void test17501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17501");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.readInt(7);
        int int35 = classReader26.header;
        int int37 = classReader26.readByte(15);
        java.lang.String str38 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 25);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2561 + "'", int34 == 2561);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 90 + "'", int35 == 90);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test17502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17502");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("hi!", false);
        int int8 = classWriter1.newField("L875787534", "L590888141", "L620334303");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        int int35 = classWriter15.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter15.visitAnnotation("", true);
        byte[] byteArray39 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        short short42 = classReader40.readShort((int) (byte) 0);
        int int44 = classReader40.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader40, 0);
        int int47 = classReader40.getAccess();
        java.lang.String str48 = classReader40.getSuperName();
        int int50 = classReader40.readInt((int) (byte) 1);
        long long52 = classReader40.readLong(3);
        java.lang.String[] strArray53 = classReader40.getInterfaces();
        classWriter1.visit(56, 90, "L436759653", "L859506825", "L1093218044", strArray53);
        classWriter1.visitInnerClass("L325385758", "L321426081", "L55663967", 1025);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) -13570 + "'", short42 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2560 + "'", int44 == 2560);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-21316096) + "'", int50 == (-21316096));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-4755801206503241215L) + "'", long52 == (-4755801206503241215L));
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test17503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17503");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, (-21316096));
        int int35 = classReader26.readUnsignedShort(51);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(458753);
        classWriter37.visitInnerClass("L162365000", "L1790809036", "L1040125103", 7);
        classWriter37.visitSource("L933225102", "L1511591972");
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter37, 13876);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
    }

    @Test
    public void test17504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17504");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1681302154", true);
        int int14 = classWriter1.newNameType("L1334226032", "L1589078908");
        java.lang.Object obj19 = null;
        org.mockito.asm.FieldVisitor fieldVisitor20 = classWriter1.visitField(872, "L2008648827", "L831310600", "L1706351722", obj19);
        classWriter1.visitOuterClass("", "L94594526", "L1877410732");
        int int28 = classWriter1.newField("L758450187", "", "L1643613904");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(fieldVisitor20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
    }

    @Test
    public void test17505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17505");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int40 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 2892);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader26, 13876);
        org.mockito.asm.Attribute attribute45 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter44.visitAttribute(attribute45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
    }

    @Test
    public void test17506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17506");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        java.lang.String[] strArray52 = classReader51.getInterfaces();
        long long54 = classReader51.readLong((int) (short) 2);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute attribute57 = null;
        org.mockito.asm.Attribute[] attributeArray58 = new org.mockito.asm.Attribute[] { attribute57 };
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter56, attributeArray58, (int) ' ');
        classWriter56.visitEnd();
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int72 = classWriter67.newMethod("", "", "hi!", true);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter67.visitMethod(0, "", "", "hi!", strArray81);
        int int87 = classWriter67.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = classWriter67.visitAnnotation("", true);
        byte[] byteArray91 = classWriter67.toByteArray();
        org.mockito.asm.ClassReader classReader92 = new org.mockito.asm.ClassReader(byteArray91);
        int int93 = classReader92.getAccess();
        int int94 = classReader92.header;
        int int95 = classReader92.getAccess();
        java.lang.String[] strArray96 = classReader92.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor97 = classWriter56.visitMethod(30, "L1403290824", "L2079092351", "L1093218044", strArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-4990551337079603180L) + "'", long54 == (-4990551337079603180L));
        org.junit.Assert.assertNotNull(attributeArray58);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 90 + "'", int94 == 90);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test17507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17507");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        int int52 = classWriter1.newClass("L529122729");
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter1.visitAnnotation("L189750198", true);
        classWriter1.visitEnd();
        int int59 = classWriter1.newNameType("L1595872345", "L1066926616");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 13 + "'", int52 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 17 + "'", int59 == 17);
    }

    @Test
    public void test17508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17508");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        int int39 = classWriter19.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter19.visitAnnotation("", true);
        byte[] byteArray43 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        short short46 = classReader44.readShort((int) (byte) 0);
        int int48 = classReader44.readUnsignedShort((int) ' ');
        long long50 = classReader44.readLong((int) '#');
        int int52 = classReader44.getItem(0);
        java.lang.String str53 = classReader44.getSuperName();
        short short55 = classReader44.readShort(13);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(classReader44, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(classReader44, 51966);
        classWriter59.visitSource("L1315079658", "L1202930291");
        classWriter59.visitInnerClass("L124447396", "L707293021", "L495165811", 52);
        org.mockito.asm.FieldVisitor fieldVisitor68 = classWriter1.visitField(50331648, "L1040610774", "L1562158187", "L862087622", (java.lang.Object) 52);
        fieldVisitor68.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = fieldVisitor68.visitAnnotation("L161563611", true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) -13570 + "'", short46 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2560 + "'", int48 == 2560);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1126999590795363L + "'", long50 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 1792 + "'", short55 == (short) 1792);
        org.junit.Assert.assertNotNull(fieldVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test17509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17509");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.String str54 = label51.toString();
        java.lang.Class<?> wildcardClass55 = label51.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L2016909153" + "'", str54, "L2016909153");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test17510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17510");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        classWriter1.visitSource("", "L488861128");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter1.visitAnnotation("L1368708044", false);
        int int49 = classWriter1.newField("", "L209087084", "L1223623304");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("L1387910543", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter1.visitAnnotation("L267268678", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 14 + "'", int49 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(annotationVisitor55);
    }

    @Test
    public void test17511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17511");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(1751720204, 875903244);
        methodVisitor16.visitTypeInsn(26729, "L1952894981");
        methodVisitor16.visitMethodInsn(0, "L2062266913", "L1292845306", "L1083553839");
        methodVisitor16.visitMaxs(33, 65210);
        methodVisitor16.visitIntInsn(1792, 1763773440);
        methodVisitor16.visitCode();
        methodVisitor16.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test17512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17512");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1945103414", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        classWriter13.visitEnd();
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter20.newMethod("", "", "hi!", true);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter20.visitMethod(0, "", "", "hi!", strArray34);
        int int40 = classWriter20.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter20.visitAnnotation("", true);
        byte[] byteArray44 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        short short47 = classReader45.readShort((int) (byte) 0);
        int int49 = classReader45.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader45, 0);
        java.lang.String[] strArray52 = classReader45.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter13.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray52);
        classWriter1.visit((int) (byte) 0, 0, "L172254079", "L110679537", "L415508906", strArray52);
        int int56 = classWriter1.newUTF8("L4531833");
        int int58 = classWriter1.newClass("L172254079");
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        int int84 = classWriter64.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = classWriter64.visitAnnotation("", true);
        byte[] byteArray88 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader89 = new org.mockito.asm.ClassReader(byteArray88);
        int int90 = classReader89.getAccess();
        byte[] byteArray91 = classReader89.b;
        int int93 = classReader89.readByte((int) '#');
        java.lang.String[] strArray94 = classReader89.getInterfaces();
        java.lang.String[] strArray95 = classReader89.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor96 = classWriter1.visitMethod(1763773440, "L1162526488", "L777505617", "L1611366333", strArray95);
        java.lang.Class<?> wildcardClass97 = methodVisitor96.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) -13570 + "'", short47 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2560 + "'", int49 == 2560);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(methodVisitor96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test17513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17513");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        methodVisitor16.visitInsn((int) (short) 17784);
        methodVisitor16.visitTypeInsn(100, "L1230184848");
        methodVisitor16.visitTypeInsn(51, "L161312276");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test17514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17514");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        byte[] byteArray39 = classReader38.b;
        int int40 = classReader38.getAccess();
        byte[] byteArray41 = classReader38.b;
        java.lang.String[] strArray42 = classReader38.getInterfaces();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test17515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17515");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        classWriter1.visitInnerClass("L1847716459", "", "L680573325", 9);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(12592, "hi!", "L897597087", "L1928858580", (java.lang.Object) 1.0d);
        fieldVisitor36.visitEnd();
        fieldVisitor36.visitEnd();
        fieldVisitor36.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = fieldVisitor36.visitAnnotation("L144067663", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = fieldVisitor36.visitAnnotation("L1974467403", false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test17516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17516");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitIntInsn(0, (int) (byte) 10);
        methodVisitor16.visitIincInsn(26, (int) (short) 0);
        methodVisitor16.visitMethodInsn(15, "L284303737", "L1685807285", "L636727990");
        methodVisitor16.visitIntInsn(62, 1793);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test17517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17517");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(5);
        classWriter18.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int25 = classWriter18.newClass("");
        byte[] byteArray26 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray26, 0, (int) '#');
        int int30 = classReader29.header;
        java.lang.String[] strArray31 = classReader29.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter1.visitMethod((int) (short) -1, "L1075066296", "L1628304347", "L264795169", strArray31);
        int int36 = classWriter1.newField("L729032685", "L1899113546", "L1914124641");
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        int int69 = classReader67.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(classReader67, (int) '4');
        int int73 = classReader67.readUnsignedShort(5);
        int int74 = classReader67.getAccess();
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField(18, "L360307176", "L243688867", "L982702597", (java.lang.Object) int74);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 40 + "'", int30 == 40);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 17 + "'", int36 == 17);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 51966 + "'", int69 == 51966);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor75);
    }

    @Test
    public void test17518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17518");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        short short37 = classReader26.readShort(13);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, 18);
        long long43 = classReader26.readLong(6);
        byte[] byteArray44 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader26, 27);
        int int51 = classWriter46.newMethod("L418802221", "L1210370409", "L1132227206", false);
        classWriter46.visitSource("L1492159317", "L1686860563");
        int int56 = classWriter46.newClass("L1809846157");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1792 + "'", short37 == (short) 1792);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 42966450183L + "'", long43 == 42966450183L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 15 + "'", int51 == 15);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 18 + "'", int56 == 18);
    }

    @Test
    public void test17519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17519");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L590888141", "hi!", "L2062266913");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("L1040125103", false);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (byte) 0);
        int int41 = classWriter35.newField("hi!", "L275489687", "L1028579140");
        byte[] byteArray42 = classWriter35.toByteArray();
        classWriter35.visitInnerClass("L1162526488", "L1936126716", "L1221801792", (int) (byte) 0);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField(19, "L1944816475", "L1076423885", "L1557781805", (java.lang.Object) "L1221801792");
        int int50 = classWriter1.newClass("L2134936886");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 12, 0, 4, 0, 5, 9, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 23 + "'", int50 == 23);
    }

    @Test
    public void test17520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17520");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L601218844");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17521");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int35 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        byte[] byteArray38 = classReader26.b;
        byte[] byteArray39 = classReader26.b;
        char[] charArray42 = new char[] { '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = classReader26.readClass(1953066862, charArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1953066862");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#]");
    }

    @Test
    public void test17522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17522");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        methodVisitor16.visitTypeInsn(12592, "L275489687");
        methodVisitor16.visitMethodInsn(51966, "L636727990", "L1223439170", "L1221801792");
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter35.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter35.visitMethod(8, "hi!", "", "", strArray57);
        methodVisitor59.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = methodVisitor59.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter66.newMethod("", "", "hi!", true);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter66.visitMethod(0, "", "", "hi!", strArray80);
        methodVisitor81.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label85 = new org.mockito.asm.Label();
        methodVisitor81.visitLabel(label85);
        methodVisitor59.visitJumpInsn((-1), label85);
        java.lang.String str88 = label85.toString();
        java.lang.String str89 = label85.toString();
        java.lang.String str90 = label85.toString();
        int int91 = label85.getOffset();
        java.lang.String str92 = label85.toString();
        methodVisitor16.visitJumpInsn(16, label85);
        java.lang.String str94 = label85.toString();
        java.lang.Object obj95 = label85.info;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L2144550357" + "'", str88, "L2144550357");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "L2144550357" + "'", str89, "L2144550357");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "L2144550357" + "'", str90, "L2144550357");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "L2144550357" + "'", str92, "L2144550357");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L2144550357" + "'", str94, "L2144550357");
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test17523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17523");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        methodVisitor50.visitFieldInsn(8, "hi!", "", "");
        methodVisitor50.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor50.visitMaxs(6, (int) (byte) 10);
        methodVisitor50.visitIincInsn((int) (short) 1, (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter1.visitField(156461415, "L1962189950", "L2000102916", "L264795169", (java.lang.Object) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor67.visitAnnotation("L1368708044", true);
        fieldVisitor67.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = fieldVisitor67.visitAnnotation("L1769475365", true);
        org.mockito.asm.Attribute attribute75 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor67.visitAttribute(attribute75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(fieldVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test17524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17524");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int12 = classWriter7.newMethod("", "", "hi!", true);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor22 = classWriter7.visitMethod(0, "", "", "hi!", strArray21);
        int int27 = classWriter7.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter7.visitAnnotation("", true);
        byte[] byteArray31 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        short short34 = classReader32.readShort((int) (byte) 0);
        int int36 = classReader32.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader32, 0);
        java.lang.String[] strArray39 = classReader32.getInterfaces();
        byte[] byteArray40 = classReader32.b;
        java.lang.String str41 = classReader32.getSuperName();
        java.lang.String[] strArray42 = classReader32.getInterfaces();
        long long44 = classReader32.readLong(100);
        long long46 = classReader32.readLong((int) ' ');
        java.lang.String str47 = classReader32.getSuperName();
        java.lang.String[] strArray48 = classReader32.getInterfaces();
        java.lang.String[] strArray49 = classReader32.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod(136, "L1768723690", "L81662335", "L66057906", strArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 9");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(methodVisitor22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) -13570 + "'", short34 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2560 + "'", int36 == 2560);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 281474976776193L + "'", long44 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 720578139469709322L + "'", long46 == 720578139469709322L);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
    }

    @Test
    public void test17525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17525");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        methodVisitor50.visitFieldInsn(8, "hi!", "", "");
        methodVisitor50.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor50.visitMaxs(6, (int) (byte) 10);
        methodVisitor50.visitIincInsn((int) (short) 1, (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter1.visitField(156461415, "L1962189950", "L2000102916", "L264795169", (java.lang.Object) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor67.visitAnnotation("L1945103414", false);
        fieldVisitor67.visitEnd();
        fieldVisitor67.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(fieldVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
    }

    @Test
    public void test17526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17526");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitCode();
        methodVisitor25.visitEnd();
        methodVisitor25.visitMultiANewArrayInsn("L875787534", 3);
        methodVisitor25.visitIincInsn(14, 12848);
        methodVisitor25.visitTypeInsn(26729, "L1490365060");
        methodVisitor25.visitMethodInsn(33, "L1411298446", "", "L1670545532");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test17527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17527");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        methodVisitor62.visitFieldInsn(0, "L1162526488", "L1601838046", "");
        methodVisitor62.visitFieldInsn(33, "", "L2000102916", "L1899113546");
        methodVisitor62.visitVarInsn(8460, 26983);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
    }

    @Test
    public void test17528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17528");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        int int18 = classWriter1.newMethod("L774045562", "L976656549", "L81460580", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L720530545", true);
        int int23 = classWriter1.newUTF8("L2078833339");
        classWriter1.visitSource("L258620783", "L812403115");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter33.visitAnnotation("L275489687", true);
        classWriter33.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        int int58 = classWriter48.newMethod("L1013343419", "\001", "L488861128", true);
        byte[] byteArray59 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String[] strArray61 = classReader60.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter33.visitMethod(50331648, "L1717199564", "L1014437544", "L1275984428", strArray61);
        classWriter1.visit(163, 13874, "L1601719555", "L704257621", "L951657810", strArray61);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 13 + "'", int18 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 11 + "'", int58 == 11);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 1, 0, 11, 76, 49, 48, 49, 51, 51, 52, 51, 52, 49, 57, 7, 0, 6, 1, 0, 1, 1, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 12, 0, 8, 0, 9, 11, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
    }

    @Test
    public void test17529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17529");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 23);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter42.visitAnnotation("L202294627", true);
        int int50 = classWriter42.newMethod("L523453504", "L1487951814", "", true);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(5);
        classWriter57.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray62 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        int int65 = classReader63.readUnsignedShort((int) '#');
        byte[] byteArray66 = classReader63.b;
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray66);
        java.lang.String[] strArray69 = classReader68.getInterfaces();
        classWriter42.visit(104, (int) (short) 21353, "", "L2092150154", "L71945869", strArray69);
        classWriter42.visitSource("L1482145872", "L2091850869");
        org.mockito.asm.Attribute attribute74 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter42.visitAttribute(attribute74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 15 + "'", int50 == 15);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 12592 + "'", int65 == 12592);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(strArray69);
    }

    @Test
    public void test17530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17530");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        classWriter1.visitOuterClass("L1017623370", "L75359331", "L1178822359");
        byte[] byteArray35 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader36, (int) (short) 25445);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader36.readUnsignedShort(1659509);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 7, 0, 7, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 1, 0, 11, 76, 49, 51, 54, 56, 55, 48, 56, 48, 52, 52, 12, 0, 9, 0, 10, 1, 0, 11, 76, 49, 48, 49, 55, 54, 50, 51, 51, 55, 48, 7, 0, 12, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 11, 76, 49, 49, 55, 56, 56, 50, 50, 51, 53, 57, 12, 0, 14, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 1, 0, 17, 0, 0, 0, 4, 0, 13, 0, 16]");
    }

    @Test
    public void test17531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17531");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        java.lang.String str31 = classReader26.getSuperName();
        long long33 = classReader26.readLong((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 51);
        int int36 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        classWriter38.visitSource("", "");
        int int45 = classWriter38.newClass("L2000102916");
        classWriter38.visitInnerClass("L1132227206", "L242883751", "L1930348385", (int) (short) -1);
        classWriter38.visitInnerClass("L275489687", "L890847236", "L1075066296", 1751720204);
        int int60 = classWriter38.newMethod("L1724469945", "L1099494342", "L720019929", true);
        org.mockito.asm.Attribute attribute61 = null;
        org.mockito.asm.Attribute[] attributeArray62 = new org.mockito.asm.Attribute[] { attribute61 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray62, 779);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3819410108757049344L) + "'", long33 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20 + "'", int60 == 20);
        org.junit.Assert.assertNotNull(attributeArray62);
    }

    @Test
    public void test17532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17532");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitMaxs((int) (short) 0, 7);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        annotationVisitor56.visitEnum("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = annotationVisitor56.visitArray("L2000102916");
        methodVisitor25.visitLdcInsn((java.lang.Object) "L2000102916");
        methodVisitor25.visitMaxs((int) ' ', 0);
        methodVisitor25.visitVarInsn(24, 12850);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = methodVisitor25.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor71);
    }

    @Test
    public void test17533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17533");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(16842755, (int) (short) 4);
        methodVisitor25.visitMethodInsn((int) (byte) 100, "L888522535", "L1888920892", "L12443849");
        methodVisitor25.visitMaxs(268, (int) (short) 1034);
        methodVisitor25.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test17534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17534");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        label47.info = strArray63;
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter42.visitMethod((int) (short) 100, "", "hi!", "", strArray63);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter1.visitMethod(51966, "", "L1429849124", "", strArray63);
        methodVisitor67.visitTypeInsn(2816, "L1627270338");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
    }

    @Test
    public void test17535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17535");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        java.lang.String[] strArray38 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter1.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray38);
        classWriter1.visitOuterClass("L749737959", "L238476442", "L426422007");
        int int45 = classWriter1.newUTF8("L999961130");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        int int67 = classWriter47.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter47.visitAnnotation("", true);
        byte[] byteArray71 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        int int74 = classReader72.readByte(13);
        int int76 = classReader72.readInt(7);
        int int78 = classReader72.readInt((int) (short) 100);
        byte[] byteArray79 = classReader72.b;
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter(classReader80, (int) (short) -16896);
        int int83 = classWriter1.newConst((java.lang.Object) (short) -16896);
        java.lang.Object obj88 = null;
        org.mockito.asm.FieldVisitor fieldVisitor89 = classWriter1.visitField(0, "L1021454555", "L2110113290", "L725967670", obj88);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = fieldVisitor89.visitAnnotation("L579759362", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = fieldVisitor89.visitAnnotation("L1918553450", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21 + "'", int45 == 21);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 7 + "'", int74 == 7);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2561 + "'", int76 == 2561);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 65536 + "'", int78 == 65536);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 22 + "'", int83 == 22);
        org.junit.Assert.assertNotNull(fieldVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test17536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17536");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readInt(5);
        int int14 = classReader7.readInt(20);
        java.lang.String str15 = classReader7.getSuperName();
        java.lang.String str16 = classReader7.getSuperName();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        int int39 = classWriter19.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter19.visitAnnotation("", true);
        byte[] byteArray43 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        short short46 = classReader44.readShort((int) (byte) 0);
        int int48 = classReader44.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader44, 0);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader44, 0);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(classReader44, (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(classReader44, 24);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(classReader44, 190);
        int int60 = classReader44.getItem((int) (short) 3);
        char[] charArray64 = new char[] { 'a', 'a' };
        java.lang.String str65 = classReader44.readUTF8(100, charArray64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = classReader7.readConst((int) (short) -1, charArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 909717811 + "'", int14 == 909717811);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) -13570 + "'", short46 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2560 + "'", int48 == 2560);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 17 + "'", int60 == 17);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[a, a]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test17537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17537");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 256);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (byte) 0);
        int int12 = classWriter8.newUTF8("");
        classWriter8.visitEnd();
        classWriter8.visitEnd();
        classWriter8.visitSource("L1889100462", "L1769475365");
        classWriter8.visitOuterClass("\000", "L1967552389", "L1268109548");
        byte[] byteArray22 = classWriter8.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter29.newMethod("", "", "hi!", true);
        classWriter29.visitOuterClass("hi!", "", "");
        int int41 = classWriter29.newNameType("hi!", "hi!");
        int int44 = classWriter29.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        classWriter29.visit(5, 6, "", "", "", strArray65);
        org.mockito.asm.FieldVisitor fieldVisitor73 = classWriter29.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter29.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray78 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray78);
        java.lang.String[] strArray80 = classReader79.getInterfaces();
        classWriter8.visit(38, (int) (short) 26729, "L224623650", "L836032224", "L884076874", strArray80);
        classWriter1.visit((int) (short) 513, 0, "L503772107", "L1065037016", "L1487951814", strArray80);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 3, 0, 0, 0, 0, 1, 0, 0, 1, 0, 11, 76, 49, 56, 56, 57, 49, 48, 48, 52, 54, 50, 1, 0, 2, -64, -128, 7, 0, 4, 1, 0, 11, 76, 49, 57, 54, 55, 53, 53, 50, 51, 56, 57, 1, 0, 11, 76, 49, 50, 54, 56, 49, 48, 57, 53, 52, 56, 12, 0, 6, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 2, 0, 3, 0, 10, 0, 0, 0, 11, 76, 49, 55, 54, 57, 52, 55, 53, 51, 54, 53, 0, 11, 0, 0, 0, 4, 0, 5, 0, 8]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(fieldVisitor73);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertNotNull(strArray80);
    }

    @Test
    public void test17538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17538");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        label30.info = strArray46;
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod((int) (short) 100, "", "hi!", "", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray46);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        label56.info = strArray72;
        classWriter1.visit(3, (int) (byte) 100, "L809431533", "L749737959", "L728847777", strArray72);
        classWriter1.visitSource("L59063553", "L110679537");
        classWriter1.visitInnerClass("L1162526488", "L3043237", "L59063553", (int) '4');
        classWriter1.visitOuterClass("L2117999297", "L41216715", "L694914824");
        classWriter1.visitSource("L1516640580", "L1546658809");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = classWriter1.visitAnnotation("", true);
        int int95 = classWriter1.newUTF8("L60628801");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 28 + "'", int95 == 28);
    }

    @Test
    public void test17539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17539");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitMaxs(1698786926, 156461415);
        methodVisitor16.visitInsn((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        methodVisitor54.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor54.visitCode();
        methodVisitor54.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter66.newMethod("", "", "hi!", true);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter66.visitMethod(0, "", "", "hi!", strArray80);
        methodVisitor81.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label85 = new org.mockito.asm.Label();
        methodVisitor81.visitLabel(label85);
        java.lang.String str87 = label85.toString();
        methodVisitor54.visitLineNumber((int) (short) -1, label85);
        methodVisitor16.visitLineNumber(9, label85);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L207915253" + "'", str87, "L207915253");
    }

    @Test
    public void test17540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17540");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor25.visitAnnotation("L1076056118", true);
        methodVisitor25.visitVarInsn(909717811, 14);
        methodVisitor25.visitIntInsn((int) '4', (int) (short) 25445);
        methodVisitor25.visitMultiANewArrayInsn("L112220547", 82);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test17541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17541");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.readInt(7);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        int int37 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader26.getItem(141);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 141");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2561 + "'", int34 == 2561);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
    }

    @Test
    public void test17542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17542");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("L110679537", "L1221801792", "L2089731244", (int) (short) -13570);
        byte[] byteArray24 = classWriter1.toByteArray();
        int int27 = classWriter1.newNameType("", "L77196307");
        int int31 = classWriter1.newField("L110679537", "L1546658809", "L1847716459");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L1413182688", false);
        annotationVisitor34.visitEnum("", "L1247545373", "L2072202085");
        annotationVisitor34.visitEnum("L236901646", "L1692352756", "L23682162");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 10, 76, 49, 49, 48, 54, 55, 57, 53, 51, 55, 7, 0, 9, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 11, 1, 0, 11, 76, 50, 48, 56, 57, 55, 51, 49, 50, 52, 52, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 2, 0, 3, 0, 15, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 6, 0, 7, 0, 17, 0, 0, 0, 10, 0, 1, 0, 10, 0, 12, 0, 13, -54, -2]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 23 + "'", int31 == 23);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test17543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17543");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        methodVisitor25.visitCode();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor49.visitCode();
        methodVisitor49.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        methodVisitor76.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        methodVisitor76.visitLabel(label80);
        java.lang.String str82 = label80.toString();
        methodVisitor49.visitLineNumber((int) (short) -1, label80);
        label80.info = (-1.0f);
        java.lang.String str86 = label80.toString();
        methodVisitor25.visitLabel(label80);
        java.lang.String str88 = label80.toString();
        java.lang.Object obj89 = label80.info;
        java.lang.Object obj90 = label80.info;
        int int91 = label80.getOffset();
        java.lang.Object obj92 = label80.info;
        java.lang.Object obj93 = label80.info;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "L2012126971" + "'", str82, "L2012126971");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L2012126971" + "'", str86, "L2012126971");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L2012126971" + "'", str88, "L2012126971");
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + (-1.0f) + "'", obj89, (-1.0f));
        org.junit.Assert.assertEquals("'" + obj90 + "' != '" + (-1.0f) + "'", obj90, (-1.0f));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
        org.junit.Assert.assertEquals("'" + obj92 + "' != '" + (-1.0f) + "'", obj92, (-1.0f));
        org.junit.Assert.assertEquals("'" + obj93 + "' != '" + (-1.0f) + "'", obj93, (-1.0f));
    }

    @Test
    public void test17544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17544");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter23.newConst((java.lang.Object) (short) 1);
        classWriter23.visitSource("", "");
        label20.info = "";
        int int30 = label20.getOffset();
        java.lang.String str31 = label20.toString();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter33.visitAnnotation("hi!", false);
        label20.info = classWriter33;
        int int62 = label20.getOffset();
        int int63 = label20.getOffset();
        java.lang.String str64 = label20.toString();
        java.lang.String str65 = label20.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "L1445335576" + "'", str31, "L1445335576");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "L1445335576" + "'", str64, "L1445335576");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "L1445335576" + "'", str65, "L1445335576");
    }

    @Test
    public void test17545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17545");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        byte[] byteArray2 = classWriter1.toByteArray();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readUnsignedShort(0);
        int int7 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = classReader4.readByte(56);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 56");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51966 + "'", int6 == 51966);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test17546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17546");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("hi!", false);
        int int8 = classWriter1.newField("L875787534", "L590888141", "L620334303");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        int int35 = classWriter15.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter15.visitAnnotation("", true);
        byte[] byteArray39 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        short short42 = classReader40.readShort((int) (byte) 0);
        int int44 = classReader40.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader40, 0);
        int int47 = classReader40.getAccess();
        java.lang.String str48 = classReader40.getSuperName();
        int int50 = classReader40.readInt((int) (byte) 1);
        long long52 = classReader40.readLong(3);
        java.lang.String[] strArray53 = classReader40.getInterfaces();
        classWriter1.visit(56, 90, "L436759653", "L859506825", "L1093218044", strArray53);
        int int58 = classWriter1.newField("L1392383416", "L276953604", "L1311711787");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) -13570 + "'", short42 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2560 + "'", int44 == 2560);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-21316096) + "'", int50 == (-21316096));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-4755801206503241215L) + "'", long52 == (-4755801206503241215L));
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 18 + "'", int58 == 18);
    }

    @Test
    public void test17547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17547");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        methodVisitor25.visitEnd();
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMultiANewArrayInsn("L2059908172", (-21316096));
        methodVisitor25.visitVarInsn(24, 20);
        methodVisitor25.visitMaxs(67764226, 28788);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test17548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17548");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L1969123537", false);
        int int11 = classWriter1.newUTF8("L1583234446");
        int int13 = classWriter1.newClass("L1642186947");
        int int16 = classWriter1.newNameType("L1089062975", "");
        int int21 = classWriter1.newMethod("L1028457081", "L117129708", "L1125779589", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
    }

    @Test
    public void test17549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17549");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.readInt(19);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, 16);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(655616);
        classWriter45.visitSource("L1270023076", "L1482145872");
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        int int75 = classWriter55.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter55.visitAnnotation("", true);
        byte[] byteArray79 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        int int82 = classReader80.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(classReader80, (int) '4');
        int int86 = classReader80.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter88 = new org.mockito.asm.ClassWriter(classReader80, (int) '#');
        byte[] byteArray89 = classReader80.b;
        java.lang.String[] strArray90 = classReader80.getInterfaces();
        java.lang.String str91 = classReader80.getSuperName();
        org.mockito.asm.ClassWriter classWriter93 = new org.mockito.asm.ClassWriter(classReader80, 4);
        org.mockito.asm.ClassWriter classWriter95 = new org.mockito.asm.ClassWriter(classReader80, 190);
        java.lang.String[] strArray96 = classReader80.getInterfaces();
        classWriter45.visit(30819, 1181314149, "L586588902", "L1968509257", "L12443849", strArray96);
        classWriter38.visit(611177, (int) (byte) 0, "L823768339", "L1292548287", "L1660505210", strArray96);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1751720204 + "'", int34 == 1751720204);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 51966 + "'", int82 == 51966);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test17550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17550");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitOuterClass("L199336802", "L275489687", "L2039587225");
        classWriter1.visitInnerClass("L1676018134", "L407886867", "L1028579140", 134217728);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(5);
        int int43 = classWriter41.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int55 = classWriter50.newMethod("", "", "hi!", true);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter50.visitMethod(0, "", "", "hi!", strArray64);
        classWriter41.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter1.visitMethod(132, "L1210370409", "L2011029328", "L1603381958", strArray64);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertNotNull(methodVisitor67);
    }

    @Test
    public void test17551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17551");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitMultiANewArrayInsn("L2022616480", 872);
        methodVisitor16.visitIincInsn(1694564377, 202);
        methodVisitor16.visitMaxs(872, (int) (short) 1792);
        methodVisitor16.visitFieldInsn(62, "L496944931", "L1773385048", "L76446579");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17552");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int7 = classWriter1.newField("hi!", "L275489687", "L1028579140");
        byte[] byteArray8 = classWriter1.toByteArray();
        int int12 = classWriter1.newField("L1068224943", "", "L1889100462");
        classWriter1.visitInnerClass("L135289531", "L897597087", "L1396464054", 27);
        int int19 = classWriter1.newClass("L457743322");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("L465659170", true);
        annotationVisitor22.visitEnum("", "L1743208258", "L1262041297");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 12, 0, 4, 0, 5, 9, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 13 + "'", int12 == 13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test17553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17553");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte(13);
        int int30 = classReader26.readInt(7);
        int int32 = classReader26.readUnsignedShort((int) ' ');
        long long34 = classReader26.readLong((int) (short) 100);
        byte[] byteArray35 = classReader26.b;
        int int36 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader26.readUnsignedShort(780);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2561 + "'", int30 == 2561);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2560 + "'", int32 == 2560);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 281474976776193L + "'", long34 == 281474976776193L);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 90 + "'", int36 == 90);
    }

    @Test
    public void test17554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17554");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitTypeInsn(156461415, "L136145448");
        methodVisitor25.visitIincInsn((int) (byte) -1, 16);
        methodVisitor25.visitMethodInsn((int) (short) 12848, "L1723151786", "L1823521374", "L1058109766");
        methodVisitor25.visitIincInsn(0, 33);
        methodVisitor25.visitMaxs(19, 90);
        methodVisitor25.visitMaxs((int) (short) 3072, 51118081);
        methodVisitor25.visitFieldInsn(8460, "L1549317494", "L1985842822", "L258090006");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor60);
    }

    @Test
    public void test17555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17555");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        short short37 = classReader26.readShort(13);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, 18);
        long long43 = classReader26.readLong(6);
        byte[] byteArray44 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader26, 27);
        int int48 = classReader26.readInt(5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1792 + "'", short37 == (short) 1792);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 42966450183L + "'", long43 == 42966450183L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test17556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17556");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader38, 0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        classWriter1.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray45);
        int int49 = classWriter1.newNameType("L1606942677", "L957324124");
        int int52 = classWriter1.newNameType("L1368708044", "L916243867");
        byte[] byteArray53 = classWriter1.toByteArray();
        int int56 = classWriter1.newNameType("L1228081592", "L763890461");
        int int58 = classWriter1.newUTF8("L1276186268");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 14, 3, 0, 0, 0, 1, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 4, 1, 0, 11, 76, 49, 54, 48, 54, 57, 52, 50, 54, 55, 55, 1, 0, 10, 76, 57, 53, 55, 51, 50, 52, 49, 50, 52, 12, 0, 6, 0, 7, 1, 0, 11, 76, 49, 51, 54, 56, 55, 48, 56, 48, 52, 52, 1, 0, 10, 76, 57, 49, 54, 50, 52, 51, 56, 54, 55, 12, 0, 9, 0, 10, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 12, 0, 0, 0, 2, 0, 2, 0, 13, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 17 + "'", int58 == 17);
    }

    @Test
    public void test17557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17557");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        methodVisitor25.visitMaxs(13, 254);
        methodVisitor25.visitFieldInsn(65536, "L95180820", "L1028510473", "L1774908040");
        methodVisitor25.visitVarInsn(28, 4);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = methodVisitor25.visitAnnotation("L266472455", true);
        methodVisitor25.visitEnd();
        org.mockito.asm.Attribute attribute48 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor46);
    }

    @Test
    public void test17558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17558");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitTypeInsn((int) (short) 0, "L897597087");
        methodVisitor25.visitEnd();
        methodVisitor25.visitMultiANewArrayInsn("L1589078908", 10);
        methodVisitor25.visitVarInsn(15, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitInsn(15);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitAnnotation("L146399554", true);
        methodVisitor25.visitMethodInsn(0, "L215906456", "L504679879", "L1028579140");
        methodVisitor25.visitMultiANewArrayInsn("L2120118268", 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test17559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17559");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L207915253");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17560");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        methodVisitor16.visitMethodInsn((-21316096), "L1589078908", "L313281740", "L716527799");
        methodVisitor16.visitTypeInsn(100, "L455650823");
        methodVisitor16.visitFieldInsn(204, "", "L397385256", "L471701904");
        methodVisitor16.visitTypeInsn(23, "L237538368");
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17561");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        int int31 = classWriter1.newUTF8("L488861128");
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L1213624950", false);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        int int58 = classWriter38.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter38.visitAnnotation("", true);
        byte[] byteArray62 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        int int65 = classReader63.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(classReader63, (int) '4');
        int int69 = classReader63.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(classReader63, (int) '#');
        byte[] byteArray72 = classReader63.b;
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(classReader63, 2560);
        int int79 = classWriter74.newMethod("L81546457", "L1945103414", "L999961130", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter74.visitAnnotation("L1261070473", true);
        int int85 = classWriter74.newNameType("L799761587", "L81662335");
        int int86 = classWriter1.newConst((java.lang.Object) "L81662335");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 51966 + "'", int65 == 51966);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 15 + "'", int79 == 15);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 19 + "'", int85 == 19);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 11 + "'", int86 == 11);
    }

    @Test
    public void test17562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17562");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L658437003");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17563");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int65 = classWriter1.newNameType("L275489687", "L755844592");
        byte[] byteArray66 = classWriter1.toByteArray();
        byte[] byteArray67 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray67);
        int int71 = classReader69.readByte(17);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 11 + "'", int65 == 11);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 10, 76, 55, 53, 53, 56, 52, 52, 53, 57, 50, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 2, 0, 13, 0, 0, 0, 2, 0, 3, 0, 14, 0, 0, 0, 4, 0, 5, 0, 6]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 10, 76, 55, 53, 53, 56, 52, 52, 53, 57, 50, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 2, 0, 13, 0, 0, 0, 2, 0, 3, 0, 14, 0, 0, 0, 4, 0, 5, 0, 6]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
    }

    @Test
    public void test17564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17564");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        methodVisitor16.visitTypeInsn(12592, "L275489687");
        methodVisitor16.visitLdcInsn((java.lang.Object) (byte) 10);
        methodVisitor16.visitEnd();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        classWriter32.visitOuterClass("hi!", "", "");
        int int44 = classWriter32.newNameType("hi!", "hi!");
        int int47 = classWriter32.newNameType("hi!", "");
        java.lang.Object obj52 = null;
        org.mockito.asm.FieldVisitor fieldVisitor53 = classWriter32.visitField(9, "L1601838046", "L2062266913", "L680573325", obj52);
        classWriter32.visitSource("L636727990", "");
        methodVisitor16.visitLdcInsn((java.lang.Object) "L636727990");
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("L1249077817", 33);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor53);
    }

    @Test
    public void test17565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17565");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readInt(19);
        int int35 = classReader26.readUnsignedShort(19);
        int int37 = classReader26.readUnsignedShort(38);
        java.lang.String[] strArray38 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            short short40 = classReader26.readShort(156461415);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1751720204 + "'", int33 == 1751720204);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 26729 + "'", int35 == 26729);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test17566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17566");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int40 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 2892);
        int int45 = classWriter42.newNameType("L1855830998", "L1302023618");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
    }

    @Test
    public void test17567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17567");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitInnerClass("L1847716459", "L579675851", "L976656549", (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L2062266913", true);
        annotationVisitor9.visit("L799761587", (java.lang.Object) "L538737171");
        annotationVisitor9.visitEnum("L404468677", "L2143784896", "L238916694");
        annotationVisitor9.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = annotationVisitor9.visitAnnotation("L904728265", "L202294627");
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test17568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17568");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("", "L1847716459", "", (int) (byte) 10);
        int int73 = classWriter1.newClass("L452536706");
        classWriter1.visitOuterClass("L1700249013", "L1929912583", "L245756211");
        classWriter1.visitSource("L1901131515", "L1984968925");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 16 + "'", int73 == 16);
    }

    @Test
    public void test17569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17569");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte(13);
        int int30 = classReader26.readInt(7);
        int int32 = classReader26.readInt((int) (short) 100);
        byte[] byteArray33 = classReader26.b;
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray33);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2561 + "'", int30 == 2561);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 65536 + "'", int32 == 65536);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17570");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter1.visitAnnotation("L624707113", true);
        byte[] byteArray65 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        java.lang.String str67 = classReader66.getClassName();
        java.lang.String str68 = classReader66.getClassName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 14, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 10, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 11, 0, 0, 0, 2, 0, 3, 0, 3, 0, 11, 0, 0, 0, 2, 0, 3, 0, 12, 0, 0, 0, 4, 0, 5, 0, 6, 0, 13, 0, 0, 0, 6, 0, 1, 0, 9, 0, 0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "L2000102916" + "'", str67, "L2000102916");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "L2000102916" + "'", str68, "L2000102916");
    }

    @Test
    public void test17571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17571");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        long long35 = classReader26.readLong(61);
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        int int39 = classReader26.readUnsignedShort((int) (short) 1);
        int int40 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, 9);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter42.visitField(167772672, "L49188415", "L294498702", "L851601340", (java.lang.Object) (short) 17784);
        byte[] byteArray49 = classWriter42.toByteArray();
        byte[] byteArray50 = classWriter42.toByteArray();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 7278098581565042292L + "'", long35 == 7278098581565042292L);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 65210 + "'", int39 == 65210);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 9, 76, 52, 57, 49, 56, 56, 52, 49, 53, 1, 0, 10, 76, 50, 57, 52, 52, 57, 56, 55, 48, 50, 1, 0, 10, 76, 56, 53, 49, 54, 48, 49, 51, 52, 48, 3, 0, 0, 69, 120, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 10, 0, 11, 0, 2, 0, 14, 0, 0, 0, 2, 0, 13, 0, 8, 0, 0, 0, 2, 0, 12, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 9, 76, 52, 57, 49, 56, 56, 52, 49, 53, 1, 0, 10, 76, 50, 57, 52, 52, 57, 56, 55, 48, 50, 1, 0, 10, 76, 56, 53, 49, 54, 48, 49, 51, 52, 48, 3, 0, 0, 69, 120, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 10, 0, 11, 0, 2, 0, 14, 0, 0, 0, 2, 0, 13, 0, 8, 0, 0, 0, 2, 0, 12, 0, 0, 0, 0]");
    }

    @Test
    public void test17572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17572");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L2000102916", "L636727990");
        classWriter1.visitEnd();
        int int67 = classWriter1.newNameType("L1778006779", "L931744851");
        classWriter1.visitInnerClass("L112220547", "L701462284", "L539576523", 161);
        classWriter1.visitInnerClass("L23682162", "L1943853589", "L571285779", (int) (short) 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 11 + "'", int67 == 11);
    }

    @Test
    public void test17573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17573");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitMethodInsn(26729, "L999961130", "L264795169", "L2000102916");
        methodVisitor16.visitFieldInsn(12850, "L59063553", "L217194082", "L1192381465");
        methodVisitor16.visitIntInsn(40, 51118081);
        methodVisitor16.visitFieldInsn(19506, "L1082434147", "L1789498991", "L853819367");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17574");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        int int36 = classWriter31.newMethod("L1936126716", "L59063553", "L3043237", true);
        byte[] byteArray37 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader38.readInt(57174305);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 11, 76, 49, 57, 51, 54, 49, 50, 54, 55, 49, 54, 7, 0, 10, 1, 0, 9, 76, 53, 57, 48, 54, 51, 53, 53, 51, 1, 0, 8, 76, 51, 48, 52, 51, 50, 51, 55, 12, 0, 12, 0, 13, 11, 0, 11, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test17575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17575");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int8 = classWriter1.newUTF8("L1423401218");
        byte[] byteArray9 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        byte[] byteArray40 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String str42 = classReader41.getSuperName();
        char[] charArray48 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj49 = classReader41.readConst(6, charArray48);
        int int51 = classReader41.readUnsignedShort((int) 'a');
        byte[] byteArray52 = classReader41.b;
        java.lang.String str53 = classReader41.getSuperName();
        byte[] byteArray54 = classReader41.b;
        java.lang.String[] strArray55 = classReader41.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter1.visitMethod(1768777046, "L727709537", "L275275934", "L2015149232", strArray55);
        java.lang.Class<?> wildcardClass57 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 11, 76, 49, 52, 50, 51, 52, 48, 49, 50, 49, 56, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 2, 0, 2, 0, 5, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + "\001" + "'", obj49, "\001");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test17576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17576");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitMaxs(1698786926, 156461415);
        methodVisitor16.visitTypeInsn((int) (short) 2816, "L217194082");
        methodVisitor16.visitVarInsn(0, 104);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17577");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L415136309");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17578");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        int int44 = classReader38.readInt(0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter1.visitMethod((int) (short) 1, "L238476442", "L999961130", "L535346328", strArray45);
        methodVisitor46.visitIincInsn(1793, 2561);
        methodVisitor46.visitIntInsn(254, 65536);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter55.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(0);
        int int68 = classWriter63.newMethod("", "", "hi!", true);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter63.visitMethod(0, "", "", "hi!", strArray77);
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter55.visitMethod(8, "hi!", "", "", strArray77);
        methodVisitor79.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label84 = new org.mockito.asm.Label();
        methodVisitor79.visitJumpInsn(1, label84);
        java.lang.Object obj86 = label84.info;
        methodVisitor46.visitJumpInsn(40, label84);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = label84.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-889275714) + "'", int44 == (-889275714));
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test17579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17579");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        int int13 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader12.readInt(1929445385);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
    }

    @Test
    public void test17580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17580");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        classWriter35.visitOuterClass("L149220781", "L1386483578", "L1013343419");
        int int41 = classWriter35.newClass("L1458874009");
        classWriter35.visitOuterClass("", "L464074002", "L163463949");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
    }

    @Test
    public void test17581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17581");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter31.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter31.visitMethod(3, "hi!", "hi!", "hi!", strArray53);
        methodVisitor55.visitMultiANewArrayInsn("L1221801792", 4);
        org.mockito.asm.FieldVisitor fieldVisitor59 = classWriter1.visitField(3, "L1287376048", "L1601838046", "L1028579140", (java.lang.Object) 4);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter65.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(0);
        int int78 = classWriter73.newMethod("", "", "hi!", true);
        java.lang.String[] strArray87 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter73.visitMethod(0, "", "", "hi!", strArray87);
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter65.visitMethod(8, "hi!", "", "", strArray87);
        org.mockito.asm.MethodVisitor methodVisitor90 = classWriter1.visitMethod(17, "L1490365060", "L831655905", "\001", strArray87);
        byte[] byteArray91 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = classWriter1.visitAnnotation("L1635784392", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = classWriter1.visitAnnotation("L1975782857", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(fieldVisitor59);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(methodVisitor88);
        org.junit.Assert.assertNotNull(methodVisitor89);
        org.junit.Assert.assertNotNull(methodVisitor90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 11, 76, 49, 50, 56, 55, 51, 55, 54, 48, 52, 56, 1, 0, 11, 76, 49, 54, 48, 49, 56, 51, 56, 48, 52, 54, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 3, 0, 0, 0, 4, 1, 0, 11, 76, 49, 52, 57, 48, 51, 54, 53, 48, 54, 48, 1, 0, 10, 76, 56, 51, 49, 54, 53, 53, 57, 48, 53, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 5, 0, 6, 0, 2, 0, 11, 0, 0, 0, 2, 0, 8, 0, 12, 0, 0, 0, 2, 0, 7, 0, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 12, 0, 0, 0, 2, 0, 2, 0, 17, 0, 9, 0, 10, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 12, 0, 0, 0, 2, 0, 14, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor94);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test17582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17582");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test17583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17583");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        int int52 = classReader51.header;
        int int53 = classReader51.getAccess();
        java.lang.String[] strArray54 = classReader51.getInterfaces();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(classReader51, 30);
        java.lang.String[] strArray57 = classReader51.getInterfaces();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 163 + "'", int52 == 163);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test17584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17584");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        int int18 = classWriter1.newMethod("L774045562", "L976656549", "L81460580", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L720530545", true);
        classWriter1.visitInnerClass("L607357044", "L683506282", "", 0);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        int int52 = classWriter32.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter32.visitAnnotation("", true);
        byte[] byteArray56 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray56);
        int int59 = classReader57.readUnsignedShort((int) (byte) 0);
        short short61 = classReader57.readShort(7);
        int int62 = classReader57.header;
        int int63 = classReader57.getAccess();
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader57, 23);
        int int67 = classReader57.readByte(90);
        short short69 = classReader57.readShort(19);
        java.lang.String[] strArray70 = classReader57.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter1.visitMethod((-1107296256), "L1315079658", "L68825608", "L1042963953", strArray70);
        org.mockito.asm.Label label73 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor71.visitLineNumber(9, label73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 13 + "'", int18 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 51966 + "'", int59 == 51966);
        org.junit.Assert.assertTrue("'" + short61 + "' != '" + (short) 0 + "'", short61 == (short) 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 90 + "'", int62 == 90);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + short69 + "' != '" + (short) 26729 + "'", short69 == (short) 26729);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test17585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17585");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        classWriter1.visitOuterClass("", "", "L946131795");
        org.mockito.asm.Attribute attribute25 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    }

    @Test
    public void test17586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17586");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readUnsignedShort(1);
        long long35 = classReader26.readLong(7);
        byte[] byteArray36 = classReader26.b;
        java.lang.String str37 = classReader26.getSuperName();
        java.lang.Class<?> wildcardClass38 = classReader26.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10999411246848L + "'", long35 == 10999411246848L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test17587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17587");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        methodVisitor16.visitCode();
        methodVisitor16.visitFieldInsn(90, "L1715729238", "L624707113", "L172254079");
        methodVisitor16.visitCode();
        methodVisitor16.visitIntInsn(268, 167772672);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L582277641" + "'", str75, "L582277641");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test17588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17588");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        byte[] byteArray39 = classReader38.b;
        int int40 = classReader38.getAccess();
        int int42 = classReader38.readInt(61);
        int int44 = classReader38.readInt(0);
        byte[] byteArray45 = classReader38.b;
        java.lang.String str46 = classReader38.getSuperName();
        int int47 = classReader38.getAccess();
        int int48 = classReader38.header;
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader38, 33555457);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1694564377 + "'", int42 == 1694564377);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-889275714) + "'", int44 == (-889275714));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 90 + "'", int48 == 90);
    }

    @Test
    public void test17589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17589");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMaxs(9, (int) (byte) -1);
        methodVisitor16.visitIincInsn(8, (int) ' ');
        methodVisitor16.visitIincInsn((int) (short) 17784, 17);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor16.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test17590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17590");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int35 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        int int39 = classReader26.readByte((int) (byte) 10);
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader26.readUnsignedShort((int) (short) -17730);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test17591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17591");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        long long38 = classReader26.readLong(3);
        int int39 = classReader26.header;
        int int41 = classReader26.getItem(0);
        int int42 = classReader26.getAccess();
        byte[] byteArray43 = classReader26.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-4755801206503241215L) + "'", long38 == (-4755801206503241215L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17592");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray13);
        long long17 = classReader15.readLong(28);
        byte[] byteArray18 = classReader15.b;
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray18);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 5490231217657164086L + "'", long17 == 5490231217657164086L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
    }

    @Test
    public void test17593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17593");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        methodVisitor41.visitMultiANewArrayInsn("L275489687", 4);
        methodVisitor41.visitFieldInsn(0, "L179737210", "L1855754182", "L916243867");
        methodVisitor41.visitMultiANewArrayInsn("L2045712064", 18);
        methodVisitor41.visitIntInsn(779, 17784);
        methodVisitor41.visitTypeInsn(104, "L917549161");
        methodVisitor41.visitEnd();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
    }

    @Test
    public void test17594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17594");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readInt((int) (byte) 100);
        int int39 = classReader26.getItem(0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 3909);
        int int42 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = classReader26.readInt(16842755);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 65536 + "'", int37 == 65536);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test17595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17595");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter1.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int38 = classWriter1.newNameType("L749737959", "L1601838046");
        classWriter1.visitInnerClass("L2000102916", "L1028579140", "", 100);
        classWriter1.visitSource("L59063553", "L1497855016");
        int int48 = classWriter1.newUTF8("L1605224709");
        int int53 = classWriter1.newMethod("L560005029", "L1315842236", "L467340186", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter1.visitAnnotation("L916171596", false);
        classWriter1.visitInnerClass("L1499444847", "L336638382", "L158524288", 2048);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 26 + "'", int53 == 26);
        org.junit.Assert.assertNotNull(annotationVisitor56);
    }

    @Test
    public void test17596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17596");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        int int42 = classWriter32.newMethod("L1013343419", "\001", "L488861128", true);
        int int46 = classWriter32.newField("L1962189950", "L1283200231", "L1387910543");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter32.visitAnnotation("L1611208075", true);
        classWriter32.visitEnd();
        int int53 = classWriter32.newNameType("L1192381465", "L1540520089");
        int int54 = classWriter1.newConst((java.lang.Object) int53);
        classWriter1.visitInnerClass("L855647295", "L447561710", "L1148690681", 26983);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 11 + "'", int42 == 11);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 17 + "'", int46 == 17);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 21 + "'", int53 == 21);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7 + "'", int54 == 7);
    }

    @Test
    public void test17597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17597");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        int int57 = classWriter37.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter37.visitAnnotation("", true);
        byte[] byteArray61 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        int int64 = classReader62.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader62, (int) '4');
        int int68 = classReader62.readUnsignedShort(5);
        int int70 = classReader62.getItem(1);
        byte[] byteArray71 = classReader62.b;
        java.lang.String str72 = classReader62.getSuperName();
        short short74 = classReader62.readShort((int) (short) 0);
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField(63, "L884076874", "L430363814", "L1083553839", (java.lang.Object) short74);
        int int78 = classWriter1.newNameType("L1510326766", "L1387910543");
        classWriter1.visitOuterClass("L214240977", "L959183788", "L1487951814");
        int int87 = classWriter1.newMethod("L1616863659", "L947368918", "L450567788", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 51966 + "'", int64 == 51966);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 11 + "'", int70 == 11);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) -13570 + "'", short74 == (short) -13570);
        org.junit.Assert.assertNotNull(fieldVisitor75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 16 + "'", int78 == 16);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 27 + "'", int87 == 27);
    }

    @Test
    public void test17598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17598");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        methodVisitor48.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = methodVisitor48.visitAnnotationDefault();
        methodVisitor48.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter57.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter65.newMethod("", "", "hi!", true);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter65.visitMethod(0, "", "", "hi!", strArray79);
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter57.visitMethod(8, "hi!", "", "", strArray79);
        methodVisitor48.visitLdcInsn((java.lang.Object) 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor48.visitAnnotationDefault();
        methodVisitor48.visitIntInsn(22, (-1107296256));
        methodVisitor48.visitIincInsn(16, 40);
        methodVisitor16.visitLdcInsn((java.lang.Object) 40);
        org.mockito.asm.Attribute attribute91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test17599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17599");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        int int36 = classWriter31.newMethod("L1936126716", "L59063553", "L3043237", true);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        int int69 = classReader67.readUnsignedShort((int) (byte) 0);
        short short71 = classReader67.readShort(7);
        int int72 = classReader67.header;
        int int73 = classReader67.getAccess();
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader67, 23);
        int int77 = classReader67.readByte(90);
        int int78 = classReader67.getAccess();
        int int80 = classReader67.readByte(100);
        org.mockito.asm.FieldVisitor fieldVisitor81 = classWriter31.visitField(1792, "L2078535908", "L242883751", "L1789245551", (java.lang.Object) int80);
        classWriter31.visitSource("L430363814", "L343526401");
        classWriter31.visitSource("L200807331", "L136145448");
        java.lang.String[] strArray93 = null;
        classWriter31.visit(90, 458753, "L1076423885", "L1004112457", "L503713660", strArray93);
        classWriter31.visitOuterClass("L1199607245", "L1122727522", "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 51966 + "'", int69 == 51966);
        org.junit.Assert.assertTrue("'" + short71 + "' != '" + (short) 0 + "'", short71 == (short) 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 90 + "'", int72 == 90);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor81);
    }

    @Test
    public void test17600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17600");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        long long31 = classReader26.readLong(12);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 27749);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1970329148719976L + "'", long31 == 1970329148719976L);
    }

    @Test
    public void test17601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17601");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte(13);
        int int30 = classReader26.readInt(7);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classReader26.getItem(2629);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2629");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2561 + "'", int30 == 2561);
    }

    @Test
    public void test17602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17602");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader7, (int) '4');
        byte[] byteArray14 = classWriter13.toByteArray();
        byte[] byteArray15 = classWriter13.toByteArray();
        classWriter13.visitInnerClass("L1971602972", "L1728731738", "L135246598", 2048);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test17603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17603");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter20.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter20.visitMethod(8, "hi!", "", "", strArray42);
        methodVisitor44.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor44.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        methodVisitor66.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor66.visitLabel(label70);
        methodVisitor44.visitJumpInsn((-1), label70);
        methodVisitor17.visitJumpInsn((int) '#', label70);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(0);
        int int80 = classWriter75.newMethod("", "", "hi!", true);
        classWriter75.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = classWriter75.visitAnnotation("", false);
        label70.info = "";
        java.lang.String str89 = label70.toString();
        int int90 = label70.getOffset();
        int int91 = label70.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor87);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "L1407845919" + "'", str89, "L1407845919");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test17604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17604");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor15.visitAnnotation("L275489687", "L275489687");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = annotationVisitor18.visitAnnotation("L2014806404", "L120720304");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor18.visitAnnotation("L900410062", "L644932592");
        annotationVisitor18.visitEnum("L223304185", "L1219718661", "L810177487");
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test17605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17605");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        classWriter1.visitInnerClass("L136145448", "L1004763019", "L2089731244", 0);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L149498658", "L1589078908", "L67467176");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
    }

    @Test
    public void test17606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17606");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L579675851", true);
        byte[] byteArray5 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L916243867", "L1642186947", "L590059745");
        classWriter1.visitInnerClass("L1657088012", "L143726105", "L1490365060", 11);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute16 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17607");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        int int33 = classWriter1.newUTF8("L361667728");
        int int35 = classWriter1.newClass("L760781610");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
    }

    @Test
    public void test17608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17608");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        byte[] byteArray37 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L636727990", "", "L897597087");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
    }

    @Test
    public void test17609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17609");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L579675851");
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter61.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        org.mockito.asm.MethodVisitor methodVisitor85 = classWriter61.visitMethod(8, "hi!", "", "", strArray83);
        methodVisitor85.visitIntInsn((int) (short) 1, 6);
        methodVisitor85.visitMaxs((int) (short) 0, 7);
        methodVisitor85.visitMaxs((int) (byte) 1, 7);
        org.mockito.asm.FieldVisitor fieldVisitor95 = classWriter1.visitField(4, "L976656549", "L467340186", "L774045562", (java.lang.Object) 7);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
        org.junit.Assert.assertNotNull(methodVisitor85);
        org.junit.Assert.assertNotNull(fieldVisitor95);
    }

    @Test
    public void test17610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17610");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn(0, 10);
        methodVisitor25.visitMaxs(5, (-1));
        methodVisitor25.visitMultiANewArrayInsn("L1132227206", (int) (short) -13570);
        methodVisitor25.visitEnd();
        methodVisitor25.visitCode();
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        methodVisitor60.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        methodVisitor60.visitLabel(label64);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter67.newConst((java.lang.Object) (short) 1);
        classWriter67.visitSource("", "");
        label64.info = "";
        int int74 = label64.getOffset();
        java.lang.String str75 = label64.toString();
        java.lang.Object obj76 = label64.info;
        int int77 = label64.getOffset();
        int int78 = label64.getOffset();
        java.lang.String str79 = label64.toString();
        methodVisitor25.visitJumpInsn((int) (short) 100, label64);
        methodVisitor25.visitFieldInsn(26913, "L1808974214", "L379676708", "L636245494");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1518198032" + "'", str75, "L1518198032");
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + "" + "'", obj76, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L1518198032" + "'", str79, "L1518198032");
    }

    @Test
    public void test17611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17611");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("L745089702", false);
        int int42 = classWriter1.newNameType("L3043237", "L172254079");
        classWriter1.visitSource("L278038742", "L1256567156");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter1.visitAnnotation("L1978876772", true);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        int int75 = classWriter55.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter55.visitAnnotation("", true);
        byte[] byteArray79 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        short short82 = classReader80.readShort((int) (byte) 0);
        int int84 = classReader80.readUnsignedShort((int) ' ');
        int int86 = classReader80.readInt(0);
        java.lang.String[] strArray87 = classReader80.getInterfaces();
        classWriter1.visit(0, 41, "L1930466383", "L798145900", "L798059037", strArray87);
        classWriter1.visitInnerClass("", "L207915253", "L2137629854", 34);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 19 + "'", int42 == 19);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) -13570 + "'", short82 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2560 + "'", int84 == 2560);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-889275714) + "'", int86 == (-889275714));
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test17612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17612");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.header;
        int int33 = classReader26.header;
        byte[] byteArray34 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader26.readInt(2816);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17613");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        java.lang.Object obj1 = label0.info;
        java.lang.String str2 = label0.toString();
        java.lang.Object obj3 = label0.info;
        java.lang.String str4 = label0.toString();
        org.junit.Assert.assertNull(obj1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L189392169" + "'", str2, "L189392169");
        org.junit.Assert.assertNull(obj3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "L189392169" + "'", str4, "L189392169");
    }

    @Test
    public void test17614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17614");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader37.readByte(2560);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2560");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17615");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitTypeInsn((int) (byte) -1, "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor16.visitAnnotation("L1013343419", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor16.visitAnnotation("L143726105", false);
        methodVisitor16.visitMultiANewArrayInsn("L1640056714", (-21316096));
        org.mockito.asm.Attribute attribute95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L882945972" + "'", str75, "L882945972");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test17616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17616");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int7 = classWriter1.newField("hi!", "L275489687", "L1028579140");
        byte[] byteArray8 = classWriter1.toByteArray();
        int int12 = classWriter1.newField("L1068224943", "", "L1889100462");
        classWriter1.visitInnerClass("L135289531", "L897597087", "L1396464054", 27);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 12, 0, 4, 0, 5, 9, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 13 + "'", int12 == 13);
    }

    @Test
    public void test17617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17617");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.getItem(2);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        java.lang.String str38 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 12336);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test17618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17618");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L488861128", "L275489687", "L749737959");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        classWriter41.visitEnd();
        classWriter41.visitSource("L620334303", "L1640056714");
        classWriter41.visitOuterClass("L1192381465", "L688713901", "L41216715");
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter1.visitField((int) (short) 10, "L1242211911", "L1224491373", "L2035525354", (java.lang.Object) "L41216715");
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = fieldVisitor50.visitAnnotation("L914282524", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = annotationVisitor53.visitArray("L745138042");
        annotationVisitor55.visitEnum("L900410062", "L1149737254", "L973991535");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor55);
    }

    @Test
    public void test17619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17619");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitIincInsn((int) (byte) 10, 8);
        methodVisitor16.visitIntInsn(0, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L1685807285", (int) (short) 12342);
        methodVisitor16.visitTypeInsn(554434561, "L81546457");
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17620");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        java.lang.String str38 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 16);
        org.mockito.asm.Attribute attribute41 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter40.visitAttribute(attribute41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test17621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17621");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        classWriter1.visitOuterClass("L1847716459", "L1142940414", "L1142940414");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter13.visitMethod(8, "hi!", "", "", strArray35);
        methodVisitor37.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor37.visitAnnotationDefault();
        methodVisitor37.visitMaxs((int) ' ', (int) '4');
        methodVisitor37.visitMaxs(13, 254);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField((int) '#', "L680573325", "L624707113", "L782129665", (java.lang.Object) 254);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("L1577334486", true);
        annotationVisitor52.visitEnum("L828384535", "L1951487671", "L241060667");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test17622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17622");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        int int13 = classReader12.header;
        int int14 = classReader12.getAccess();
        int int16 = classReader12.readByte(4);
        int int17 = classReader12.header;
        int int18 = classReader12.getAccess();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test17623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17623");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L275489687", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L488861128", "L541901146", "L1669912474", 19);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("L40714478", false);
        java.lang.String[] strArray24 = null;
        classWriter1.visit(611177, 909717811, "L143726105", "L871448529", "L1315842236", strArray24);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(annotationVisitor18);
    }

    @Test
    public void test17624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17624");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readByte(8);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 48640);
        int int39 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short41 = classReader26.readShort(17784);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test17625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17625");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        int int18 = classWriter1.newMethod("L680573325", "\001", "L1847716459", false);
        classWriter1.visitEnd();
        int int22 = classWriter1.newNameType("L755408759", "L1976974864");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(5);
        classWriter29.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray34 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        int int37 = classReader35.readUnsignedShort((int) '#');
        int int39 = classReader35.readInt(7);
        java.lang.String str40 = classReader35.getSuperName();
        byte[] byteArray41 = classReader35.b;
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader35, 25);
        java.lang.String[] strArray44 = classReader35.getInterfaces();
        classWriter1.visit(1278357558, 28788, "L23682162", "L2116127272", "L1922508902", strArray44);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12592 + "'", int37 == 12592);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1793 + "'", int39 == 1793);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(strArray44);
    }

    @Test
    public void test17626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17626");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L916243867", true);
        classWriter1.visitEnd();
        int int8 = classWriter1.newNameType("L2102614230", "L782129665");
        int int13 = classWriter1.newMethod("L152278810", "L442162059", "L1482145872", true);
        classWriter1.visitSource("L749737959", "L345550585");
        classWriter1.visitOuterClass("L1489223750", "", "L821661888");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test17627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17627");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L590888141", "hi!", "L2062266913");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("L2034910382", false);
        classWriter1.visitSource("L1497855016", "L1370122910");
        classWriter1.visitEnd();
        int int35 = classWriter1.newClass("L888522535");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        methodVisitor52.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        methodVisitor52.visitLabel(label56);
        methodVisitor52.visitTypeInsn(3, "L2000102916");
        methodVisitor52.visitTypeInsn(12592, "L275489687");
        methodVisitor52.visitLdcInsn((java.lang.Object) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = methodVisitor52.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            int int67 = classWriter1.newConst((java.lang.Object) methodVisitor52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@5082f970");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertNotNull(annotationVisitor66);
    }

    @Test
    public void test17628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17628");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        methodVisitor25.visitMethodInsn(7, "L624707113", "hi!", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L769978529", 10);
        methodVisitor25.visitTypeInsn(611177, "L624102780");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitInsn(0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test17629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17629");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        int int3 = classWriter1.newUTF8("L2000102916");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter10.newMethod("", "", "hi!", true);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter10.visitMethod(0, "", "", "hi!", strArray24);
        classWriter1.visit((int) '#', (int) ' ', "L1221801792", "L636727990", "L680573325", strArray24);
        byte[] byteArray27 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor47.visitCode();
        methodVisitor47.visitIincInsn(0, 5);
        int int57 = classWriter30.newConst((java.lang.Object) 0);
        classWriter30.visitOuterClass("L3043237", "L624707113", "L2127085380");
        classWriter30.visitInnerClass("", "L636727990", "L1268109548", 872);
        int int71 = classWriter30.newMethod("L1140828792", "L120720304", "L1283200231", false);
        classReader28.accept((org.mockito.asm.ClassVisitor) classWriter30, 105);
        byte[] byteArray74 = classReader28.b;
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(classReader28, 7);
        int int79 = classWriter76.newNameType("L745089702", "L258090006");
        org.mockito.asm.Attribute attribute80 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter76.visitAttribute(attribute80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 35, 0, 10, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 5, 1, 0, 0, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 32, 0, 3, 0, 6, 0, 4, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 17 + "'", int71 == 17);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 35, 0, 10, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 5, 1, 0, 0, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 32, 0, 3, 0, 6, 0, 4, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 4]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
    }

    @Test
    public void test17630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17630");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int36 = classReader26.readByte(90);
        int int37 = classReader26.getAccess();
        int int39 = classReader26.readByte(100);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        short short69 = classReader67.readShort((int) (byte) 0);
        int int71 = classReader67.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter(classReader67, 0);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader67, 0);
        int int77 = classReader67.readByte((int) (byte) 10);
        char[] charArray82 = new char[] { '#', '4', '4' };
        java.lang.String str83 = classReader67.readUTF8(100, charArray82);
        java.lang.Object obj84 = classReader26.readConst(5, charArray82);
        byte[] byteArray85 = classReader26.b;
        byte[] byteArray86 = classReader26.b;
        int int88 = classReader26.readInt(0);
        byte[] byteArray89 = classReader26.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short69 + "' != '" + (short) -13570 + "'", short69 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2560 + "'", int71 == 2560);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "\00144");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "\00144");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[\001, 4, 4]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + obj84 + "' != '" + "\001" + "'", obj84, "\001");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-889275714) + "'", int88 == (-889275714));
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17631");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        byte[] byteArray32 = classReader26.b;
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 5);
        classWriter35.visitSource("L1498837454", "L972384730");
        int int42 = classWriter35.newField("L84564479", "L334680853", "L639032967");
        int int46 = classWriter35.newField("L1848239827", "L428020352", "L141640713");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
    }

    @Test
    public void test17632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17632");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L1497855016", "", "L1889100462");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("L329202279", false);
        byte[] byteArray21 = classWriter1.toByteArray();
        int int26 = classWriter1.newMethod("L1498978503", "L1371899104", "L1490365060", false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 11, 76, 49, 52, 57, 55, 56, 53, 53, 48, 49, 54, 7, 0, 7, 1, 0, 11, 76, 49, 56, 56, 57, 49, 48, 48, 52, 54, 50, 12, 0, 1, 0, 9, 1, 0, 10, 76, 51, 50, 57, 50, 48, 50, 50, 55, 57, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 4, 0, 8, 0, 10, 0, 13, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1, 0, 14, 0, 0, 0, 6, 0, 1, 0, 11, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
    }

    @Test
    public void test17633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17633");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitCode();
        methodVisitor25.visitEnd();
        methodVisitor25.visitFieldInsn(875903244, "L1583234446", "L838556944", "L1878780030");
        methodVisitor25.visitInsn((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test17634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17634");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn((int) 'a', (int) '4');
        methodVisitor16.visitMethodInsn((int) (short) 7, "L170800745", "L1629650344", "L964574936");
        methodVisitor16.visitInsn((int) (short) 1536);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17635");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        int int37 = classReader26.getAccess();
        java.lang.String str38 = classReader26.getSuperName();
        java.lang.String[] strArray39 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader26, 9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray39);
    }

    @Test
    public void test17636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17636");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        int int14 = classWriter11.newNameType("L242883751", "L1009580268");
        classWriter11.visitOuterClass("L1899113546", "L959574331", "L149220781");
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        methodVisitor48.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = methodVisitor48.visitAnnotationDefault();
        methodVisitor48.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = methodVisitor48.visitAnnotationDefault();
        methodVisitor48.visitTypeInsn(16, "L1928858580");
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter11.visitField(1536, "L1875069328", "L1188834811", "L1402371927", (java.lang.Object) 16);
        fieldVisitor60.visitEnd();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(fieldVisitor60);
    }

    @Test
    public void test17637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17637");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            short short30 = classReader26.readShort(167);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
    }

    @Test
    public void test17638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17638");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitTypeInsn((int) (short) 0, "L897597087");
        methodVisitor25.visitEnd();
        methodVisitor25.visitMultiANewArrayInsn("L1589078908", 10);
        methodVisitor25.visitVarInsn(15, 5);
        methodVisitor25.visitMultiANewArrayInsn("L1502885011", 52);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        methodVisitor55.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        methodVisitor55.visitLabel(label59);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter62.newConst((java.lang.Object) (short) 1);
        classWriter62.visitSource("", "");
        label59.info = "";
        java.lang.String str69 = label59.toString();
        int int70 = label59.getOffset();
        methodVisitor25.visitLabel(label59);
        java.lang.String str72 = label59.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "L711670882" + "'", str69, "L711670882");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "L711670882" + "'", str72, "L711670882");
    }

    @Test
    public void test17639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17639");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitVarInsn((int) (byte) 1, (int) '#');
        methodVisitor25.visitMaxs(100, (int) (short) 0);
        methodVisitor25.visitCode();
        methodVisitor25.visitMethodInsn(1851880565, "L161563611", "L238640077", "L749737959");
        methodVisitor25.visitInsn(22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test17640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17640");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        int int36 = classWriter1.newMethod("L59063553", "L809431533", "L275489687", false);
        int int38 = classWriter1.newUTF8("L2037791973");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("L184804087", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 13 + "'", int38 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test17641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17641");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        byte[] byteArray32 = classReader26.b;
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 5);
        classWriter35.visitSource("L1945103414", "");
        classWriter35.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test17642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17642");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        label47.info = strArray63;
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter42.visitMethod((int) (short) 100, "", "hi!", "", strArray63);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter1.visitMethod(51966, "", "L1429849124", "", strArray63);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("", "L1807127249", "L450189616", 0);
        byte[] byteArray74 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter1.visitAnnotation("L1549350954", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test17643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17643");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitTypeInsn(223337, "L146399554");
        methodVisitor16.visitMethodInsn((int) (byte) -1, "L1667109172", "L1100502214", "L427241356");
        methodVisitor16.visitIincInsn((int) (short) 12848, (-21316096));
        methodVisitor16.visitVarInsn(19, 13876);
        methodVisitor16.visitFieldInsn(134217728, "L1656310421", "L1149107046", "L163463949");
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        methodVisitor68.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        methodVisitor68.visitLabel(label72);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(0);
        int int77 = classWriter75.newConst((java.lang.Object) (short) 1);
        classWriter75.visitSource("", "");
        label72.info = "";
        int int82 = label72.getOffset();
        java.lang.Object obj83 = label72.info;
        java.lang.String str84 = label72.toString();
        methodVisitor16.visitJumpInsn(99, label72);
        java.lang.String str86 = label72.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + "" + "'", obj83, "");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L175428161" + "'", str84, "L175428161");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L175428161" + "'", str86, "L175428161");
    }

    @Test
    public void test17644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17644");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L1132227206", "L749737959", "L1132227206");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L1099155219", false);
        classWriter1.visitInnerClass("L1640056714", "L1546658809", "L1416493109", 20);
        classWriter1.visitSource("L1431625085", "L1914204888");
        int int45 = classWriter1.newClass("L471701904");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 18 + "'", int45 == 18);
    }

    @Test
    public void test17645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17645");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        int int13 = classReader12.header;
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        java.lang.String str15 = classReader12.getSuperName();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test17646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17646");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("L198123551", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor16);
    }

    @Test
    public void test17647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17647");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 9);
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        java.lang.Class<?> wildcardClass41 = strArray40.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test17648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17648");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        int int66 = classWriter56.newMethod("L1013343419", "\001", "L488861128", true);
        byte[] byteArray67 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        int int69 = classReader68.getAccess();
        java.lang.String[] strArray70 = classReader68.getInterfaces();
        java.lang.String[] strArray71 = classReader68.getInterfaces();
        classWriter1.visit(12850, 141, "L1598063226", "L2002866190", "L1052563101", strArray71);
        int int77 = classWriter1.newMethod("L2011029328", "L1603381958", "L398293884", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 11 + "'", int66 == 11);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 1, 0, 11, 76, 49, 48, 49, 51, 51, 52, 51, 52, 49, 57, 7, 0, 6, 1, 0, 1, 1, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 12, 0, 8, 0, 9, 11, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 27 + "'", int77 == 27);
    }

    @Test
    public void test17649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17649");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray37);
        int int41 = classReader39.readByte(116);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader39, 1818575214);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test17650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17650");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("L749737959", "L1028579140", "L488861128", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor12 = classWriter1.visitAnnotation("", true);
        annotationVisitor12.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor12);
    }

    @Test
    public void test17651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17651");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readInt((int) (byte) 100);
        java.lang.String str38 = classReader26.getSuperName();
        int int39 = classReader26.getAccess();
        int int40 = classReader26.getAccess();
        int int41 = classReader26.header;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 65536 + "'", int37 == 65536);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 90 + "'", int41 == 90);
    }

    @Test
    public void test17652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17652");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(5);
        classWriter18.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int25 = classWriter18.newClass("");
        byte[] byteArray26 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray26, 0, (int) '#');
        int int30 = classReader29.header;
        java.lang.String[] strArray31 = classReader29.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter1.visitMethod((int) (short) -1, "L1075066296", "L1628304347", "L264795169", strArray31);
        byte[] byteArray33 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = classReader36.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 40 + "'", int30 == 40);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 11, 76, 49, 48, 55, 53, 48, 54, 54, 50, 57, 54, 1, 0, 11, 76, 49, 54, 50, 56, 51, 48, 52, 51, 52, 55, 1, 0, 9, 83, 121, 110, 116, 104, 101, 116, 105, 99, 1, 0, 10, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 76, 50, 54, 52, 55, 57, 53, 49, 54, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 0, 10, 0, 11, 0, 3, 0, 12, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 14, 0, 0, 0, 2, 0, 15, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
    }

    @Test
    public void test17653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17653");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readInt((int) (byte) 1);
        java.lang.String str10 = classReader7.getSuperName();
        byte[] byteArray11 = classReader7.b;
        byte[] byteArray12 = classReader7.b;
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        java.lang.String[] strArray14 = classReader13.getInterfaces();
        byte[] byteArray15 = classReader13.b;
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(6);
        int int20 = classWriter17.newNameType("L1132227206", "L1004763019");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter27.visitMethod(0, "", "", "hi!", strArray41);
        int int47 = classWriter27.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter27.visitAnnotation("", true);
        byte[] byteArray51 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        int int54 = classReader52.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(classReader52, (int) '4');
        int int58 = classReader52.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader52, (int) '#');
        byte[] byteArray61 = classReader52.b;
        java.lang.String[] strArray62 = classReader52.getInterfaces();
        java.lang.String str63 = classReader52.getSuperName();
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader52, 458753);
        int int67 = classReader52.getItem(4);
        java.lang.String[] strArray68 = classReader52.getInterfaces();
        classWriter17.visit(0, 20, "L272096973", "L721083102", "L1633827670", strArray68);
        classWriter17.visitOuterClass("L805920804", "", "L2132431650");
        org.mockito.asm.Attribute[] attributeArray74 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader13.accept((org.mockito.asm.ClassVisitor) classWriter17, attributeArray74, 65792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-21316096) + "'", int9 == (-21316096));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 51966 + "'", int54 == 51966);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 23 + "'", int67 == 23);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(attributeArray74);
    }

    @Test
    public void test17654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17654");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        long long38 = classReader26.readLong(100);
        long long40 = classReader26.readLong((int) ' ');
        java.lang.String str41 = classReader26.getSuperName();
        int int43 = classReader26.readInt(5);
        int int45 = classReader26.readInt(27);
        java.lang.String str46 = classReader26.getSuperName();
        int int48 = classReader26.readByte(30);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 720578139469709322L + "'", long40 == 720578139469709322L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 184549888 + "'", int45 == 184549888);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test17655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17655");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String str37 = classReader26.getSuperName();
        int int39 = classReader26.getItem((int) (byte) 1);
        int int40 = classReader26.header;
        int int42 = classReader26.readByte(13);
        short short44 = classReader26.readShort(16);
        int int46 = classReader26.getItem((int) (short) 4);
        int int47 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 11 + "'", int39 == 11);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 7 + "'", int42 == 7);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 256 + "'", short44 == (short) 256);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 23 + "'", int46 == 23);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 90 + "'", int47 == 90);
    }

    @Test
    public void test17656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17656");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1847716459", "L426422007", "L1368708044");
        classWriter1.visitOuterClass("L1017623370", "L75359331", "L1178822359");
        byte[] byteArray35 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        int int38 = classReader36.readUnsignedShort(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 7, 0, 7, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 1, 0, 11, 76, 49, 51, 54, 56, 55, 48, 56, 48, 52, 52, 12, 0, 9, 0, 10, 1, 0, 11, 76, 49, 48, 49, 55, 54, 50, 51, 51, 55, 48, 7, 0, 12, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 11, 76, 49, 49, 55, 56, 56, 50, 50, 51, 53, 57, 12, 0, 14, 0, 15, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 1, 0, 17, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 51966 + "'", int38 == 51966);
    }

    @Test
    public void test17657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17657");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(872);
        classWriter1.visitSource("L1628304347", "L1715729238");
        classWriter1.visitOuterClass("\001", "L884076874", "L1169247122");
        classWriter1.visitInnerClass("", "L620334303", "L680573325", 3072);
        org.mockito.asm.FieldVisitor fieldVisitor19 = classWriter1.visitField((int) 'a', "L710635264", "", "L1366183639", (java.lang.Object) "L1150125104");
        org.junit.Assert.assertNotNull(fieldVisitor19);
    }

    @Test
    public void test17658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17658");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1292845306", false);
        java.lang.Object obj33 = null;
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 10, "L30632432", "L275489687", "L667379532", obj33);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("L1178822359", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = annotationVisitor37.visitArray("L1583234446");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test17659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17659");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("L1601838046", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("L9401833", "L890847236");
        classWriter1.visitInnerClass("L897597087", "L1769475365", "L976656549", 3);
        int int27 = classWriter1.newUTF8("L1004763019");
        int int31 = classWriter1.newField("L1609772610", "L1518507083", "L1922475220");
        classWriter1.visitEnd();
        java.lang.String[] strArray37 = null;
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter1.visitMethod((int) (short) 26988, "L1715729238", "L1553193067", "L1546372017", strArray37);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 21 + "'", int31 == 21);
        org.junit.Assert.assertNotNull(methodVisitor38);
    }

    @Test
    public void test17660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17660");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("L745089702", false);
        int int44 = classWriter1.newMethod("L1487951814", "L127591338", "L1930348385", false);
        int int46 = classWriter1.newClass("L838653747");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter1.visitAnnotation("L885118192", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 24 + "'", int46 == 24);
        org.junit.Assert.assertNotNull(annotationVisitor49);
    }

    @Test
    public void test17661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17661");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        java.lang.String str31 = classReader26.getSuperName();
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        java.lang.String str33 = classReader26.getSuperName();
        long long35 = classReader26.readLong(16);
        int int36 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        int int42 = classWriter38.newUTF8("hi!");
        int int47 = classWriter38.newMethod("hi!", "", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter38.visitAnnotation("", true);
        classWriter38.visitInnerClass("L535346328", "L40714478", "L1028510473", 1792);
        int int57 = classWriter38.newUTF8("L1126469108");
        org.mockito.asm.Attribute attribute58 = null;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] { attribute58 };
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray59, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 72061341013183488L + "'", long35 == 72061341013183488L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 90 + "'", int36 == 90);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 12 + "'", int57 == 12);
        org.junit.Assert.assertNotNull(attributeArray59);
    }

    @Test
    public void test17662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17662");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter1.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        byte[] byteArray25 = classWriter1.toByteArray();
        int int27 = classWriter1.newUTF8("L1566032477");
        classWriter1.visitOuterClass("L1804838555", "L624011766", "L566306334");
        classWriter1.visitOuterClass("L288690232", "L567497322", "L1317681080");
        classWriter1.visitInnerClass("L2085471365", "L1700758411", "L747114528", 25968);
        classWriter1.visitOuterClass("L1888920892", "L71945869", "L1315079658");
        classWriter1.visitInnerClass("L1028587757", "L1692352756", "L60628801", (int) (short) 12598);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 50, 50, 51, 52, 51, 57, 49, 55, 48, 7, 0, 9, 1, 0, 11, 76, 50, 48, 49, 52, 56, 48, 54, 52, 48, 52, 7, 0, 11, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 7, 0, 14, 1, 0, 11, 76, 49, 53, 48, 53, 56, 54, 54, 50, 55, 50, 12, 0, 9, 0, 16, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 18, 0, 0, 0, 4, 0, 15, 0, 17, 0, 19, 0, 0, 0, 10, 0, 1, 0, 10, 0, 12, 0, 13, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
    }

    @Test
    public void test17663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17663");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 9);
        java.lang.String str40 = classReader26.getSuperName();
        byte[] byteArray41 = classReader26.b;
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        java.lang.String[] strArray43 = classReader42.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = classReader42.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test17664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17664");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        byte[] byteArray37 = classReader26.b;
        java.lang.String[] strArray38 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = classReader26.readLong(262400);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test17665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17665");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        methodVisitor25.visitMethodInsn(10, "L749737959", "L488861128", "L59063553");
        methodVisitor25.visitEnd();
        methodVisitor25.visitMaxs(12848, 13876);
        methodVisitor25.visitIntInsn(1025, 51);
        methodVisitor25.visitEnd();
        methodVisitor25.visitIincInsn(51052546, 51966);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test17666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17666");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 1698786926);
        classWriter13.visitSource("L20785338", "L1847716459");
        int int19 = classWriter13.newNameType("L500283939", "");
        int int24 = classWriter13.newMethod("L1855754182", "L1442680030", "L598988683", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter13.visitAnnotation("L586303771", true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(annotationVisitor27);
    }

    @Test
    public void test17667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17667");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        methodVisitor25.visitMethodInsn(10, "L749737959", "L488861128", "L59063553");
        methodVisitor25.visitFieldInsn(254, "L688061379", "L1505866272", "L2127085380");
        methodVisitor25.visitMaxs((int) (short) -13570, 21);
        methodVisitor25.visitVarInsn(31, 0);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        methodVisitor58.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor58.visitLabel(label62);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter65.newConst((java.lang.Object) (short) 1);
        classWriter65.visitSource("", "");
        label62.info = "";
        java.lang.String str72 = label62.toString();
        int int73 = label62.getOffset();
        methodVisitor25.visitLabel(label62);
        methodVisitor25.visitEnd();
        methodVisitor25.visitTypeInsn(204, "L242055241");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "L1902553542" + "'", str72, "L1902553542");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test17668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17668");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        byte[] byteArray38 = classReader26.b;
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray38);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17669");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        classWriter27.visitOuterClass("hi!", "", "");
        classWriter27.visitEnd();
        java.lang.String[] strArray64 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter27.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter1.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray64);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter1.visitAnnotation("L1004763019", false);
        int int72 = classWriter1.newNameType("hi!", "L1601838046");
        classWriter1.visitSource("L1962189950", "");
        int int80 = classWriter1.newMethod("L1004763019", "L1789245551", "L367225907", true);
        int int83 = classWriter1.newNameType("L1357812716", "L1877128533");
        int int85 = classWriter1.newClass("L537907644");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = classWriter1.visitAnnotation("L12443849", false);
        annotationVisitor88.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 14 + "'", int72 == 14);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 20 + "'", int80 == 20);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 23 + "'", int83 == 23);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 25 + "'", int85 == 25);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test17670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17670");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(26);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test17671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17671");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor46.visitCode();
        methodVisitor46.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        java.lang.String str79 = label77.toString();
        methodVisitor46.visitLineNumber((int) (short) -1, label77);
        methodVisitor16.visitLabel(label77);
        java.lang.String str82 = label77.toString();
        int int83 = label77.getOffset();
        java.lang.String str84 = label77.toString();
        java.lang.Object obj85 = label77.info;
        java.lang.String str86 = label77.toString();
        java.lang.Object obj87 = label77.info;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L1819307339" + "'", str79, "L1819307339");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "L1819307339" + "'", str82, "L1819307339");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L1819307339" + "'", str84, "L1819307339");
        org.junit.Assert.assertNull(obj85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L1819307339" + "'", str86, "L1819307339");
        org.junit.Assert.assertNull(obj87);
    }

    @Test
    public void test17672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17672");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        byte[] byteArray32 = classReader26.b;
        int int33 = classReader26.getAccess();
        long long35 = classReader26.readLong(7);
        short short37 = classReader26.readShort((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader26.readUnsignedShort((int) (short) 21359);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10999411246848L + "'", long35 == 10999411246848L);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 256 + "'", short37 == (short) 256);
    }

    @Test
    public void test17673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17673");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn((-1107296256), 12);
        methodVisitor25.visitMethodInsn((int) (short) 4, "L831655905", "L1221801792", "L688061379");
        methodVisitor25.visitMaxs(167772672, 512);
        methodVisitor25.visitVarInsn(0, 1164862316);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test17674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17674");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        methodVisitor16.visitMethodInsn((int) (byte) 1, "L728847777", "L680573325", "L238476442");
        methodVisitor16.visitFieldInsn(100, "L934106996", "L1945765289", "L756496535");
        methodVisitor16.visitTypeInsn(23, "L1317000137");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test17675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17675");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitCode();
        methodVisitor16.visitMultiANewArrayInsn("L1221801792", (int) (short) 1);
        methodVisitor16.visitIntInsn(2629, (int) (short) 779);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17676");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        methodVisitor25.visitCode();
        methodVisitor25.visitMethodInsn(10, "L1928858580", "L1013343419", "L1368708044");
        methodVisitor25.visitInsn(2560);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = methodVisitor25.visitAnnotation("L859506825", false);
        methodVisitor25.visitIntInsn(16, 1659509);
        methodVisitor25.visitTypeInsn(13876, "L959574331");
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor25.visitAnnotation("L917500574", false);
        methodVisitor25.visitFieldInsn(34, "L687099442", "L1033617867", "L284303737");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor25.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor25.visitParameterAnnotation((int) (short) 1025, "L863796263", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test17677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17677");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        int int22 = classWriter1.newField("L535346328", "L755949095", "L238476442");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        int int48 = classWriter28.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter28.visitAnnotation("", true);
        byte[] byteArray52 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        java.lang.String str54 = classReader53.getSuperName();
        java.lang.String[] strArray55 = classReader53.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter1.visitMethod(1792, "L689023041", "L1899714602", "L1967552389", strArray55);
        int int59 = classWriter1.newNameType("L367225907", "L1491483291");
        int int61 = classWriter1.newClass("L2097292751");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 19 + "'", int59 == 19);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 21 + "'", int61 == 21);
    }

    @Test
    public void test17678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17678");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        methodVisitor25.visitTypeInsn((int) (short) -13570, "L1962189950");
        methodVisitor25.visitMethodInsn(100, "L664111037", "L128451051", "L1928858580");
        methodVisitor25.visitVarInsn(105, 17);
        methodVisitor25.visitVarInsn(16842755, (int) (short) 12342);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((-1107296256), 52);
        methodVisitor25.visitCode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test17679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17679");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = fieldVisitor12.visitAnnotation("L1009580268", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = fieldVisitor12.visitAnnotation("L1540520089", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = fieldVisitor12.visitAnnotation("L1402371927", true);
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = fieldVisitor12.visitAnnotation("L1465372626", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = fieldVisitor12.visitAnnotation("", false);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test17680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17680");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((int) (byte) -1, 0);
        methodVisitor16.visitEnd();
        methodVisitor16.visitInsn(26);
        methodVisitor16.visitMaxs((int) (short) 21359, 875903244);
        methodVisitor16.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor16.visitAnnotation("L881847316", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test17681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17681");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("L1221801792", 4);
        methodVisitor25.visitEnd();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter31.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(0);
        int int44 = classWriter39.newMethod("", "", "hi!", true);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter39.visitMethod(0, "", "", "hi!", strArray53);
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter31.visitMethod(3, "hi!", "hi!", "hi!", strArray53);
        methodVisitor55.visitMethodInsn(10, "L749737959", "L488861128", "L59063553");
        methodVisitor55.visitFieldInsn(254, "L688061379", "L1505866272", "L2127085380");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter68.newMethod("", "", "hi!", true);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter68.visitMethod(0, "", "", "hi!", strArray82);
        methodVisitor83.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label87 = new org.mockito.asm.Label();
        methodVisitor83.visitLabel(label87);
        java.lang.Object obj89 = label87.info;
        java.lang.Object obj90 = label87.info;
        int int91 = label87.getOffset();
        methodVisitor55.visitLineNumber(7, label87);
        methodVisitor55.visitMultiANewArrayInsn("L334680853", (int) (byte) 1);
        methodVisitor25.visitLdcInsn((java.lang.Object) "L334680853");
        methodVisitor25.visitCode();
        methodVisitor25.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test17682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17682");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L1969123537", false);
        classWriter1.visitSource("L170800745", "L1700758411");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("L1750086343", false);
        classWriter1.visitOuterClass("L2070760839", "L88233605", "L1721954051");
        int int21 = classWriter1.newUTF8("L664111037");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
    }

    @Test
    public void test17683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17683");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor28.visit("", (java.lang.Object) 100.0d);
        annotationVisitor28.visit("", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor28.visitAnnotation("hi!", "");
        annotationVisitor28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor28.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = annotationVisitor28.visitAnnotation("L2062266913", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = annotationVisitor28.visitAnnotation("L367225907", "L120720304");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = annotationVisitor28.visitArray("L300846227");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test17684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17684");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray35 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader26.getItem(104);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 104");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertNotNull(strArray35);
    }

    @Test
    public void test17685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17685");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        int int6 = classWriter1.newUTF8("");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        int int39 = classReader38.getAccess();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader38, 10);
        java.lang.String[] strArray42 = classReader38.getInterfaces();
        classWriter1.visit(202, 25, "L1793985281", "L1934292714", "L1868396987", strArray42);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter1.visitAnnotation("L224623650", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(annotationVisitor46);
    }

    @Test
    public void test17686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17686");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newClass("L2000102916");
        classWriter1.visitInnerClass("L1132227206", "L242883751", "L1930348385", (int) (short) -1);
        java.lang.Object obj18 = null;
        org.mockito.asm.FieldVisitor fieldVisitor19 = classWriter1.visitField(33, "L1283200231", "L419471195", "L9401833", obj18);
        classWriter1.visitOuterClass("L571285779", "L1619769466", "L784900793");
        classWriter1.visitSource("L795068904", "L871920569");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor19);
    }

    @Test
    public void test17687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17687");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitEnd();
        methodVisitor16.visitMaxs(14, 17);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor16.visitAnnotation("L426422007", true);
        java.lang.Class<?> wildcardClass32 = annotationVisitor31.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test17688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17688");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        int int11 = classWriter1.newClass("L59063553");
        int int16 = classWriter1.newMethod("L1559694151", "L1945765289", "L392695198", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
    }

    @Test
    public void test17689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17689");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        methodVisitor25.visitIincInsn(1694564377, 1694564377);
        methodVisitor25.visitMaxs(1034, 186);
        methodVisitor25.visitMaxs(1536, 141);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = methodVisitor25.visitAnnotation("L1709223207", false);
        methodVisitor25.visitMaxs((int) (short) -17730, (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor25.visitAnnotation("L2096601958", false);
        methodVisitor25.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test17690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17690");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        short short31 = classReader29.readShort(27);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader29, 17);
        byte[] byteArray34 = classReader29.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 2816 + "'", short31 == (short) 2816);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17691");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        classWriter1.visitOuterClass("L728847777", "\001", "L809431533");
        byte[] byteArray10 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L1502885011", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 10, 76, 55, 50, 56, 56, 52, 55, 55, 55, 55, 7, 0, 3, 1, 0, 1, 1, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 5, 0, 6, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 4, 0, 4, 0, 7]");
        org.junit.Assert.assertNotNull(annotationVisitor13);
    }

    @Test
    public void test17692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17692");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        label34.info = strArray50;
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter29.visitMethod((int) (short) 100, "", "hi!", "", strArray50);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter56.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter56.visitMethod(8, "hi!", "", "", strArray78);
        methodVisitor25.visitFrame(7, (int) (byte) 0, (java.lang.Object[]) strArray50, (int) (short) -1, (java.lang.Object[]) strArray78);
        methodVisitor25.visitInsn(78);
        methodVisitor25.visitIincInsn(13874, 51);
        methodVisitor25.visitFieldInsn((-1161953280), "L1642186947", "L9401833", "");
        methodVisitor25.visitIntInsn(29793, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(methodVisitor80);
    }

    @Test
    public void test17693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17693");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitVarInsn((-1107296256), 65210);
        methodVisitor25.visitIntInsn((int) (byte) 0, 12);
        methodVisitor25.visitMultiANewArrayInsn("L419471195", 12848);
        methodVisitor25.visitFieldInsn(36, "L1950284572", "L1388678109", "L1499444847");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test17694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17694");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        long long12 = classReader7.readLong(4);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        int int35 = classWriter15.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter15.visitAnnotation("", true);
        byte[] byteArray39 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        int int42 = classReader40.readUnsignedShort((int) (byte) 0);
        short short44 = classReader40.readShort(7);
        int int45 = classReader40.header;
        int int46 = classReader40.getAccess();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(classReader40, 23);
        int int50 = classReader40.readByte(90);
        int int51 = classReader40.getAccess();
        int int53 = classReader40.readByte(100);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        short short83 = classReader81.readShort((int) (byte) 0);
        int int85 = classReader81.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter87 = new org.mockito.asm.ClassWriter(classReader81, 0);
        org.mockito.asm.ClassWriter classWriter89 = new org.mockito.asm.ClassWriter(classReader81, 0);
        int int91 = classReader81.readByte((int) (byte) 10);
        char[] charArray96 = new char[] { '#', '4', '4' };
        java.lang.String str97 = classReader81.readUTF8(100, charArray96);
        java.lang.Object obj98 = classReader40.readConst(5, charArray96);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = classReader7.readUTF8(30819, charArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 459008L + "'", long12 == 459008L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 51966 + "'", int42 == 51966);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 0 + "'", short44 == (short) 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 90 + "'", int45 == 90);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short83 + "' != '" + (short) -13570 + "'", short83 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2560 + "'", int85 == 2560);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), "\00144");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), "\00144");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[\001, 4, 4]");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + obj98 + "' != '" + "\001" + "'", obj98, "\001");
    }

    @Test
    public void test17695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17695");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor62 = classWriter1.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        fieldVisitor62.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = fieldVisitor62.visitAnnotation("L749737959", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = fieldVisitor62.visitAnnotation("L1221801792", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = fieldVisitor62.visitAnnotation("L1715729238", true);
        fieldVisitor62.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = fieldVisitor62.visitAnnotation("L164869891", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test17696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17696");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        int int29 = classWriter1.newNameType("L529122729", "L1789245551");
        int int31 = classWriter1.newClass("L755844592");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L1330884173", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter48.visitAnnotation("", true);
        byte[] byteArray72 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        short short75 = classReader73.readShort((int) (byte) 0);
        int int77 = classReader73.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader73, 0);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader73, 0);
        int int83 = classReader73.getItem(2);
        java.lang.String[] strArray84 = classReader73.getInterfaces();
        classWriter41.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray84);
        classWriter1.visit(5, 0, "L1028579140", "L552318631", "L500545133", strArray84);
        classWriter1.visitInnerClass("L1377529303", "L1970148580", "L2032268392", 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = classWriter1.visitAnnotation("L756991711", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) -13570 + "'", short75 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2560 + "'", int77 == 2560);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 14 + "'", int83 == 14);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test17697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17697");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        classWriter1.visitInnerClass("L1847716459", "", "L680573325", 9);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(12592, "hi!", "L897597087", "L1928858580", (java.lang.Object) 1.0d);
        classWriter1.visitInnerClass("L1601838046", "L1208026886", "L1930348385", 2561);
        classWriter1.visitSource("L774045562", "L1473010420");
        int int46 = classWriter1.newClass("L2034910382");
        classWriter1.visitOuterClass("L1101713360", "L897597087", "L1083553839");
        classWriter1.visitInnerClass("L734668970", "L1070113211", "L326287770", (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 18 + "'", int46 == 18);
    }

    @Test
    public void test17698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17698");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int35 = classReader26.readByte(0);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) -13570);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter37.visitAnnotation("L1264051504", false);
        classWriter37.visitEnd();
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label52 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        label52.info = strArray68;
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter47.visitMethod((int) (short) 100, "", "hi!", "", strArray68);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter47.visitAnnotation("L1847716459", false);
        annotationVisitor74.visitEnum("L2050497140", "L1744471998", "L475038998");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor79 = classWriter37.visitField(264704, "L1611774137", "L237758962", "L1975230523", (java.lang.Object) annotationVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@2f1b5ea");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 202 + "'", int35 == 202);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test17699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17699");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.String str54 = label51.toString();
        int int55 = label51.getOffset();
        int int56 = label51.getOffset();
        java.lang.String str57 = label51.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L235708781" + "'", str54, "L235708781");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "L235708781" + "'", str57, "L235708781");
    }

    @Test
    public void test17700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17700");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        classWriter1.visitSource("L953714147", "L1495045421");
        classWriter1.visitOuterClass("L572299082", "", "L1583234446");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    }

    @Test
    public void test17701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17701");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L1899113546", "L1086414642");
        classWriter1.visitInnerClass("L130127010", "L918742398", "L276953604", 100);
        classWriter1.visitSource("L1642186947", "L245209857");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
    }

    @Test
    public void test17702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17702");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitTypeInsn(12598, "L2097292751");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17703");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1292845306", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("L1715729238", true);
        classWriter1.visitSource("L569030566", "L2078456391");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(31);
        int int42 = classWriter40.newClass("");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        int int69 = classWriter49.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter49.visitAnnotation("", true);
        byte[] byteArray73 = classWriter49.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        int int76 = classReader74.readUnsignedShort((int) (byte) 0);
        short short78 = classReader74.readShort(7);
        int int79 = classReader74.header;
        int int80 = classReader74.getAccess();
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter(classReader74, 23);
        int int84 = classReader74.readByte(90);
        int int86 = classReader74.readByte((int) (byte) 10);
        java.lang.String[] strArray87 = classReader74.getInterfaces();
        classWriter40.visit(104, 1034, "L282070366", "L1019177379", "L20785338", strArray87);
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter1.visitMethod(512, "L222144606", "L84564479", "L2059908172", strArray87);
        methodVisitor89.visitEnd();
        methodVisitor89.visitFieldInsn(161, "L1715729238", "L627629900", "L1888920892");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 51966 + "'", int76 == 51966);
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) 0 + "'", short78 == (short) 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 90 + "'", int79 == 90);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(methodVisitor89);
    }

    @Test
    public void test17704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17704");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(3);
        int int6 = classWriter1.newMethod("L1009580268", "L1583234446", "L897597087", true);
        org.mockito.asm.Attribute attribute7 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
    }

    @Test
    public void test17705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17705");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L809431533", "L636727990", "L636727990");
        classWriter1.visitInnerClass("L275489687", "L728847777", "", (int) (byte) 1);
        classWriter1.visitOuterClass("L1368800213", "L202294627", "L871448529");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter1.visitAnnotation("L1142762441", false);
        annotationVisitor44.visitEnum("L1595872345", "L1386483578", "L1757857475");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test17706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17706");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        methodVisitor34.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label38 = new org.mockito.asm.Label();
        methodVisitor34.visitLabel(label38);
        java.lang.String str40 = label38.toString();
        label38.info = ' ';
        java.lang.Object obj43 = label38.info;
        methodVisitor16.visitLabel(label38);
        org.mockito.asm.Label label45 = new org.mockito.asm.Label();
        java.lang.String str46 = label45.toString();
        label45.info = "L2014806404";
        label38.info = label45;
        java.lang.String str50 = label38.toString();
        int int51 = label38.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "L503196528" + "'", str40, "L503196528");
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + ' ' + "'", obj43, ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "L1575329271" + "'", str46, "L1575329271");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L503196528" + "'", str50, "L503196528");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test17707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17707");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitMultiANewArrayInsn("L1611208075", 16);
        methodVisitor16.visitIincInsn(33, 7);
        methodVisitor16.visitInsn(1659509);
        org.mockito.asm.Label label41 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        label41.info = strArray57;
        java.lang.Object obj60 = label41.info;
        methodVisitor16.visitLineNumber(65210, label41);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitIincInsn((int) (short) 3, 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test17708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17708");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        classWriter27.visitOuterClass("hi!", "", "");
        classWriter27.visitEnd();
        java.lang.String[] strArray64 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter27.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter1.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray64);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter1.visitAnnotation("L1004763019", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = annotationVisitor69.visitAnnotation("L146399554", "L1855754182");
        java.lang.Object obj74 = null;
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor72.visit("L665737352", obj74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test17709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17709");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(33);
        classWriter1.visitSource("L976618452", "L295165602");
        classWriter1.visitSource("L625957890", "L1140828792");
        int int9 = classWriter1.newUTF8("L15843493");
        int int13 = classWriter1.newField("L1564814992", "L10551287", "L26763082");
        int int15 = classWriter1.newClass("L385584834");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
    }

    @Test
    public void test17710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17710");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 12598);
        int int5 = classWriter1.newField("L397385256", "L2080829315", "L559114244");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L1034698414", "L576261849", "L1201220466");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
    }

    @Test
    public void test17711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17711");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        java.lang.String[] strArray40 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod((int) '#', "L2062266913", "L275489687", "", strArray40);
        classWriter1.visitInnerClass("L1635784392", "L1686860563", "L976656549", (-1161953280));
        classWriter1.visitInnerClass("L203863779", "L1566032477", "L457743322", 25968);
        classWriter1.visitInnerClass("L765138463", "L1089062975", "L1952894981", 2560);
        org.mockito.asm.Attribute attribute57 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
    }

    @Test
    public void test17712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17712");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        classWriter1.visitOuterClass("L976656549", "", "L1009580268");
        classWriter1.visitOuterClass("L1269304540", "L1393085977", "");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter1.visitAnnotation("L918742398", false);
        int int50 = classWriter1.newNameType("L1526570068", "L1361142288");
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter1.visitAnnotation("L1093218044", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = annotationVisitor53.visitAnnotation("L1104868738", "L1074135059");
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = annotationVisitor56.visitArray("L605589248");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 24 + "'", int50 == 24);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor58);
    }

    @Test
    public void test17713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17713");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L59063553", true);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(5);
        classWriter30.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor41 = classWriter30.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = fieldVisitor41.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = annotationVisitor44.visitAnnotation("L275489687", "L275489687");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = annotationVisitor44.visitArray("L295165602");
        methodVisitor16.visitLdcInsn((java.lang.Object) "L295165602");
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = methodVisitor16.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test17714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17714");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitEnd();
        int int5 = classWriter1.newNameType("", "L172254079");
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter11.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod(8, "hi!", "", "", strArray33);
        methodVisitor35.visitVarInsn((int) (byte) 1, (int) '#');
        methodVisitor35.visitMaxs(100, (int) (short) 0);
        methodVisitor35.visitCode();
        methodVisitor35.visitInsn(16);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(1698786926, "L414874932", "L838653747", "L500545133", (java.lang.Object) 16);
        classWriter1.visitSource("L1100502214", "L141363326");
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("L2117999297", false);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L1808788134", "L1559694151", "L671872947");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test17715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17715");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        int int20 = classWriter1.newNameType("L1017623370", "L4531833");
        classWriter1.visitOuterClass("L2037791973", "L1769475365", "L1111133036");
        classWriter1.visitOuterClass("", "L120713780", "L535346328");
        classWriter1.visitOuterClass("L2132185573", "L1685807285", "L343526401");
        classWriter1.visitInnerClass("L324925920", "L1850710268", "L503713660", 2051);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("L344547855", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test17716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17716");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 23);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        int int43 = classReader26.getAccess();
        byte[] byteArray44 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray44, 39, 184549888);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17717");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = fieldVisitor22.visitAnnotation("L136145448", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = fieldVisitor22.visitAnnotation("L1066716797", true);
        fieldVisitor22.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = fieldVisitor22.visitAnnotation("L1101521569", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test17718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17718");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        int int52 = classWriter1.newNameType("L897597087", "L579675851");
        int int54 = classWriter1.newUTF8("");
        int int59 = classWriter1.newMethod("L1938659678", "", "L448799403", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 24 + "'", int59 == 24);
    }

    @Test
    public void test17719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17719");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        int int29 = classReader26.readByte(24);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, (-1161953280));
        classWriter31.visitEnd();
        classWriter31.visitOuterClass("L77196307", "L2071158216", "L876153027");
        classWriter31.visitEnd();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter44.newConst((java.lang.Object) (short) 1);
        classWriter44.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        classWriter55.visitOuterClass("hi!", "", "");
        int int67 = classWriter55.newNameType("hi!", "hi!");
        int int70 = classWriter55.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(0);
        int int82 = classWriter77.newMethod("", "", "hi!", true);
        java.lang.String[] strArray91 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter77.visitMethod(0, "", "", "hi!", strArray91);
        classWriter55.visit(5, 6, "", "", "", strArray91);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter44.visitMethod((int) (short) 0, "", "", "", strArray91);
        classWriter31.visit(47806, 14, "L1540520089", "L1149181212", "L217194082", strArray91);
        byte[] byteArray96 = classWriter31.toByteArray();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor94);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[-54, -2, -70, -66, 0, 0, -70, -66, 0, 21, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 9, 76, 55, 55, 49, 57, 54, 51, 48, 55, 7, 0, 10, 1, 0, 11, 76, 50, 48, 55, 49, 49, 53, 56, 50, 49, 54, 1, 0, 10, 76, 56, 55, 54, 49, 53, 51, 48, 50, 55, 12, 0, 12, 0, 13, 1, 0, 11, 76, 49, 53, 52, 48, 53, 50, 48, 48, 56, 57, 7, 0, 15, 1, 0, 11, 76, 49, 49, 52, 57, 49, 56, 49, 50, 49, 50, 1, 0, 10, 76, 50, 49, 55, 49, 57, 52, 48, 56, 50, 7, 0, 18, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 14, 0, 16, 0, 19, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 17, 0, 20, 0, 0, 0, 4, 0, 11, 0, 14]");
    }

    @Test
    public void test17720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17720");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn((int) 'a', (int) '4');
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMultiANewArrayInsn("L671718527", (int) (short) 1792);
        methodVisitor16.visitMethodInsn(1034, "L1867935510", "L562296337", "L10083236");
        methodVisitor16.visitFieldInsn(0, "L1851317435", "L881393109", "L472824598");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test17721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17721");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        int int51 = classWriter1.newClass("L1132227206");
        classWriter1.visitSource("L1449033709", "");
        org.mockito.asm.Attribute attribute55 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 18 + "'", int51 == 18);
    }

    @Test
    public void test17722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17722");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        java.lang.String str34 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        int int37 = classReader26.header;
        java.lang.String[] strArray38 = classReader26.getInterfaces();
        int int39 = classReader26.header;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
    }

    @Test
    public void test17723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17723");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        java.lang.String str54 = label51.toString();
        java.lang.Object obj55 = label51.info;
        java.lang.String str56 = label51.toString();
        int int57 = label51.getOffset();
        int int58 = label51.getOffset();
        java.lang.String str59 = label51.toString();
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(0);
        int int66 = classWriter61.newMethod("", "", "hi!", true);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter61.visitMethod(0, "", "", "hi!", strArray75);
        methodVisitor76.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor76.visitCode();
        methodVisitor76.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor76.visitAnnotation("L59063553", true);
        methodVisitor76.visitInsn(0);
        methodVisitor76.visitCode();
        methodVisitor76.visitMultiANewArrayInsn("L1396464054", 458753);
        methodVisitor76.visitIntInsn(1034, 100);
        label51.info = 1034;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L2008657158" + "'", str54, "L2008657158");
        org.junit.Assert.assertNull(obj55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L2008657158" + "'", str56, "L2008657158");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "L2008657158" + "'", str59, "L2008657158");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test17724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17724");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        methodVisitor62.visitFieldInsn(0, "L1162526488", "L1601838046", "");
        methodVisitor62.visitTypeInsn((int) (short) 100, "L1004763019");
        methodVisitor62.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = methodVisitor62.visitAnnotation("L1603381958", true);
        org.mockito.asm.Attribute attribute75 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor62.visitAttribute(attribute75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test17725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17725");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        int int4 = classWriter1.newNameType("L1962189950", "L1669912474");
        classWriter1.visitSource("L917500574", "L680573325");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        java.lang.String str39 = classReader38.getSuperName();
        int int40 = classReader38.header;
        java.lang.String[] strArray41 = classReader38.getInterfaces();
        int int43 = classReader38.readByte(0);
        int int45 = classReader38.readUnsignedShort(1);
        long long47 = classReader38.readLong(7);
        byte[] byteArray48 = classReader38.b;
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        int int50 = classReader49.getAccess();
        java.lang.String[] strArray51 = classReader49.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter1.visitMethod(33, "L449150050", "L1392950090", "L511830895", strArray51);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 202 + "'", int43 == 202);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 65210 + "'", int45 == 65210);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10999411246848L + "'", long47 == 10999411246848L);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
    }

    @Test
    public void test17726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17726");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1055269373");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17727");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        int int35 = classReader26.getAccess();
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        int int37 = classReader26.header;
        java.lang.String[] strArray38 = classReader26.getInterfaces();
        byte[] byteArray39 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        int int62 = classWriter42.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter42.visitAnnotation("", true);
        byte[] byteArray66 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        java.lang.String str68 = classReader67.getSuperName();
        char[] charArray74 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj75 = classReader67.readConst(6, charArray74);
        char[] charArray83 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str84 = classReader67.readUTF8((int) '#', charArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = classReader26.readConst(1818575214, charArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1818575214");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "\001" + "'", obj75, "\001");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\000" + "'", str84, "\000");
    }

    @Test
    public void test17728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17728");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L1429849124", "L535346328", "L110679537", (int) (byte) -1);
        classWriter1.visitInnerClass("L172254079", "L1847716459", "L749737959", 24);
        classWriter1.visitSource("L2078535908", "L1669912474");
        byte[] byteArray40 = classWriter1.toByteArray();
        int int43 = classWriter1.newNameType("L390763851", "L2099013846");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32 + "'", int43 == 32);
    }

    @Test
    public void test17729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17729");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter30.visitMethod(0, "", "", "hi!", strArray44);
        methodVisitor45.visitFieldInsn(8, "hi!", "", "");
        methodVisitor45.visitTypeInsn((int) (byte) 100, "");
        methodVisitor25.visitLdcInsn((java.lang.Object) (byte) 100);
        methodVisitor25.visitVarInsn(47806, (-1107296256));
        methodVisitor25.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(methodVisitor45);
    }

    @Test
    public void test17730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17730");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        classWriter1.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("L1601838046", true);
        classWriter1.visitInnerClass("L728847777", "L275489687", "\001", (int) (short) -13570);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(3, "hi!", "hi!", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1, "L426422007", "L999961130", "L1930348385", strArray59);
        methodVisitor62.visitFieldInsn(0, "L1162526488", "L1601838046", "");
        methodVisitor62.visitMultiANewArrayInsn("L2069898161", 12);
        methodVisitor62.visitCode();
        methodVisitor62.visitIntInsn(29, 29);
        methodVisitor62.visitTypeInsn((int) (byte) 100, "L2108016684");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor62.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test17731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17731");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(4);
        int int29 = classReader26.header;
        int int31 = classReader26.readByte(8);
        int int32 = classReader26.header;
        byte[] byteArray33 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.getItem(1025);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1025");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 655616L + "'", long28 == 655616L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17732");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor46.visitCode();
        methodVisitor46.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        java.lang.String str79 = label77.toString();
        methodVisitor46.visitLineNumber((int) (short) -1, label77);
        methodVisitor16.visitLabel(label77);
        java.lang.Object obj82 = label77.info;
        java.lang.String str83 = label77.toString();
        java.lang.String str84 = label77.toString();
        int int85 = label77.getOffset();
        java.lang.Object obj86 = label77.info;
        int int87 = label77.getOffset();
        java.lang.Class<?> wildcardClass88 = label77.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L1507100174" + "'", str79, "L1507100174");
        org.junit.Assert.assertNull(obj82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "L1507100174" + "'", str83, "L1507100174");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L1507100174" + "'", str84, "L1507100174");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 8 + "'", int87 == 8);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test17733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17733");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(872);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        int int9 = classWriter7.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter7.visitMethod(8, "hi!", "", "", strArray29);
        methodVisitor31.visitIincInsn((int) 'a', (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitTypeInsn((int) (byte) 100, "");
        methodVisitor31.visitLdcInsn((java.lang.Object) (byte) 100);
        methodVisitor31.visitVarInsn(12, (-1107296256));
        methodVisitor31.visitFieldInsn(10, "L418802221", "L40714478", "L2045712064");
        org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter1.visitField(1793, "L1789245551", "L1774908040", "L552318631", (java.lang.Object) "L418802221");
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = fieldVisitor69.visitAnnotation("L149220781", true);
        java.lang.Class<?> wildcardClass73 = fieldVisitor69.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test17734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17734");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(12592, (int) (short) 10);
        methodVisitor16.visitFieldInsn((int) (short) -13570, "L624707113", "L590888141", "L624707113");
        org.mockito.asm.Label label31 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        label31.info = strArray47;
        java.lang.String str50 = label31.toString();
        methodVisitor16.visitJumpInsn(24, label31);
        methodVisitor16.visitEnd();
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter54.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(0);
        int int67 = classWriter62.newMethod("", "", "hi!", true);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter62.visitMethod(0, "", "", "hi!", strArray76);
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter54.visitMethod(8, "hi!", "", "", strArray76);
        methodVisitor78.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor78.visitAnnotationDefault();
        methodVisitor78.visitVarInsn(5, (int) 'a');
        methodVisitor78.visitIntInsn((int) (short) 100, (int) 'a');
        methodVisitor78.visitMethodInsn((int) (short) -13570, "L1441910664", "L1583234446", "L2032268392");
        methodVisitor78.visitInsn(56);
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor78.visitAnnotation("L427241356", false);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitLdcInsn((java.lang.Object) annotationVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@354f5a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L1040647981" + "'", str50, "L1040647981");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test17735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17735");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = fieldVisitor31.visitAnnotation("L636727990", true);
        annotationVisitor34.visitEnum("L4531833", "L2062266913", "L110679537");
        annotationVisitor34.visitEnum("L419222281", "L957324124", "L1203835501");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test17736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17736");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2561);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L1962138618", true);
        byte[] byteArray5 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 11, 76, 49, 57, 54, 50, 49, 51, 56, 54, 49, 56, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17737");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        methodVisitor41.visitMethodInsn(2560, "L1223439170", "L1368708044", "L1847716459");
        methodVisitor41.visitIincInsn(13876, (int) (short) -13570);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = methodVisitor41.visitAnnotationDefault();
        methodVisitor41.visitEnd();
        methodVisitor41.visitTypeInsn(0, "L207820460");
        methodVisitor41.visitFieldInsn(1181314149, "L1315752401", "L886630257", "L879597168");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test17738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17738");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter1.visitAnnotation("L238476442", true);
        int int70 = classWriter1.newField("L1004763019", "L809431533", "L590888141");
        classWriter1.visitSource("L989364881", "L537907644");
        classWriter1.visitEnd();
        int int78 = classWriter1.newField("L710856266", "L1627270338", "L724247023");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 15 + "'", int70 == 15);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 22 + "'", int78 == 22);
    }

    @Test
    public void test17739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17739");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        methodVisitor43.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor43.visitCode();
        methodVisitor43.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        methodVisitor70.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        methodVisitor70.visitLabel(label74);
        java.lang.String str76 = label74.toString();
        methodVisitor43.visitLineNumber((int) (short) -1, label74);
        label74.info = (-1.0f);
        methodVisitor25.visitLineNumber(19, label74);
        methodVisitor25.visitMultiANewArrayInsn("L959574331", (int) 'a');
        methodVisitor25.visitIntInsn((int) (byte) 1, 50331648);
        methodVisitor25.visitCode();
        methodVisitor25.visitInsn(13);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L1374323047" + "'", str76, "L1374323047");
    }

    @Test
    public void test17740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17740");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter38.newMethod("", "", "hi!", true);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter38.visitMethod(0, "", "", "hi!", strArray52);
        int int58 = classWriter38.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter38.visitAnnotation("", true);
        byte[] byteArray62 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        int int65 = classReader63.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(classReader63, (int) '4');
        long long69 = classReader63.readLong(2);
        int int70 = classReader63.getAccess();
        byte[] byteArray71 = classReader63.b;
        int int73 = classReader63.readInt(12);
        java.lang.String[] strArray74 = classReader63.getInterfaces();
        classWriter1.visit((int) (short) -326, 1751720204, "L1611208075", "", "L474351819", strArray74);
        int int77 = classWriter1.newClass("L897160681");
        classWriter1.visitOuterClass("L772357663", "L2147079915", "L77022606");
        classWriter1.visitSource("L805282072", "L1315079658");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 51966 + "'", int65 == 51966);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-4990551337079930870L) + "'", long69 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 458753 + "'", int73 == 458753);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 14 + "'", int77 == 14);
    }

    @Test
    public void test17741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17741");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        fieldVisitor12.visitEnd();
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = fieldVisitor12.visitAnnotation("L73404539", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor12.visitAnnotation("L1723151786", false);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test17742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17742");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitIntInsn(0, 10);
        methodVisitor25.visitMaxs(5, (-1));
        methodVisitor25.visitMultiANewArrayInsn("L1132227206", (int) (short) -13570);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMethodInsn(201326848, "L1549350954", "L890847236", "L1483790775");
        methodVisitor25.visitCode();
        org.mockito.asm.Attribute attribute49 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test17743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17743");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        short short70 = classReader68.readShort((int) (byte) 0);
        int int72 = classReader68.readUnsignedShort((int) ' ');
        long long74 = classReader68.readLong((int) '#');
        int int76 = classReader68.getItem(0);
        java.lang.String str77 = classReader68.getSuperName();
        short short79 = classReader68.readShort(13);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader68, (int) (short) 0);
        org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter1.visitField((int) (short) -13570, "L529122729", "L75359331", "L2037791973", (java.lang.Object) (short) 0);
        int int85 = classWriter1.newNameType("L9401833", "L667379532");
        classWriter1.visitOuterClass("L407879786", "L1386483578", "L755844592");
        classWriter1.visitInnerClass("L2082266136", "L182578583", "L2115752073", (int) (short) 7);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) -13570 + "'", short70 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2560 + "'", int72 == 2560);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1126999590795363L + "'", long74 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + short79 + "' != '" + (short) 1792 + "'", short79 == (short) 1792);
        org.junit.Assert.assertNotNull(fieldVisitor82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 20 + "'", int85 == 20);
    }

    @Test
    public void test17744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17744");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readUnsignedShort(7);
        int int38 = classReader26.readByte(0);
        int int40 = classReader26.readByte(90);
        java.lang.String str41 = classReader26.getSuperName();
        byte[] byteArray42 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = classReader26.getItem((int) (short) 25970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 202 + "'", int38 == 202);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17745");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1847716459", false);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        int int54 = classWriter34.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter34.visitAnnotation("", true);
        byte[] byteArray58 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        short short61 = classReader59.readShort((int) (byte) 0);
        int int63 = classReader59.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader59, 0);
        java.lang.String[] strArray66 = classReader59.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter1.visitMethod(2560, "L1028579140", "L59063553", "hi!", strArray66);
        methodVisitor67.visitIntInsn(0, 1751720204);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = methodVisitor67.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor67.visitParameterAnnotation((int) (short) 12336, "L929354784", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short61 + "' != '" + (short) -13570 + "'", short61 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2560 + "'", int63 == 2560);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor71);
    }

    @Test
    public void test17746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17746");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        java.lang.Object[] objArray20 = null;
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter23.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter23.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        int int55 = classWriter35.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter35.visitAnnotation("", true);
        byte[] byteArray59 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        short short62 = classReader60.readShort((int) (byte) 0);
        int int64 = classReader60.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader60, 0);
        java.lang.String[] strArray67 = classReader60.getInterfaces();
        classWriter23.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray67);
        methodVisitor17.visitFrame(8, 15, objArray20, (-889275714), (java.lang.Object[]) strArray67);
        methodVisitor17.visitInsn(256);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor17.visitLineNumber(872, label73);
        java.lang.String str75 = label73.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int76 = label73.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) -13570 + "'", short62 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2560 + "'", int64 == 2560);
        org.junit.Assert.assertNotNull(strArray67);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1118836799" + "'", str75, "L1118836799");
    }

    @Test
    public void test17747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17747");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int32 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 23);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter34.visitAnnotation("L1315079658", false);
        annotationVisitor37.visitEnum("L1427197779", "L101926124", "L209087084");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test17748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17748");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitMethodInsn((int) (short) -1, "hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor25.visitAnnotationDefault();
        annotationVisitor38.visitEnum("L495165811", "L1967552389", "\001");
        annotationVisitor38.visitEnd();
        annotationVisitor38.visitEnum("L1370665650", "L557566129", "L1298268074");
        annotationVisitor38.visit("L318647731", (java.lang.Object) 67764226);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test17749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17749");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        int int29 = classReader26.readUnsignedShort(23);
        java.lang.String str30 = classReader26.getSuperName();
        int int32 = classReader26.readByte(23);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test17750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17750");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn((int) 'a', (int) '4');
        methodVisitor16.visitMethodInsn((int) (short) 7, "L170800745", "L1629650344", "L964574936");
        methodVisitor16.visitMaxs(26729, (-21316096));
        methodVisitor16.visitEnd();
        methodVisitor16.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17751");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte(13);
        int int30 = classReader26.readInt(7);
        int int32 = classReader26.readInt((int) (short) 100);
        byte[] byteArray33 = classReader26.b;
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray33, 264704, 872);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2561 + "'", int30 == 2561);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 65536 + "'", int32 == 65536);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17752");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        int int32 = classWriter1.newField("L809431533", "L636727990", "L636727990");
        classWriter1.visitInnerClass("L275489687", "L728847777", "", (int) (byte) 1);
        classWriter1.visitOuterClass("L1368800213", "L202294627", "L871448529");
        classWriter1.visitOuterClass("L170800745", "L1099155219", "L1387910543");
        byte[] byteArray46 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L2037791973", "L517503447", "L1093182174");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(byteArray46);
    }

    @Test
    public void test17753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17753");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        classWriter1.visitSource("L809431533", "L2000102916");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField(875903244, "L1411298446", "L841843626", "L680573325", (java.lang.Object) "L1148690681");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("L1137416384", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor34.visitAnnotation("L75172810", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test17754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17754");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMaxs(9, (int) (byte) -1);
        methodVisitor16.visitTypeInsn((int) (short) 1025, "L1808974214");
        methodVisitor16.visitIincInsn((int) (short) 100, (int) (short) 17784);
        methodVisitor16.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17755");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(12592, (int) (short) 10);
        methodVisitor16.visitFieldInsn((int) (short) -13570, "L624707113", "L590888141", "L624707113");
        org.mockito.asm.Label label31 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        label31.info = strArray47;
        java.lang.String str50 = label31.toString();
        methodVisitor16.visitJumpInsn(24, label31);
        java.lang.String str52 = label31.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = label31.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L959737582" + "'", str50, "L959737582");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "L959737582" + "'", str52, "L959737582");
    }

    @Test
    public void test17756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17756");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L680573325", false);
        classWriter1.visitInnerClass("L1952894981", "L1386483578", "L9401833", 2560);
        int int38 = classWriter1.newMethod("L1013343419", "L1572438104", "L158524288", true);
        classWriter1.visitEnd();
        int int42 = classWriter1.newNameType("L2086098773", "");
        int int45 = classWriter1.newNameType("L1657847749", "L620399305");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 18 + "'", int42 == 18);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21 + "'", int45 == 21);
    }

    @Test
    public void test17757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17757");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        byte[] byteArray37 = classReader26.b;
        int int38 = classReader26.header;
        int int39 = classReader26.getAccess();
        long long41 = classReader26.readLong(7);
        short short43 = classReader26.readShort(0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10999411246848L + "'", long41 == 10999411246848L);
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) -13570 + "'", short43 == (short) -13570);
    }

    @Test
    public void test17758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17758");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("L745089702", false);
        byte[] byteArray40 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray40, 11, 43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
    }

    @Test
    public void test17759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17759");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        java.lang.String[] strArray12 = classReader9.getInterfaces();
        long long14 = classReader9.readLong(3);
        int int16 = classReader9.readByte(3);
        java.lang.String[] strArray17 = classReader9.getInterfaces();
        int int18 = classReader9.header;
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-4755801206503241983L) + "'", long14 == (-4755801206503241983L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 190 + "'", int16 == 190);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 78 + "'", int18 == 78);
    }

    @Test
    public void test17760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17760");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        byte[] byteArray32 = classReader26.b;
        int int33 = classReader26.getAccess();
        long long35 = classReader26.readLong(7);
        short short37 = classReader26.readShort((int) (byte) 10);
        java.lang.String[] strArray38 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader26.readByte(19506);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19506");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10999411246848L + "'", long35 == 10999411246848L);
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 256 + "'", short37 == (short) 256);
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test17761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17761");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newClass("L809431533");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter21.newMethod("", "", "hi!", true);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter21.visitMethod(0, "", "", "hi!", strArray35);
        int int41 = classWriter21.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter21.visitAnnotation("", true);
        byte[] byteArray45 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        short short48 = classReader46.readShort((int) (byte) 0);
        int int50 = classReader46.readUnsignedShort((int) ' ');
        org.mockito.asm.FieldVisitor fieldVisitor51 = classWriter1.visitField(8, "L110679537", "L999961130", "L1013343419", (java.lang.Object) int50);
        classWriter1.visitInnerClass("L838556944", "L295165602", "L1083553839", (int) (short) 12342);
        int int58 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter1.visitAnnotation("L646968272", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) -13570 + "'", short48 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2560 + "'", int50 == 2560);
        org.junit.Assert.assertNotNull(fieldVisitor51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor61);
    }

    @Test
    public void test17762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17762");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(31);
        classWriter1.visitInnerClass("L1435737877", "L2078535908", "L1657088012", 33);
        int int10 = classWriter1.newField("L302994160", "L374960086", "L1137416384");
        classWriter1.visitSource("", "L103257873");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
    }

    @Test
    public void test17763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17763");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        java.lang.Object obj39 = null;
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter19.visitField(9, "L1601838046", "L2062266913", "L680573325", obj39);
        classWriter19.visitSource("L636727990", "");
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        label49.info = strArray65;
        classWriter19.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(0, "L1132227206", "L535346328", "L2062266913", strArray65);
        byte[] byteArray70 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        java.lang.String str72 = classReader71.getSuperName();
        int int73 = classReader71.getAccess();
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader71, (int) (short) 4);
        int int77 = classReader71.readByte((int) (short) 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 49, 51, 50, 50, 50, 55, 50, 48, 54, 1, 0, 10, 76, 53, 51, 53, 51, 52, 54, 51, 50, 56, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 0, 10, 0, 2, 0, 11, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 12, 0, 0, 0, 2, 0, 13, 0, 1, 0, 14, 0, 0, 0, 4, 0, 6, 0, 7]");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test17764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17764");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        classWriter1.visitOuterClass("L488861128", "L745089702", "");
        int int8 = classWriter1.newNameType("L264795169", "L1429849124");
        classWriter1.visitSource("L1208026886", "L1930348385");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        int int38 = classWriter18.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter18.visitAnnotation("", true);
        byte[] byteArray42 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        int int45 = classReader43.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader43, (int) '4');
        int int49 = classReader43.readUnsignedShort(5);
        java.lang.String[] strArray50 = classReader43.getInterfaces();
        java.lang.String str51 = classReader43.getSuperName();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(classReader43, 909717811);
        java.lang.String[] strArray54 = classReader43.getInterfaces();
        classWriter1.visit(190, 26, "L1567000669", "L1491483291", "L1931763549", strArray54);
        java.lang.Class<?> wildcardClass56 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 51966 + "'", int45 == 51966);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test17765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17765");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        methodVisitor16.visitEnd();
        methodVisitor16.visitCode();
        methodVisitor16.visitIntInsn(48640, 223337);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor16.visitAnnotation("", false);
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L168931311" + "'", str75, "L168931311");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test17766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17766");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readByte(1);
        int int14 = classReader7.readUnsignedShort((int) (byte) 10);
        int int15 = classReader7.getAccess();
        byte[] byteArray16 = classReader7.b;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 254 + "'", int12 == 254);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 256 + "'", int14 == 256);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test17767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17767");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L2082140197");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17768");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int29 = classReader26.header;
        int int31 = classReader26.readInt(19);
        int int32 = classReader26.header;
        java.lang.String str33 = classReader26.getSuperName();
        byte[] byteArray34 = classReader26.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 90 + "'", int29 == 90);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1751720204 + "'", int31 == 1751720204);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17769");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 0);
        classWriter34.visitOuterClass("L4531833", "L1700698598", "L664111037");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(5);
        classWriter44.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int51 = classWriter44.newClass("");
        int int54 = classWriter44.newNameType("L1847716459", "");
        classWriter44.visitEnd();
        byte[] byteArray56 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray56);
        int int59 = classReader57.readByte((int) (byte) 0);
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter34.visitField(512, "L1372769316", "L1019177379", "L9401833", (java.lang.Object) int59);
        classWriter34.visitOuterClass("L220092028", "L566306334", "L1105983590");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter34.visitAnnotation("L313281740", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 202 + "'", int59 == 202);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor67);
    }

    @Test
    public void test17770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17770");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(1793);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter38.visitAnnotation("L838653747", true);
        int int44 = classWriter38.newNameType("L1058109766", "L1256567156");
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter38, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
    }

    @Test
    public void test17771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17771");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        int int14 = classWriter11.newNameType("L242883751", "L1009580268");
        int int19 = classWriter11.newMethod("L149220781", "L624707113", "L419471195", false);
        classWriter11.visitOuterClass("L782306960", "L1292845306", "L306461258");
        classWriter11.visitSource("L571285779", "L495165811");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter11.visitAnnotation("L1712389562", false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test17772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17772");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(115);
        classWriter1.visitSource("L785032616", "L2137693765");
    }

    @Test
    public void test17773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17773");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String str37 = classReader26.getSuperName();
        byte[] byteArray38 = classReader26.b;
        long long40 = classReader26.readLong(78);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 12598);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader26, 768);
        int int46 = classWriter44.newClass("L415508906");
        classWriter44.visitInnerClass("L1702939157", "L3043237", "L1661591349", 57174305);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 7296234291912270196L + "'", long40 == 7296234291912270196L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 11 + "'", int46 == 11);
    }

    @Test
    public void test17774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17774");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int28 = classWriter1.newNameType("L809431533", "L426422007");
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
    }

    @Test
    public void test17775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17775");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readUnsignedShort(1);
        long long35 = classReader26.readLong(7);
        int int37 = classReader26.readInt((int) (short) 3);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 26729);
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        int int42 = classReader26.readByte(30);
        int int44 = classReader26.readUnsignedShort(24);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        int int67 = classWriter47.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter47.visitAnnotation("", true);
        byte[] byteArray71 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        short short74 = classReader72.readShort((int) (byte) 0);
        int int76 = classReader72.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter(classReader72, 0);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(classReader72, 0);
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter(classReader72, (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(classReader72, 24);
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(classReader72, 190);
        int int88 = classReader72.getItem((int) (short) 3);
        char[] charArray92 = new char[] { 'a', 'a' };
        java.lang.String str93 = classReader72.readUTF8(100, charArray92);
        java.lang.String str94 = classReader26.readUTF8(100, charArray92);
        int int95 = classReader26.getAccess();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10999411246848L + "'", long35 == 10999411246848L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1107296256) + "'", int37 == (-1107296256));
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 256 + "'", int44 == 256);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) -13570 + "'", short74 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2560 + "'", int76 == 2560);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 17 + "'", int88 == 17);
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[a, a]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test17776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17776");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = annotationVisitor85.visitAnnotation("L552318631", "L295165602");
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = annotationVisitor85.visitAnnotation("L975788322", "L1642648730");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1074060404" + "'", str75, "L1074060404");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test17777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17777");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitIincInsn((int) (byte) 10, 6);
        methodVisitor16.visitMultiANewArrayInsn("L1013343419", 1698786926);
        methodVisitor16.visitIincInsn(0, (-1107296256));
        methodVisitor16.visitVarInsn((int) (short) -1, 190);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor16.visitAnnotation("L1291288126", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test17778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17778");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int10 = classReader9.header;
        short short12 = classReader9.readShort((int) (byte) 0);
        java.lang.String[] strArray13 = classReader9.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter16.newMethod("", "", "hi!", true);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter16.visitMethod(0, "", "", "hi!", strArray30);
        int int36 = classWriter16.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter16.visitAnnotation("", true);
        byte[] byteArray40 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        int int43 = classReader41.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader41, (int) '4');
        int int47 = classReader41.readUnsignedShort(5);
        java.lang.String[] strArray48 = classReader41.getInterfaces();
        int int49 = classReader41.header;
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        int int72 = classWriter52.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter52.visitAnnotation("", true);
        byte[] byteArray76 = classWriter52.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        int int78 = classReader77.getAccess();
        byte[] byteArray79 = classReader77.b;
        byte[] byteArray80 = classReader77.b;
        byte[] byteArray81 = classReader77.b;
        java.lang.String[] strArray82 = classReader77.getInterfaces();
        char[] charArray89 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj90 = classReader77.readConst((int) (short) 4, charArray89);
        java.lang.String str91 = classReader41.readUTF8(33, charArray89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = classReader9.readUTF8(101, charArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 78 + "'", int10 == 78);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) -13570 + "'", short12 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 51966 + "'", int43 == 51966);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 90 + "'", int49 == 90);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "\001 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "\001 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[\001,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj90 + "' != '" + "" + "'", obj90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\001" + "'", str91, "\001");
    }

    @Test
    public void test17779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17779");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int25 = classWriter20.newMethod("", "", "hi!", true);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter32.newConst((java.lang.Object) (short) 1);
        classWriter32.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        classWriter43.visitOuterClass("hi!", "", "");
        int int55 = classWriter43.newNameType("hi!", "hi!");
        int int58 = classWriter43.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(0);
        int int70 = classWriter65.newMethod("", "", "hi!", true);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter65.visitMethod(0, "", "", "hi!", strArray79);
        classWriter43.visit(5, 6, "", "", "", strArray79);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter32.visitMethod((int) (short) 0, "", "", "", strArray79);
        classWriter20.visit(12592, 202, "L1004763019", "L1368708044", "L1208026886", strArray79);
        classWriter1.visit((int) (short) 26729, 0, "L1685807285", "L1442680030", "L1566658664", strArray79);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNotNull(methodVisitor82);
    }

    @Test
    public void test17780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17780");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIincInsn((int) (short) 1, 15);
        org.mockito.asm.Label label31 = new org.mockito.asm.Label();
        java.lang.String str32 = label31.toString();
        methodVisitor25.visitJumpInsn(0, label31);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label55 = new org.mockito.asm.Label();
        methodVisitor51.visitLabel(label55);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter58.newConst((java.lang.Object) (short) 1);
        classWriter58.visitSource("", "");
        label55.info = "";
        int int65 = label55.getOffset();
        java.lang.String str66 = label55.toString();
        java.lang.Object obj67 = label55.info;
        int int68 = label55.getOffset();
        java.lang.Object obj69 = null;
        label55.info = obj69;
        methodVisitor25.visitJumpInsn(0, label55);
        org.mockito.asm.Label label72 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitLabel(label72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor26);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "L1887098840" + "'", str32, "L1887098840");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "L2002695029" + "'", str66, "L2002695029");
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + "" + "'", obj67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test17781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17781");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        label21.info = strArray37;
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter16.visitMethod((int) (short) 100, "", "hi!", "", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(10, "L809431533", "L2062266913", "", strArray37);
        methodVisitor41.visitMethodInsn(2560, "L1223439170", "L1368708044", "L1847716459");
        methodVisitor41.visitIincInsn(13876, (int) (short) -13570);
        methodVisitor41.visitMultiANewArrayInsn("", 3072);
        methodVisitor41.visitVarInsn(740402, 47806);
        methodVisitor41.visitIntInsn(12848, 69);
        methodVisitor41.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor63 = methodVisitor41.visitParameterAnnotation(115, "L936297181", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
    }

    @Test
    public void test17782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17782");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        methodVisitor16.visitCode();
        methodVisitor16.visitEnd();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        int int34 = classWriter29.newMethod("", "", "hi!", true);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter29.visitMethod(0, "", "", "hi!", strArray43);
        methodVisitor44.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label48 = new org.mockito.asm.Label();
        methodVisitor44.visitLabel(label48);
        java.lang.Object obj50 = label48.info;
        java.lang.Object obj51 = label48.info;
        java.lang.Object obj52 = label48.info;
        java.lang.Object obj53 = label48.info;
        methodVisitor16.visitLabel(label48);
        java.lang.Object obj55 = label48.info;
        int int56 = label48.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
    }

    @Test
    public void test17783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17783");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-889275714));
        int int3 = classWriter1.newUTF8("L863761147");
        classWriter1.visitInnerClass("L1296991394", "L1502885011", "", 27749);
        int int10 = classWriter1.newUTF8("L332181902");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
    }

    @Test
    public void test17784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17784");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray36, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray36, (int) (short) 12342, 1034);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
    }

    @Test
    public void test17785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17785");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1221801792", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int18 = classWriter13.newMethod("", "", "hi!", true);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter13.visitMethod(0, "", "", "hi!", strArray27);
        int int33 = classWriter13.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter13.visitAnnotation("", true);
        byte[] byteArray37 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        short short40 = classReader38.readShort((int) (byte) 0);
        int int42 = classReader38.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader38, 0);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        classWriter1.visit(8, 0, "L1221801792", "L1221801792", "L680573325", strArray45);
        int int49 = classWriter1.newNameType("L1606942677", "L957324124");
        int int52 = classWriter1.newNameType("L1368708044", "L916243867");
        byte[] byteArray53 = classWriter1.toByteArray();
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("L886630257", "L220092028", "L2126914769");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -13570 + "'", short40 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2560 + "'", int42 == 2560);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 14, 3, 0, 0, 0, 1, 1, 0, 11, 76, 49, 50, 50, 49, 56, 48, 49, 55, 57, 50, 7, 0, 2, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 4, 1, 0, 11, 76, 49, 54, 48, 54, 57, 52, 50, 54, 55, 55, 1, 0, 10, 76, 57, 53, 55, 51, 50, 52, 49, 50, 52, 12, 0, 6, 0, 7, 1, 0, 11, 76, 49, 51, 54, 56, 55, 48, 56, 48, 52, 52, 1, 0, 10, 76, 57, 49, 54, 50, 52, 51, 56, 54, 55, 12, 0, 9, 0, 10, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 12, 0, 0, 0, 2, 0, 2, 0, 13, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test17786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17786");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        classWriter1.visitOuterClass("L680573325", "L680573325", "L1847716459");
        int int40 = classWriter1.newMethod("L590888141", "L959574331", "L897597087", true);
        classWriter1.visitSource("L640658268", "L506036662");
        int int45 = classWriter1.newUTF8("L835945353");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 18 + "'", int40 == 18);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20 + "'", int45 == 20);
    }

    @Test
    public void test17787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17787");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray9, 0, (int) '#');
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 100);
        java.lang.String str15 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        int int38 = classWriter18.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter18.visitAnnotation("", true);
        byte[] byteArray42 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        int int45 = classReader43.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader43, (int) '4');
        int int49 = classReader43.readUnsignedShort(5);
        int int50 = classReader43.getAccess();
        int int52 = classReader43.readByte(0);
        java.lang.String[] strArray53 = classReader43.getInterfaces();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter56.visitAnnotation("", true);
        byte[] byteArray80 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        short short83 = classReader81.readShort((int) (byte) 0);
        int int85 = classReader81.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter87 = new org.mockito.asm.ClassWriter(classReader81, 0);
        org.mockito.asm.ClassWriter classWriter89 = new org.mockito.asm.ClassWriter(classReader81, 0);
        int int91 = classReader81.readByte((int) (byte) 10);
        char[] charArray96 = new char[] { '#', '4', '4' };
        java.lang.String str97 = classReader81.readUTF8(100, charArray96);
        java.lang.String str98 = classReader43.readUTF8(25, charArray96);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj99 = classReader12.readConst(1886677359, charArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1886677359");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 51966 + "'", int45 == 51966);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 202 + "'", int52 == 202);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short83 + "' != '" + (short) -13570 + "'", short83 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2560 + "'", int85 == 2560);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "hi!" + "'", str98, "hi!");
    }

    @Test
    public void test17788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17788");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        short short38 = classReader26.readShort(22);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        byte[] byteArray41 = classWriter40.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray41, 132, 22121);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 3072 + "'", short38 == (short) 3072);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test17789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17789");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = classReader53.readUnsignedShort(1929445385);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
    }

    @Test
    public void test17790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17790");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitIincInsn((int) (byte) 10, 6);
        methodVisitor16.visitCode();
        methodVisitor16.visitMethodInsn(4, "L1413182688", "L541901146", "L1004763019");
        methodVisitor16.visitMaxs((int) '#', 872);
        methodVisitor16.visitInsn(2);
        methodVisitor16.visitIincInsn(13876, 103);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17791");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitSource("L535346328", "L535346328");
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter1.visitAnnotation("L1928858580", false);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L2133586349", "L2010256722", "L110679537", (int) (short) 100);
        classWriter1.visitOuterClass("L393735738", "L869086645", "L815303353");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor66);
    }

    @Test
    public void test17792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17792");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        classWriter1.visitOuterClass("L1086414642", "L1789245551", "L428215077");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter1.visitAnnotation("L1726462062", true);
        classWriter1.visitOuterClass("L95180820", "L343526401", "L1877128533");
        int int29 = classWriter1.newClass("L523453504");
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter35.visitAnnotation("L579675851", true);
        byte[] byteArray39 = classWriter35.toByteArray();
        byte[] byteArray40 = classWriter35.toByteArray();
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        int int73 = classWriter53.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter53.visitAnnotation("", true);
        byte[] byteArray77 = classWriter53.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        short short80 = classReader78.readShort((int) (byte) 0);
        int int82 = classReader78.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(classReader78, 0);
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(classReader78, 0);
        int int88 = classReader78.getItem(2);
        java.lang.String[] strArray89 = classReader78.getInterfaces();
        classWriter46.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray89);
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter35.visitMethod(0, "L339402249", "L1423401218", "L918742398", strArray89);
        classWriter35.visitOuterClass("L59063553", "L1574467454", "L2077953380");
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = classWriter35.visitAnnotation("", false);
        org.mockito.asm.FieldVisitor fieldVisitor99 = classWriter1.visitField((int) (short) 1280, "L168234180", "L1307358075", "L226569229", (java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 18 + "'", int29 == 18);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 3, 1, 0, 10, 76, 53, 55, 57, 54, 55, 53, 56, 53, 49, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short80 + "' != '" + (short) -13570 + "'", short80 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2560 + "'", int82 == 2560);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 14 + "'", int88 == 14);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor98);
        org.junit.Assert.assertNotNull(fieldVisitor99);
    }

    @Test
    public void test17793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17793");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIincInsn((int) 'a', (int) (byte) 100);
        methodVisitor25.visitFieldInsn(19, "L1215739340", "L2012296629", "L389458669");
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        methodVisitor50.visitCode();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        methodVisitor68.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        methodVisitor68.visitLabel(label72);
        java.lang.String str74 = label72.toString();
        label72.info = ' ';
        java.lang.Object obj77 = label72.info;
        methodVisitor50.visitLabel(label72);
        java.lang.String str79 = label72.toString();
        int int80 = label72.getOffset();
        java.lang.String str81 = label72.toString();
        methodVisitor25.visitLabel(label72);
        methodVisitor25.visitCode();
        methodVisitor25.visitIincInsn((int) (short) 0, 27);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L1630981215" + "'", str74, "L1630981215");
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + ' ' + "'", obj77, ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L1630981215" + "'", str79, "L1630981215");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L1630981215" + "'", str81, "L1630981215");
    }

    @Test
    public void test17794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17794");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1595201366");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17795");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int5 = classWriter1.newUTF8("hi!");
        int int10 = classWriter1.newMethod("hi!", "", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L284303737", true);
        classWriter1.visitEnd();
        int int16 = classWriter1.newUTF8("L1769475365");
        org.mockito.asm.Label label21 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(5);
        classWriter23.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray28 = classWriter23.toByteArray();
        label21.info = byteArray28;
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray28);
        int int32 = classReader30.getItem((int) (byte) 0);
        java.lang.String[] strArray33 = classReader30.getInterfaces();
        int int34 = classReader30.header;
        int int36 = classReader30.readByte(78);
        java.lang.String str37 = classReader30.getSuperName();
        long long39 = classReader30.readLong(61);
        java.lang.String[] strArray40 = classReader30.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(16842755, "L1482145872", "L1766899022", "L1302196485", strArray40);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 78 + "'", int34 == 78);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4298465067429747L + "'", long39 == 4298465067429747L);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor41);
    }

    @Test
    public void test17796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17796");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        int int52 = classWriter1.newNameType("L897597087", "L579675851");
        int int57 = classWriter1.newMethod("L590888141", "L680573325", "", false);
        classWriter1.visitOuterClass("L332181902", "L1889100462", "L172254079");
        int int63 = classWriter1.newConst((java.lang.Object) "L1491483291");
        classWriter1.visitInnerClass("L455650823", "L1413182688", "L1511400204", 163);
        org.mockito.asm.Attribute attribute69 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 23 + "'", int57 == 23);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 30 + "'", int63 == 30);
    }

    @Test
    public void test17797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17797");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        label34.info = strArray50;
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter29.visitMethod((int) (short) 100, "", "hi!", "", strArray50);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter56.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter56.visitMethod(8, "hi!", "", "", strArray78);
        methodVisitor25.visitFrame(7, (int) (byte) 0, (java.lang.Object[]) strArray50, (int) (short) -1, (java.lang.Object[]) strArray78);
        methodVisitor25.visitInsn(78);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs(41, (int) (short) 12848);
        methodVisitor25.visitMultiANewArrayInsn("L81436625", 808597809);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test17798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17798");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitOuterClass("L1847716459", "L275489687", "L680573325");
        classWriter1.visitSource("L75359331", "L1930348385");
        classWriter1.visitEnd();
        byte[] byteArray31 = classWriter1.toByteArray();
        int int35 = classWriter1.newField("L1490365060", "L1287376048", "L1386483578");
        int int40 = classWriter1.newMethod("", "L639032967", "L1058109766", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 27 + "'", int35 == 27);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 31 + "'", int40 == 31);
    }

    @Test
    public void test17799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17799");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        int int25 = classWriter1.newField("L1013343419", "L85690983", "L620334303");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1038192670", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test17800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17800");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(10);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray2, (int) (short) 4, 7);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        int int35 = classReader33.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader33, (int) '4');
        long long39 = classReader33.readLong(2);
        int int40 = classReader33.getAccess();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader33, (int) (byte) 1);
        long long44 = classReader33.readLong(8);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        int int67 = classWriter47.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter47.visitAnnotation("", true);
        byte[] byteArray71 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        java.lang.String str73 = classReader72.getSuperName();
        char[] charArray79 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj80 = classReader72.readConst(6, charArray79);
        char[] charArray88 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str89 = classReader72.readUTF8((int) '#', charArray88);
        java.lang.Object obj90 = classReader33.readConst(6, charArray88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = classReader5.readClass((int) (short) 25857, charArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25857");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 51966 + "'", int35 == 51966);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-4990551337079930870L) + "'", long39 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2815849279193089L + "'", long44 == 2815849279193089L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj80 + "' != '" + "\001" + "'", obj80, "\001");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "\001444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "\001444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[\001, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\000" + "'", str89, "\000");
        org.junit.Assert.assertEquals("'" + obj90 + "' != '" + "\001" + "'", obj90, "\001");
    }

    @Test
    public void test17801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17801");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitTypeInsn(26729, "L828384535");
        methodVisitor16.visitTypeInsn(12336, "L1683931086");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17802");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        int int11 = classWriter1.newClass("L59063553");
        int int13 = classWriter1.newUTF8("L1936126716");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        methodVisitor30.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor30.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor36.visitArray("L831655905");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor36.visitArray("L1769475365");
        int int41 = classWriter1.newConst((java.lang.Object) "L1769475365");
        int int45 = classWriter1.newField("L1933429540", "L1902476307", "L2142211483");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 14 + "'", int45 == 14);
    }

    @Test
    public void test17803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17803");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter1.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort(40);
        int int30 = classReader26.readInt(22);
        int int32 = classReader26.getItem(1);
        int int34 = classReader26.readInt(26);
        int int36 = classReader26.readByte(14);
        long long38 = classReader26.readLong((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 50, 50, 51, 52, 51, 57, 49, 55, 48, 7, 0, 9, 1, 0, 11, 76, 50, 48, 49, 52, 56, 48, 54, 52, 48, 52, 7, 0, 11, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 7, 0, 14, 1, 0, 11, 76, 49, 53, 48, 53, 56, 54, 54, 50, 55, 50, 12, 0, 9, 0, 16, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 18, 0, 0, 0, 4, 0, 15, 0, 17, 0, 19, 0, 0, 0, 10, 0, 1, 0, 10, 0, 12, 0, 13, 10, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3072 + "'", int28 == 3072);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 201326848 + "'", int30 == 201326848);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 11 + "'", int32 == 11);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 51052546 + "'", int34 == 51052546);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3976739155386500864L + "'", long38 == 3976739155386500864L);
    }

    @Test
    public void test17804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17804");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMaxs(9, (int) (byte) -1);
        methodVisitor16.visitIincInsn(8, (int) ' ');
        methodVisitor16.visitInsn(1793);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        methodVisitor49.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label53 = new org.mockito.asm.Label();
        methodVisitor49.visitLabel(label53);
        methodVisitor16.visitLabel(label53);
        methodVisitor16.visitMethodInsn(15, "L1268109548", "L71945869", "L1541209207");
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = methodVisitor16.visitAnnotation("L639032967", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = methodVisitor16.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor68 = methodVisitor16.visitParameterAnnotation(2629, "L653070942", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(annotationVisitor64);
    }

    @Test
    public void test17805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17805");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(27);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L1669180034", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
    }

    @Test
    public void test17806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17806");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter19.newConst((java.lang.Object) (short) 1);
        classWriter19.visitSource("", "L2000102916");
        int int29 = classWriter19.newMethod("", "L2062266913", "L809431533", false);
        methodVisitor17.visitLdcInsn((java.lang.Object) "L2062266913");
        methodVisitor17.visitVarInsn((int) (short) 26729, 875903244);
        methodVisitor17.visitFieldInsn(163, "", "L886630257", "L1627366687");
        methodVisitor17.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
    }

    @Test
    public void test17807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17807");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L488861128", "L728847777", "L1287376048");
        classWriter1.visitEnd();
        int int67 = classWriter1.newClass("L590888141");
        classWriter1.visitOuterClass("L590888141", "", "");
        classWriter1.visitInnerClass("L1855754182", "L1086414642", "L680573325", 458753);
        classWriter1.visitSource("L181903634", "L1847716459");
        org.mockito.asm.FieldVisitor fieldVisitor85 = classWriter1.visitField(78, "L901287164", "L1036976475", "L1828310149", (java.lang.Object) "L1735602342");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = fieldVisitor85.visitAnnotation("L2032268392", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = fieldVisitor85.visitAnnotation("L422252315", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = fieldVisitor85.visitAnnotation("L1973775324", true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 14 + "'", int67 == 14);
        org.junit.Assert.assertNotNull(fieldVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test17808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17808");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter19.newConst((java.lang.Object) (short) 1);
        classWriter19.visitSource("", "L2000102916");
        int int29 = classWriter19.newMethod("", "L2062266913", "L809431533", false);
        methodVisitor17.visitLdcInsn((java.lang.Object) "L2062266913");
        methodVisitor17.visitFieldInsn((-1107296256), "L999961130", "L1435737877", "L1110710417");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor17.visitAnnotationDefault();
        methodVisitor17.visitIntInsn(9, (int) (short) 3);
        methodVisitor17.visitTypeInsn(6, "L841843626");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor17.visitAnnotationDefault();
        methodVisitor17.visitFieldInsn(31, "L1307358075", "", "L933225102");
        methodVisitor17.visitMethodInsn(14, "L168484184", "L1315470340", "L71360886");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = methodVisitor17.visitAnnotation("L1700698598", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = methodVisitor17.visitAnnotation("L897597087", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor59);
    }

    @Test
    public void test17809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17809");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = fieldVisitor31.visitAnnotation("L590888141", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor31.visitAnnotation("L101926124", true);
        fieldVisitor31.visitEnd();
        org.mockito.asm.Attribute attribute39 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor31.visitAttribute(attribute39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test17810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17810");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitInsn(22);
        methodVisitor16.visitInsn(201326848);
        methodVisitor16.visitMultiANewArrayInsn("L1973775324", 170);
        methodVisitor16.visitFieldInsn(62, "L2000102916", "L829120697", "L170370676");
        methodVisitor16.visitMethodInsn(95, "L517503447", "L1101713360", "L2147079915");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17811");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        java.lang.String[] strArray30 = classReader26.getInterfaces();
        java.lang.String str31 = classReader26.getSuperName();
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        java.lang.String str33 = classReader26.getSuperName();
        java.lang.String[] strArray34 = classReader26.getInterfaces();
        int int35 = classReader26.header;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 90 + "'", int35 == 90);
    }

    @Test
    public void test17812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17812");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L531876647", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor9.visitArray("L1510326766");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = annotationVisitor9.visitAnnotation("L2039587225", "L1238209773");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor14);
    }

    @Test
    public void test17813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17813");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        byte[] byteArray32 = classWriter31.toByteArray();
        classWriter31.visitEnd();
        classWriter31.visitInnerClass("L46285906", "", "", 167772672);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test17814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17814");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        short short70 = classReader68.readShort((int) (byte) 0);
        int int72 = classReader68.readUnsignedShort((int) ' ');
        long long74 = classReader68.readLong((int) '#');
        int int76 = classReader68.getItem(0);
        java.lang.String str77 = classReader68.getSuperName();
        short short79 = classReader68.readShort(13);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader68, (int) (short) 0);
        org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter1.visitField((int) (short) -13570, "L529122729", "L75359331", "L2037791973", (java.lang.Object) (short) 0);
        fieldVisitor82.visitEnd();
        fieldVisitor82.visitEnd();
        fieldVisitor82.visitEnd();
        fieldVisitor82.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) -13570 + "'", short70 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2560 + "'", int72 == 2560);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1126999590795363L + "'", long74 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + short79 + "' != '" + (short) 1792 + "'", short79 == (short) 1792);
        org.junit.Assert.assertNotNull(fieldVisitor82);
    }

    @Test
    public void test17815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17815");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        byte[] byteArray32 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        java.lang.String str34 = classReader33.getSuperName();
        int int35 = classReader33.header;
        java.lang.String[] strArray36 = classReader33.getInterfaces();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 90 + "'", int35 == 90);
        org.junit.Assert.assertNotNull(strArray36);
    }

    @Test
    public void test17816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17816");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L75359331", false);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter11.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod(3, "hi!", "hi!", "hi!", strArray33);
        classWriter1.visit(23, 18, "L1223439170", "L1178822359", "L665737352", strArray33);
        classWriter1.visitOuterClass("L1162526488", "L2039587225", "L1497855016");
        int int42 = classWriter1.newUTF8("L275489687");
        int int44 = classWriter1.newConst((java.lang.Object) 17784);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(5);
        classWriter51.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int58 = classWriter51.newClass("");
        int int61 = classWriter51.newNameType("L1847716459", "");
        classWriter51.visitEnd();
        byte[] byteArray63 = classWriter51.toByteArray();
        int int68 = classWriter51.newMethod("L680573325", "\001", "L1847716459", false);
        classWriter51.visitOuterClass("L1028510473", "L1111133036", "");
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(0);
        int int84 = classWriter79.newMethod("", "", "hi!", true);
        java.lang.String[] strArray93 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter79.visitMethod(0, "", "", "hi!", strArray93);
        classWriter51.visit((int) (short) 2, (int) (short) 0, "L361667728", "L853819367", "L1914124641", strArray93);
        classWriter1.visit((int) (short) 779, 17784, "L2039247828", "L978355759", "L1922475220", strArray93);
        int int98 = classWriter1.newUTF8("L1428075099");
        byte[] byteArray99 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 15 + "'", int44 == 15);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 12 + "'", int68 == 12);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(methodVisitor94);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 21 + "'", int98 == 21);
        org.junit.Assert.assertNotNull(byteArray99);
    }

    @Test
    public void test17817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17817");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(12592, (int) (short) 10);
        methodVisitor16.visitFieldInsn((int) (short) -13570, "L624707113", "L590888141", "L624707113");
        methodVisitor16.visitTypeInsn((int) '4', "");
        methodVisitor16.visitIincInsn(48640, 0);
        methodVisitor16.visitMultiANewArrayInsn("L806334844", (int) (short) 12848);
        methodVisitor16.visitCode();
        methodVisitor16.visitVarInsn(0, 103);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17818");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L172254079", (-889275714));
        methodVisitor16.visitIntInsn(57174305, 12);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMultiANewArrayInsn("L1512038139", 67174410);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor16.visitAnnotation("L1046069948", false);
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test17819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17819");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader9, 1793);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader9, 1698786926);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(classReader9, (int) (short) 1);
        byte[] byteArray16 = classReader9.b;
        byte[] byteArray17 = classReader9.b;
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test17820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17820");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte(13);
        int int30 = classReader26.readInt(7);
        int int32 = classReader26.readInt((int) (short) 100);
        byte[] byteArray33 = classReader26.b;
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray33, 65792, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2561 + "'", int30 == 2561);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 65536 + "'", int32 == 65536);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17821");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.readInt(19);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, 16);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        int int41 = classWriter38.newNameType("L1431625085", "L1734325664");
        classWriter38.visitInnerClass("L46285906", "L1272042743", "", 943273779);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1751720204 + "'", int34 == 1751720204);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
    }

    @Test
    public void test17822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17822");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1292845306", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("L1715729238", true);
        int int33 = classWriter1.newUTF8("L1416493109");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label45 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        label45.info = strArray61;
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter40.visitMethod((int) (short) 100, "", "hi!", "", strArray61);
        classWriter40.visitInnerClass("L1847716459", "", "L680573325", 9);
        int int71 = classWriter40.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter40.visitAnnotation("L1967552389", true);
        int int76 = classWriter40.newUTF8("L361667728");
        int int78 = classWriter40.newConst((java.lang.Object) "L728847777");
        org.mockito.asm.FieldVisitor fieldVisitor79 = classWriter1.visitField(842151478, "L693317255", "L1560688489", "L415508906", (java.lang.Object) "L728847777");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(fieldVisitor79);
    }

    @Test
    public void test17823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17823");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        int int11 = classWriter1.newClass("L59063553");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        int int16 = classWriter1.newConst((java.lang.Object) (short) 1);
        int int18 = classWriter1.newUTF8("L85145148");
        classWriter1.visitEnd();
        int int23 = classWriter1.newField("L536945347", "L1711625925", "L888522535");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
    }

    @Test
    public void test17824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17824");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 56);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader26.getItem(90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 90");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test17825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17825");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readByte(8);
        int int37 = classReader26.header;
        java.lang.String str38 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 17784);
        byte[] byteArray41 = classWriter40.toByteArray();
        int int43 = classWriter40.newConst((java.lang.Object) "L92335760");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 90 + "'", int37 == 90);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11 + "'", int43 == 11);
    }

    @Test
    public void test17826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17826");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        methodVisitor25.visitIntInsn((int) (byte) 10, 1751720204);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitAnnotation("L755949095", true);
        methodVisitor25.visitFieldInsn(104, "L59063553", "L749737959", "L620334303");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        methodVisitor64.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label68 = new org.mockito.asm.Label();
        methodVisitor64.visitLabel(label68);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter71.newConst((java.lang.Object) (short) 1);
        classWriter71.visitSource("", "");
        label68.info = "";
        int int78 = label68.getOffset();
        java.lang.String str79 = label68.toString();
        java.lang.Object obj80 = label68.info;
        int int81 = label68.getOffset();
        int int82 = label68.getOffset();
        methodVisitor25.visitLineNumber(1694564377, label68);
        methodVisitor25.visitMultiANewArrayInsn("L665737352", 12);
        methodVisitor25.visitInsn((-21316096));
        methodVisitor25.visitInsn(78);
        methodVisitor25.visitInsn(16780108);
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor25.visitAnnotation("L1235861457", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L1686568357" + "'", str79, "L1686568357");
        org.junit.Assert.assertEquals("'" + obj80 + "' != '" + "" + "'", obj80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test17827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17827");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L1132227206", false);
        classWriter1.visitOuterClass("L1611208075", "L1928858580", "L1715729238");
        classWriter1.visitEnd();
        int int43 = classWriter1.newField("L1850773126", "L607357044", "L6818069");
        classWriter1.visitOuterClass("L2092324085", "L1040781772", "L1790809036");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
    }

    @Test
    public void test17828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17828");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray25, 0, 202);
        int int31 = classReader29.readInt((int) (short) 100);
        int int32 = classReader29.header;
        int int34 = classReader29.readInt(20);
        java.lang.String str35 = classReader29.getSuperName();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader29, (-1161953280));
        classWriter37.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65536 + "'", int31 == 65536);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1763773440 + "'", int34 == 1763773440);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test17829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17829");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L1075066296", "L426422007", "L1589078908");
        methodVisitor25.visitMethodInsn((int) 'a', "L1283200231", "L426422007", "L110679537");
        methodVisitor25.visitInsn(51);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitEnd();
        methodVisitor25.visitCode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test17830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17830");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        java.lang.String str38 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader26, 16);
        int int41 = classReader26.getAccess();
        int int42 = classReader26.header;
        java.lang.String[] strArray43 = classReader26.getInterfaces();
        java.lang.String str44 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int46 = classReader26.readByte(513);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 513");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 90 + "'", int42 == 90);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test17831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17831");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int29 = classWriter27.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter27.visitMethod(8, "hi!", "", "", strArray49);
        classWriter27.visitOuterClass("hi!", "", "");
        classWriter27.visitEnd();
        java.lang.String[] strArray64 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter27.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter1.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray64);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter1.visitAnnotation("L1004763019", false);
        classWriter1.visitSource("", "L1715729238");
        classWriter1.visitSource("L1934292714", "L1010142936");
        classWriter1.visitInnerClass("L26905596", "L1914204888", "L1076423885", 141);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
    }

    @Test
    public void test17832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17832");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter33.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter33.visitMethod(8, "hi!", "", "", strArray55);
        methodVisitor57.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor57.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        methodVisitor79.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        methodVisitor79.visitLabel(label83);
        methodVisitor57.visitJumpInsn((-1), label83);
        methodVisitor25.visitLabel(label83);
        methodVisitor25.visitCode();
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor25.visitAnnotation("L30632432", true);
        annotationVisitor91.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test17833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17833");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        int int32 = classReader26.readByte(29);
        java.lang.String str33 = classReader26.getSuperName();
        byte[] byteArray34 = classReader26.b;
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17834");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitInsn(202);
        methodVisitor16.visitIincInsn(26, 27);
        methodVisitor16.visitFieldInsn(3, "\001", "L1757134939", "L612243917");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitInsn(2563);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor30);
    }

    @Test
    public void test17835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17835");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("L745089702", false);
        int int42 = classWriter1.newNameType("L3043237", "L172254079");
        classWriter1.visitInnerClass("L976656549", "L911323346", "L1283200231", (int) (short) 7);
        classWriter1.visitSource("L359702205", "L573840470");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 19 + "'", int42 == 19);
    }

    @Test
    public void test17836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17836");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        int int37 = classReader26.readInt((int) (byte) 100);
        int int39 = classReader26.getItem(0);
        short short41 = classReader26.readShort(27);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 65536 + "'", int37 == 65536);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 2816 + "'", short41 == (short) 2816);
    }

    @Test
    public void test17837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17837");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String str37 = classReader26.getSuperName();
        int int39 = classReader26.getItem(0);
        java.lang.String str40 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test17838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17838");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader11, 16);
        int int15 = classWriter13.newUTF8("L978646804");
        classWriter13.visitOuterClass("L848291253", "L457743322", "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
    }

    @Test
    public void test17839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17839");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        classWriter13.visitSource("", "L2000102916");
        int int23 = classWriter13.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        classWriter30.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter30.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter44.newConst((java.lang.Object) (byte) 0);
        int int47 = classWriter30.newConst((java.lang.Object) int46);
        int int51 = classWriter30.newField("hi!", "", "L809431533");
        java.lang.String[] strArray61 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter30.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray61);
        classWriter13.visit(5, (int) ' ', "L2000102916", "L636727990", "L2062266913", strArray61);
        int int64 = classWriter1.newConst((java.lang.Object) 5);
        int int68 = classWriter1.newField("L1028579140", "", "L2062266913");
        int int70 = classWriter1.newConst((java.lang.Object) (short) 17784);
        classWriter1.visitOuterClass("L275489687", "L415508906", "L1111133036");
        classWriter1.visitInnerClass("L1796582550", "L1251858521", "L1169051836", (int) (short) 9);
        org.mockito.asm.Attribute attribute80 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
    }

    @Test
    public void test17840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17840");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        int int39 = classWriter19.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter19.visitAnnotation("", true);
        byte[] byteArray43 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        short short46 = classReader44.readShort((int) (byte) 0);
        int int48 = classReader44.readUnsignedShort((int) ' ');
        long long50 = classReader44.readLong((int) '#');
        int int52 = classReader44.getItem(0);
        java.lang.String str53 = classReader44.getSuperName();
        short short55 = classReader44.readShort(13);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(classReader44, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(classReader44, 51966);
        classWriter59.visitSource("L1315079658", "L1202930291");
        classWriter59.visitInnerClass("L124447396", "L707293021", "L495165811", 52);
        org.mockito.asm.FieldVisitor fieldVisitor68 = classWriter1.visitField(50331648, "L1040610774", "L1562158187", "L862087622", (java.lang.Object) 52);
        org.mockito.asm.Attribute attribute69 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor68.visitAttribute(attribute69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) -13570 + "'", short46 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2560 + "'", int48 == 2560);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1126999590795363L + "'", long50 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 1792 + "'", short55 == (short) 1792);
        org.junit.Assert.assertNotNull(fieldVisitor68);
    }

    @Test
    public void test17841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17841");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 65210);
        methodVisitor16.visitFieldInsn(19506, "L918742398", "L1103233625", "L749100806");
        methodVisitor16.visitVarInsn(2051, 132);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test17842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17842");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L680573325", false);
        annotationVisitor28.visitEnum("L71945869", "L2102614230", "L2132185573");
        annotationVisitor28.visitEnd();
        annotationVisitor28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor28.visitAnnotation("L1611208075", "L2127085380");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor37.visitAnnotation("", "L238640077");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test17843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17843");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitVarInsn((int) (byte) 1, (int) '#');
        methodVisitor25.visitIincInsn(10, 0);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L1268065952", true);
        methodVisitor25.visitIincInsn((int) 'a', 0);
        methodVisitor25.visitTypeInsn(63, "L1356621730");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test17844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17844");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray32 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("L488861128", false);
        int int37 = classWriter1.newUTF8("L636727990");
        int int41 = classWriter1.newField("L1368708044", "L2037791973", "L535346328");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(0, "L1520330258", "L2039247828", "L721083102", (java.lang.Object) "L442162059");
        int int49 = classWriter1.newUTF8("L688061379");
        int int54 = classWriter1.newMethod("L18515553", "L60628801", "L1977524365", true);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 25 + "'", int49 == 25);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
    }

    @Test
    public void test17845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17845");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        int int24 = classWriter1.newClass("L1148690681");
        org.mockito.asm.FieldVisitor fieldVisitor30 = classWriter1.visitField(5, "L1549317494", "", "L964574936", (java.lang.Object) "L1589078908");
        fieldVisitor30.visitEnd();
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor30.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(fieldVisitor30);
    }

    @Test
    public void test17846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17846");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        int int30 = classWriter1.newMethod("L897597087", "L1287376048", "L2062266913", true);
        classWriter1.visitInnerClass("L2000102916", "L59063553", "L809431533", 7);
        classWriter1.visitOuterClass("L1796582550", "L130127010", "L446511586");
        java.lang.String[] strArray45 = null;
        classWriter1.visit(0, 611177, "L93109604", "L2044991236", "L182578583", strArray45);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
    }

    @Test
    public void test17847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17847");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor25.visitIincInsn(90, 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L1075066296", "L426422007", "L1589078908");
        methodVisitor25.visitIincInsn((int) 'a', (-1));
        methodVisitor25.visitFieldInsn((int) (short) 12336, "", "L1235861457", "L1372492713");
        methodVisitor25.visitIincInsn(61, 554434561);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        java.lang.String str60 = label59.toString();
        label59.info = "L2014806404";
        java.lang.String str63 = label59.toString();
        java.lang.Object obj64 = label59.info;
        methodVisitor25.visitJumpInsn(141, label59);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor41);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "L1987701575" + "'", str60, "L1987701575");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "L1987701575" + "'", str63, "L1987701575");
        org.junit.Assert.assertEquals("'" + obj64 + "' != '" + "L2014806404" + "'", obj64, "L2014806404");
    }

    @Test
    public void test17848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17848");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        int int5 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitSource("L1889100462", "L1769475365");
        classWriter1.visitInnerClass("\000", "L4531833", "L1669912474", 26);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("L1291288126", true);
        int int22 = classWriter1.newField("L644674685", "L710635264", "L1357812716");
        classWriter1.visitInnerClass("L367225907", "L2127085380", "L495165811", (int) (short) -326);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(5);
        classWriter33.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int40 = classWriter33.newClass("");
        int int43 = classWriter33.newNameType("L1847716459", "");
        int int45 = classWriter33.newUTF8("L1132227206");
        classWriter33.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter33.visitAnnotation("L888522535", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter1.visitField((int) (short) 513, "L1316968579", "L1950284572", "L1598885795", (java.lang.Object) classWriter33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@68939e29");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor49);
    }

    @Test
    public void test17849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17849");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(51, (int) (byte) 0);
        methodVisitor16.visitIntInsn(54, 254);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1298603494" + "'", str75, "L1298603494");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test17850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17850");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(56);
        classWriter1.visitEnd();
        int int7 = classWriter1.newMethod("L586588902", "L348596860", "L1345812268", false);
        int int11 = classWriter1.newField("L1660505210", "", "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
    }

    @Test
    public void test17851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17851");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitIntInsn(0, (int) (byte) 10);
        methodVisitor16.visitIincInsn(26, (int) (short) 0);
        methodVisitor16.visitIntInsn(0, (-1107296256));
        methodVisitor16.visitVarInsn(40, 65210);
        methodVisitor16.visitMethodInsn(16, "", "L1068224943", "L1169320665");
        methodVisitor16.visitTypeInsn(0, "L2070921929");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test17852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17852");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        methodVisitor25.visitIincInsn(0, (int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = methodVisitor25.visitAnnotation("L2089731244", false);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter37.newMethod("", "", "hi!", true);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter37.visitMethod(0, "", "", "hi!", strArray51);
        methodVisitor52.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        methodVisitor52.visitLabel(label56);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter59.newConst((java.lang.Object) (short) 1);
        classWriter59.visitSource("", "");
        label56.info = "";
        int int66 = label56.getOffset();
        java.lang.Object obj67 = label56.info;
        methodVisitor25.visitLineNumber(23, label56);
        java.lang.String str69 = label56.toString();
        java.lang.Object obj70 = label56.info;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + "" + "'", obj67, "");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "L986293766" + "'", str69, "L986293766");
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + "" + "'", obj70, "");
    }

    @Test
    public void test17853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17853");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int26 = classWriter1.newField("L430363814", "L918742398", "L989364881");
        byte[] byteArray27 = classWriter1.toByteArray();
        int int29 = classWriter1.newClass("L805282072");
        classWriter1.visitInnerClass("L85145148", "L238640077", "L914282524", 36);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter40.newMethod("", "", "hi!", true);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter40.visitMethod(0, "", "", "hi!", strArray54);
        int int60 = classWriter40.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter40.visitAnnotation("", true);
        byte[] byteArray64 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String str66 = classReader65.getSuperName();
        int int67 = classReader65.header;
        java.lang.String[] strArray68 = classReader65.getInterfaces();
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader65, 12592);
        int int71 = classReader65.header;
        short short73 = classReader65.readShort((int) (short) 100);
        int int75 = classReader65.readInt(11);
        java.lang.String[] strArray76 = classReader65.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter1.visitMethod(141, "L1251610657", "L1605942905", "L1853344835", strArray76);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor77.visitAnnotation("L2010256722", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor77.visitParameterAnnotation(740402, "L578704316", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 76, 52, 51, 48, 51, 54, 51, 56, 49, 52, 7, 0, 7, 1, 0, 10, 76, 57, 49, 56, 55, 52, 50, 51, 57, 56, 1, 0, 10, 76, 57, 56, 57, 51, 54, 52, 56, 56, 49, 12, 0, 9, 0, 10, 9, 0, 8, 0, 11, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 13, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 14, 0, 0, 0, 2, 0, 3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 90 + "'", int67 == 90);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 90 + "'", int71 == 90);
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) 1 + "'", short73 == (short) 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1792 + "'", int75 == 1792);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test17854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17854");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        java.lang.String[] strArray12 = classReader7.getInterfaces();
        int int13 = classReader7.header;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = classReader7.readLong(141);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 78 + "'", int13 == 78);
    }

    @Test
    public void test17855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17855");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        java.lang.String str31 = classReader26.getSuperName();
        int int32 = classReader26.header;
        int int33 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 105);
        classWriter35.visitOuterClass("L1247892565", "L829519303", "");
        org.mockito.asm.Label label45 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(5);
        classWriter47.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray52 = classWriter47.toByteArray();
        label45.info = byteArray52;
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray52);
        int int55 = classReader54.header;
        java.lang.String[] strArray56 = classReader54.getInterfaces();
        classWriter35.visit((int) (short) 12336, 42, "L1449033709", "L1725252311", "L1899714602", strArray56);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 90 + "'", int32 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 90 + "'", int33 == 90);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 78 + "'", int55 == 78);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test17856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17856");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        int int11 = classWriter1.newConst((java.lang.Object) "L1132227206");
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        java.lang.String[] strArray14 = classReader13.getInterfaces();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        int int37 = classWriter17.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter17.visitAnnotation("", true);
        byte[] byteArray41 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        int int43 = classReader42.getAccess();
        byte[] byteArray44 = classReader42.b;
        byte[] byteArray45 = classReader42.b;
        byte[] byteArray46 = classReader42.b;
        java.lang.String[] strArray47 = classReader42.getInterfaces();
        char[] charArray54 = new char[] { '4', ' ', '4', '4', ' ' };
        java.lang.Object obj55 = classReader42.readConst((int) (short) 4, charArray54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = classReader13.readConst(105, charArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 105");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 1, 0, 11, 76, 49, 49, 51, 50, 50, 50, 55, 50, 48, 54, 8, 0, 4, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[4,  , 4, 4,  ]");
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + "" + "'", obj55, "");
    }

    @Test
    public void test17857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17857");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitIincInsn((int) (byte) -1, 0);
        methodVisitor16.visitMaxs(38, 1);
        methodVisitor16.visitMethodInsn(17784, "L1258237198", "L420584410", "L1803469792");
        methodVisitor16.visitTypeInsn((int) (byte) -1, "L1800549256");
        methodVisitor16.visitMethodInsn(28, "L918742398", "L1669249456", "L1137939311");
        methodVisitor16.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor52 = methodVisitor16.visitParameterAnnotation((int) (short) 12337, "L361667728", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17858");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        short short36 = classReader26.readShort(0);
        long long38 = classReader26.readLong((int) (byte) 100);
        int int39 = classReader26.getAccess();
        java.lang.String str40 = classReader26.getSuperName();
        long long42 = classReader26.readLong(30);
        byte[] byteArray43 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, 1763773440);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter45.visitAnnotation("L1132086465", true);
        annotationVisitor48.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) -13570 + "'", short36 == (short) -13570);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 281474976776193L + "'", long38 == 281474976776193L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1136895056675841L + "'", long42 == 1136895056675841L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test17859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17859");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitEnd();
        int int5 = classWriter1.newNameType("", "L172254079");
        int int10 = classWriter1.newMethod("L1605224709", "L1789245551", "L1148690681", true);
        int int12 = classWriter1.newUTF8("");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test17860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17860");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String str37 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 29);
        int int40 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        short short70 = classReader68.readShort((int) (byte) 0);
        int int72 = classReader68.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(classReader68, 0);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(classReader68, 0);
        int int78 = classReader68.readByte((int) (byte) 10);
        char[] charArray83 = new char[] { '#', '4', '4' };
        java.lang.String str84 = classReader68.readUTF8(100, charArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = classReader26.readUTF8((int) ' ', charArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) -13570 + "'", short70 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2560 + "'", int72 == 2560);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test17861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17861");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, (-21316096));
        int int35 = classReader26.readUnsignedShort(51);
        int int36 = classReader26.header;
        java.lang.String str37 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        java.lang.String str40 = classReader26.getSuperName();
        char[] charArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = classReader26.readConst(104, charArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 104");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 90 + "'", int36 == 90);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test17862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17862");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitMaxs(3, 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter37.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter37.visitMethod(8, "hi!", "", "", strArray59);
        methodVisitor61.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter66.newMethod("", "", "hi!", true);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter66.visitMethod(0, "", "", "hi!", strArray80);
        methodVisitor81.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label85 = new org.mockito.asm.Label();
        methodVisitor81.visitLabel(label85);
        java.lang.String str87 = label85.toString();
        int[] intArray91 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray92 = new org.mockito.asm.Label[] {};
        methodVisitor61.visitLookupSwitchInsn(label85, intArray91, labelArray92);
        java.lang.Object obj94 = label85.info;
        methodVisitor25.visitLabel(label85);
        methodVisitor25.visitVarInsn((int) (short) 10, 13365);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L1545331873" + "'", str87, "L1545331873");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray92);
        org.junit.Assert.assertNull(obj94);
    }

    @Test
    public void test17863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17863");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        short short30 = classReader26.readShort(7);
        int int31 = classReader26.header;
        int int33 = classReader26.readByte((int) (byte) 100);
        int int35 = classReader26.getItem((int) (byte) 1);
        long long37 = classReader26.readLong(32);
        int int39 = classReader26.readInt((int) (byte) 0);
        java.lang.Class<?> wildcardClass40 = classReader26.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 90 + "'", int31 == 90);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 720578139469709322L + "'", long37 == 720578139469709322L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-889275714) + "'", int39 == (-889275714));
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test17864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17864");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        methodVisitor16.visitMultiANewArrayInsn("L2062266913", (int) (short) -1);
        methodVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(8, (int) (short) 100);
        methodVisitor16.visitMultiANewArrayInsn("L1967552389", (int) (short) 3);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(3, "hi!", "hi!", "hi!", strArray56);
        int int59 = classWriter32.newConst((java.lang.Object) "hi!");
        classWriter32.visitSource("L488861128", "L897597087");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter32.visitAnnotation("L1132227206", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter32.visitAnnotation("L1256567156", false);
        methodVisitor16.visitLdcInsn((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
    }

    @Test
    public void test17865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17865");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label20 = new org.mockito.asm.Label();
        methodVisitor16.visitLabel(label20);
        methodVisitor16.visitTypeInsn(3, "L2000102916");
        methodVisitor16.visitTypeInsn(12592, "L275489687");
        methodVisitor16.visitMethodInsn(51966, "L636727990", "L1223439170", "L1221801792");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = methodVisitor16.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor33.visitAnnotation("L1201574820", "L2133049941");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = annotationVisitor33.visitAnnotation("L1321167593", "L1642643908");
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        methodVisitor57.visitFieldInsn(8, "hi!", "", "");
        methodVisitor57.visitTypeInsn((int) (byte) 100, "");
        methodVisitor57.visitIincInsn((int) (byte) 10, 6);
        methodVisitor57.visitMultiANewArrayInsn("L897597087", 100);
        methodVisitor57.visitMultiANewArrayInsn("", 9);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor33.visit("L1976123288", (java.lang.Object) methodVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@5371bcd1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
    }

    @Test
    public void test17866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17866");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray29 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter35.newMethod("", "", "hi!", true);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter35.visitMethod(0, "", "", "hi!", strArray49);
        methodVisitor50.visitFieldInsn(8, "hi!", "", "");
        methodVisitor50.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor50.visitMaxs(6, (int) (byte) 10);
        methodVisitor50.visitIincInsn((int) (short) 1, (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter1.visitField(156461415, "L1962189950", "L2000102916", "L264795169", (java.lang.Object) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor67.visitAnnotation("L716527799", false);
        annotationVisitor70.visitEnum("L862760825", "RuntimeVisibleAnnotations", "L1298603494");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(fieldVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
    }

    @Test
    public void test17867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17867");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        java.lang.String str32 = classReader26.getSuperName();
        long long34 = classReader26.readLong(20);
        int int36 = classReader26.getItem(0);
        java.lang.String str37 = classReader26.getSuperName();
        java.lang.String str38 = classReader26.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 7575349242370196235L + "'", long34 == 7575349242370196235L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test17868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17868");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int10 = classWriter1.newField("L1601838046", "L2000102916", "\001");
        int int13 = classWriter1.newNameType("L1628304347", "L664111037");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        methodVisitor34.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor34.visitCode();
        methodVisitor34.visitIincInsn(0, 5);
        methodVisitor34.visitIincInsn((int) (byte) 10, 8);
        methodVisitor34.visitVarInsn(5, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = methodVisitor34.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor34.visitAnnotation("L275489687", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = annotationVisitor53.visitAnnotation("L925124713", "L1076056118");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor57 = classWriter1.visitField((int) (short) 2892, "L86127801", "", "L387862364", (java.lang.Object) annotationVisitor53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@cec1f0b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor56);
    }

    @Test
    public void test17869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17869");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitVarInsn(5, (int) 'a');
        methodVisitor25.visitIincInsn((int) (short) 4, 0);
        methodVisitor25.visitCode();
        methodVisitor25.visitEnd();
        methodVisitor25.visitVarInsn((int) (short) -17730, 23);
        org.mockito.asm.Attribute attribute41 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor25.visitAttribute(attribute41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test17870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17870");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitVarInsn((-1107296256), 65210);
        methodVisitor25.visitIntInsn((int) (byte) 0, 12);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitTypeInsn(0, "L1010900501");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor53);
    }

    @Test
    public void test17871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17871");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L428215077", "", "\001", (int) (byte) 100);
        classWriter1.visitOuterClass("L9401833", "L1058109766", "L755949095");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L1901444169", false);
        classWriter1.visitSource("L1189635920", "L1321167593");
        int int27 = classWriter1.newNameType("L1655799832", "L664029952");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        int int53 = classWriter33.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter33.visitAnnotation("", true);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        long long60 = classReader58.readLong(4);
        int int61 = classReader58.header;
        int int63 = classReader58.readByte(8);
        byte[] byteArray64 = classReader58.b;
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor66 = classWriter1.visitField((int) (short) 3909, "L790432208", "L161563611", "L2080829315", (java.lang.Object) classReader65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@74a3750a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 17 + "'", int27 == 17);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 655616L + "'", long60 == 655616L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 90 + "'", int61 == 90);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17872");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter19.newConst((java.lang.Object) (short) 1);
        classWriter19.visitSource("", "L2000102916");
        int int29 = classWriter19.newMethod("", "L2062266913", "L809431533", false);
        methodVisitor17.visitLdcInsn((java.lang.Object) "L2062266913");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor17.visitAnnotationDefault();
        methodVisitor17.visitVarInsn(13, 1793);
        methodVisitor17.visitInsn(51);
        methodVisitor17.visitCode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test17873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17873");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(33);
        classWriter1.visitSource("L976618452", "L295165602");
        int int8 = classWriter1.newField("L1291288126", "L1619769466", "L1758992365");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L1497855016", "L972384730", "L2091850869");
        int int15 = classWriter1.newClass("L2143754612");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
    }

    @Test
    public void test17874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17874");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(28532);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test17875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17875");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label16 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(0);
        int int23 = classWriter18.newMethod("", "", "hi!", true);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter18.visitMethod(0, "", "", "hi!", strArray32);
        label16.info = strArray32;
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter11.visitMethod((int) (short) 100, "", "hi!", "", strArray32);
        classWriter1.visit(9, (int) (byte) 100, "L238476442", "L275489687", "", strArray32);
        int int38 = classWriter1.newUTF8("L809431533");
        classWriter1.visitOuterClass("L2127085380", "L1111133036", "L1009580268");
        classWriter1.visitInnerClass("L1287617384", "L579675851", "L838653747", 21);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        classWriter53.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter53.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter67.newConst((java.lang.Object) (byte) 0);
        int int70 = classWriter53.newConst((java.lang.Object) int69);
        classWriter53.visitInnerClass("", "L680573325", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter53.visitAnnotation("L1601838046", true);
        classWriter53.visitInnerClass("L1429849124", "L535346328", "L110679537", (int) (byte) -1);
        int int85 = classWriter53.newUTF8("L1283200231");
        org.mockito.asm.FieldVisitor fieldVisitor86 = classWriter1.visitField((int) (short) -13570, "L1762162347", "L181903634", "", (java.lang.Object) int85);
        fieldVisitor86.visitEnd();
        fieldVisitor86.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 18 + "'", int85 == 18);
        org.junit.Assert.assertNotNull(fieldVisitor86);
    }

    @Test
    public void test17876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17876");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        byte[] byteArray37 = classReader26.b;
        int int39 = classReader26.readUnsignedShort(0);
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        byte[] byteArray41 = classReader26.b;
        java.lang.String str42 = classReader26.getSuperName();
        java.lang.String str43 = classReader26.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = classReader26.readUnsignedShort(199424);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 51966 + "'", int39 == 51966);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test17877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17877");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 9);
        java.lang.String str40 = classReader26.getSuperName();
        byte[] byteArray41 = classReader26.b;
        java.lang.String[] strArray42 = classReader26.getInterfaces();
        byte[] byteArray43 = classReader26.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17878");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        classWriter1.visitOuterClass("L1847716459", "L1142940414", "L1142940414");
        classWriter1.visitInnerClass("L815371585", "L170800745", "L853371719", (int) ' ');
        classWriter1.visitInnerClass("L913773226", "L1836065884", "L2073775816", (-889275714));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test17879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17879");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter1.visitAnnotation("L624707113", true);
        byte[] byteArray65 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray65);
        java.lang.Class<?> wildcardClass68 = byteArray65.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 14, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 10, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 11, 0, 0, 0, 2, 0, 3, 0, 3, 0, 11, 0, 0, 0, 2, 0, 3, 0, 12, 0, 0, 0, 4, 0, 5, 0, 6, 0, 13, 0, 0, 0, 6, 0, 1, 0, 9, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test17880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17880");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        classWriter1.visitSource("L149220781", "L2062266913");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter1.visitAnnotation("L1681302154", false);
        int int39 = classWriter1.newUTF8("L2137693765");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter45.newMethod("", "", "hi!", true);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter45.visitMethod(0, "", "", "hi!", strArray59);
        methodVisitor60.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = methodVisitor60.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = annotationVisitor66.visitArray("L831655905");
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = annotationVisitor66.visitArray("L1769475365");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter1.visitField((int) (short) 7, "L1168665692", "L1317681080", "L1247818576", (java.lang.Object) "L1769475365");
        int int73 = classWriter1.newClass("L887195427");
        int int75 = classWriter1.newClass("L48273889");
        int int80 = classWriter1.newMethod("L1423401218", "L1688164825", "L901494234", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 17 + "'", int73 == 17);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 19 + "'", int75 == 19);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 25 + "'", int80 == 25);
    }

    @Test
    public void test17881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17881");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        long long35 = classReader26.readLong(61);
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        int int39 = classReader26.readUnsignedShort((int) (short) 1);
        int int40 = classReader26.header;
        int int41 = classReader26.header;
        int int43 = classReader26.readByte(36);
        java.lang.String[] strArray44 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader26, 13876);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        int int68 = classWriter48.newMethod("", "", "hi!", false);
        classWriter48.visitInnerClass("", "", "", (int) ' ');
        classWriter48.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray79 = classWriter48.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter48.visitAnnotation("L488861128", false);
        int int84 = classWriter48.newUTF8("L636727990");
        byte[] byteArray85 = classWriter48.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept((org.mockito.asm.ClassVisitor) classWriter48, 1278357558);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 7278098581565042292L + "'", long35 == 7278098581565042292L);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 65210 + "'", int39 == 65210);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 90 + "'", int40 == 90);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 90 + "'", int41 == 90);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 13 + "'", int84 == 13);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 54, 51, 54, 55, 50, 55, 57, 57, 48, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 2, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6, 0, 14, 0, 0, 0, 6, 0, 1, 0, 12, 0, 0]");
    }

    @Test
    public void test17882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17882");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L529122729", false);
        int int11 = classWriter1.newConst((java.lang.Object) "L1132227206");
        byte[] byteArray12 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L1809966946", "L1090837709", "L1060124284");
        org.mockito.asm.Attribute attribute17 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 1, 0, 11, 76, 49, 49, 51, 50, 50, 50, 55, 50, 48, 54, 8, 0, 4, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
    }

    @Test
    public void test17883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17883");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 1);
        classWriter35.visitOuterClass("L149220781", "L1386483578", "L1013343419");
        classWriter35.visitSource("L85690983", "L831655905");
        int int44 = classWriter35.newClass("L1793985281");
        classWriter35.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
    }

    @Test
    public void test17884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17884");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter12.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter26.newConst((java.lang.Object) (byte) 0);
        int int29 = classWriter12.newConst((java.lang.Object) int28);
        classWriter12.visitEnd();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label41 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        label41.info = strArray57;
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod((int) (short) 100, "", "hi!", "", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter12.visitMethod((int) (byte) 100, "L1028579140", "L2000102916", "L680573325", strArray57);
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int74 = classWriter69.newMethod("", "", "hi!", true);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter69.visitMethod(0, "", "", "hi!", strArray83);
        label67.info = strArray83;
        classWriter12.visit(3, (int) (byte) 100, "L809431533", "L749737959", "L728847777", strArray83);
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter1.visitMethod(10, "L275489687", "\000", "L238476442", strArray83);
        methodVisitor87.visitCode();
        methodVisitor87.visitVarInsn((int) (short) -326, 13874);
        methodVisitor87.visitInsn(35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
        org.junit.Assert.assertNotNull(methodVisitor87);
    }

    @Test
    public void test17885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17885");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        int int37 = classWriter17.newMethod("", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int45 = classWriter43.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter43.visitMethod(8, "hi!", "", "", strArray65);
        classWriter43.visitOuterClass("hi!", "", "");
        classWriter43.visitEnd();
        java.lang.String[] strArray80 = new java.lang.String[] { "L1601838046", "L809431533" };
        classWriter43.visit(0, 6, "L535346328", "L590888141", "L680573325", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter17.visitMethod(13, "L624707113", "L2000102916", "L2000102916", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter1.visitMethod(2561, "L749737959", "L2062266913", "L1368708044", strArray80);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor83.visitAnnotationDefault();
        methodVisitor83.visitFieldInsn(13, "L1292845306", "L128451051", "L1086414642");
        methodVisitor83.visitMultiANewArrayInsn("L1605224709", 2560);
        methodVisitor83.visitInsn(101);
        methodVisitor83.visitMaxs(196864, (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test17886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17886");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 12592);
        short short33 = classReader26.readShort(0);
        java.lang.String str34 = classReader26.getSuperName();
        byte[] byteArray35 = classReader26.b;
        byte[] byteArray36 = classReader26.b;
        int int38 = classReader26.readInt(6);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader26.readByte(186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) -13570 + "'", short33 == (short) -13570);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
    }

    @Test
    public void test17887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17887");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        methodVisitor16.visitTypeInsn(8, "hi!");
        methodVisitor16.visitFieldInsn((int) (short) 10, "", "", "");
        methodVisitor16.visitVarInsn(26, 12);
        methodVisitor16.visitTypeInsn(20, "L1166221053");
        methodVisitor16.visitEnd();
        methodVisitor16.visitInsn(38);
        methodVisitor16.visitEnd();
        methodVisitor16.visitInsn(50331648);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
    }

    @Test
    public void test17888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17888");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter24.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("hi!", "", "hi!");
        methodVisitor16.visitLdcInsn((java.lang.Object) "");
        methodVisitor16.visitMaxs(40, (int) (short) 1);
        methodVisitor16.visitMethodInsn((int) (short) 8460, "L871448529", "L1656310421", "L871448529");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMultiANewArrayInsn("L1522529774", 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor65);
    }

    @Test
    public void test17889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17889");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        classWriter32.visitOuterClass("hi!", "", "");
        int int44 = classWriter32.newNameType("hi!", "hi!");
        int int47 = classWriter32.newNameType("hi!", "");
        java.lang.Object obj52 = null;
        org.mockito.asm.FieldVisitor fieldVisitor53 = classWriter32.visitField(9, "L1601838046", "L2062266913", "L680573325", obj52);
        classWriter32.visitSource("L636727990", "");
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(0);
        int int69 = classWriter64.newMethod("", "", "hi!", true);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter64.visitMethod(0, "", "", "hi!", strArray78);
        label62.info = strArray78;
        classWriter32.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray78);
        classWriter1.visit((int) (short) 0, 2, "L636727990", "L1601838046", "L238476442", strArray78);
        java.lang.String[] strArray87 = null;
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter1.visitMethod(0, "L4531833", "L999961130", "L415508906", strArray87);
        methodVisitor88.visitIntInsn(12850, (int) (byte) -1);
        methodVisitor88.visitVarInsn(872, 262400);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor53);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(methodVisitor88);
    }

    @Test
    public void test17890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17890");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMultiANewArrayInsn("L671872947", (int) '#');
        methodVisitor25.visitFieldInsn(12850, "L1640056714", "L590888141", "L1750086343");
        methodVisitor25.visitIincInsn(31, 167);
        methodVisitor25.visitInsn(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test17891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17891");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter19.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        label34.info = strArray50;
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter29.visitMethod((int) (short) 100, "", "hi!", "", strArray50);
        classWriter19.visit(9, (int) (byte) 100, "L238476442", "L275489687", "", strArray50);
        classWriter1.visit(1751720204, 90, "", "", "L809431533", strArray50);
        classWriter1.visitEnd();
        byte[] byteArray57 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray57);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 104, 105, 33, 12, 0, 12, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 7, 0, 5, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 90, 0, 3, 0, 8, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 9, 0, 0, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 2, 0, 11, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
    }

    @Test
    public void test17892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17892");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(9, "L1601838046", "L2062266913", "L680573325", obj21);
        classWriter1.visitSource("L636727990", "");
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        int int51 = classWriter31.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter31.visitAnnotation("", true);
        byte[] byteArray55 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        int int58 = classReader56.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader56, (int) '4');
        int int62 = classReader56.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(classReader56, (int) '#');
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter1.visitField((int) (short) 1, "L2000102916", "L1847716459", "L264795169", (java.lang.Object) '#');
        int int67 = classWriter1.newClass("L2037791973");
        int int69 = classWriter1.newUTF8("L976656549");
        classWriter1.visitSource("L30632432", "L275489687");
        classWriter1.visitOuterClass("L108164391", "", "L862087622");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 51966 + "'", int58 == 51966);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 19 + "'", int67 == 19);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 20 + "'", int69 == 20);
    }

    @Test
    public void test17893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17893");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L1221801792", "L636727990");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("L1132227206", false);
        int int39 = classWriter1.newMethod("L1889100462", "L1928858580", "L579675851", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter1.visitAnnotation("L831655905", false);
        int int45 = classWriter1.newNameType("L674940947", "L2141212410");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 18 + "'", int45 == 18);
    }

    @Test
    public void test17894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17894");
        org.mockito.asm.Label label0 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(5);
        classWriter2.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray7 = classWriter2.toByteArray();
        label0.info = byteArray7;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.getItem((int) (byte) 0);
        java.lang.String[] strArray12 = classReader9.getInterfaces();
        int int14 = classReader9.readUnsignedShort(31);
        byte[] byteArray15 = classReader9.b;
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12848 + "'", int14 == 12848);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test17895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17895");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        int int33 = classReader26.getAccess();
        byte[] byteArray34 = classReader26.b;
        int int36 = classReader26.readInt(12);
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 9);
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader26, 2892);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 458753 + "'", int36 == 458753);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test17896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17896");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        java.lang.String str36 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 51966);
        int int40 = classReader26.readUnsignedShort((int) (short) 1);
        long long42 = classReader26.readLong(26);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 65210 + "'", int40 == 65210);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 219269015447800320L + "'", long42 == 219269015447800320L);
    }

    @Test
    public void test17897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17897");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor62 = classWriter1.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = fieldVisitor62.visitAnnotation("L2062266913", true);
        fieldVisitor62.visitEnd();
        fieldVisitor62.visitEnd();
        fieldVisitor62.visitEnd();
        fieldVisitor62.visitEnd();
        java.lang.Class<?> wildcardClass70 = fieldVisitor62.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test17898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17898");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        classWriter1.visitOuterClass("L624707113", "L1223439170", "L1505866272");
        byte[] byteArray25 = classWriter1.toByteArray();
        int int27 = classWriter1.newUTF8("L1566032477");
        classWriter1.visitOuterClass("L1804838555", "L624011766", "L566306334");
        classWriter1.visitOuterClass("L288690232", "L567497322", "L1317681080");
        classWriter1.visitInnerClass("L2085471365", "L1700758411", "L747114528", 25968);
        int int42 = classWriter1.newClass("L253151443");
        classWriter1.visitOuterClass("L2068634484", "L680573325", "L1038192670");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 11, 76, 49, 50, 50, 51, 52, 51, 57, 49, 55, 48, 7, 0, 9, 1, 0, 11, 76, 50, 48, 49, 52, 56, 48, 54, 52, 48, 52, 7, 0, 11, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 7, 0, 14, 1, 0, 11, 76, 49, 53, 48, 53, 56, 54, 54, 50, 55, 50, 12, 0, 9, 0, 16, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 18, 0, 0, 0, 4, 0, 15, 0, 17, 0, 19, 0, 0, 0, 10, 0, 1, 0, 10, 0, 12, 0, 13, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 37 + "'", int42 == 37);
    }

    @Test
    public void test17899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17899");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("L755844592", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor12.visitAnnotation("L840739929", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor12.visitAnnotation("L939135397", true);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int30 = classWriter25.newMethod("", "", "hi!", true);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter25.visitMethod(0, "", "", "hi!", strArray39);
        int int45 = classWriter25.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter25.visitAnnotation("", true);
        byte[] byteArray49 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray49);
        long long52 = classReader50.readLong(4);
        byte[] byteArray53 = classReader50.b;
        byte[] byteArray54 = classReader50.b;
        byte[] byteArray55 = classReader50.b;
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray55, (int) (byte) 0, 6);
        annotationVisitor22.visit("L1029575279", (java.lang.Object) byteArray55);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 655616L + "'", long52 == 655616L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17900");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader7, (int) '4');
        classWriter13.visitSource("L959574331", "L749737959");
        classWriter13.visitSource("L959574331", "");
        int int23 = classWriter13.newField("L1287617384", "L1040125103", "L529122729");
        byte[] byteArray24 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray24, (int) (short) 3, 779);
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray24);
        java.lang.String[] strArray29 = classReader28.getInterfaces();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 13 + "'", int23 == 13);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 10, 76, 57, 53, 57, 53, 55, 52, 51, 51, 49, 1, 0, 11, 76, 49, 50, 56, 55, 54, 49, 55, 51, 56, 52, 7, 0, 8, 1, 0, 11, 76, 49, 48, 52, 48, 49, 50, 53, 49, 48, 51, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 12, 0, 10, 0, 11, 9, 0, 9, 0, 12, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 2, 0, 7, 0, 15, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray29);
    }

    @Test
    public void test17901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17901");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitMaxs((int) ' ', (int) '4');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter34.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        int int47 = classWriter42.newMethod("", "", "hi!", true);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter42.visitMethod(0, "", "", "hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter34.visitMethod(8, "hi!", "", "", strArray56);
        methodVisitor25.visitLdcInsn((java.lang.Object) 8);
        methodVisitor25.visitCode();
        methodVisitor25.visitMethodInsn(10, "L1928858580", "L1013343419", "L1368708044");
        methodVisitor25.visitMaxs((int) 'a', 8);
        methodVisitor25.visitIntInsn((int) (short) 17784, (int) (short) 4);
        methodVisitor25.visitMultiANewArrayInsn("L1285156180", 458752);
        methodVisitor25.visitFieldInsn(1278357558, "L624102780", "L624011766", "L758272393");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
    }

    @Test
    public void test17902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17902");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (byte) 0);
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4, (int) (byte) 0, 1);
        int int9 = classReader7.readInt(10);
        byte[] byteArray10 = classReader7.b;
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader7, (int) (short) 17784);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter12.visitAnnotation("L1781102319", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50331648 + "'", int9 == 50331648);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test17903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17903");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitMethodInsn((int) (short) -1, "hi!", "hi!", "hi!");
        java.lang.Object[] objArray40 = null;
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        java.lang.String str69 = classReader68.getSuperName();
        int int70 = classReader68.header;
        java.lang.String[] strArray71 = classReader68.getInterfaces();
        methodVisitor25.visitFrame(1793, 0, objArray40, 31, (java.lang.Object[]) strArray71);
        methodVisitor25.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = methodVisitor25.visitAnnotationDefault();
        methodVisitor25.visitIntInsn(2561, 104);
        methodVisitor25.visitLdcInsn((java.lang.Object) "L2078535908");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor25.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 90 + "'", int70 == 90);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test17904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17904");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        java.lang.Object obj39 = null;
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter19.visitField(9, "L1601838046", "L2062266913", "L680573325", obj39);
        classWriter19.visitSource("L636727990", "");
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        label49.info = strArray65;
        classWriter19.visit(12, (int) (byte) 100, "L1028579140", "\001", "L590888141", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(0, "L1132227206", "L535346328", "L2062266913", strArray65);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter1.visitAnnotation("L2132185573", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter1.visitAnnotation("L979622605", true);
        int int78 = classWriter1.newNameType("L157434537", "L689550562");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 15 + "'", int78 == 15);
    }

    @Test
    public void test17905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17905");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitInsn(254);
        methodVisitor25.visitFieldInsn(28532, "L1518174784", "L1520330258", "L110679537");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        int int70 = classReader68.readByte(13);
        int int72 = classReader68.readInt(7);
        int int74 = classReader68.readInt((int) (short) 100);
        int int76 = classReader68.readByte((int) (byte) 0);
        java.lang.String[] strArray77 = classReader68.getInterfaces();
        java.lang.Object[] objArray79 = null;
        methodVisitor25.visitFrame(26, 25968, (java.lang.Object[]) strArray77, (int) (short) 0, objArray79);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor25.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2561 + "'", int72 == 2561);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 65536 + "'", int74 == 65536);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 202 + "'", int76 == 202);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test17906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17906");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        byte[] byteArray26 = classWriter1.toByteArray();
        int int28 = classWriter1.newUTF8("hi!");
        byte[] byteArray29 = classWriter1.toByteArray();
        classWriter1.visitSource("L1221801792", "L1938659678");
        classWriter1.visitOuterClass("L1442680030", "L916243867", "L150818074");
        java.lang.Class<?> wildcardClass37 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test17907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17907");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L275489687", "L2000102916", "L275489687");
        int int20 = classWriter1.newField("L529122729", "L488861128", "L976656549");
        int int24 = classWriter1.newField("L1142940414", "L75359331", "L426422007");
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        long long28 = classReader26.readLong(61);
        java.lang.String str29 = classReader26.getSuperName();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 20);
        int int33 = classWriter31.newConst((java.lang.Object) "L833107638");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 25, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 9, 0, 7, 1, 0, 10, 76, 53, 50, 57, 49, 50, 50, 55, 50, 57, 7, 0, 11, 1, 0, 10, 76, 52, 56, 56, 56, 54, 49, 49, 50, 56, 1, 0, 10, 76, 57, 55, 54, 54, 53, 54, 53, 52, 57, 12, 0, 13, 0, 14, 9, 0, 12, 0, 15, 1, 0, 11, 76, 49, 49, 52, 50, 57, 52, 48, 52, 49, 52, 7, 0, 17, 1, 0, 9, 76, 55, 53, 51, 53, 57, 51, 51, 49, 1, 0, 10, 76, 52, 50, 54, 52, 50, 50, 48, 48, 55, 12, 0, 19, 0, 20, 9, 0, 18, 0, 21, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 23, 0, 0, 0, 4, 0, 8, 0, 10, 0, 24, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3180003184357425L + "'", long28 == 3180003184357425L);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 26 + "'", int33 == 26);
    }

    @Test
    public void test17908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17908");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitIincInsn(12592, (int) (short) 10);
        methodVisitor16.visitFieldInsn((int) (short) -13570, "L624707113", "L590888141", "L624707113");
        methodVisitor16.visitVarInsn((int) (short) 1, 1698786926);
        methodVisitor16.visitIincInsn(34, 3072);
        methodVisitor16.visitTypeInsn(3, "L1583234446");
        methodVisitor16.visitMaxs((int) '#', 16777472);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17909");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        methodVisitor25.visitVarInsn(105, (int) (short) 3072);
        methodVisitor25.visitIntInsn((int) (short) 26729, 11);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(0);
        int int42 = classWriter40.newConst((java.lang.Object) (short) 1);
        classWriter40.visitSource("", "L2000102916");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter40.visitAnnotation("L1969123537", false);
        classWriter40.visitSource("L170800745", "L1700758411");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter40.visitAnnotation("L975788322", true);
        classWriter40.visitInnerClass("L1235615576", "L940801507", "L1009580268", (int) (short) 1792);
        methodVisitor25.visitLdcInsn((java.lang.Object) "L940801507");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test17910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17910");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        int int16 = classReader14.readByte((int) (byte) 0);
        int int17 = classReader14.getAccess();
        int int18 = classReader14.getAccess();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 202 + "'", int16 == 202);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test17911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17911");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int41 = classWriter36.newMethod("", "", "hi!", true);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter36.visitMethod(0, "", "", "hi!", strArray50);
        methodVisitor51.visitFieldInsn(8, "hi!", "", "");
        methodVisitor51.visitMethodInsn((int) '#', "hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor62 = classWriter1.visitField((int) (short) -1, "L2062266913", "L2062266913", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = fieldVisitor62.visitAnnotation("L2062266913", true);
        fieldVisitor62.visitEnd();
        fieldVisitor62.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor62.visitAnnotation("L294498702", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = fieldVisitor62.visitAnnotation("L1540520089", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = fieldVisitor62.visitAnnotation("L1993254991", false);
        fieldVisitor62.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test17912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17912");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        byte[] byteArray12 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        int int15 = classReader13.readByte(82);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 10, 76, 56, 48, 57, 52, 51, 49, 53, 51, 51, 12, 0, 4, 0, 5, 10, 0, 3, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 98 + "'", int15 == 98);
    }

    @Test
    public void test17913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17913");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        methodVisitor43.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor43.visitCode();
        methodVisitor43.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        methodVisitor70.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        methodVisitor70.visitLabel(label74);
        java.lang.String str76 = label74.toString();
        methodVisitor43.visitLineNumber((int) (short) -1, label74);
        label74.info = (-1.0f);
        methodVisitor25.visitLineNumber(19, label74);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor25.visitAnnotation("L207820460", false);
        methodVisitor25.visitEnd();
        methodVisitor25.visitTypeInsn(26729, "L1149737254");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "L1233522008" + "'", str76, "L1233522008");
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test17914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17914");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("L1049104679");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Class not found");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17915");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        byte[] byteArray38 = classReader37.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17916");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor46.visitCode();
        methodVisitor46.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        java.lang.String str79 = label77.toString();
        methodVisitor46.visitLineNumber((int) (short) -1, label77);
        methodVisitor16.visitLabel(label77);
        methodVisitor16.visitEnd();
        methodVisitor16.visitFieldInsn(24, "L728847777", "L1178822359", "L590888141");
        methodVisitor16.visitIincInsn(23, (int) '#');
        methodVisitor16.visitVarInsn(1, 33);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L1593144674" + "'", str79, "L1593144674");
    }

    @Test
    public void test17917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17917");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("\000", true);
        annotationVisitor4.visitEnum("L1933341008", "L974709289", "L869697078");
        annotationVisitor4.visitEnum("L929163950", "L454097045", "L1667109172");
        org.junit.Assert.assertNotNull(annotationVisitor4);
    }

    @Test
    public void test17918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17918");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        classWriter36.visitSource("", "L1013343419");
        byte[] byteArray40 = classWriter36.toByteArray();
        java.lang.Class<?> wildcardClass41 = classWriter36.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 2, 0, 1, 0, 11, 0, 0, 0, 11, 76, 49, 48, 49, 51, 51, 52, 51, 52, 49, 57]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test17919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17919");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        java.lang.String str36 = classReader26.getSuperName();
        int int38 = classReader26.readByte(38);
        java.lang.String str39 = classReader26.getSuperName();
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        byte[] byteArray41 = classReader26.b;
        // The following exception was thrown during execution in test generation
        try {
            short short43 = classReader26.readShort(100663552);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17920");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        java.lang.String str29 = classReader26.getSuperName();
        byte[] byteArray30 = classReader26.b;
        int int31 = classReader26.getAccess();
        int int33 = classReader26.readInt(0);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.readByte((int) (short) 17784);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17784");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-889275714) + "'", int33 == (-889275714));
    }

    @Test
    public void test17921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17921");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("L264795169", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
        int int32 = classWriter27.newMethod("", "", "hi!", true);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter27.visitMethod(0, "", "", "hi!", strArray41);
        int int47 = classWriter27.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter27.visitAnnotation("", true);
        byte[] byteArray51 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        int int54 = classReader52.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(classReader52, (int) '4');
        int int58 = classReader52.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader52, (int) '#');
        byte[] byteArray61 = classReader52.b;
        java.lang.String[] strArray62 = classReader52.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter1.visitMethod(17, "L75359331", "L1628304347", "L1847716459", strArray62);
        int int65 = classWriter1.newUTF8("L1490365060");
        classWriter1.visitSource("L419471195", "L1242211911");
        int int72 = classWriter1.newField("L1836065884", "L294143838", "L2131449377");
        org.mockito.asm.Attribute attribute73 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 51966 + "'", int54 == 51966);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 13 + "'", int65 == 13);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20 + "'", int72 == 20);
    }

    @Test
    public void test17922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17922");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("L1292845306", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("L1715729238", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = annotationVisitor31.visitArray("L1970097011");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test17923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17923");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("L275489687", "L2062266913", "L1847716459");
        byte[] byteArray36 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        label47.info = strArray63;
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter42.visitMethod((int) (short) 100, "", "hi!", "", strArray63);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter1.visitMethod(51966, "", "L1429849124", "", strArray63);
        classWriter1.visitEnd();
        byte[] byteArray69 = classWriter1.toByteArray();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 11, 76, 49, 52, 50, 57, 56, 52, 57, 49, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, -54, -2, 0, 3, 0, 15, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 1, 0, 14, 0, 0, 0, 4, 0, 8, 0, 11]");
    }

    @Test
    public void test17924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17924");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        byte[] byteArray30 = classReader26.b;
        java.lang.String[] strArray31 = classReader26.getInterfaces();
        short short33 = classReader26.readShort((int) '#');
        byte[] byteArray34 = classReader26.b;
        byte[] byteArray35 = classReader26.b;
        java.lang.String str36 = classReader26.getSuperName();
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader26.accept(classVisitor37, 18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 4 + "'", short33 == (short) 4);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test17925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17925");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("L1086414642", false);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int11 = classWriter9.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter17.newMethod("", "", "hi!", true);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter17.visitMethod(0, "", "", "hi!", strArray31);
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter9.visitMethod(8, "hi!", "", "", strArray31);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter9.visitAnnotation("hi!", false);
        byte[] byteArray37 = classWriter9.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        annotationVisitor6.visit("L684697689", (java.lang.Object) byteArray37);
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray37);
        int int42 = classReader40.readByte(78);
        int int44 = classReader40.readByte((int) (short) 0);
        char[] charArray46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = classReader40.readUTF8(875903244, charArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 5, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 105 + "'", int42 == 105);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 202 + "'", int44 == 202);
    }

    @Test
    public void test17926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17926");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        org.mockito.asm.Label label30 = new org.mockito.asm.Label();
        methodVisitor25.visitJumpInsn(1, label30);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor25.visitAnnotation("L275489687", false);
        methodVisitor25.visitIntInsn((int) (byte) 10, 1751720204);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor25.visitAnnotation("L755949095", true);
        methodVisitor25.visitFieldInsn(104, "L59063553", "L749737959", "L620334303");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        methodVisitor64.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label68 = new org.mockito.asm.Label();
        methodVisitor64.visitLabel(label68);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter(0);
        int int73 = classWriter71.newConst((java.lang.Object) (short) 1);
        classWriter71.visitSource("", "");
        label68.info = "";
        int int78 = label68.getOffset();
        java.lang.String str79 = label68.toString();
        java.lang.Object obj80 = label68.info;
        int int81 = label68.getOffset();
        int int82 = label68.getOffset();
        methodVisitor25.visitLineNumber(1694564377, label68);
        java.lang.String str84 = label68.toString();
        int int85 = label68.getOffset();
        java.lang.String str86 = label68.toString();
        java.lang.Object obj87 = label68.info;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L416135000" + "'", str79, "L416135000");
        org.junit.Assert.assertEquals("'" + obj80 + "' != '" + "" + "'", obj80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L416135000" + "'", str84, "L416135000");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L416135000" + "'", str86, "L416135000");
        org.junit.Assert.assertEquals("'" + obj87 + "' != '" + "" + "'", obj87, "");
    }

    @Test
    public void test17927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17927");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        byte[] byteArray2 = classWriter1.toByteArray();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readUnsignedShort(0);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        int int29 = classWriter9.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter9.visitAnnotation("", true);
        byte[] byteArray33 = classWriter9.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        int int36 = classReader34.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader34, (int) '4');
        long long40 = classReader34.readLong(2);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(0);
        int int48 = classWriter43.newMethod("", "", "hi!", true);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter43.visitMethod(0, "", "", "hi!", strArray57);
        int int63 = classWriter43.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("", true);
        byte[] byteArray67 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        java.lang.String str69 = classReader68.getSuperName();
        char[] charArray75 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj76 = classReader68.readConst(6, charArray75);
        java.lang.Object obj77 = classReader34.readConst(3, charArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = classReader4.readConst(1659509, charArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1659509");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51966 + "'", int6 == 51966);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 51966 + "'", int36 == 51966);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-4990551337079930870L) + "'", long40 == (-4990551337079930870L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + "\001" + "'", obj76, "\001");
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + "hi!" + "'", obj77, "hi!");
    }

    @Test
    public void test17928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17928");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        int int28 = classReader26.header;
        java.lang.String[] strArray29 = classReader26.getInterfaces();
        int int31 = classReader26.readByte(0);
        int int33 = classReader26.readUnsignedShort(1);
        long long35 = classReader26.readLong(7);
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String str38 = classReader37.getSuperName();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 90 + "'", int28 == 90);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 202 + "'", int31 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 65210 + "'", int33 == 65210);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10999411246848L + "'", long35 == 10999411246848L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test17929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17929");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L636727990", false);
        classWriter1.visitOuterClass("", "L1223439170", "L809431533");
        classWriter1.visitSource("L367225907", "L1435737877");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int43 = classWriter41.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(0);
        int int54 = classWriter49.newMethod("", "", "hi!", true);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter49.visitMethod(0, "", "", "hi!", strArray63);
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter41.visitMethod(8, "hi!", "", "", strArray63);
        classWriter1.visit(26, 512, "", "L1490365060", "L4531833", strArray63);
        classWriter1.visitOuterClass("L569030566", "L2133586349", "L716527799");
        classWriter1.visitSource("L1049104679", "L1627511776");
        int int76 = classWriter1.newNameType("L1407998611", "L1595201366");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor64);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 23 + "'", int76 == 23);
    }

    @Test
    public void test17930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17930");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L916243867", true);
        classWriter1.visitEnd();
        int int8 = classWriter1.newNameType("L2102614230", "L782129665");
        int int13 = classWriter1.newMethod("L152278810", "L442162059", "L1482145872", true);
        classWriter1.visitSource("L2008726138", "L1523938238");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test17931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17931");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        int int12 = classReader7.readInt(5);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        int int35 = classWriter15.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter15.visitAnnotation("", true);
        byte[] byteArray39 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        short short42 = classReader40.readShort((int) (byte) 0);
        int int44 = classReader40.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader40, 0);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(classReader40, 0);
        int int50 = classReader40.getItem(2);
        int int51 = classReader40.getAccess();
        java.lang.String[] strArray52 = classReader40.getInterfaces();
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter55.visitMethod(0, "", "", "hi!", strArray69);
        int int75 = classWriter55.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter55.visitAnnotation("", true);
        byte[] byteArray79 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        short short82 = classReader80.readShort((int) (byte) 0);
        int int84 = classReader80.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter(classReader80, 0);
        org.mockito.asm.ClassWriter classWriter88 = new org.mockito.asm.ClassWriter(classReader80, 0);
        int int90 = classReader80.readByte((int) (byte) 10);
        char[] charArray95 = new char[] { '#', '4', '4' };
        java.lang.String str96 = classReader80.readUTF8(100, charArray95);
        java.lang.String str97 = classReader40.readClass(33, charArray95);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj98 = classReader7.readConst((int) (short) 27749, charArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27749");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) -13570 + "'", short42 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2560 + "'", int44 == 2560);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 14 + "'", int50 == 14);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) -13570 + "'", short82 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2560 + "'", int84 == 2560);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray95), "[#, 4, 4]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test17932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17932");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int21 = classWriter19.newConst((java.lang.Object) (short) 1);
        classWriter19.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        classWriter30.visitOuterClass("hi!", "", "");
        int int42 = classWriter30.newNameType("hi!", "hi!");
        int int45 = classWriter30.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(0);
        int int57 = classWriter52.newMethod("", "", "hi!", true);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter52.visitMethod(0, "", "", "hi!", strArray66);
        classWriter30.visit(5, 6, "", "", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter19.visitMethod((int) (short) 0, "", "", "", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter1.visitMethod((int) '#', "L242883751", "L728847777", "L728847777", strArray66);
        int int72 = classWriter1.newClass("L1601838046");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter1.visitAnnotation("L30632432", true);
        classWriter1.visitOuterClass("L755949095", "L136145448", "");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test17933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17933");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(25857);
    }

    @Test
    public void test17934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17934");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitOuterClass("", "L897597087", "L680573325");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L1667871964", "L298732935", "L989364881", 28);
        classWriter1.visitSource("L1838734131", "L345550585");
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
    }

    @Test
    public void test17935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17935");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader26, 78);
        byte[] byteArray36 = classWriter35.toByteArray();
        int int41 = classWriter35.newMethod("L823768339", "L136145448", "L946131795", true);
        byte[] byteArray42 = classWriter35.toByteArray();
        org.mockito.asm.Attribute attribute43 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter35.visitAttribute(attribute43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 15 + "'", int41 == 15);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 10, 76, 56, 50, 51, 55, 54, 56, 51, 51, 57, 7, 0, 10, 1, 0, 10, 76, 49, 51, 54, 49, 52, 53, 52, 52, 56, 1, 0, 10, 76, 57, 52, 54, 49, 51, 49, 55, 57, 53, 12, 0, 12, 0, 13, 11, 0, 11, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test17936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17936");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        int int11 = classWriter1.newMethod("", "L2062266913", "L809431533", false);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod((int) (byte) 10, "L488861128", "hi!", "hi!", strArray16);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter(0);
        int int22 = classWriter20.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter28.visitMethod(0, "", "", "hi!", strArray42);
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter20.visitMethod(8, "hi!", "", "", strArray42);
        methodVisitor44.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = methodVisitor44.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(0);
        int int56 = classWriter51.newMethod("", "", "hi!", true);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter51.visitMethod(0, "", "", "hi!", strArray65);
        methodVisitor66.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor66.visitLabel(label70);
        methodVisitor44.visitJumpInsn((-1), label70);
        methodVisitor17.visitJumpInsn((int) '#', label70);
        java.lang.Object obj74 = label70.info;
        java.lang.String str75 = label70.toString();
        java.lang.Object obj76 = label70.info;
        java.lang.Object obj77 = label70.info;
        java.lang.Object obj78 = label70.info;
        java.lang.String str79 = label70.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNull(obj74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L1908170494" + "'", str75, "L1908170494");
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(obj78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L1908170494" + "'", str79, "L1908170494");
    }

    @Test
    public void test17937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17937");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitIntInsn((int) (short) 1, 6);
        methodVisitor25.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor25.visitAnnotation("hi!", false);
        methodVisitor25.visitIntInsn((int) (byte) 100, 0);
        methodVisitor25.visitMultiANewArrayInsn("L110679537", 1);
        methodVisitor25.visitFieldInsn((int) (byte) -1, "L59063553", "L488861128", "L1847716459");
        methodVisitor25.visitMultiANewArrayInsn("L426422007", (int) (short) 100);
        methodVisitor25.visitVarInsn((-1107296256), 65210);
        methodVisitor25.visitIntInsn((int) (byte) 0, 12);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = methodVisitor25.visitAnnotation("L912963918", false);
        methodVisitor25.visitMultiANewArrayInsn("L495554022", (int) (short) -326);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor56);
    }

    @Test
    public void test17938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17938");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        byte[] byteArray29 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader26, 28532);
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test17939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17939");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = methodVisitor16.visitAnnotationDefault();
        methodVisitor16.visitMaxs(1751720204, 875903244);
        methodVisitor16.visitMethodInsn(5, "L152278810", "L1808974214", "L946793861");
        methodVisitor16.visitMultiANewArrayInsn("L953714147", (int) (short) -17730);
        methodVisitor16.visitFieldInsn(172, "L1309075137", "L488220150", "L275489687");
        methodVisitor16.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test17940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17940");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        short short37 = classReader26.readShort(13);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, 2);
        classWriter39.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short37 + "' != '" + (short) 1792 + "'", short37 == (short) 1792);
    }

    @Test
    public void test17941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17941");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int16 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(0);
        int int28 = classWriter23.newMethod("", "", "hi!", true);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter23.visitMethod(0, "", "", "hi!", strArray37);
        classWriter1.visit(5, 6, "", "", "", strArray37);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter1.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        java.lang.String[] strArray52 = classReader51.getInterfaces();
        java.lang.String[] strArray53 = classReader51.getInterfaces();
        short short55 = classReader51.readShort((int) (byte) 0);
        java.lang.String str56 = classReader51.getSuperName();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(classReader51, 136);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) -13570 + "'", short55 == (short) -13570);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test17942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17942");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitCode();
        methodVisitor25.visitCode();
        methodVisitor25.visitInsn((int) '4');
        methodVisitor25.visitIincInsn(63, 104);
        methodVisitor25.visitCode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test17943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17943");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        int int11 = classReader7.readInt(7);
        java.lang.String str12 = classReader7.getSuperName();
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(classReader7, 65536);
        short short16 = classReader7.readShort(12);
        int int17 = classReader7.getAccess();
        int int19 = classReader7.readByte(0);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(classReader7, 105);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter(0);
        int int33 = classWriter28.newMethod("", "", "hi!", true);
        classWriter28.visitOuterClass("hi!", "", "");
        int int40 = classWriter28.newNameType("hi!", "hi!");
        int int43 = classWriter28.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int55 = classWriter50.newMethod("", "", "hi!", true);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter50.visitMethod(0, "", "", "hi!", strArray64);
        classWriter28.visit(5, 6, "", "", "", strArray64);
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter28.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter28.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray77 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(0);
        int int82 = classWriter80.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter80.visitAnnotation("L1221801792", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = classWriter80.visitAnnotation("L1009580268", false);
        classWriter80.visitSource("L101926124", "L1169695719");
        org.mockito.asm.Attribute[] attributeArray92 = new org.mockito.asm.Attribute[] {};
        classReader78.accept((org.mockito.asm.ClassVisitor) classWriter80, attributeArray92, (-1107296256));
        java.lang.String str95 = classReader78.getClassName();
        java.lang.String[] strArray96 = classReader78.getInterfaces();
        classWriter21.visit(199424, (int) (short) 27749, "L866013370", "L1837917402", "L112220099", strArray96);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1793 + "'", int11 == 1793);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 2892 + "'", short16 == (short) 2892);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 202 + "'", int19 == 202);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(attributeArray92);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test17944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17944");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        classWriter1.visitOuterClass("", "L897597087", "L680573325");
        int int33 = classWriter1.newNameType("L1936126716", "L1413182688");
        classWriter1.visitInnerClass("L560005029", "L1510326766", "L538737171", 40);
        int int41 = classWriter1.newNameType("L1692352756", "L620334303");
        classWriter1.visitInnerClass("L588261949", "L939302844", "L1667109172", 115);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int50 = classWriter48.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        org.mockito.asm.MethodVisitor methodVisitor72 = classWriter48.visitMethod(8, "hi!", "", "", strArray70);
        methodVisitor72.visitIntInsn((int) (short) 1, 6);
        methodVisitor72.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor72.visitAnnotation("hi!", false);
        methodVisitor72.visitFieldInsn(100, "L636727990", "L1028579140", "L238476442");
        methodVisitor72.visitIincInsn(90, 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor72.visitAnnotation("L1076056118", true);
        methodVisitor72.visitVarInsn(909717811, 14);
        methodVisitor72.visitIntInsn((int) '4', (int) (short) 25445);
        int int97 = classWriter1.newConst((java.lang.Object) '4');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(methodVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 26 + "'", int97 == 26);
    }

    @Test
    public void test17945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17945");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        methodVisitor25.visitMethodInsn(10, "L749737959", "L488861128", "L59063553");
        methodVisitor25.visitEnd();
        methodVisitor25.visitMaxs(12848, 13876);
        methodVisitor25.visitIntInsn(1025, 51);
        methodVisitor25.visitEnd();
        methodVisitor25.visitInsn(69);
        methodVisitor25.visitMethodInsn((-1), "L142723088", "L366664831", "L975788322");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test17946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17946");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        int int35 = classReader26.readInt((int) '4');
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader26, 27);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = classReader26.readLong((int) (short) 22121);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 156461415 + "'", int35 == 156461415);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17947");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L1223439170", "L2014806404", "L1847716459", 2561);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter22.newConst((java.lang.Object) (short) 1);
        classWriter22.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter22.visitAnnotation("L529122729", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(5);
        classWriter33.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray38 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        int int41 = classReader39.readUnsignedShort((int) '#');
        byte[] byteArray42 = classReader39.b;
        int int44 = classReader39.readByte(1);
        annotationVisitor30.visit("L684697689", (java.lang.Object) int44);
        int int46 = classWriter1.newConst((java.lang.Object) int44);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter52.visitAnnotation("L75359331", false);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(0);
        int int64 = classWriter62.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(0);
        int int75 = classWriter70.newMethod("", "", "hi!", true);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor85 = classWriter70.visitMethod(0, "", "", "hi!", strArray84);
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter62.visitMethod(3, "hi!", "hi!", "hi!", strArray84);
        classWriter52.visit(23, 18, "L1223439170", "L1178822359", "L665737352", strArray84);
        org.mockito.asm.MethodVisitor methodVisitor88 = classWriter1.visitMethod((int) (short) 8460, "L1498837454", "L1028510473", "L523453504", strArray84);
        methodVisitor88.visitMultiANewArrayInsn("L1705966817", 17784);
        methodVisitor88.visitIincInsn(0, (int) (short) 8460);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12592 + "'", int41 == 12592);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 254 + "'", int44 == 254);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 14 + "'", int46 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(methodVisitor85);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertNotNull(methodVisitor88);
    }

    @Test
    public void test17948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17948");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(0);
        int int26 = classWriter24.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter24.visitMethod(8, "hi!", "", "", strArray46);
        classWriter24.visitOuterClass("hi!", "", "");
        int int54 = classWriter24.newClass("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(2560, "L1132227206", "", "L1287376048", (java.lang.Object) int54);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor55.visitAnnotation("L275489687", true);
        fieldVisitor55.visitEnd();
        fieldVisitor55.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = fieldVisitor55.visitAnnotation("L812374787", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = fieldVisitor55.visitAnnotation("L1523938238", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(annotationVisitor66);
    }

    @Test
    public void test17949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17949");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1793);
        classWriter1.visitInnerClass("", "L1017623370", "L897597087", (-21316096));
        java.lang.Object obj11 = null;
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField((int) 'a', "L426422007", "L1642186947", "L419471195", obj11);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("L1148670932", false);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test17950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17950");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        java.lang.String str38 = classReader26.getSuperName();
        int int39 = classReader26.header;
        int int41 = classReader26.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 3072);
        long long45 = classReader26.readLong((int) (short) 3);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, 8);
        org.mockito.asm.FieldVisitor fieldVisitor53 = classWriter47.visitField((int) (short) -16896, "L1900350996", "L1744471998", "", (java.lang.Object) "L1836065884");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = fieldVisitor53.visitAnnotation("L885118192", false);
        fieldVisitor53.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-4755801206503241215L) + "'", long45 == (-4755801206503241215L));
        org.junit.Assert.assertNotNull(fieldVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor56);
    }

    @Test
    public void test17951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17951");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        java.lang.String str33 = classReader26.getSuperName();
        int int35 = classReader26.readByte(19);
        java.lang.String str36 = classReader26.getSuperName();
        byte[] byteArray37 = classReader26.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 104 + "'", int35 == 104);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17952");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(27);
        int int5 = classWriter1.newField("L537907644", "L202294627", "L360220031");
        org.mockito.asm.Attribute attribute6 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
    }

    @Test
    public void test17953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17953");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(1, "", "", "");
        methodVisitor16.visitVarInsn(12, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(0);
        int int36 = classWriter31.newMethod("", "", "hi!", true);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor46 = classWriter31.visitMethod(0, "", "", "hi!", strArray45);
        methodVisitor46.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor46.visitCode();
        methodVisitor46.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(0);
        int int63 = classWriter58.newMethod("", "", "hi!", true);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor73 = classWriter58.visitMethod(0, "", "", "hi!", strArray72);
        methodVisitor73.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor73.visitLabel(label77);
        java.lang.String str79 = label77.toString();
        methodVisitor46.visitLineNumber((int) (short) -1, label77);
        methodVisitor16.visitLabel(label77);
        methodVisitor16.visitInsn((int) (short) -1);
        methodVisitor16.visitFieldInsn(1751720204, "L2117999297", "L1017623370", "L1287376048");
        methodVisitor16.visitFieldInsn(23, "L1605224709", "L1488028553", "L946131795");
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor16.visitAnnotation("L1572438104", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = annotationVisitor96.visitArray("L1510326766");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(methodVisitor46);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(methodVisitor73);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "L198669684" + "'", str79, "L198669684");
        org.junit.Assert.assertNotNull(annotationVisitor96);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test17954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17954");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, (int) '#');
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader26, 2560);
        java.lang.String str38 = classReader26.getSuperName();
        int int39 = classReader26.header;
        int int41 = classReader26.getItem(0);
        byte[] byteArray42 = classReader26.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17955");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        methodVisitor16.visitIincInsn(0, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor16.visitAnnotation("L59063553", true);
        methodVisitor16.visitInsn(0);
        methodVisitor16.visitEnd();
        methodVisitor16.visitVarInsn(104, 40);
        methodVisitor16.visitVarInsn(264704, (int) ' ');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test17956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17956");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        long long32 = classReader26.readLong(2);
        java.lang.String str33 = classReader26.getSuperName();
        int int35 = classReader26.readByte(19);
        byte[] byteArray36 = classReader26.b;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-4990551337079930870L) + "'", long32 == (-4990551337079930870L));
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 104 + "'", int35 == 104);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17957");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("hi!", "");
        int int22 = classWriter1.newField("L4531833", "L4531833", "L1009580268");
        int int24 = classWriter1.newUTF8("L40714478");
        byte[] byteArray25 = classWriter1.toByteArray();
        classWriter1.visitSource("L1047734516", "L890847236");
        classWriter1.visitEnd();
        int int31 = classWriter1.newClass("L1591899557");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 8, 76, 52, 53, 51, 49, 56, 51, 51, 7, 0, 9, 1, 0, 11, 76, 49, 48, 48, 57, 53, 56, 48, 50, 54, 56, 12, 0, 9, 0, 11, 9, 0, 10, 0, 12, 1, 0, 9, 76, 52, 48, 55, 49, 52, 52, 55, 56, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 2, 0, 3, 0, 16, 0, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 6, 0, 7]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20 + "'", int31 == 20);
    }

    @Test
    public void test17958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17958");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        byte[] byteArray2 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L2027998385", "L805282072", "L1028579140");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L339402249", true);
        java.lang.String[] strArray14 = null;
        org.mockito.asm.MethodVisitor methodVisitor15 = classWriter1.visitMethod(0, "L474002941", "L650167216", "L1007201117", strArray14);
        classWriter1.visitSource("L2108016684", "");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(methodVisitor15);
    }

    @Test
    public void test17959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17959");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "L2000102916");
        classWriter1.visitInnerClass("L680573325", "L680573325", "L1847716459", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter13.newConst((java.lang.Object) (short) 1);
        classWriter13.visitSource("", "L2000102916");
        int int23 = classWriter13.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(0);
        int int35 = classWriter30.newMethod("", "", "hi!", true);
        classWriter30.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter30.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter44.newConst((java.lang.Object) (byte) 0);
        int int47 = classWriter30.newConst((java.lang.Object) int46);
        int int51 = classWriter30.newField("hi!", "", "L809431533");
        java.lang.String[] strArray61 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter30.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray61);
        classWriter13.visit(5, (int) ' ', "L2000102916", "L636727990", "L2062266913", strArray61);
        int int64 = classWriter1.newConst((java.lang.Object) 5);
        int int68 = classWriter1.newField("L1028579140", "", "L2062266913");
        classWriter1.visitSource("L1490365060", "L1192381465");
        classWriter1.visitSource("L1534516525", "L1505866272");
        classWriter1.visitSource("L450189616", "L1028510473");
        byte[] byteArray78 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray78);
        java.lang.String[] strArray80 = classReader79.getInterfaces();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 3, 0, 0, 0, 5, 1, 0, 11, 76, 49, 48, 50, 56, 53, 55, 57, 49, 52, 48, 7, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 12, 0, 2, 0, 9, 9, 0, 8, 0, 10, 1, 0, 11, 76, 49, 52, 57, 48, 51, 54, 53, 48, 54, 48, 1, 0, 11, 76, 49, 53, 51, 52, 53, 49, 54, 53, 50, 53, 1, 0, 10, 76, 52, 53, 48, 49, 56, 57, 54, 49, 54, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 15, 0, 0, 0, 2, 0, 14, 0, 16, 0, 0, 0, 11, 76, 49, 48, 50, 56, 53, 49, 48, 52, 55, 51, 0, 17, 0, 0, 0, 10, 0, 1, 0, 4, 0, 4, 0, 5, 0, 10]");
        org.junit.Assert.assertNotNull(strArray80);
    }

    @Test
    public void test17960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17960");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int33 = classReader26.getAccess();
        int int35 = classReader26.readByte(0);
        byte[] byteArray36 = classReader26.b;
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader37.getItem(61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 61");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 202 + "'", int35 == 202);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17961");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        java.lang.String[] strArray28 = classReader26.getInterfaces();
        byte[] byteArray29 = classReader26.b;
        int int30 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) -326);
        int int37 = classWriter32.newMethod("L1553193067", "L901287164", "L1169247122", true);
        int int41 = classWriter32.newField("L1734325664", "L1793985281", "");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(0);
        int int52 = classWriter47.newMethod("", "", "hi!", true);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter47.visitMethod(0, "", "", "hi!", strArray61);
        int int67 = classWriter47.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter47.visitAnnotation("", true);
        byte[] byteArray71 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        long long74 = classReader72.readLong(4);
        byte[] byteArray75 = classReader72.b;
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader72, 1768777046);
        java.lang.String[] strArray78 = classReader72.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor79 = classWriter32.visitMethod(25, "L10083236", "L57756683", "L1148670932", strArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 9");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 90 + "'", int30 == 90);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 655616L + "'", long74 == 655616L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test17962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17962");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label6 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        label6.info = strArray22;
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod((int) (short) 100, "", "hi!", "", strArray22);
        classWriter1.visitInnerClass("L1847716459", "", "L680573325", 9);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(12592, "hi!", "L897597087", "L1928858580", (java.lang.Object) 1.0d);
        classWriter1.visitInnerClass("L1601838046", "L1208026886", "L1930348385", 2561);
        classWriter1.visitSource("L774045562", "L1473010420");
        int int46 = classWriter1.newClass("L2034910382");
        classWriter1.visitOuterClass("L1101713360", "L897597087", "L1083553839");
        int int54 = classWriter1.newField("L888522535", "L1046040632", "L566306334");
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        int int76 = classWriter56.newMethod("", "", "hi!", false);
        classWriter56.visitInnerClass("", "", "", (int) ' ');
        classWriter56.visitInnerClass("hi!", "hi!", "L2000102916", 6);
        byte[] byteArray87 = classWriter56.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = classWriter56.visitAnnotation("L488861128", false);
        classWriter56.visitOuterClass("L976656549", "", "L1009580268");
        int int95 = classWriter1.newConst((java.lang.Object) "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 18 + "'", int46 == 18);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 28 + "'", int54 == 28);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 9, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 10, 0, 0, 0, 2, 0, 3, 0, 1, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 2, 0, 1, 0, 32, 0, 7, 0, 7, 0, 8, 0, 6]");
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 29 + "'", int95 == 29);
    }

    @Test
    public void test17963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17963");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = methodVisitor25.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        methodVisitor47.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        methodVisitor47.visitLabel(label51);
        methodVisitor25.visitJumpInsn((-1), label51);
        methodVisitor25.visitTypeInsn(1, "hi!");
        methodVisitor25.visitCode();
        methodVisitor25.visitEnd();
        methodVisitor25.visitMaxs((-1), 51966);
        methodVisitor25.visitInsn(1278357558);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test17964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17964");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte(13);
        int int30 = classReader26.readInt(7);
        int int32 = classReader26.readUnsignedShort((int) ' ');
        java.lang.String str33 = classReader26.getSuperName();
        int int34 = classReader26.getAccess();
        int int36 = classReader26.readByte(104);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = classReader26.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2561 + "'", int30 == 2561);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2560 + "'", int32 == 2560);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test17965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17965");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        int int36 = classReader26.readByte((int) (byte) 10);
        int int38 = classReader26.readInt((int) ' ');
        int int39 = classReader26.header;
        short short41 = classReader26.readShort(36);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 167772672 + "'", int38 == 167772672);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 1025 + "'", short41 == (short) 1025);
    }

    @Test
    public void test17966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17966");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        int int6 = classWriter1.newMethod("L275489687", "L275489687", "L275489687", false);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.Label label13 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int20 = classWriter15.newMethod("", "", "hi!", true);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor30 = classWriter15.visitMethod(0, "", "", "hi!", strArray29);
        label13.info = strArray29;
        org.mockito.asm.MethodVisitor methodVisitor32 = classWriter8.visitMethod((int) (short) 100, "", "hi!", "", strArray29);
        org.mockito.asm.FieldVisitor fieldVisitor38 = classWriter8.visitField(0, "L1028579140", "L1847716459", "L2062266913", (java.lang.Object) 10L);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = fieldVisitor38.visitAnnotation("L2000102916", false);
        int int42 = classWriter1.newConst((java.lang.Object) false);
        classWriter1.visitInnerClass("L680573325", "hi!", "", 100);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(0);
        int int58 = classWriter53.newMethod("", "", "hi!", true);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter53.visitMethod(0, "", "", "hi!", strArray67);
        int int73 = classWriter53.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter53.visitAnnotation("", true);
        byte[] byteArray77 = classWriter53.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        long long80 = classReader78.readLong(4);
        java.lang.String[] strArray81 = classReader78.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(104, "L59063553", "", "L684697689", strArray81);
        classWriter1.visitOuterClass("L1099905954", "L2123529539", "L150818074");
        classWriter1.visitSource("L665874911", "L55663967");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor30);
        org.junit.Assert.assertNotNull(methodVisitor32);
        org.junit.Assert.assertNotNull(fieldVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 655616L + "'", long80 == 655616L);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(methodVisitor82);
    }

    @Test
    public void test17967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17967");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int8 = classWriter1.newClass("");
        int int11 = classWriter1.newNameType("L1847716459", "");
        classWriter1.visitEnd();
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter19.visitMethod(0, "", "", "hi!", strArray33);
        int int39 = classWriter19.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter19.visitAnnotation("", true);
        byte[] byteArray43 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        short short46 = classReader44.readShort((int) (byte) 0);
        int int48 = classReader44.readUnsignedShort((int) ' ');
        long long50 = classReader44.readLong((int) '#');
        int int52 = classReader44.getItem(0);
        java.lang.String str53 = classReader44.getSuperName();
        short short55 = classReader44.readShort(13);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(classReader44, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(classReader44, 51966);
        classWriter59.visitSource("L1315079658", "L1202930291");
        classWriter59.visitInnerClass("L124447396", "L707293021", "L495165811", 52);
        org.mockito.asm.FieldVisitor fieldVisitor68 = classWriter1.visitField(50331648, "L1040610774", "L1562158187", "L862087622", (java.lang.Object) 52);
        fieldVisitor68.visitEnd();
        fieldVisitor68.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = fieldVisitor68.visitAnnotation("L862960404", true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 5, 0, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short46 + "' != '" + (short) -13570 + "'", short46 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2560 + "'", int48 == 2560);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1126999590795363L + "'", long50 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + short55 + "' != '" + (short) 1792 + "'", short55 == (short) 1792);
        org.junit.Assert.assertNotNull(fieldVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test17968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17968");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        annotationVisitor24.visitEnum("L897597087", "L636727990", "L2062266913");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = annotationVisitor24.visitAnnotation("L976656549", "L426422007");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = annotationVisitor24.visitArray("L1358038794");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = annotationVisitor24.visitArray("L428215077");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(0);
        int int40 = classWriter38.newConst((java.lang.Object) (short) 1);
        classWriter38.visitSource("", "L2000102916");
        int int48 = classWriter38.newMethod("", "L2062266913", "L809431533", false);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(0);
        int int60 = classWriter55.newMethod("", "", "hi!", true);
        classWriter55.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter55.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(0);
        int int71 = classWriter69.newConst((java.lang.Object) (byte) 0);
        int int72 = classWriter55.newConst((java.lang.Object) int71);
        int int76 = classWriter55.newField("hi!", "", "L809431533");
        java.lang.String[] strArray86 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter55.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray86);
        classWriter38.visit(5, (int) ' ', "L2000102916", "L636727990", "L2062266913", strArray86);
        int int90 = classWriter38.newUTF8("L1978876772");
        classWriter38.visitOuterClass("L931744851", "L288098828", "L1757895657");
        classWriter38.visitSource("L952153169", "L110679537");
        annotationVisitor35.visit("L696021414", (java.lang.Object) "L952153169");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 12 + "'", int76 == 12);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 17 + "'", int90 == 17);
    }

    @Test
    public void test17969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17969");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (byte) 0);
        int int18 = classWriter1.newConst((java.lang.Object) int17);
        int int22 = classWriter1.newField("hi!", "", "L809431533");
        java.lang.String[] strArray32 = new java.lang.String[] { "L2062266913", "", "L636727990", "L680573325", "L1601838046" };
        org.mockito.asm.MethodVisitor methodVisitor33 = classWriter1.visitMethod(12, "L1601838046", "L2062266913", "L275489687", strArray32);
        byte[] byteArray34 = classWriter1.toByteArray();
        int int39 = classWriter1.newMethod("L1778006779", "L2078456391", "L1821467279", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter1.visitAnnotation("L1777319114", true);
        int int45 = classWriter1.newNameType("L1298603494", "L1375176448");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 30 + "'", int39 == 30);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 34 + "'", int45 == 34);
    }

    @Test
    public void test17970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17970");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        long long38 = classReader26.readLong(33);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        int int61 = classWriter41.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter41.visitAnnotation("", true);
        byte[] byteArray65 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        int int68 = classReader66.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader66, (int) '4');
        int int72 = classReader66.readUnsignedShort(5);
        int int74 = classReader66.getItem(1);
        byte[] byteArray75 = classReader66.b;
        int int77 = classReader66.readUnsignedShort(16);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter(classReader66, (int) '4');
        char[] charArray81 = new char[] {};
        java.lang.String str82 = classReader66.readUTF8(100, charArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = classReader26.readUTF8(13, charArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 562967150070341L + "'", long38 == 562967150070341L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 51966 + "'", int68 == 51966);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 11 + "'", int74 == 11);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 256 + "'", int77 == 256);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test17971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17971");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        long long32 = classReader26.readLong((int) '#');
        int int34 = classReader26.getItem(0);
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong((int) (short) 3);
        int int39 = classReader26.readInt(63);
        byte[] byteArray40 = classReader26.b;
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray40, 0, 184549888);
        int int44 = classReader43.header;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = classReader43.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1126999590795363L + "'", long32 == 1126999590795363L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-4755801206503241215L) + "'", long37 == (-4755801206503241215L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1659509 + "'", int39 == 1659509);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 90 + "'", int44 == 90);
    }

    @Test
    public void test17972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17972");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        long long37 = classReader26.readLong(14);
        byte[] byteArray38 = classReader26.b;
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 282574545512737L + "'", long37 == 282574545512737L);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test17973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17973");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int13 = classWriter8.newMethod("", "", "hi!", true);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor23 = classWriter8.visitMethod(0, "", "", "hi!", strArray22);
        int int28 = classWriter8.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter8.visitAnnotation("", true);
        byte[] byteArray32 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        short short35 = classReader33.readShort((int) (byte) 0);
        int int37 = classReader33.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader33, 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader33, 0);
        int int43 = classReader33.getItem(2);
        java.lang.String[] strArray44 = classReader33.getInterfaces();
        classWriter1.visit(2561, 65210, "L1004763019", "L1283200231", "L2127085380", strArray44);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        int int49 = classWriter1.newUTF8("L11080407");
        int int54 = classWriter1.newMethod("L1598885795", "L1490555747", "L620334303", false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(methodVisitor23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -13570 + "'", short35 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2560 + "'", int37 == 2560);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
    }

    @Test
    public void test17974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17974");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = methodVisitor49.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter(0);
        int int61 = classWriter56.newMethod("", "", "hi!", true);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter56.visitMethod(0, "", "", "hi!", strArray70);
        methodVisitor71.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        methodVisitor71.visitLabel(label75);
        methodVisitor49.visitJumpInsn((-1), label75);
        methodVisitor16.visitLineNumber((int) (byte) 10, label75);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor16.visitAnnotation("L1368708044", true);
        methodVisitor16.visitInsn((int) (short) 12342);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor16.visitParameterAnnotation(25445, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test17975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17975");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        byte[] byteArray34 = classReader26.b;
        java.lang.String str35 = classReader26.getSuperName();
        byte[] byteArray36 = classReader26.b;
        int int37 = classReader26.getAccess();
        java.lang.String str38 = classReader26.getSuperName();
        java.lang.String[] strArray39 = classReader26.getInterfaces();
        java.lang.String[] strArray40 = classReader26.getInterfaces();
        int int42 = classReader26.getItem((int) (short) 4);
        short short44 = classReader26.readShort(0);
        int int45 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            short short47 = classReader26.readShort((int) (short) 28532);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 23 + "'", int42 == 23);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -13570 + "'", short44 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 90 + "'", int45 == 90);
    }

    @Test
    public void test17976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17976");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitTypeInsn((int) (byte) 100, "");
        methodVisitor16.visitMaxs(9, (int) (byte) -1);
        methodVisitor16.visitTypeInsn((int) (short) 1025, "L1808974214");
        methodVisitor16.visitIincInsn((int) (short) 100, (int) (short) 17784);
        methodVisitor16.visitEnd();
        methodVisitor16.visitIincInsn(117440769, 190);
        methodVisitor16.visitIincInsn(909717811, (int) (short) 25970);
        methodVisitor16.visitFieldInsn(161, "L829120697", "L141363326", "L2051706745");
        methodVisitor16.visitIincInsn((int) (byte) -1, (int) (short) 25968);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17977");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort((int) (byte) 0);
        int int30 = classReader26.readUnsignedShort((int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader26, 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader26, (int) (byte) 100);
        classWriter36.visitInnerClass("L59063553", "L426422007", "L1292845306", 3);
        classWriter36.visitEnd();
        int int47 = classWriter36.newMethod("L40714478", "L288314649", "L84564479", false);
        int int49 = classWriter36.newClass("L1497855016");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter36.visitAnnotation("L2106127350", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -13570 + "'", short28 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2560 + "'", int30 == 2560);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test17978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17978");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMaxs(6, (int) (byte) 10);
        methodVisitor16.visitIincInsn((int) (short) 1, (int) (short) -1);
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMethodInsn((int) (short) 1, "L264795169", "", "L529122729");
        methodVisitor16.visitEnd();
        methodVisitor16.visitMaxs(57174305, 83);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17979");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitFieldInsn(9, "L1847716459", "L1847716459", "L809431533");
        methodVisitor16.visitInsn((int) (byte) 0);
        methodVisitor16.visitMaxs(0, (int) (byte) 0);
        methodVisitor16.visitMultiANewArrayInsn("L1611208075", 16);
        methodVisitor16.visitIincInsn(33, 7);
        methodVisitor16.visitTypeInsn(27, "L1413182688");
        methodVisitor16.visitInsn(51966);
        methodVisitor16.visitInsn(35);
        methodVisitor16.visitTypeInsn(26913, "L1991016046");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
    }

    @Test
    public void test17980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17980");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int27 = classReader26.getAccess();
        byte[] byteArray28 = classReader26.b;
        int int30 = classReader26.readByte((int) '#');
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt(15);
        long long35 = classReader26.readLong(61);
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        java.lang.String[] strArray37 = classReader26.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader26.readByte((int) (short) 3072);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3072");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16842755 + "'", int33 == 16842755);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 7278098581565042292L + "'", long35 == 7278098581565042292L);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test17981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17981");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitInnerClass("", "", "", (int) ' ');
        int int30 = classWriter1.newField("", "L2000102916", "hi!");
        int int35 = classWriter1.newMethod("L1086414642", "", "L419471195", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", false);
        byte[] byteArray39 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("L2039587225", "", "L687099442", 32);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(0);
        int int55 = classWriter50.newMethod("", "", "hi!", true);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter50.visitMethod(0, "", "", "hi!", strArray64);
        int int70 = classWriter50.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter50.visitAnnotation("", true);
        byte[] byteArray74 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader75 = new org.mockito.asm.ClassReader(byteArray74);
        int int77 = classReader75.readUnsignedShort((int) (byte) 0);
        java.lang.String str78 = classReader75.getSuperName();
        byte[] byteArray79 = classReader75.b;
        int int81 = classReader75.readByte(29);
        int int82 = classReader75.header;
        java.lang.String[] strArray83 = classReader75.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter1.visitMethod(740402, "", "L624989888", "L710635264", strArray83);
        int int86 = classWriter1.newClass("L1070113211");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 14 + "'", int35 == 14);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 19, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 12, 0, 7, 0, 3, 9, 0, 2, 0, 8, 1, 0, 11, 76, 49, 48, 56, 54, 52, 49, 52, 54, 52, 50, 7, 0, 10, 1, 0, 10, 76, 52, 49, 57, 52, 55, 49, 49, 57, 53, 12, 0, 1, 0, 12, 11, 0, 11, 0, 13, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 15, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 16, 0, 0, 0, 2, 0, 3, 0, 2, 0, 17, 0, 0, 0, 10, 0, 1, 0, 2, 0, 2, 0, 1, 0, 32, 0, 18, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 51966 + "'", int77 == 51966);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 90 + "'", int82 == 90);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 24 + "'", int86 == 24);
    }

    @Test
    public void test17982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17982");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "L2000102916", "L2000102916", "L1847716459", (java.lang.Object) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = fieldVisitor12.visitAnnotation("L1009580268", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = fieldVisitor12.visitAnnotation("L1540520089", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = fieldVisitor12.visitAnnotation("L1402371927", true);
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = fieldVisitor12.visitAnnotation("L1465372626", true);
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test17983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17983");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int66 = classWriter1.newField("hi!", "L728847777", "L897597087");
        classWriter1.visitInnerClass("L1028579140", "L110679537", "L680573325", (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L1930348385", true);
        annotationVisitor74.visitEnum("L426422007", "L1287376048", "L110679537");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = annotationVisitor74.visitAnnotation("L1936126716", "L1004763019");
        annotationVisitor81.visitEnum("L689023041", "L1529613096", "L941460306");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test17984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17984");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readInt((int) (byte) 1);
        int int11 = classReader7.readByte((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader7, (-889275714));
        java.lang.String[] strArray14 = classReader7.getInterfaces();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-21316096) + "'", int9 == (-21316096));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test17985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17985");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        char[] charArray42 = new char[] { '4', '4', '4', '4', '#', 'a' };
        java.lang.String str43 = classReader26.readUTF8((int) '#', charArray42);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 1);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader26, 909717811);
        classWriter47.visitInnerClass("", "L817273435", "L136145448", 105);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter47.visitAnnotation("L238476442", true);
        classWriter47.visitEnd();
        int int58 = classWriter47.newClass("L570733821");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "\000444#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[\000, 4, 4, 4, #, a]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000" + "'", str43, "\000");
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 15 + "'", int58 == 15);
    }

    @Test
    public void test17986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17986");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        methodVisitor25.visitMultiANewArrayInsn("L1221801792", 4);
        methodVisitor25.visitEnd();
        methodVisitor25.visitCode();
        methodVisitor25.visitFieldInsn((int) (short) 8460, "", "L1973775324", "L1970148580");
        methodVisitor25.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
    }

    @Test
    public void test17987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17987");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("\000", true);
        int int9 = classWriter1.newMethod("L1889100462", "L172254079", "L590059745", false);
        classWriter1.visitSource("L1750086343", "L1139351323");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
    }

    @Test
    public void test17988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17988");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        int int10 = classWriter8.newConst((java.lang.Object) (short) 1);
        classWriter8.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(0);
        int int24 = classWriter19.newMethod("", "", "hi!", true);
        classWriter19.visitOuterClass("hi!", "", "");
        int int31 = classWriter19.newNameType("hi!", "hi!");
        int int34 = classWriter19.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(0);
        int int46 = classWriter41.newMethod("", "", "hi!", true);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter41.visitMethod(0, "", "", "hi!", strArray55);
        classWriter19.visit(5, 6, "", "", "", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter8.visitMethod((int) (short) 0, "", "", "", strArray55);
        classWriter1.visit((int) (short) 1, (int) (byte) 1, "hi!", "L2062266913", "L680573325", strArray55);
        int int62 = classWriter1.newNameType("L8293919", "L1809966946");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
    }

    @Test
    public void test17989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17989");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) 'a');
        classWriter1.visitInnerClass("L1847716459", "L579675851", "L976656549", (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("L2062266913", true);
        annotationVisitor9.visit("L799761587", (java.lang.Object) "L538737171");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter15.newConst((java.lang.Object) (short) 1);
        classWriter15.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(0);
        int int31 = classWriter26.newMethod("", "", "hi!", true);
        classWriter26.visitOuterClass("hi!", "", "");
        int int38 = classWriter26.newNameType("hi!", "hi!");
        int int41 = classWriter26.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(0);
        int int53 = classWriter48.newMethod("", "", "hi!", true);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter48.visitMethod(0, "", "", "hi!", strArray62);
        classWriter26.visit(5, 6, "", "", "", strArray62);
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter15.visitMethod((int) (short) 0, "", "", "", strArray62);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = methodVisitor65.visitAnnotation("L30632432", false);
        methodVisitor65.visitMaxs((-889275714), 26);
        methodVisitor65.visitMaxs(51052546, 1536);
        methodVisitor65.visitMultiANewArrayInsn("L10083236", 131076);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor9.visit("L1867935510", (java.lang.Object) methodVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@7eaf8b84");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
    }

    @Test
    public void test17990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17990");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(5);
        classWriter1.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int9 = classReader7.readUnsignedShort((int) '#');
        byte[] byteArray10 = classReader7.b;
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(classReader11, 16);
        classWriter13.visitEnd();
        classWriter13.visitInnerClass("L1546658809", "L1438974949", "L6818069", 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter13.visitAnnotation("L1013343419", true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12592 + "'", int9 == 12592);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test17991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17991");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        classWriter1.visitEnd();
        int int65 = classWriter1.newNameType("L275489687", "L755844592");
        byte[] byteArray66 = classWriter1.toByteArray();
        byte[] byteArray67 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        int int70 = classReader68.readUnsignedShort(32);
        byte[] byteArray71 = classReader68.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray71, 740402, 256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 11 + "'", int65 == 11);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 10, 76, 55, 53, 53, 56, 52, 52, 53, 57, 50, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 2, 0, 13, 0, 0, 0, 2, 0, 3, 0, 14, 0, 0, 0, 4, 0, 5, 0, 6]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 10, 76, 55, 53, 53, 56, 52, 52, 53, 57, 50, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 2, 0, 13, 0, 0, 0, 2, 0, 3, 0, 14, 0, 0, 0, 4, 0, 5, 0, 6]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 768 + "'", int70 == 768);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 15, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 10, 76, 55, 53, 53, 56, 52, 52, 53, 57, 50, 12, 0, 9, 0, 10, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 12, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 13, 0, 0, 0, 2, 0, 3, 0, 2, 0, 13, 0, 0, 0, 2, 0, 3, 0, 14, 0, 0, 0, 4, 0, 5, 0, 6]");
    }

    @Test
    public void test17992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17992");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitEnd();
        int int4 = classWriter1.newClass("L2089731244");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter(0);
        int int15 = classWriter10.newMethod("", "", "hi!", true);
        classWriter10.visitOuterClass("hi!", "", "");
        int int22 = classWriter10.newNameType("hi!", "hi!");
        int int25 = classWriter10.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(0);
        int int37 = classWriter32.newMethod("", "", "hi!", true);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter32.visitMethod(0, "", "", "hi!", strArray46);
        classWriter10.visit(5, 6, "", "", "", strArray46);
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter10.visitField(9, "L2000102916", "hi!", "", (java.lang.Object) false);
        classWriter10.visitOuterClass("L680573325", "L275489687", "L1847716459");
        byte[] byteArray59 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        int int61 = classReader60.header;
        int int62 = classReader60.getAccess();
        java.lang.String[] strArray63 = classReader60.getInterfaces();
        java.lang.String str64 = classReader60.getSuperName();
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter1.visitField(223337, "L2140743025", "L509466946", "L319738799", (java.lang.Object) str64);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor47);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 20, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 12, 0, 3, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 3, 0, 0, 0, 0, 1, 0, 10, 76, 54, 56, 48, 53, 55, 51, 51, 50, 53, 7, 0, 12, 1, 0, 10, 76, 50, 55, 53, 52, 56, 57, 54, 56, 55, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 14, 0, 15, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 6, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0, 9, 0, 10, 0, 3, 0, 2, 0, 17, 0, 0, 0, 2, 0, 11, 0, 18, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 18, 0, 0, 0, 2, 0, 1, 0, 19, 0, 0, 0, 4, 0, 13, 0, 16]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 163 + "'", int61 == 163);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(fieldVisitor65);
    }

    @Test
    public void test17993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17993");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(0);
        int int17 = classWriter12.newMethod("", "", "hi!", true);
        classWriter12.visitOuterClass("hi!", "", "");
        int int24 = classWriter12.newNameType("hi!", "hi!");
        int int27 = classWriter12.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(0);
        int int39 = classWriter34.newMethod("", "", "hi!", true);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter34.visitMethod(0, "", "", "hi!", strArray48);
        classWriter12.visit(5, 6, "", "", "", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 0, "", "", "", strArray48);
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter(classReader53, (int) (byte) -1);
        int int57 = classReader53.readUnsignedShort(82);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(classReader53, 1869898100);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("L1936126716", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 1, 1, 0, 0, 7, 0, 2, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 4, 0, 0, 0, 10, 0, 4, 0, 3, 0, 3, 0, 3, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test17994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17994");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn((int) (byte) 100, "", "hi!", "");
        methodVisitor16.visitCode();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter25.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter33.newMethod("", "", "hi!", true);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter33.visitMethod(0, "", "", "hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter25.visitMethod(8, "hi!", "", "", strArray47);
        methodVisitor49.visitMultiANewArrayInsn("hi!", 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        int int59 = classWriter54.newMethod("", "", "hi!", true);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter54.visitMethod(0, "", "", "hi!", strArray68);
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        methodVisitor69.visitLabel(label73);
        java.lang.String str75 = label73.toString();
        int[] intArray79 = new int[] { 0, (byte) -1, (short) 0 };
        org.mockito.asm.Label[] labelArray80 = new org.mockito.asm.Label[] {};
        methodVisitor49.visitLookupSwitchInsn(label73, intArray79, labelArray80);
        methodVisitor16.visitJumpInsn((int) '#', label73);
        methodVisitor16.visitInsn(5);
        methodVisitor16.visitEnd();
        methodVisitor16.visitCode();
        methodVisitor16.visitMethodInsn(9, "L170800745", "L1337199277", "L1291288126");
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor16.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L428808717" + "'", str75, "L428808717");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, -1, 0]");
        org.junit.Assert.assertNotNull(labelArray80);
    }

    @Test
    public void test17995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17995");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String str27 = classReader26.getSuperName();
        char[] charArray33 = new char[] { '#', ' ', 'a', '4' };
        java.lang.Object obj34 = classReader26.readConst(6, charArray33);
        int int36 = classReader26.readUnsignedShort((int) 'a');
        int int37 = classReader26.getAccess();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 10);
        classWriter39.visitOuterClass("L1358038794", "L1221801792", "L1171524151");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter39.visitAnnotation("L1223439170", false);
        int int51 = classWriter39.newMethod("L152223686", "L88233605", "L1767016503", false);
        classWriter39.visitEnd();
        classWriter39.visitSource("L1439212246", "L1975782857");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\001 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\001,  , a, 4]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "\001" + "'", obj34, "\001");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 21 + "'", int51 == 21);
    }

    @Test
    public void test17996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17996");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("L2062266913", false);
        byte[] byteArray14 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(0);
        int int27 = classWriter22.newMethod("", "", "hi!", true);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter22.visitMethod(0, "", "", "hi!", strArray36);
        int int42 = classWriter22.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter22.visitAnnotation("", true);
        byte[] byteArray46 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        int int49 = classReader47.readByte(13);
        int int51 = classReader47.readInt(7);
        int int53 = classReader47.readUnsignedShort((int) ' ');
        java.lang.String str54 = classReader47.getSuperName();
        java.lang.String str55 = classReader47.getSuperName();
        java.lang.String[] strArray56 = classReader47.getInterfaces();
        classWriter1.visit(4, 100663552, "L203863779", "L828384535", "L1495045421", strArray56);
        classWriter1.visitInnerClass("L935241002", "L2093627016", "L241849666", 184549888);
        classWriter1.visitInnerClass("L620399305", "L692105043", "L364320201", 44);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 1, 0, 1, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 4, 0, 6, 0, 7, 0, 10, 0, 0, 0, 6, 0, 1, 0, 8, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 7 + "'", int49 == 7);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2561 + "'", int51 == 2561);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2560 + "'", int53 == 2560);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test17997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17997");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(8, "hi!", "", "", strArray23);
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        int int38 = classWriter36.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(0);
        int int49 = classWriter44.newMethod("", "", "hi!", true);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter44.visitMethod(0, "", "", "hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter36.visitMethod(8, "hi!", "", "", strArray58);
        classWriter1.visit(8, 8, "L2000102916", "", "hi!", strArray58);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter1.visitAnnotation("L624707113", true);
        byte[] byteArray65 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        int int67 = classReader66.getAccess();
        java.lang.String[] strArray68 = classReader66.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int70 = classReader66.getItem(29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 14, 3, 0, 0, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 3, 7, 0, 2, 12, 0, 3, 0, 3, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 7, 0, 7, 1, 0, 10, 76, 54, 50, 52, 55, 48, 55, 49, 49, 51, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 8, 0, 8, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 1, 0, 8, 0, 2, 0, 3, 0, 2, 0, 10, 0, 0, 0, 10, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 11, 0, 0, 0, 2, 0, 3, 0, 3, 0, 11, 0, 0, 0, 2, 0, 3, 0, 12, 0, 0, 0, 4, 0, 5, 0, 6, 0, 13, 0, 0, 0, 6, 0, 1, 0, 9, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertNotNull(strArray68);
    }

    @Test
    public void test17998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17998");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int3 = classWriter1.newConst((java.lang.Object) (short) 1);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(0);
        int int14 = classWriter9.newMethod("", "", "hi!", true);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter9.visitMethod(0, "", "", "hi!", strArray23);
        org.mockito.asm.MethodVisitor methodVisitor25 = classWriter1.visitMethod(3, "hi!", "hi!", "hi!", strArray23);
        int int28 = classWriter1.newNameType("", "L636727990");
        classWriter1.visitSource("L364320201", "L1583234446");
        org.mockito.asm.Label label36 = new org.mockito.asm.Label();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(5);
        classWriter38.visitOuterClass("L2062266913", "L2000102916", "L1847716459");
        byte[] byteArray43 = classWriter38.toByteArray();
        label36.info = byteArray43;
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray43);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(classReader45, 1793);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(classReader45, 202);
        java.lang.String[] strArray50 = classReader45.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter1.visitMethod((int) (short) 1536, "L464185582", "", "L724247023", strArray50);
        int int56 = classWriter1.newMethod("L546267616", "L790432208", "L109032809", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(methodVisitor25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 11, 76, 50, 48, 54, 50, 50, 54, 54, 57, 49, 51, 7, 0, 1, 1, 0, 11, 76, 50, 48, 48, 48, 49, 48, 50, 57, 49, 54, 1, 0, 11, 76, 49, 56, 52, 55, 55, 49, 54, 52, 53, 57, 12, 0, 3, 0, 4, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 6, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 14 + "'", int56 == 14);
    }

    @Test
    public void test17999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17999");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        methodVisitor16.visitFieldInsn(8, "hi!", "", "");
        methodVisitor16.visitMethodInsn((int) '#', "hi!", "", "hi!");
        methodVisitor16.visitMaxs(6, (int) (byte) 10);
        methodVisitor16.visitIincInsn((int) (byte) 0, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor16.visitAnnotation("L1674107149", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor16.visitAnnotation("L689023041", true);
        methodVisitor16.visitCode();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test18000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test18000");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        int int6 = classWriter1.newMethod("", "", "hi!", true);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "" };
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(0, "", "", "hi!", strArray15);
        int int21 = classWriter1.newMethod("", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader26, (int) '4');
        int int32 = classReader26.readUnsignedShort(5);
        int int34 = classReader26.getItem(1);
        byte[] byteArray35 = classReader26.b;
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        byte[] byteArray37 = classReader36.b;
        // The following exception was thrown during execution in test generation
        try {
            int int39 = classReader36.readUnsignedShort((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 51966 + "'", int28 == 51966);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 11, 0, 2, 0, 4, 10, 0, 2, 0, 4, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 7, 0, 0, 0, 10, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 2, 0, 3, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }
}
